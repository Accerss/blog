<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuoHaoHao</title>
  
  
  <link href="https://gwzone.cn/atom.xml" rel="self"/>
  
  <link href="https://gwzone.cn/"/>
  <updated>2022-09-30T00:45:55.159Z</updated>
  <id>https://gwzone.cn/</id>
  
  <author>
    <name>HaoHao Guo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iot边缘计算</title>
    <link href="https://gwzone.cn/articles/2022/10/01/iot/"/>
    <id>https://gwzone.cn/articles/2022/10/01/iot/</id>
    <published>2022-10-01T11:25:51.000Z</published>
    <updated>2022-09-30T00:45:55.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="稳定可靠的通信技术"><a href="#稳定可靠的通信技术" class="headerlink" title="稳定可靠的通信技术"></a>稳定可靠的通信技术</h2><h3 id="有线通信技术"><a href="#有线通信技术" class="headerlink" title="有线通信技术"></a>有线通信技术</h3><p>优点：稳定性高，可靠性强</p><p>缺点：受限于传输媒介</p><p>以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网</p><p>RS—232：个人计算机DB9 or DB25不平衡传输方式，单边通信传输距离不超过20m1V1</p><p>RS-485：可以实现联网平衡传输，差分传输方式几百到上千1Vn</p><p>M-Bus：户用仪表总线，远程抄表，低成本组网</p><p>PLC：电力线通信，表表-&gt;工业网关 </p><h3 id="无线通信技术"><a href="#无线通信技术" class="headerlink" title="无线通信技术"></a>无线通信技术</h3><p>2G,3G,4G：蜂窝移动通信</p><p>Bluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控</p><p>Wi-Fi：连接到无线局域网，速度快</p><p>ZigBee：低功耗局域网协议物体遮挡衰减厉害  </p><p>Z-Wave：用于住宅。30-100m网络简单，速率较低</p><h3 id="lpwa低功耗广域网"><a href="#lpwa低功耗广域网" class="headerlink" title="lpwa低功耗广域网"></a>lpwa低功耗广域网</h3><p>SigFox：低功耗，ISM射频频段</p><p>NB-lot：窄频网络，可部署在蜂窝网络 </p><p>LoRa：开源MAC层协议</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png"                      alt="image-20220923194944959"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png"                      alt="image-20220923195011645"                ></p><h2 id="OceanConnect"><a href="#OceanConnect" class="headerlink" title="OceanConnect"></a>OceanConnect</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png"                      alt="image-20220923195209078"                ></p><p>统一接口，方便拓展</p><h3 id="MQTT和HTTP"><a href="#MQTT和HTTP" class="headerlink" title="MQTT和HTTP"></a>MQTT和HTTP</h3><p>消息队列遥测传输：Message Queuing Telemetry Transport</p><p>IBM开发的基于TCP&#x2F;IP的即时通讯协议</p><p>采用订阅发布的模式，长连接方式</p><p>优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低</p><p>智慧家庭</p><p>CoAP：Constrained Application Protocol</p><p>专用于资源受限设备的通信，NB-lot&#x2F;LoRa</p><p>从http发展而来，采用请求响应</p><p>最小4字节</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png"                      alt="image-20220923195746901"                ></p><p>物联网平台层次</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png"                      alt="image-20220923195812117"                ></p><p>接入无关，可靠性，安全性，弹性伸缩，能力开放</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png"                      alt="image-20220923200007426"                ></p><p>设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap&#x2F;HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理</p><p>鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权</p><p>规则引擎：规则绑定，满足条件，自动执行动作</p><p>Portal：SP，OSS，Operation</p><h3 id="平台架构"><a href="#平台架构" class="headerlink" title="平台架构"></a>平台架构</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png"                      alt="image-20220923201228365"                ></p><p>IoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发</p><p>DM Server：设备管理服务器，物联网管理和升级</p><p>Rule Engine：规则引擎，用户设定规则满足业务需求</p><p>MongoDB：用户信息数据库</p><p>CIG：云网关</p><p>南向的终端设备可以通过CIG的协议适配连接平台</p><p>平台通过API Server接入北向的iot应用服务器</p><p>业务流程：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png"                      alt="image-20220923201805426"                ></p><h3 id="NB-iot"><a href="#NB-iot" class="headerlink" title="NB-iot"></a>NB-iot</h3><p>是一项基于窄带的通信技术</p><p>HSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息</p><p>EPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关</p><p>应用层：web界面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;稳定可靠的通信技术&quot;&gt;&lt;a href=&quot;#稳定可靠的通信技术&quot; class=&quot;headerlink&quot; title=&quot;稳定可靠的通信技术&quot;&gt;&lt;/a&gt;稳定可靠的通信技术&lt;/h2&gt;&lt;h3 id=&quot;有线通信技术&quot;&gt;&lt;a href=&quot;#有线通信技术&quot; class=&quot;head</summary>
      
    
    
    
    <category term="笔记" scheme="https://gwzone.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="边缘计算" scheme="https://gwzone.cn/tags/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>ROS入门教程</title>
    <link href="https://gwzone.cn/articles/2022/09/28/ROS%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://gwzone.cn/articles/2022/09/28/ROS%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</id>
    <published>2022-09-28T13:40:14.000Z</published>
    <updated>2022-09-28T13:40:48.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS入门学习"><a href="#ROS入门学习" class="headerlink" title="ROS入门学习"></a>ROS入门学习</h1><h2 id="一、Ubuntu环境搭建"><a href="#一、Ubuntu环境搭建" class="headerlink" title="一、Ubuntu环境搭建"></a>一、Ubuntu环境搭建</h2><p><strong>建议版本</strong>：Ubuntu18.04 or Ubuntu16.04</p><p><strong>安装方法</strong>：虚拟机安装、硬盘安装（推荐）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png"                      alt="image-20220928213527604"                ></p><h3 id="方法一：虚拟机安装Ubuntu"><a href="#方法一：虚拟机安装Ubuntu" class="headerlink" title="方法一：虚拟机安装Ubuntu"></a>方法一：虚拟机安装Ubuntu</h3><p><strong>1.虚拟机安装</strong>：<a class="link"   href="https://blog.csdn.net/hao5119266/article/details/89198275/" >https://blog.csdn.net/hao5119266/article/details/89198275/<i class="fas fa-external-link-alt"></i></a></p><p><strong>2.Ubuntu镜像下载</strong>，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本</p><p>官方下载链接（不推荐）：<a class="link"   href="https://ubuntu.com/download" >https://ubuntu.com/download<i class="fas fa-external-link-alt"></i></a></p><p>中科大元：<a class="link"   href="http://mirrors.ustc.edu.cn/ubuntu-releases/" >http://mirrors.ustc.edu.cn/ubuntu-releases/<i class="fas fa-external-link-alt"></i></a></p><p>阿里云源：<a class="link"   href="https://mirrors.aliyun.com/ubuntu-releases/" >https://mirrors.aliyun.com/ubuntu-releases/<i class="fas fa-external-link-alt"></i></a></p><p>北理工源：<a class="link"   href="https://mirror.bit.edu.cn/ubuntu-releases/" >https://mirror.bit.edu.cn/ubuntu-releases/<i class="fas fa-external-link-alt"></i></a></p><p>3.Ubuntu安装：<a class="link"   href="https://blog.csdn.net/woshinsy/article/details/124150654" >https://blog.csdn.net/woshinsy/article/details/124150654<i class="fas fa-external-link-alt"></i></a></p><h3 id="方法二：硬盘安装Ubuntu（双系统"><a href="#方法二：硬盘安装Ubuntu（双系统" class="headerlink" title="方法二：硬盘安装Ubuntu（双系统)"></a>方法二：硬盘安装Ubuntu（双系统)</h3><p>谨慎操作，最好有自己安装系统的经验！</p><p>教程如下：<a class="link"   href="https://blog.csdn.net/weixin_43091381/article/details/108522223##" >https://blog.csdn.net/weixin_43091381/article/details/108522223##<i class="fas fa-external-link-alt"></i></a></p><h2 id="二、Linux基本命令"><a href="#二、Linux基本命令" class="headerlink" title="二、Linux基本命令"></a>二、Linux基本命令</h2><p><strong>常用指令</strong>：<a class="link"   href="https://blog.csdn.net/qq_46416934/article/details/123190966" >https://blog.csdn.net/qq_46416934/article/details/123190966<i class="fas fa-external-link-alt"></i></a></p><p>命令大全：<a class="link"   href="https://www.runoob.com/linux/linux-command-manual.html" >https://www.runoob.com/linux/linux-command-manual.html<i class="fas fa-external-link-alt"></i></a></p><h2 id="三、ROS安装"><a href="#三、ROS安装" class="headerlink" title="三、ROS安装"></a>三、ROS安装</h2><p>安装教程<a class="link"   href="https://blog.csdn.net/my_id_kt/article/details/123753771" >https://blog.csdn.net/my_id_kt/article/details/123753771<i class="fas fa-external-link-alt"></i></a></p><p><strong>注意</strong>：根据Ubuntu版本安装指定版本的ROS</p><h2 id="四、ROS基础学习"><a href="#四、ROS基础学习" class="headerlink" title="四、ROS基础学习"></a>四、ROS基础学习</h2><p>推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：</p><p><a class="link"   href="https://www.bilibili.com/video/BV1zt411G7Vn?p=1" >https://www.bilibili.com/video/BV1zt411G7Vn?p=1<i class="fas fa-external-link-alt"></i></a></p><p><strong>CSDN教程</strong>：</p><p><a class="link"   href="https://blog.csdn.net/mbdong/article/details/109310874" >https://blog.csdn.net/mbdong/article/details/109310874<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/u011832219/category_10500120.html" >https://blog.csdn.net/u011832219/category_10500120.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ROS入门学习&quot;&gt;&lt;a href=&quot;#ROS入门学习&quot; class=&quot;headerlink&quot; title=&quot;ROS入门学习&quot;&gt;&lt;/a&gt;ROS入门学习&lt;/h1&gt;&lt;h2 id=&quot;一、Ubuntu环境搭建&quot;&gt;&lt;a href=&quot;#一、Ubuntu环境搭建&quot; class=&quot;</summary>
      
    
    
    
    <category term="笔记" scheme="https://gwzone.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ROS" scheme="https://gwzone.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://gwzone.cn/articles/2022/09/28/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://gwzone.cn/articles/2022/09/28/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-09-28T13:07:45.000Z</published>
    <updated>2022-09-28T13:24:38.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>💛<a class="link"   href="https://www.cnblogs.com/haixiang/p/11029639.html" >原文地址<i class="fas fa-external-link-alt"></i></a>，转载请注明出处!</p><h3 id="Lambda简介"><a href="#Lambda简介" class="headerlink" title="Lambda简介"></a>Lambda简介</h3><p>Lambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p><p>JDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。</p><h3 id="对接口的要求"><a href="#对接口的要求" class="headerlink" title="对接口的要求"></a>对接口的要求</h3><p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。<strong>Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法</strong></p><p>jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</p><h3 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h3><p>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p><h3 id="Lambda-基础语法"><a href="#Lambda-基础语法" class="headerlink" title="Lambda 基础语法"></a>Lambda 基础语法</h3><p>我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**多参数无返回*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoReturnMultiParam</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**无参无返回值*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoReturnNoParam</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**一个参数无返回*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NoReturnOneParam</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**多个参数有返回值*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReturnMultiParam</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 无参有返回*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReturnNoParam</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**一个参数有返回值*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReturnOneParam</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法形式为 () -&gt; {}，其中 () 用来描述参数列表，{} 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lambda.interfaces.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//无参无返回</span></span><br><span class="line">        <span class="type">NoReturnNoParam</span> <span class="variable">noReturnNoParam</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NoReturnNoParam&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        noReturnNoParam.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个参数无返回</span></span><br><span class="line">        <span class="type">NoReturnOneParam</span> <span class="variable">noReturnOneParam</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line">        noReturnOneParam.method(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多个参数无返回</span></span><br><span class="line">        <span class="type">NoReturnMultiParam</span> <span class="variable">noReturnMultiParam</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NoReturnMultiParam param:&quot;</span> + <span class="string">&quot;&#123;&quot;</span> + a +<span class="string">&quot;,&quot;</span> + + b +<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        noReturnMultiParam.method(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//无参有返回值</span></span><br><span class="line">        <span class="type">ReturnNoParam</span> <span class="variable">returnNoParam</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;ReturnNoParam&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> returnNoParam.method();</span><br><span class="line">        System.out.println(<span class="string">&quot;return:&quot;</span> + res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个参数有返回值</span></span><br><span class="line">        <span class="type">ReturnOneParam</span> <span class="variable">returnOneParam</span> <span class="operator">=</span> (<span class="type">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> returnOneParam.method(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;return:&quot;</span> + res2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多个参数有返回值</span></span><br><span class="line">        <span class="type">ReturnMultiParam</span> <span class="variable">returnMultiParam</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnMultiParam param:&quot;</span> + <span class="string">&quot;&#123;&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b +<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res3</span> <span class="operator">=</span> returnMultiParam.method(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;return:&quot;</span> + res3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-语法简化"><a href="#Lambda-语法简化" class="headerlink" title="Lambda 语法简化"></a>Lambda 语法简化</h3><p>我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lambda.interfaces.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class="line">        <span class="type">NoReturnMultiParam</span> <span class="variable">lamdba1</span> <span class="operator">=</span> (a, b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;简化参数类型&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        lamdba1.method(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class="line">        <span class="type">NoReturnOneParam</span> <span class="variable">lambda2</span> <span class="operator">=</span> a -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;简化参数小括号&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda2.method(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class="line">        <span class="type">NoReturnNoParam</span> <span class="variable">lambda3</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;简化方法体大括号&quot;</span>);</span><br><span class="line">        lambda3.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span></span><br><span class="line">        <span class="type">ReturnOneParam</span> <span class="variable">lambda4</span> <span class="operator">=</span> a -&gt; a+<span class="number">3</span>;</span><br><span class="line">        System.out.println(lambda4.method(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ReturnMultiParam</span> <span class="variable">lambda5</span> <span class="operator">=</span> (a, b) -&gt; a+b;</span><br><span class="line">        System.out.println(lambda5.method(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式常用示例"><a href="#Lambda-表达式常用示例" class="headerlink" title="Lambda 表达式常用示例"></a>Lambda 表达式常用示例</h3><p><strong>lambda 表达式引用方法</strong></p><p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p><p><strong>语法</strong></p><p> 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exe1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ReturnOneParam</span> <span class="variable">lambda1</span> <span class="operator">=</span> a -&gt; doubleNum(a);</span><br><span class="line">        System.out.println(lambda1.method(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class="line">        <span class="type">ReturnOneParam</span> <span class="variable">lambda2</span> <span class="operator">=</span> Exe1::doubleNum;</span><br><span class="line">        System.out.println(lambda2.method(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Exe1</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exe1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class="line">        <span class="type">ReturnOneParam</span> <span class="variable">lambda4</span> <span class="operator">=</span> exe::addTwo;</span><br><span class="line">        System.out.println(lambda4.method(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求</span></span><br><span class="line"><span class="comment">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class="line"><span class="comment">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">doubleNum</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addTwo</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法的引用</strong></p><p>一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ItemCreatorBlankConstruct</span> &#123;</span><br><span class="line">    Item <span class="title function_">getItem</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ItemCreatorParamContruct</span> &#123;</span><br><span class="line">    Item <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> price)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exe2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ItemCreatorBlankConstruct</span> <span class="variable">creator</span> <span class="operator">=</span> () -&gt; <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> creator.getItem();</span><br><span class="line"></span><br><span class="line">        <span class="type">ItemCreatorBlankConstruct</span> <span class="variable">creator2</span> <span class="operator">=</span> Item::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Item</span> <span class="variable">item2</span> <span class="operator">=</span> creator2.getItem();</span><br><span class="line"></span><br><span class="line">        <span class="type">ItemCreatorParamContruct</span> <span class="variable">creator3</span> <span class="operator">=</span> Item::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Item</span> <span class="variable">item3</span> <span class="operator">=</span> creator3.getItem(<span class="number">112</span>, <span class="string">&quot;鼠标&quot;</span>, <span class="number">135.99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lambda 表达式创建线程</strong></p><p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      System.out.println(<span class="number">2</span> + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p><strong>遍历集合</strong></p><p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">      <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   Collections.addAll(list, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">   <span class="comment">//lambda表达式 方法引用</span></span><br><span class="line">   list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">   list.forEach(element -&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (element % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">       System.out.println(element);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p><strong>删除集合中的某个元素</strong></p><p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   items.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">11</span>, <span class="string">&quot;小牙刷&quot;</span>, <span class="number">12.05</span> ));</span><br><span class="line">   items.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">5</span>, <span class="string">&quot;日本马桶盖&quot;</span>, <span class="number">999.05</span> ));</span><br><span class="line">   items.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">7</span>, <span class="string">&quot;格力空调&quot;</span>, <span class="number">888.88</span> ));</span><br><span class="line">   items.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">17</span>, <span class="string">&quot;肥皂&quot;</span>, <span class="number">2.00</span> ));</span><br><span class="line">   items.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">9</span>, <span class="string">&quot;冰箱&quot;</span>, <span class="number">4200.00</span> ));</span><br><span class="line"></span><br><span class="line">   items.removeIf(ele -&gt; ele.getId() == <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class="line">   items.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>集合内元素的排序</strong></p><p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Item&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">13</span>, <span class="string">&quot;背心&quot;</span>, <span class="number">7.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">11</span>, <span class="string">&quot;半袖&quot;</span>, <span class="number">37.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">14</span>, <span class="string">&quot;风衣&quot;</span>, <span class="number">139.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="number">12</span>, <span class="string">&quot;秋裤&quot;</span>, <span class="number">55.33</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Item o1, Item o2) &#123;</span></span><br><span class="line"><span class="comment">                return o1.getId()  - o2.getId();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式中的闭包问题"><a href="#Lambda-表达式中的闭包问题" class="headerlink" title="Lambda 表达式中的闭包问题"></a>Lambda 表达式中的闭包问题</h3><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//num = num + 2;</span></span><br><span class="line">        consumer.accept(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lambda表达式&quot;&gt;&lt;a href=&quot;#Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式&quot;&gt;&lt;/a&gt;Lambda表达式&lt;/h1&gt;&lt;p&gt;💛&lt;a class=&quot;link&quot;   href=&quot;https://www.cnbl</summary>
      
    
    
    
    <category term="JAVA" scheme="https://gwzone.cn/categories/JAVA/"/>
    
    <category term="基础知识" scheme="https://gwzone.cn/categories/JAVA/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Lambda" scheme="https://gwzone.cn/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>边缘计算</title>
    <link href="https://gwzone.cn/articles/2022/09/26/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    <id>https://gwzone.cn/articles/2022/09/26/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</id>
    <published>2022-09-26T11:21:08.000Z</published>
    <updated>2022-09-28T13:22:32.714Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e7dba1a73c0f45cbf1140db8890dcf51630bc9656b4a585f94c46879c8c96e9b">10d79030e8222445804370796b90fca1b3149e2c2a0f36d6b4ea04e548758c211a438e8f9aa5c0b62ee20b37362709c14c71cc86f773a486a43b3198c062bbaf6b00f2b05e86710a8f129e45f6f55bd83a11f59a3d34d1c800a7f0e2553406b154bc8f04b9bf445a851d923e14d7caa031854d534a387c033fde8eafa18f1faa3107e3eaa98b927bb4cd12390d84dcce00858e5a8cfd0b7c49466dbf3ff9f205de15b9abce25646e2fc28bc0b9a022299977574f76346ab8eb50f79565a5f600b5a827efef038bb6f81c02a74da21137e00a0d26ba0cdd2abd9e88daefbcfaefff9937de8e200795bcf3d9c382cdfdde09b05f798f48d0f207522c75799b30c984b77a5ce363105af571fe0a1abf57c83cb7eb874cb3731702c6dfac0a4ab3f06fe68fc58cc236e10d57543db75d52cee48a4c7b9b9b176d70f52cb1e316cb5e7e85d301c36a24ab2bb2fa24399452e41cc4f6b002bc259abc7705ab0e0157a30be5755d4d336820b6a4901c4c3ca6b38dbcc5798ee6accb9f8c01da83bd4a93a53ac55f0a024dd5d135816154966354bde909533760b1fc27f8146ed2babaf1f6187a84257eff93f43faa5624c6cdbcd6c50bbf7ac263db060cd32fbaaf15eea3b20c774d663a56df195e212ddd70160acc86179e674398a8e606c048de29e94aa4fcfcff9b4331e3751dd954e41dfe7ff0bee593b3819151c245fe0e6114af4912e1a90e5ce2a6d2f627e76a03276e30c7b02ffe855082e2a54965ce8aead96749fc13bec91f49915d5e9d39893b58fe0845466192da3ff10d252c32018526586f058b18c55df70b88bae69a2b10229819bd50a49a698c52b571dcbb0d757e08046a4046c8000a20908a1f4214482331843768c4a2b70fef139c85c0fa89590e77843280b0b2c15fe64a7f6fe8e1a5f4be05102e3dc2624161489282b56854d85b4aa7d114be5ea17e81971a92ea5aaba8fdb3bbc71e41616f0e254e42435a37ada91d92beb9c9ba8aff1755ca3cd31f053894df9d0293eda0a79474a2e3963aae4e1104ee358533336fc0dcb62c598c9b566088fc58d2d99559592deff716baf076de3e060f8052d1826cbbe4a6cf2252a535f2a099458b8854137b09cdf63867177407b7d024b91b5e3c65c32ec4bbe75d2536b779545ff457d2d922505248bcb70a2095de1cedbaa232ca09e1fe80cedd625248c07db208b6ce13930807d029aed98655c6c82efec947b08ce753e21e79436ea0c25740fb5f3f5d3c137d8912f19c579b9fd12a0519dc94a59f7ccdaf53c8d0979de56fe3d16d6a3ceecee7b2d582eea96ea3a8d164084555c6478c251dad7b673df9f3a7ac25e929f6adbfdea5420831e81e60b0a8b6bd5aef404572eb2bdd2e41f5a4c163c2378db1b79b1f487e073ae719f0352b32a2b9cd72ccf8a6aed537654f0500e373523763f23a59c833f7be594bba9cdf799712c1fae108a51b65a5adafb459527cc34d89a8ec3c47dec0e4272905827cf833437f2da60e093acecb97a94967d742344fcd414729f399fc3aefb6c4593617b1fe0fe5c9bfd75f6a063b57df94825fbe49310574a84356872cd3249e8424c458b6b289ddd6ca95173981c7105dabf4808b48e1112e76cda94039d830148f21e842cf79e556b7537d3ecc511fbb8fcbbd4cbaa07060da984ab8197537be6c8c0f0dec372039992f173491fe0294bdaf0f9942557f09add0c6654f12f3ed696b99ce4b2e95c0fb4d7d91c01d838a63fae53634a941b6b15a62becd578a8be42317065bf1bdb467861d6509d833eaebae597dd4b453e2b73384d41c55dd2aef0d28cb899ac5947e791f95a33b301a298aac3b72a5d78ac1e03dd445a2a6cd2faf34a861ec342516cd9d256c5c0aefe8d6158234419fae507225d65cc35fb1c2ea1a89aefca5c08ec580397b11c6212fa34689d979cab111687f9c1d0f6cf850faf84358226d34492833f7736c3b39663062693aa2db916f978f7ac826666d60507eb5826124f34f8ca06b3457c37a08412bd667f585bb5702251ec7518aaa9e454a6413396c9991114480fa9b7f2cf7ce0530f77ca9c1480452e1e44d9be5f02f9a28e1b6f0aa93a0b931b899596bfeca9a9188f77858b8ab92bf59402e085dfeb23b0340ea66a501b878e7b40bd6b97c09dffec1a8b006cf3941583bd07a73a89e8924534bd2452afab13590758b8710af3903b71d5982d9342bd8c688ad4e9b2354f0b1318adc4b37282f4312961d3fb698bc7a2ddef912f65b46b52534de059ec98746d53cba34510e99add99000aec9d9df7926e1e64365491c7a324f25ac2ebb31de1253dda2585e18cd6369c2a1ea6a90abe617cf247d6a17d9253af0a3e96db296f409d8286b06a884c3b4f258ddd30cff7adc28d8bda1b46e88498e4703a5fefec6c9c29379189db626fa40080b6411b219d0f37de640f2fcfa64889d44cf8906ee7d6db74437002a514c15b63a4c02a005e5432228b1bc58e3f38a50a5e49b8ef141184948e8530bd6569cbf830e29b155e6ee5d2210047cdf1e4a9bbf583e530353b0842f8cfb5696fa77de2aa9e1a720bd2bd16cddf3dc8d978eb2d5379781bd72809c0f374fad3b78aedc50713f9fabd237a4b16455f63e47d76becf5ed9886c3b9fa2855713650c9bb174f90473488ad609a806b6c0223235e8c6de4ca11416bc877088d51d9149a1fb2e47470641328a310d66666a3b3ed2be7aa7ae6029c6191d7529517b4255e47f901b0fa242a822dca7a802795ba71ff89121436dc3cd60b28bb9798d233c7d96209ee1013f3239e99df6e09671a530257a4d6029106fdea606deed09a4a74679fdda30788230bc3a4ffaaefe05ba9ccd8f335c10f003071a8f3d27d650ce8ce6091bb2703ebc7fcc7370ae1a24dce4321c5bca2dec52dfa84511b147218e7a786be643226a80efa339a96ed1ce421f5dcf6a57ea766b00fbf43408d928a5786eaf5f5be84ac3e53a68d994e511ed759f8d502c2925ff9e299bdedfab96a04a1aac76896bc1b0406d4336a9d4ffd08b1786ed64d3dc0eeb20d93bbfe6d8b2cffa5811be8a79db9bc7bf449edc322997142885a2cc23b3c10f6ed0d03edea3e4685bd86794a00bd80411303b7eccc2882a4d0126d6cc96fdaec392ca12166ebd36fbaf9809767ef952b820b8c9ea1185ab77f9f975162c5acc7b7d85547ac272ff815a4dcb65abff83049e7192914607d219fa25f28573703e73c9d7a5db2681cf7db16b87d3885c3a0fb6f2063877dae2217b096853d6862ce5176f003b8f56e84f4380c3144fa01ef65ad03128ce957e37f31843705a6a58f882fe756df4337c11abc71a0a60ffd8eae10b1f7f7085ce107bf58a02a254b61e0af9a7ecee4e33720a5604f1bf87f4f29a6a8ab74b49466d1e60e855734a86c23050986b0553c755cb6b21f8a89c40f3eafe295cc85438b6c8c48905afa0cb43ae915a981352204f99e9cdc1a25c33e3eb834cb39a9578bf98dca975a06739efa528f61ce56fece9c96bc97b065e4e9de96ea414c580c5bfba11832f5613da3276671187409741430d298f01d500456f86017507950d912837fbdc08b03ac7c1c2ebf5f63b0da8978a540ecb094179d3ff35994212f7230af05055e41fa32b905f34c2c4c571ad33f9ad7500e3acb4e489d4df4cf5d26737511954ba8e6a0f68fbde850a86a4597f45ae1179f3ea59d4fe24ba1937206bd21550909637b22975b3b2fe5aefdcaf76b15b0036f08b5b3d9b82e59672a03263e1e86fcb156e9a9238260c05ed5759f58fec01e998e804f35fce4d49592cb698db96de38fb975dd6f86317df14231d1b3c2f74775648ae6d91aa7b8b47e8c260000ee30a2db2b62d301562ff7fb9e04097c572f59501cbd4a45c05f7a1cc51ebe6ae4e63d08710026065a5d606740b0102d3c61437a56e644ae1950eb3c7fe0317df7f25ad7548a77d9caf5771634c05e1f8fd899bed6f4aaeca61e9dafb26785ec037591153b436280bb9e8d6b5dc880aff6c2cedb96dc4ecf21047a1116e71896b325aab5888bd5445cd67ef4c167e8a5d2bcf0935ec4c66da741dce27f936191e3e84d86f95395c1bacff323777717d84638483e8e7cf926e80f6b62d1e74840af2dea806b20485b60b4607a801741ff17f5db173d86419becf114c99b4f77d244673f2bad8be1f1efd51cfa52fd4266d46f635696ccc4c11a8089eb7d94beffd70b67f369fe23062365324f2598bd334937484d2243472cb120edb96cc8f688c5da622d9a8aa31884dd83e197917f36ba096fc6fefb7fce7c3e05fd85e315557bd80f4108c4cd8bd3888214961d061a0a24657cbf67be2e2e8b1675c0bcfb5e44ab205fbc297022b521c537e1dbb4fa7b29a7b5cf6133cd2f86c5ea31673cff013940f065f4788351826adbc4f7482bac51790902c92ce1a79c70f8f3e6d8496f46978d480777d8f5fd5bd29634c34940794dd0c822f7956655e337afa2ce6bdf3cec1a8a60e9da77adaa4fcb58eaa2fdb8a8a8aca01b8b5183e80613e52c6981821d47e9b078f4938e3bec9a6af459b0ee3c5d0e7b071cd29996e01399a5e8872c2eef3978ce76ba343e2a32082b2152b117bb706ceb4bc9270c95a17546880970db3914d8a77aba3be073fc72059256989d04ae5dee21313d5d9b8389302d78f2b3b93bed5707b923998cf6e147917545903c13576095bbe535fd0fc8d02e031d764c74753ed5b7f101c70d7f69702d31e8017183f2ac5c8cfe65a1414a23efad3742de8ff3fe8a426bef230f72ddb270cd88bdaaea215215460ce2a299b24ee1e4126d5b521f408176f4a36b4bfd9defef5f55b04ba2ec14f3fd9e0cb2f05bcac7e8d39a8f61f02f9115608cf2025864b633dfc4c60efc273daae52c4a384ea498a8b68f7d651ca2df4ee7b80ef76b54ac0450af7d5b7bb056d0c944dd86c826f6a6ef7072b3cacdebe8a08ea1cdc87cf5e3be5f06995a74917f7827732b831d053c634cd9f5107a05a4f5f98a19006d16755b8e68417d2afeb84322f9524c4ae10db390cd1b959586d073acd555a47f9048cecbb31528149cad10704bc4eda6c4f2747278abfe4b695bb1b819a96997dc96e6ac14dfcf2fd8044cfb5db3689a2e2966975dccbf5c9a8d7be3790e0968e034d03302ee95ab19ef5fd88bcccd2c8039cbb0dfeab3dd351f2a653f66361d89308c6990ea4049207b60900361bf9c85ed9f879c7701a30ceb241eefdbf35235edce57b83fbb9b02d42edce245a15c671513cea27a924f03c44c832f429dbf0921e2f5ced59e2f3fe0d339be18293b905c873bb424e66d9047cb4ae1709f0884336aa4b3bfe388d3e623b6302175d1db9306364819c050326481ee46b3305beba62cc051595fb7c95afac712d9e89237fb88c9abfd29988c64d24c564b988d8a0aff68b5924c4f3af323b0ee4fd01860ebac4f7d76b15deb892c14e7bbe809b63400f18d6ef2989dc360112a0adb7f47540fd1b67ef03c95e80e65bd09ebce0a602526d03caf2d0e77fb59c81aec783ae0a4d09f9190fe1cce491e608b84f36b29b814171d7ae1ab48ba757ebbdb28adb2e9162ff4f4dedc27dd8fb507c014e460eeff2e1b860fa92949cc369b33fcc3dae367313a612b1ff574e02cee771daf26715a92cdbd6899b8f8f3babd15f8cda0e366152bfc05a6da6eafc44180612d5f2df02beae4e1f07e1ec7cfb0dbfe6676e4e739ea07eac39ecd32877edb222bc31ea11f1e4645caa4612cbcac5583c8603f252602af01ced15378e4fb88d35ee15d88b0e07632acf6cc07427f9da5b02f17a983ac9f104a0fad040c16b1a3e912bae805b8362ae5c934efd6f13f2dcd60fdebb35fac5ca5c57c88ec2ee28b1c9f8b6c8ba4a2b67cc1b366f8855708582e4d0a935958c83f07f4a29ab307da3809128dd70a73817e28a39ee1b3285e0e29652327a71bc06402fec751310b9e599511243b75db1066a22f9b90d6603ceea4fc1d9b0057e5da77f0d45f024bf0cc6284c20a5c051591e4e75bafbe2ae53ea031d3492f7f9a0384af260e33c13559db6e9dda45670adf0980ae614d867425374c8cd49bf8fe8a334764ff8f276349dce49edfc1e800cdf3055cab2647db64967fef509aa8fefbcd18df5105ed1647337bf93a2fa96315c38009788d33664fbf4437e98ce89ab7711344787f4040fc10204ba92d32328b7043235d997ecf73a804deb7bd85d7d46d2504da6266b51f4a9597e3f74426be05ae15480258c37a7159e4a7ad161f2512f2aa3259bdd23d92db3f9bbdea723e45a4bc0f606cad070d4dac1a169886186830ba4d84c901c0c62990f1157202d3bd99322e22a5e80b08f89f027106a1b912d0e660930346de0f5a7e1b80dcdeb3acd32932d7906ddd543c21c4cd9f5c3ae08fef4db11957b41624f57546550f503846c7716e4a84b3fab08e57038c74cdc0ec11c7ff1d3ddde6f717f4f091b78d86b8a47ff6203dddfe04aa46c8e346e9674dbf7f707865b9ce5f7cc96f053d522425f568667887545559184b9a07187ad0cfcb000d42c2b6425142f89d5c330514d2cc433069b790d0a325926e8b9688e2fea1353a96092d30c34720031abf15d81aae3dd712429981d25f4685eacbf35cd3d8154cda92621ff80d9d76e43bf36210361a7ed583f722039421bd15c6a769a0f045be075d49a47e54c0d1996bf898cf076e41b614cae2dbef941c9a9103318f0b7fe6e1549487862cb803f0edb237b3dd4540e1448bff3eaededf74157423c8caca7ee6e41d123b614f745e0496087c0119cab5c2d8b2d10f29555c3be86ec5ab3b00b4af3fbf73d892d85bbe9fc92cccb9ab573476274696c47829b90720ec2ad0ace1d6c3bae4bef4cb332373a72625911aff0ecbaef4bf6626efa335e8184409ed32d68329e01964f8f44ff30a43a3311086af5f1b69755ee5d396d32cbd69b7443fb0520ddf39fa769d31bec98730510b62ea290fe5ecfa440833a8a315f88f7c5c645eb7bbe288d2ebbc1795f4e0ad311c7335168e48b18b83851ceb457417e08d9e40cac265802acbdad68125e48be29cc197905f94c49b6b092409b715278e65f3e77fe7ce41de7ae086a3638ef12d9c11b9ec8aba8faeee4ec624a40d222c2b9827e16c0d57c7cc8d863a5c6a0f23d5ec8f1f06e37d5c14f764e491fa3d11f57940515e53e2a05c7f6ee8daa87b4e1086048e282bcb76e082e9d80c96a3593f671c352ed0e5d581327985cc72d1aad16f2d7979062b85cf98954ec1eb7ebe573df1595260e2370954621cb9ca87a29a21566e95306e888815d6aaa3b74145d343b140dceed318f835457180fb8154c0c16cfa497ed24aad97ff2c46e9958f6b219dc911e056f9f1bc32b31da9403f632751fc5567b179ca3e43deb538181f83f70ca2b1faccc67facbb8398acc453d06bf72647fb2d9c0beccc530ff8610567adf6367f86f45e5350c9989d03d48a463859dad1b9090dfde6b074f0f1a66780fc9dd40094a872306dbefce6a5d7b3ae2cab5cd3f273ff83dee515f693b62ca057750ff10847413aff57bc262c8c2c3beac39d2ffcb7981a4a17c63b66f1f07ebe87f294536f0c4cd20debfacbbc67a201fde32ce645386fc5b42dc93166910a3847505ac84b7c8197ebbe88efc1afd88fdf18c0a1d4db748d63d34b02bf38eb7b366c5409250e08aeefa77298bbcd99da204e8c46ac3789288a92b75c5bbf25d332de4308bf8f32ccb0cae777348a5c7c8c4e02e6f82d4f41cf2dde88de3593f9deb151c275c911732ec43f0d6787b2432aabaad9811de7d3880058b68e889746e95ad9454e36c4850268ec1f4212393715c23578332b052c5dacd40611b48c19cd949a61c3661c474f0749d7092a52f0714d0ed351de72844853685e0b1908f4eab7b4992c0ea4c74f8ed1a5f5a2e748f542dc2f269b75cc4cd9fe5df36c96a42f239f5ebe14d8132c91adc3f617e77d9fa83385cb47197027f83a5940f0bd3ff73f18f389a241c1ce10f915ec037e03ebbf03c5fa89d4224df7be37b188330508075b29a3cb6d6d464b04f91e8444d182c4217c9abff9f1e7c659e3715c26b3b550645b8fe10cd707054cfadac0fb70d619745942684fdf5f05ff561375831e7d65ea3bafbf1d6dae5d4b9fa21bab0d79c01d8e554eb433a608df417d546a1b9508d766665842546e694d34ec89263af7a5284c17c1a7d889c82a0c5dd1f761140bcb0c05a56eff7a737ef3f309c9467e828381058589976468a4a2fa390bbd2bee1fa1248651a416320b29039d59c8da950945f8c13f88c1e388623f446a040c4972c847fd1782109de936886edf7cf052615a28b77c4dd39aee7f77aa6b91b8d64cf6e152f5afa19a61345db87d4f0c155248bf43ca9c2a61a90c46c3da82279c72d659bd801eaaab76cd17dbe8848a1ea0b26025aac281ba9e3c93e5c055a37993c7755b75594a66a27481c7e70cb1ab53248b4045f98d3bf8b0a3eb36e2be1544554fc656f164fb23790de339c9b24675933809096ffb7740d51b5bc18fa4ea70100418f044f8b8c0f5e9aac6f916ca5a42a413a6e1675581d3c48c70db01104e601ae488ff02e120ffe956e98c43d4ca1e7c6d89c7049b7de058ad7ab74d9f5d77b40ec6e5d922e9664ec4e3dba0d7d914a0c5f30953624ce22513f15b2014c551b25d7ba2448843ce7d49e236eff281d33e2a76ed8e2e986ea13ea15514732995a560ac96b54ed33cdb116d2d4ee66aab7c39bb7966f7df31c1d78c63d0257346f25a6713eeb8abd06b19a7959ce32becff603e1bafcf7dabbc7f429b70584969038ba2911d9814a0379d785e08db372eb6c868ffaf5be6044205f697b0367a4da617ed82083bcc5695e7378c9113e0f51a00510227969e5237421546e83cd0debc42b1891130390609c8abf24607ec769e1a15021eca2441831bf58f3d0d12298a563aa37f554fcfe91cac6786a2e105cc9b1fe4ae77172bade11b476572432348f3914d2d7e68e9700a57ee84e0ea8164cc574d3ebe6049b7579d6afcb082850495627e77778ab41d9b3c1ae660760ebe0f0a76d9c584fc1c2cfd10c3ee01dd4f0d966e39dc4f128926ae728750b0c60c64bf030d93271ad0a5fec04a71a8998db4727729a49ccf6c09e913671639bd449104e56866c4e526cf169f2ab0f3ae1012a20cc2d749515e0868fc2577513c9569e8b4804f75730925f5bb65e801e69060ee2051d5b24d7d48f1c8fa3aca2ea940ccd972c8c2211b8fc2417ec8084076d23758c6959c0a7a144e4cfaaadfd7bf5ded62fbfe3ab6a7bcf5da182fe874dee88f3ee0842d3d958b50cdf55d6a097c6e90fef7f772220d0288b40d49c7c50a4163473622dd190292aae525c4898a460eb88f701979825b962ad02f5384956e09420c456a57df22fe48f7ec4b9839a93ee64d0b01ff81820d3e8625ba18a9e76a566926961733aa29a952ebfd823a1b606b2022ab4cbde044687fc4a2d56c13932323330d8a10294c04ae74e5a2ea56527058be9ca21208a8db1e99f4738e4a214a769c28737e87bb1ceadcb4e7437e9292bce66d9711f4de85edbe3ef502c60635e030c9d547fa17b639063d8b32fdd9b49a02705ea11d2018e085557676326f026acef4148c1033d9ca126bfa88d06eea4f41836dc2ac60e254ee3c7776201a495d614289155677fc54583041dac80d600989c88fa33c2872c2b389540db5d31fe614ed98ab990ec5145f8a3846215e50ff2fe41eac165749ae9f69376785b94e8e368b1150464b0b284d4a85a6d441f6fc352e79d1252deb42cf54ff8aefcda78949692ec7442b102f0915fb9408e298a5c59f16a716b64f24734afad235bd7e206d4d1f32394628bc4405b51d753f36d1718cc1a572d3fbaf384c4df757462f5b3f3fbaab24c32adbafccb1bd1fc0bf172af368bf61ed35c6091ad8efc56df472f16f71d7c8c765cd299cee472e1072bf0bd5359df8f0b667ed0cb3ad873829075fe088f9a54062f509ee426e58498b505abacfa5eba1d7488e983655a7520d4b9ea99510ae771faf4d881d654938904298f644aee4a0deff852c326bbec3e313eb40dfae420b38f1963861c8aae2aa28749502935eed8e7342bf424c9e22e71cebaf672641f55f59ebcd2078ad978e197eb9b69c0a838b27433b183f50e156e06643ab46f0a7b29c25bdd1435c6a9082bdeda8f9b0c4cad10138da30042c906fb323c7b40e5775022e3691e407cc61c44fde3612f7400a7d4d59f9f7bf5b163b4ed85a1ecd3734568f600241aa570a763a0d1b6482b0b275142118585481ff14d30544508d12ff273679b0ffcebd64e057a53ac03b0b333053409565415c564f8f7661cdfcc960fdc78f71ba6b2ddf2277a8fdcde977bc9075cd75b987d663a63389b06691ea758fa72e217ccf6469f63e93666082dfc33f9b881619e6419c451fe51df67591679aa81db094ec96f7b26e75c8e3f5b1ea2e0ae312a4b13d170d60bcceb040297f3c6aa261e4e50bf810317e36bd1557dd8f3edf517e5064f101bc14adb94ce6ae8214a9bb3b7320323b7d45a393551cc589e8455727fb16c4a8ebcf00457d73731580481de0bc7ed5824ee5ddc26e1ac70d217b0f739df36bd12a9e8048bf163c6e199eb593a4f7d44a95c7075629e2915e4952cb0650d09bd5d9e621e7d5b6acb79c3edbe4ed217378be1ca689ac4909083a1d97ac58d8ca48c3bf61a0c885db116ca9b7f32dab53efb4dd5f8d191c4da33fb5b9e175fa20a0e6c6c7863323c65dbf9f2a51af51a0b4c04358951665d18d35caf7fde88b40e46aa01350689e9f354bfc1cf3a1a929ab964b396ee749e69852adaa32fca4d5e0a266a4e3eff0501de213a6377f14a5d262a929dbfab59fda8670a11059736a14257c4684ce48ef5170805708929c2ba7ebd0110268d7195099bb5efb459ff26ec68c31fdbad60e5cc0196b9e11f9992db95fbef86816e239b4c7e700b46e9ff1cbf6c816dea8d00047b87002490db8499337475ca675f91854ab4e78b9f63440dd104b8ebb3aef81043e3ddd137c00e96c57aada0d333c5603de2d67111d1df29aa61ea7fa4755c584b8692fa27d11b4dc229024299b9ef46e5849174378da395d6bae6c6e2876aa6f150a9960859c6fed043fade20c5bd91c83df1b1a702b8158bc604e5890625649f3ca1dfef5db188d49f0acfccf47aa0ea504e762dcbb5fa4519a32d736afd3e4b7d03b1512d3af68445c6e6bcdc79da3f3f826e72624956eafb17e81df2252518b5c6a9ea036e66c2f32d7b8190bc54b5f18b624eeaff4818255772422e1d50c8ed3552a976ab27cc1e158d92a29198c1c25e74926e5140210143ce4e9837e9d59fe697547d80a2baace39fa97dac9a6de184eb4f4fd1f42075e62126e666b3199c475e111fa6abbd1bd8965211c42cc8344a88a71145b306473e4f5379b3eabd1471256b6ee880ad6e0bb7849ddc4fbd4f79b1059f515a57a3e59b17af46fc66eb4e821fe4ea6f984f5206ac8eb5d369d9b46ff6d28bbf999d86d7517e6f611cd709a2fe53da893f4ed2422387dc7b2f36363ede4c3aba4af84f79b9d483572f6b38de3f9da90fead695fb3bd3943d9517f3e5e008217e01ee992acf5fc3b02106eef04072c2c805237f0157e80a5afc3abb2ad1cef40a28a67f7b51b36039e5aeafb5e358812137a92de95bb31b5b13e57d31a2247d5d5f8922543f7ec8b7cbdb99d790e972c50b42db8a248ca2bdd30aaefedcbada053522616ee9c825695d9d8fe145a91e7077d33aefd597bfccacf06d43768426726f8ce2051a3d2c52db077f86621bb56ed693d24407b0d9d471d2f0113b0e31fa2d023504ea41d072d4dced2ac72d4269afac9865886ff63119dea929f8e823a5381e158d7a42f7047698f43e6a8c7b9f034b76b8b89abb6ae914d050603631384f1dcbd3a66431aa7ab08c80c43042d0f237f7d502bc892a43e632ce0753bbd0b7ee20c5e5d48409df463f8c0c83737c5b7db687d4252f9357a9ed91a21e85318300cd3b29db092a954d9ba2bca1c6c96dc7297c5e986ae1275b2bf84dde6a3d93f5bb25b33d19cdfe7c9ed51ec758f389f97c8c7c51de7c3770065f5fb9da506e0c49257ac9b9b3c45f0cfb2121b575f34a1a54233f678d71dc1b3abb2dbdb9bdf1dcd0fcd523fbd683a440b3977b1eed2575700f7c43ac24dc339e6a6035da2bc2d16d00441cd6f80af162f3edf39f9deba5e809912a9cb0fd4a53691b1a51735f5edbc26c4778e3da49728934e531c24bf9c19e60360ac6383fb7bdb7bfeb26ddaccea683fb788d6e58d3be886373d589fba9ca5905a373b7d3c4743c5bad894ecaa1386205a87d7c2b678360b78a79062aa370c4969c640c5e8dcb8b09581f48201954c7ec7c2c4c7d62fe220fd6e779e64f509dd4e7fade64c59605d2725fa747ce8e428f2fadc026cf1e41640d574998513ba7c65fbf5999aa3f38c901533e92541f3ededd76e745648e40470519ef52e5c20628d6033a572ac7e69a656044ace937577faebd33d7a1b0a04f80e000da7fe7f7774d6edbcc708307c7afca665d963f86abee7d2322789687a918046d10e4e6898f827387afe1a8f94c562163d9c69baa7a7a738c737d5e9cfbef2c5656d134615e00705ae532616b7893026d081b683742e008c6e1c9a27fe7a3b96d77a3350aa2a8a52693e0f6505e22e34510cc7db32616f62105d26b95e1239e645812d01c78caf01693310b5f1b76f6f24f8e6a306c2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="笔记" scheme="https://gwzone.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="边缘计算" scheme="https://gwzone.cn/tags/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Git子模块</title>
    <link href="https://gwzone.cn/articles/2022/09/24/git%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    <id>https://gwzone.cn/articles/2022/09/24/git%E5%AD%90%E6%A8%A1%E5%9D%97/</id>
    <published>2022-09-24T11:25:51.000Z</published>
    <updated>2022-09-28T13:25:01.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-子模块"><a href="#Git-子模块" class="headerlink" title="Git 子模块"></a><a class="link"   href="https://www.cnblogs.com/renjt1991/p/15925259.html" >Git 子模块<i class="fas fa-external-link-alt"></i></a></h1><p>Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p><p>示例代码使用的值如下：</p><ul><li>主仓库路径：github.com&#x2F;base.git</li><li>子模块仓库：github.com&#x2F;common.git</li><li>子模块在主仓库路径：src&#x2F;common</li></ul><h3 id="子模块操作"><a href="#子模块操作" class="headerlink" title="子模块操作"></a>子模块操作</h3><h4 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h4><p>在主仓库执行 <code>git submoudle add &lt;url&gt; &lt;repo_name&gt;</code>，执行后会在主仓库下创建一个 <code>repo_name</code> 目录存放子项目；并会创建一个 <code>.git</code> 隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submoudle add github.com/common.git src/common</span><br></pre></td></tr></table></figure><p>添加子模块后，主仓库会增加一个 <code>.gitmodules</code> 文件，记录子模块信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitmodules 文件</span></span><br><span class="line"><span class="attr">[submodule</span> <span class="string">&quot;src/common&quot;]</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">src/common</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">github.com/common.git</span></span><br></pre></td></tr></table></figure><h4 id="查看子模块"><a href="#查看子模块" class="headerlink" title="查看子模块"></a>查看子模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule</span><br><span class="line"><span class="comment"># 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)</span></span><br></pre></td></tr></table></figure><h4 id="初始化子模块配置"><a href="#初始化子模块配置" class="headerlink" title="初始化子模块配置"></a>初始化子模块配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure><h4 id="更新子模块"><a href="#更新子模块" class="headerlink" title="更新子模块"></a>更新子模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新全部子模块</span></span><br><span class="line">git submodule update</span><br><span class="line"><span class="comment"># 更新指定子模块</span></span><br><span class="line">git submodule update src/common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归更新子模块</span></span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新子模块到服务器最新版本</span></span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><h4 id="提交子模块代码"><a href="#提交子模块代码" class="headerlink" title="提交子模块代码"></a>提交子模块代码</h4><p>子模块的默认分支不是 <strong>master</strong> ，进入目录后需要先切换分支，再修改提交代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/common</span><br><span class="line">git checkout master</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h4><p>执行命令后，会删除 <code>src/common</code> 文件夹和修改 <code>.gitmodules</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> src/common</span><br><span class="line">git commit -m <span class="string">&quot;remove submodule&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>本地子模块相关文件（非必须删除）：</p><ul><li>删除 <code>.git/config</code> 文件中相关配置</li><li>删除 <code>.git/modules/src/common</code> 文件夹</li></ul><h3 id="克隆包含子模块的主项目"><a href="#克隆包含子模块的主项目" class="headerlink" title="克隆包含子模块的主项目"></a>克隆包含子模块的主项目</h3><p>在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> github.com/base.git</span><br><span class="line"><span class="built_in">cd</span> base</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-子模块&quot;&gt;&lt;a href=&quot;#Git-子模块&quot; class=&quot;headerlink&quot; title=&quot;Git 子模块&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/renjt1991/p/15925</summary>
      
    
    
    
    <category term="常用工具" scheme="https://gwzone.cn/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Github" scheme="https://gwzone.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Git使用</title>
    <link href="https://gwzone.cn/articles/2022/09/14/Git%E4%BD%BF%E7%94%A8/"/>
    <id>https://gwzone.cn/articles/2022/09/14/Git%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-14T13:55:14.000Z</published>
    <updated>2022-09-28T13:23:49.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h1><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br><strong>Git CMD</strong>：Windows风格的命令行<br><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --lis</span><br></pre></td></tr></table></figure><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png"                      alt="图片"                ><br><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</p><p><strong>Index &#x2F; Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p><p><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p><p><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git使用&quot;&gt;&lt;a href=&quot;#Git使用&quot; class=&quot;headerlink&quot; title=&quot;Git使用&quot;&gt;&lt;/a&gt;Git使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Git Bash&lt;/strong&gt;：Unix与Linux风格的命令行，使用最多，推荐最多&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="常用工具" scheme="https://gwzone.cn/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Github" scheme="https://gwzone.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gwzone.cn/articles/2022/09/01/hello-world/"/>
    <id>https://gwzone.cn/articles/2022/09/01/hello-world/</id>
    <published>2022-09-01T00:00:00.000Z</published>
    <updated>2022-09-28T13:24:40.251Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="1c638b8773ee30d18874af37da14bd69bc55e44bb6265b85b5e8d24985279213">10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c5dfa5eaa9327e991528303814267181d88bce7e663060c45eeef1911be608c8808e3a0bd1058bece5a8748c4fd5da7b9fe10276c80624ac0ab45c8b427740ad28e252f77ff2341342a2d02769b92253458c55ba07e46297cf056dee5b69303e9c91c8b122030e881dab5396fc41b88a1ae72431bf2e9754e77a7a6fe1b4bd9daf6debae3d867fdfcf71da5c95ede2f47f2eae5e76ac2b10b952ed5cb9f3695cb03838b45199ec1dfcb776c0bc57179407e845c7a44d7360ac99621418daed523435f012d54d14105d18e1db5b09f61e860a96880b4288957d4c90af1b6e005862625f0ed49104d5915bfe28edaa245bff7dc45843ee15eeeb3f1969f562fda376e40a4c8c02db75b28f0f6691053cf615a5d3b85e367947c5904c66facf5a5470d64e8cc3e898c97cf438acce98e80ec01786e018a8aa4b8fcdf3d08bb67f236a2eb43af76f148a70fa16bd6c6621d92e5ffad872634b10aae9705681735c82a362c4cbb90e62629836fb011f21c1661cbda352bfa3cd5daf39209e4ce60af71f58356b0ea3ca44d611bc117857f9701628c6ea51aae682e38e175c247c0dd663600834e890c5d59999d2533c021d6f404dc3fc96130a1e6b5c4380fae31c9c80fea684a90f69bd77f8c2853cc7ec9ade17473ac2545c8419173399f489737d12147d3a36438efbe9c7916e521704027a699eb56bc5a1132f44a9796e1b453def95b5064dd8326aa194761b15a0b546e03621685b0d2287592253d82ce811b54645cb0fc55f2746acf55b832c1cdc61433ba6c731a24c0eb581528ad396a9f9919cd59ecb454e7067e93bfb065e86d30f75accbb81abad48aed02aa6aa5ab28800c404d50f5c02e65363d5c093137c0b9578fd56a93f3b1e0948a27a307e19fd20c67e028f0225e6ac94a30d41a484eb7b06ba6e70f2f3f0c1aa1bea62a547410d0716a70a4515b0c117503445c5dc68da61ec296d38c9183bc09a0b993511db27156fb97d6f2599b4c5f80004b43adebdab0f265d9e56e862b2480b00f27a66a44e1db237497427cf6119fb05bb0e23c689b45c515bc138844f9b02c7437c0359c6cb6d44f3cf0aa10e86f62aa4009dd10db740335bc1a3ba3fe389ec4356b0618f6ef89adf739d64705a1840b5c4f258672f7937f9c7236f63d34c7baac0081cb1aac25cc363eca165ed17fb94ed9f5321f46b79ca34ba93bb1bd37d0d45a67b518d8235419924850820950e897ff8000303f529b86e93c5e2b5ec2a04ba22547288c88e5c9c7691cf8c4a508b94208b4a420468111884453bc53c81ec8ba3f44bf929cb91bfba36271fcd6db656f4367a8b23130ee85f135b783dbce1c74f3bd904a8d92a46769487cb9a312f3e6f738b2e9e02dce998e409d403daa947bfa32b0b0727bfc8af09c1b306b26fe755763a05d1bf51a867e667ac874fcbb3258b78760efe8f7c069b649e43346def779410404c5231aa36c0dcd1923f9731b54fdaaf244ca3696539b8f78a7abe0e29f7147be4df0484097c52b3374710730220052f956049e3e50bba1abe627332b003b70fd49d68f2046d71c70682de39e344716f806e9419b169febe3d623c4cbfbaee401d80ba8ac6208af412c444c993d98066bf3a5ba5db142af3e0e575eb2479157d82e7eb2a9297758e1601acc8e271bde879fd431b4818d85211b291a16a9b3defbceb9957eb6cc33695d6e9a34355dce8b998831b3cf58345376205a79fdbd0d7be76f0afb31d3a3091e5664397df5a7ab39d2245f23e94c869f7f7bee69172277c4dad44b9127a8ffef8d1bb67a3d69d93c506ae81ae2d39d9616292bc9b69f14e8987fbee05703c46c44a9b91db6cb7de60a3f0eb68c9842e154f260ec5ec8ae7cbb8a8fac933d4b160ca4a608d049fe95e6b5e3dd46eaa16f4aa9e2528af73bd43dd079d4d9451d30c565d05661d75bdb51dd473d1f8fbb3b8fa9e26b7de63fb683a7dae270d7875cfdefc253ecb3307263b501592e66dd399596fb4245678b8370d47f15762808523abe23136bcad61e9533c6fb29cb219e57c4388efcb975b60a27472ca05a13814e4b980bc7c65fa65d560aa36dbf4fba91a004cf2fd7006934ddd7e2a7a699483728263108dde1597fda6ff486555717e0a8431606a3c8ec29e11070b0ae6bd7a1dec32e56506a87c8114d6e1659c145155d8856cc2e25faddee3a82ff33e618ad787565dac290e90771f5296bfffbd1609bf66897df1c3ef35d1725db0e40a9600b66e21283f68d19e3de1606d99313a8e2aebf47cc42d4f663fb06a35d6a6ee0765d02cb3538bbf568f547dc14f3b5c7ede3d41c67abd6b095e29ca5831649a0627a6b96f4f7525385ecf697d19eeffc208017813276b8ee5f293f4a4812c7efe6862ce6ddd799b1b61726940332e0ecc738acddd4003b37f6dc38edb3c3e034e310b871be9ed7fbb0723957be504265ae0c41ad73406ba19fb194c489f5a70a7866164b801c8cc73add3d139c8d336a8655bc163a1ce8c605096be8042bc07d0031e30e1bae450e81b3192cd8fbc49a82e55fd60890e81ee1e1ab0e1b67c5e3be009768170beae156c765399dff53973cf477b5bba68051a1756a891f30581a2b0e8a7bae8c950c957408b13907932e6e0ed6381957f15169a249aa9442a0f19d8b693317bcbd148fd97cfcd5b438e49240448e09960919ee6e07fbbd18b09bd5deff64f17a99cb9937f2b160aac8b06c7387a9ffc82648a9f0378988c410523156cd5b12d97c9d173e55121463483174c7ea665b0423768221e602f3032f78235fad841c0fbf2553185b5c89d11b20022948cb28241c6d91708d680aaab34bdf13633660fccd71c510b6a433913e99b34b1e85bb9e2243ad96bd4c1c14fb5048e206cda0e11463b4463eb7e10f3a6ea3734b1b62181e202c50587baff767dc82b7477bd99524fa565af354fa5d7f684eafd1e100b52b8c7cba08bd9001d0b1340fb843debefb374cb15949e5ae16f413586e09ea2b33962277d26c356e626f93b8c93a1925bba4fea4b6c4e54023a60d083271072aa65c8ba00493a11b2ab39cba5cbb9e9101c7c0e6067ae0712d72b0646bf8faf1a794f7393cf638cb0b433984b49bc8d663eb860a12d5a0d5ca98721581326458423c881507bba5aa9d56030b709419dab12bcebe6b24630929764ed53fb59994ca2328735cc1a10b24a80afb4498e09aa5dc118cb6240edcfff9cf0b96ce737f35415613f6cc590cb77affef4ec757790efb27e63853aecbd39daa45cbc38793d13ffd38ddc2dd01707489747ece55d7027fa00b962f4ecd75f4073a037ff78b42f274420b08156c45d3fc90d35e011ed1d93fe6d244051b5be489155b7ca708653b93f7305f38d785f88d90df9c18d241fce531d2615a3e9348556e1b191b3b32cc7e103194963b3d5a5e787d13d5231fbcdd9142a4d62448ffcda5dabc742f032b8f866517ee91351ad8debab1dcfb91c7bbb4313ff2c1f786cafaba0e3d5e50474ed1cea5fa55ed534d5d662029ce804037179e2c4879ba6d7226492b565939557a23552384734a317b501b835d271435d9129dbf8719f60095304d1770c158c8ddd9d327da4ac353a7b2df71f42f01caabda22d123872703a4ae0b562b85f20fdba405499b5b48f1050b877c703e71728b387b9c3fc738913e9c491b7da7053e3c38625c7283973b8432cde59c8db0a702f6c6b61291a6d009ff9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
  </entry>
  
</feed>
