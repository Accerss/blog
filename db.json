{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/click.js","path":"js/click.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/my/mouse.styl","path":"css/my/mouse.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/links.yml","hash":"c812a7c3dc7ad187a12b7a7a72a23dfd4243cf10","modified":1664372369077},{"_id":"source/about/index.md","hash":"7ad7d03b2b74090cba1f44305554e75ea2da38fe","modified":1663990104441},{"_id":"source/categories/index.md","hash":"b564abe0166daa87c3c660cb2c14da2aac7137ee","modified":1664076847707},{"_id":"source/changelog/index.md","hash":"9a1e50476e41ac873b9da9b5387de841180a2275","modified":1664076845974},{"_id":"source/links/index.md","hash":"d55f865776e4ba3c4ceb25cd261a72f738af02d9","modified":1664465315405},{"_id":"source/tags/index.md","hash":"155eed058c13866fe4a670edad91eb0755e487bd","modified":1664465315405},{"_id":"source/_posts/2022/09/git子模块.md","hash":"4f8527511768d0cf74f5f0ce2e1f81baae3ae3f4","modified":1664371501036},{"_id":"source/_posts/2022/09/hello-world.md","hash":"7a6ea440355cd9c73c0f87cab1cd9a52fc76e6b1","modified":1664465315400},{"_id":"source/_posts/2022/09/tow.md","hash":"cf801fe2f8dd0b2c99ffe1d6ed741b4194afa356","modified":1664031532532},{"_id":"source/_posts/2022/10/iot.md","hash":"773e4ac5b20dd9edf3affc03859fbb5138460223","modified":1664371538519},{"_id":"themes/keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1664030904428},{"_id":"themes/keep/.npmignore","hash":"48eee50624f0ad4ed5b37ae81e95f5e5cb4c7f7f","modified":1664030904430},{"_id":"themes/keep/.gitignore","hash":"9f5eebec6128f0029691c28190673d959cb0f234","modified":1664030904429},{"_id":"themes/keep/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1664030904431},{"_id":"themes/keep/README.md","hash":"06ef53a5daecd42cfe7d653f9331e5ea66f1f590","modified":1664030904431},{"_id":"themes/keep/_config.yml","hash":"8b55eae3ac7e7fc2d508d161f32a765083d3a7a9","modified":1664030904432},{"_id":"themes/keep/README_zh-CN.md","hash":"d3bfa4f8720b73455d9e77f3e918de60daca01d7","modified":1664030904431},{"_id":"themes/keep/README_zh-TW.md","hash":"9913cf385c568a516055b27a9c944cc95263b3bc","modified":1664030904432},{"_id":"themes/keep/package.json","hash":"a3be00d629d52f6cadde16fea48a0f68c288da07","modified":1664030904444},{"_id":"themes/keep/.github/FUNDING.yml","hash":"04ebd5562487625d07c01767f7b68312772bf3db","modified":1664030904429},{"_id":"themes/keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1664030904433},{"_id":"themes/keep/languages/zh-CN.yml","hash":"f8b9da63093739b5b7a555e8d1aa0f30d38171dc","modified":1664030904433},{"_id":"themes/keep/languages/zh-TW.yml","hash":"428b304a3ad542072bb578ed312bb06794a654e1","modified":1664030904433},{"_id":"themes/keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1664030904440},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664030904441},{"_id":"themes/keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1664030904442},{"_id":"themes/keep/layout/article-content.ejs","hash":"9597d26784b62b0060950e8af2f71322013d3828","modified":1664030904441},{"_id":"themes/keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1664030904441},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664030904442},{"_id":"themes/keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1664030904442},{"_id":"themes/keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1664030904443},{"_id":"themes/keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1664030904442},{"_id":"themes/keep/layout/layout.ejs","hash":"3e52fca8ee1de0024dd293f322fbbd2a5b138956","modified":1664030904443},{"_id":"themes/keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1664030904443},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664030904443},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664030904444},{"_id":"themes/keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1664030904446},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1664030904434},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"fb04ac78cfee23b5f73b8721925e9c7fc168e2aa","modified":1664030904434},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1664030904434},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1664030904436},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"985ae950be0dd8c2b3506f40fbe0525e0799229f","modified":1664030904436},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1664030904437},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1664030904436},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"697eb90b6448d1dcecc0fc19f1033086697bb2f8","modified":1664030904437},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1664030904437},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1664030904437},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1664030904438},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1664030904438},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1664030904438},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1664030904439},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1664030904439},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1664030904440},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1664030904440},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1664030904439},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1664030904440},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1664030904444},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1664030904445},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1664030904445},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"9b149793aac46a1d7550ca2db49e215feffe1178","modified":1664030904445},{"_id":"themes/keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1664030904459},{"_id":"themes/keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1664030904459},{"_id":"themes/keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1664030904460},{"_id":"themes/keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1664030904460},{"_id":"themes/keep/source/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1664030904460},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1664030904449},{"_id":"themes/keep/source/css/style.styl","hash":"f0f0bdff6774b71b33b22b4452751c6a467f13fb","modified":1664030904459},{"_id":"themes/keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1664030904461},{"_id":"themes/keep/source/js/click.js","hash":"5856365b5fb0d442d0a7871ebbbb3602990ca0ec","modified":1664030904461},{"_id":"themes/keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1664030904461},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1664030904462},{"_id":"themes/keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1664030904462},{"_id":"themes/keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1664030904462},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1664030904462},{"_id":"themes/keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1664030904464},{"_id":"themes/keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1664030904464},{"_id":"themes/keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1664030904464},{"_id":"themes/keep/source/js/utils.js","hash":"356c23107a336b682a7101dfc856fa6e0e6cdb76","modified":1664030904465},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1664030904477},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1664030904480},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1664030904479},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1664030904480},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1664030904435},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1664030904435},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1664030904435},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1664030904436},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1664030904439},{"_id":"themes/keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1664030904446},{"_id":"themes/keep/source/css/common/basic.styl","hash":"2ecd4b0d469038a0753ad2de3eb2ba8c20f809db","modified":1664030904447},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1664030904448},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1664030904448},{"_id":"themes/keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1664030904449},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"8f62a171debaa09d653328d0c76e170f82351a40","modified":1664030904456},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"9af1e7fbc52aad0b4a47593813961a32a1d2b5c5","modified":1664030904456},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"28ea212b14e664d08de4ce93db1e0153e48a11ed","modified":1664030904457},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"254ca2715de67d5783adfae40723a7917b6d9f8a","modified":1664030904456},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"029336439c79ece32d25f8fee9dc018206fbcd1b","modified":1664030904457},{"_id":"themes/keep/source/css/layout/page.styl","hash":"7dda6b19e10b4c49bc79cc0ab0e1f262f5f2b1ac","modified":1664030904457},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"73af0b51aee119b2135dc8cd53cd3a3ad215fff6","modified":1664030904457},{"_id":"themes/keep/source/css/my/mouse.styl","hash":"9daa6e5ad453d14b4930d2091432e23ea36f77ce","modified":1664030904458},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1664030904463},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1664030904463},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1664030904447},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1664030904447},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1664030904448},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1664030904450},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1664030904450},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"8ca83a4fe1afbb15669becebcde3ed0e12ac07bb","modified":1664030904451},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"7e1c77d7c293d5583c431ca1bcec7eee2d83c10e","modified":1664030904452},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1664030904453},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"e724a19e0ae3d173ae33d31054381ad7a0df7453","modified":1664031085355},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1664030904453},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1664030904453},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"97768d3f95e8cf36fd3f783a5deb7e8fcaa5c67d","modified":1664030904454},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1664030904454},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1664030904455},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1664030904454},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"f1cec5eb066c13f17d0acc997790404d059fbd3f","modified":1664030904455},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"39d03031033aa3bb9d3a76fdb5056966334e9221","modified":1664030904455},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1664030904455},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1664030904451},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1664030904451},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1664030904452},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1664030904452},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1664030904476},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1664030904476},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1664030904491},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1664030904492},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1664030904467},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1664030904475},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1664030904478},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1664030904482},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1664030904490},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1664030904472},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1664030904488},{"_id":"source/_posts/2022/09/Git使用.md","hash":"9493e15a48c6f5e50d1dfb54fa95d829bb5e5a5c","modified":1664371429083},{"_id":"source/_posts/2022/09/Lambda表达式.md","hash":"cac02581346b65f8e36c2799f895a8c9442c9f6e","modified":1664465315397},{"_id":"source/_posts/2022/09/ROS入门教程.md","hash":"a41e9fd49ddc2ebefe95e4a0714358912e162388","modified":1664465315398},{"_id":"source/_posts/2022/09/边缘计算.md","hash":"afe0f274f828551b03fcd4c747a6ffea0dabf3f0","modified":1664465315401},{"_id":"themes/keep/source/images/avatar.png","hash":"89cc68415842475c97101441f8e09cc0466df56a","modified":1664356696468},{"_id":"themes/keep/source/images/favicon.png","hash":"fc743c812f414c060f53967d1301dd1532655894","modified":1664351183461},{"_id":"themes/keep/source/images/logo.png","hash":"2dcc2a490b517fc98d73dfc49394e4f9b112b8e3","modified":1664353510231}],"Category":[{"name":"Git","_id":"cl8gu5eqr0004a08faozq8ns3"},{"name":"World","_id":"cl8gu5eqw000aa08f8kfm53na"},{"name":"cate","_id":"cl8gu5eqx000ea08f1eqa9n49"},{"name":"物联网","_id":"cl8gu5er5000la08f3z3scuzj"},{"name":"常用工具","_id":"cl8mees4x00026gu77upah6ap"},{"name":"JAVA","_id":"cl8mees5200056gu7bqbrd73i"},{"name":"笔记","_id":"cl8mees55000b6gu7dis43uf1"},{"name":"基础知识","parent":"cl8mees5200056gu7bqbrd73i","_id":"cl8mees57000h6gu792mr5zd7"}],"Data":[{"_id":"links","data":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}],"Page":[{"title":"about","date":"2022-09-15T11:28:16.000Z","comment":true,"_content":"# 💡About me： 添加主题\n\n| **目标**  | 您想要什么样的想法？              |\n| ------- | ----------------------- |\n| **参与者** | @提及您自己和其他人              |\n| **相关**  | - 🔗 [插入一些文档或链接]() |\n\n## 灵感\n\n使用您点击“返回”时显示的工具栏来添加图片、视频等\n\n\n## 想法\n\n向团队提出一个问题，让事情顺利进行\n\n----------\n## 后续步骤\n\n- [ ] 打破陈规 @某人\n- [ ] 从待办到完成 @某人\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-09-15 19:28:16\ncomment: true\n---\n# 💡About me： 添加主题\n\n| **目标**  | 您想要什么样的想法？              |\n| ------- | ----------------------- |\n| **参与者** | @提及您自己和其他人              |\n| **相关**  | - 🔗 [插入一些文档或链接]() |\n\n## 灵感\n\n使用您点击“返回”时显示的工具栏来添加图片、视频等\n\n\n## 想法\n\n向团队提出一个问题，让事情顺利进行\n\n----------\n## 后续步骤\n\n- [ ] 打破陈规 @某人\n- [ ] 从待办到完成 @某人\n","updated":"2022-09-24T03:28:24.441Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl8gu5eqi0000a08fg88qcvds","content":"<h1 id=\"💡About-me：-添加主题\"><a href=\"#💡About-me：-添加主题\" class=\"headerlink\" title=\"💡About me： 添加主题\"></a>💡About me： 添加主题</h1><table>\n<thead>\n<tr>\n<th><strong>目标</strong></th>\n<th>您想要什么样的想法？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>参与者</strong></td>\n<td>@提及您自己和其他人</td>\n</tr>\n<tr>\n<td><strong>相关</strong></td>\n<td>- 🔗 <a href=\"\">插入一些文档或链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"灵感\"><a href=\"#灵感\" class=\"headerlink\" title=\"灵感\"></a>灵感</h2><p>使用您点击“返回”时显示的工具栏来添加图片、视频等</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>向团队提出一个问题，让事情顺利进行</p>\n<hr>\n<h2 id=\"后续步骤\"><a href=\"#后续步骤\" class=\"headerlink\" title=\"后续步骤\"></a>后续步骤</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 打破陈规 @某人</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从待办到完成 @某人</li>\n</ul>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"}]}},"excerpt":"","more":"<h1 id=\"💡About-me：-添加主题\"><a href=\"#💡About-me：-添加主题\" class=\"headerlink\" title=\"💡About me： 添加主题\"></a>💡About me： 添加主题</h1><table>\n<thead>\n<tr>\n<th><strong>目标</strong></th>\n<th>您想要什么样的想法？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>参与者</strong></td>\n<td>@提及您自己和其他人</td>\n</tr>\n<tr>\n<td><strong>相关</strong></td>\n<td>- 🔗 <a href=\"\">插入一些文档或链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"灵感\"><a href=\"#灵感\" class=\"headerlink\" title=\"灵感\"></a>灵感</h2><p>使用您点击“返回”时显示的工具栏来添加图片、视频等</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>向团队提出一个问题，让事情顺利进行</p>\n<hr>\n<h2 id=\"后续步骤\"><a href=\"#后续步骤\" class=\"headerlink\" title=\"后续步骤\"></a>后续步骤</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 打破陈规 @某人</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从待办到完成 @某人</li>\n</ul>\n"},{"title":"categories","date":"2022-09-19T06:59:53.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-09-19 14:59:53\n---\n","updated":"2022-09-25T03:34:07.707Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl8gu5eqo0002a08fhdjicowk","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"}]}},"excerpt":"","more":""},{"title":"更新日志","date":"2022-09-15T11:30:07.000Z","comment":true,"_content":"# 🕘 更新日志 添加事件名称\n\n# 2022-09-02\n\n****\n## 更新内容\n\n@提及您自己并添加其他人\n\n\n## 议程\n- 会议议程\n\n\n## 讨论\n- 我们实际讨论的内容\n\n\n## 操作项目\n\n- [ ] 我们来完成这项任务 @某人","source":"changelog/index.md","raw":"---\ntitle: 更新日志\ndate: 2022-09-15 19:30:07\ncomment: true\n---\n# 🕘 更新日志 添加事件名称\n\n# 2022-09-02\n\n****\n## 更新内容\n\n@提及您自己并添加其他人\n\n\n## 议程\n- 会议议程\n\n\n## 讨论\n- 我们实际讨论的内容\n\n\n## 操作项目\n\n- [ ] 我们来完成这项任务 @某人","updated":"2022-09-25T03:34:05.974Z","path":"changelog/index.html","comments":1,"layout":"page","_id":"cl8gu5eqt0006a08fe2pyg3zz","content":"<h1 id=\"🕘-更新日志-添加事件名称\"><a href=\"#🕘-更新日志-添加事件名称\" class=\"headerlink\" title=\"🕘 更新日志 添加事件名称\"></a>🕘 更新日志 添加事件名称</h1><h1 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h1><hr>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><p>@提及您自己并添加其他人</p>\n<h2 id=\"议程\"><a href=\"#议程\" class=\"headerlink\" title=\"议程\"></a>议程</h2><ul>\n<li>会议议程</li>\n</ul>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><ul>\n<li>我们实际讨论的内容</li>\n</ul>\n<h2 id=\"操作项目\"><a href=\"#操作项目\" class=\"headerlink\" title=\"操作项目\"></a>操作项目</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 我们来完成这项任务 @某人</li>\n</ul>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"}]}},"excerpt":"","more":"<h1 id=\"🕘-更新日志-添加事件名称\"><a href=\"#🕘-更新日志-添加事件名称\" class=\"headerlink\" title=\"🕘 更新日志 添加事件名称\"></a>🕘 更新日志 添加事件名称</h1><h1 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h1><hr>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><p>@提及您自己并添加其他人</p>\n<h2 id=\"议程\"><a href=\"#议程\" class=\"headerlink\" title=\"议程\"></a>议程</h2><ul>\n<li>会议议程</li>\n</ul>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><ul>\n<li>我们实际讨论的内容</li>\n</ul>\n<h2 id=\"操作项目\"><a href=\"#操作项目\" class=\"headerlink\" title=\"操作项目\"></a>操作项目</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 我们来完成这项任务 @某人</li>\n</ul>\n"},{"title":"tags","date":"2022-09-15T11:29:45.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-09-15 19:29:45\n---\n","updated":"2022-09-29T15:28:35.405Z","path":"tags/index.html","_id":"cl8gu5equ0008a08ff0in86le","comments":1,"layout":"page","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""},{"title":"links","date":"2022-09-15T05:16:24.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-09-15 13:16:24\n---\n","updated":"2022-09-29T15:28:35.405Z","path":"links/index.html","_id":"cl8gu5eqv0009a08f65ind5t0","comments":1,"layout":"page","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Git子模块","date":"2022-09-24T11:25:51.000Z","_content":"# [Git 子模块](https://www.cnblogs.com/renjt1991/p/15925259.html)\n\nGit 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n示例代码使用的值如下：\n\n- 主仓库路径：github.com/base.git\n- 子模块仓库：github.com/common.git\n- 子模块在主仓库路径：src/common\n\n### 子模块操作\n\n#### 添加子模块\n\n在主仓库执行 `git submoudle add <url> <repo_name>`，执行后会在主仓库下创建一个 `repo_name` 目录存放子项目；并会创建一个 `.git` 隐藏文件\n \n```bash\ngit submoudle add github.com/common.git src/common\n```\n\n添加子模块后，主仓库会增加一个 `.gitmodules` 文件，记录子模块信息\n\n```properties\n# .gitmodules 文件\n[submodule \"src/common\"]\n\tpath = src/common\n\turl = github.com/common.git\n```\n\n#### 查看子模块\n\n```bash\ngit submodule\n# 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)\n```\n\n#### 初始化子模块配置\n\n```bash\ngit submodule init\n```\n\n#### 更新子模块\n\n```bash\n# 更新全部子模块\ngit submodule update\n# 更新指定子模块\ngit submodule update src/common\n\n# 递归更新子模块\ngit submodule update --init --recursive\n\n# 更新子模块到服务器最新版本\ngit submodule update --remote\n```\n\n#### 提交子模块代码\n\n子模块的默认分支不是 **master** ，进入目录后需要先切换分支，再修改提交代码\n\n```bash\ncd src/common\ngit checkout master\ngit add .\ngit commit -m \"update\"\ngit push\n```\n\n#### 删除子模块\n\n执行命令后，会删除 `src/common` 文件夹和修改 `.gitmodules` 文件\n\n```bash\ngit rm src/common\ngit commit -m \"remove submodule\"\ngit push\n```\n\n本地子模块相关文件（非必须删除）：\n\n- 删除 `.git/config` 文件中相关配置\n- 删除 `.git/modules/src/common` 文件夹\n\n### 克隆包含子模块的主项目\n\n在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件\n\n```bash\ngit clone github.com/base.git\ncd base\ngit submodule init\ngit submodule update\n```","source":"_posts/2022/09/git子模块.md","raw":"---\ntitle: Git子模块\ndate: 2022-09-24 19:25:51\ntags: [Github]\ncategories: [常用工具]\n---\n# [Git 子模块](https://www.cnblogs.com/renjt1991/p/15925259.html)\n\nGit 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n示例代码使用的值如下：\n\n- 主仓库路径：github.com/base.git\n- 子模块仓库：github.com/common.git\n- 子模块在主仓库路径：src/common\n\n### 子模块操作\n\n#### 添加子模块\n\n在主仓库执行 `git submoudle add <url> <repo_name>`，执行后会在主仓库下创建一个 `repo_name` 目录存放子项目；并会创建一个 `.git` 隐藏文件\n \n```bash\ngit submoudle add github.com/common.git src/common\n```\n\n添加子模块后，主仓库会增加一个 `.gitmodules` 文件，记录子模块信息\n\n```properties\n# .gitmodules 文件\n[submodule \"src/common\"]\n\tpath = src/common\n\turl = github.com/common.git\n```\n\n#### 查看子模块\n\n```bash\ngit submodule\n# 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)\n```\n\n#### 初始化子模块配置\n\n```bash\ngit submodule init\n```\n\n#### 更新子模块\n\n```bash\n# 更新全部子模块\ngit submodule update\n# 更新指定子模块\ngit submodule update src/common\n\n# 递归更新子模块\ngit submodule update --init --recursive\n\n# 更新子模块到服务器最新版本\ngit submodule update --remote\n```\n\n#### 提交子模块代码\n\n子模块的默认分支不是 **master** ，进入目录后需要先切换分支，再修改提交代码\n\n```bash\ncd src/common\ngit checkout master\ngit add .\ngit commit -m \"update\"\ngit push\n```\n\n#### 删除子模块\n\n执行命令后，会删除 `src/common` 文件夹和修改 `.gitmodules` 文件\n\n```bash\ngit rm src/common\ngit commit -m \"remove submodule\"\ngit push\n```\n\n本地子模块相关文件（非必须删除）：\n\n- 删除 `.git/config` 文件中相关配置\n- 删除 `.git/modules/src/common` 文件夹\n\n### 克隆包含子模块的主项目\n\n在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件\n\n```bash\ngit clone github.com/base.git\ncd base\ngit submodule init\ngit submodule update\n```","slug":"git子模块","published":1,"updated":"2022-09-28T13:25:01.036Z","_id":"cl8gu5eql0001a08f5y1l2r21","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Git-子模块\"><a href=\"#Git-子模块\" class=\"headerlink\" title=\"Git 子模块\"></a><a class=\"link\"   href=\"https://www.cnblogs.com/renjt1991/p/15925259.html\" >Git 子模块<i class=\"fas fa-external-link-alt\"></i></a></h1><p>Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>示例代码使用的值如下：</p>\n<ul>\n<li>主仓库路径：github.com&#x2F;base.git</li>\n<li>子模块仓库：github.com&#x2F;common.git</li>\n<li>子模块在主仓库路径：src&#x2F;common</li>\n</ul>\n<h3 id=\"子模块操作\"><a href=\"#子模块操作\" class=\"headerlink\" title=\"子模块操作\"></a>子模块操作</h3><h4 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h4><p>在主仓库执行 <code>git submoudle add &lt;url&gt; &lt;repo_name&gt;</code>，执行后会在主仓库下创建一个 <code>repo_name</code> 目录存放子项目；并会创建一个 <code>.git</code> 隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submoudle add github.com/common.git src/common</span><br></pre></td></tr></table></figure>\n\n<p>添加子模块后，主仓库会增加一个 <code>.gitmodules</code> 文件，记录子模块信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitmodules 文件</span></span><br><span class=\"line\"><span class=\"attr\">[submodule</span> <span class=\"string\">&quot;src/common&quot;]</span></span><br><span class=\"line\">\t<span class=\"attr\">path</span> = <span class=\"string\">src/common</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span> = <span class=\"string\">github.com/common.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看子模块\"><a href=\"#查看子模块\" class=\"headerlink\" title=\"查看子模块\"></a>查看子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule</span><br><span class=\"line\"><span class=\"comment\"># 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化子模块配置\"><a href=\"#初始化子模块配置\" class=\"headerlink\" title=\"初始化子模块配置\"></a>初始化子模块配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新子模块\"><a href=\"#更新子模块\" class=\"headerlink\" title=\"更新子模块\"></a>更新子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新全部子模块</span></span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"><span class=\"comment\"># 更新指定子模块</span></span><br><span class=\"line\">git submodule update src/common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归更新子模块</span></span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新子模块到服务器最新版本</span></span><br><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交子模块代码\"><a href=\"#提交子模块代码\" class=\"headerlink\" title=\"提交子模块代码\"></a>提交子模块代码</h4><p>子模块的默认分支不是 <strong>master</strong> ，进入目录后需要先切换分支，再修改提交代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/common</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除子模块\"><a href=\"#删除子模块\" class=\"headerlink\" title=\"删除子模块\"></a>删除子模块</h4><p>执行命令后，会删除 <code>src/common</code> 文件夹和修改 <code>.gitmodules</code> 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> src/common</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;remove submodule&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本地子模块相关文件（非必须删除）：</p>\n<ul>\n<li>删除 <code>.git/config</code> 文件中相关配置</li>\n<li>删除 <code>.git/modules/src/common</code> 文件夹</li>\n</ul>\n<h3 id=\"克隆包含子模块的主项目\"><a href=\"#克隆包含子模块的主项目\" class=\"headerlink\" title=\"克隆包含子模块的主项目\"></a>克隆包含子模块的主项目</h3><p>在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> github.com/base.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> base</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git-子模块\"><a href=\"#Git-子模块\" class=\"headerlink\" title=\"Git 子模块\"></a><a class=\"link\"   href=\"https://www.cnblogs.com/renjt1991/p/15925259.html\" >Git 子模块<i class=\"fas fa-external-link-alt\"></i></a></h1><p>Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>示例代码使用的值如下：</p>\n<ul>\n<li>主仓库路径：github.com&#x2F;base.git</li>\n<li>子模块仓库：github.com&#x2F;common.git</li>\n<li>子模块在主仓库路径：src&#x2F;common</li>\n</ul>\n<h3 id=\"子模块操作\"><a href=\"#子模块操作\" class=\"headerlink\" title=\"子模块操作\"></a>子模块操作</h3><h4 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h4><p>在主仓库执行 <code>git submoudle add &lt;url&gt; &lt;repo_name&gt;</code>，执行后会在主仓库下创建一个 <code>repo_name</code> 目录存放子项目；并会创建一个 <code>.git</code> 隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submoudle add github.com/common.git src/common</span><br></pre></td></tr></table></figure>\n\n<p>添加子模块后，主仓库会增加一个 <code>.gitmodules</code> 文件，记录子模块信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitmodules 文件</span></span><br><span class=\"line\"><span class=\"attr\">[submodule</span> <span class=\"string\">&quot;src/common&quot;]</span></span><br><span class=\"line\">\t<span class=\"attr\">path</span> = <span class=\"string\">src/common</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span> = <span class=\"string\">github.com/common.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看子模块\"><a href=\"#查看子模块\" class=\"headerlink\" title=\"查看子模块\"></a>查看子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule</span><br><span class=\"line\"><span class=\"comment\"># 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化子模块配置\"><a href=\"#初始化子模块配置\" class=\"headerlink\" title=\"初始化子模块配置\"></a>初始化子模块配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新子模块\"><a href=\"#更新子模块\" class=\"headerlink\" title=\"更新子模块\"></a>更新子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新全部子模块</span></span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"><span class=\"comment\"># 更新指定子模块</span></span><br><span class=\"line\">git submodule update src/common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归更新子模块</span></span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新子模块到服务器最新版本</span></span><br><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交子模块代码\"><a href=\"#提交子模块代码\" class=\"headerlink\" title=\"提交子模块代码\"></a>提交子模块代码</h4><p>子模块的默认分支不是 <strong>master</strong> ，进入目录后需要先切换分支，再修改提交代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/common</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除子模块\"><a href=\"#删除子模块\" class=\"headerlink\" title=\"删除子模块\"></a>删除子模块</h4><p>执行命令后，会删除 <code>src/common</code> 文件夹和修改 <code>.gitmodules</code> 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> src/common</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;remove submodule&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本地子模块相关文件（非必须删除）：</p>\n<ul>\n<li>删除 <code>.git/config</code> 文件中相关配置</li>\n<li>删除 <code>.git/modules/src/common</code> 文件夹</li>\n</ul>\n<h3 id=\"克隆包含子模块的主项目\"><a href=\"#克隆包含子模块的主项目\" class=\"headerlink\" title=\"克隆包含子模块的主项目\"></a>克隆包含子模块的主项目</h3><p>在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> github.com/base.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> base</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2022-09-01T00:00:00.000Z","password":"hello","abstract":"这里有东西被加密了，需要输入密码查看哦。","message":"您好，这里需要密码。","wrong_pass_message":"抱歉，这个密码看着不太对，请再试试。","wrong_hash_message":"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。","sticky":999,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start \n\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n \nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/2022/09/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-09-1 08:00:00\ntags: \ncategories: \npassword: hello\nabstract: 这里有东西被加密了，需要输入密码查看哦。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\nsticky: 999\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start \n\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n \nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-09-29T15:28:35.400Z","_id":"cl8gu5eqp0003a08fftflfn8x","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，这个密码看着不太对，请再试试。\" data-whm=\"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"1c638b8773ee30d18874af37da14bd69bc55e44bb6265b85b5e8d24985279213\">10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c5dfa5eaa9327e991528303814267181d88bce7e663060c45eeef1911be608c8808e3a0bd1058bece5a8748c4fd5da7b9fe10276c80624ac0ab45c8b427740ad28e252f77ff2341342a2d02769b92253458c55ba07e46297cf056dee5b69303e9c91c8b122030e881dab5396fc41b88a1ae72431bf2e9754e77a7a6fe1b4bd9daf6debae3d867fdfcf71da5c95ede2f47f2eae5e76ac2b10b952ed5cb9f3695cb03838b45199ec1dfcb776c0bc57179407e845c7a44d7360ac99621418daed523435f012d54d14105d18e1db5b09f61e860a96880b4288957d4c90af1b6e005862625f0ed49104d5915bfe28edaa245bff7dc45843ee15eeeb3f1969f562fda376e40a4c8c02db75b28f0f6691053cf615a5d3b85e367947c5904c66facf5a5470d64e8cc3e898c97cf438acce98e80ec01786e018a8aa4b8fcdf3d08bb67f236a2eb43af76f148a70fa16bd6c6621d92e5ffad872634b10aae9705681735c82a362c4cbb90e62629836fb011f21c1661cbda352bfa3cd5daf39209e4ce60af71f58356b0ea3ca44d611bc117857f9701628c6ea51aae682e38e175c247c0dd663600834e890c5d59999d2533c021d6f404dc3fc96130a1e6b5c4380fae31c9c80fea684a90f69bd77f8c2853cc7ec9ade17473ac2545c8419173399f489737d12147d3a36438efbe9c7916e521704027a699eb56bc5a1132f44a9796e1b453def95b5064dd8326aa194761b15a0b546e03621685b0d2287592253d82ce811b54645cb0fc55f2746acf55b832c1cdc61433ba6c731a24c0eb581528ad396a9f9919cd59ecb454e7067e93bfb065e86d30f75accbb81abad48aed02aa6aa5ab28800c404d50f5c02e65363d5c093137c0b9578fd56a93f3b1e0948a27a307e19fd20c67e028f0225e6ac94a30d41a484eb7b06ba6e70f2f3f0c1aa1bea62a547410d0716a70a4515b0c117503445c5dc68da61ec296d38c9183bc09a0b993511db27156fb97d6f2599b4c5f80004b43adebdab0f265d9e56e862b2480b00f27a66a44e1db237497427cf6119fb05bb0e23c689b45c515bc138844f9b02c7437c0359c6cb6d44f3cf0aa10e86f62aa4009dd10db740335bc1a3ba3fe389ec4356b0618f6ef89adf739d64705a1840b5c4f258672f7937f9c7236f63d34c7baac0081cb1aac25cc363eca165ed17fb94ed9f5321f46b79ca34ba93bb1bd37d0d45a67b518d8235419924850820950e897ff8000303f529b86e93c5e2b5ec2a04ba22547288c88e5c9c7691cf8c4a508b94208b4a420468111884453bc53c81ec8ba3f44bf929cb91bfba36271fcd6db656f4367a8b23130ee85f135b783dbce1c74f3bd904a8d92a46769487cb9a312f3e6f738b2e9e02dce998e409d403daa947bfa32b0b0727bfc8af09c1b306b26fe755763a05d1bf51a867e667ac874fcbb3258b78760efe8f7c069b649e43346def779410404c5231aa36c0dcd1923f9731b54fdaaf244ca3696539b8f78a7abe0e29f7147be4df0484097c52b3374710730220052f956049e3e50bba1abe627332b003b70fd49d68f2046d71c70682de39e344716f806e9419b169febe3d623c4cbfbaee401d80ba8ac6208af412c444c993d98066bf3a5ba5db142af3e0e575eb2479157d82e7eb2a9297758e1601acc8e271bde879fd431b4818d85211b291a16a9b3defbceb9957eb6cc33695d6e9a34355dce8b998831b3cf58345376205a79fdbd0d7be76f0afb31d3a3091e5664397df5a7ab39d2245f23e94c869f7f7bee69172277c4dad44b9127a8ffef8d1bb67a3d69d93c506ae81ae2d39d9616292bc9b69f14e8987fbee05703c46c44a9b91db6cb7de60a3f0eb68c9842e154f260ec5ec8ae7cbb8a8fac933d4b160ca4a608d049fe95e6b5e3dd46eaa16f4aa9e2528af73bd43dd079d4d9451d30c565d05661d75bdb51dd473d1f8fbb3b8fa9e26b7de63fb683a7dae270d7875cfdefc253ecb3307263b501592e66dd399596fb4245678b8370d47f15762808523abe23136bcad61e9533c6fb29cb219e57c4388efcb975b60a27472ca05a13814e4b980bc7c65fa65d560aa36dbf4fba91a004cf2fd7006934ddd7e2a7a699483728263108dde1597fda6ff486555717e0a8431606a3c8ec29e11070b0ae6bd7a1dec32e56506a87c8114d6e1659c145155d8856cc2e25faddee3a82ff33e618ad787565dac290e90771f5296bfffbd1609bf66897df1c3ef35d1725db0e40a9600b66e21283f68d19e3de1606d99313a8e2aebf47cc42d4f663fb06a35d6a6ee0765d02cb3538bbf568f547dc14f3b5c7ede3d41c67abd6b095e29ca5831649a0627a6b96f4f7525385ecf697d19eeffc208017813276b8ee5f293f4a4812c7efe6862ce6ddd799b1b61726940332e0ecc738acddd4003b37f6dc38edb3c3e034e310b871be9ed7fbb0723957be504265ae0c41ad73406ba19fb194c489f5a70a7866164b801c8cc73add3d139c8d336a8655bc163a1ce8c605096be8042bc07d0031e30e1bae450e81b3192cd8fbc49a82e55fd60890e81ee1e1ab0e1b67c5e3be009768170beae156c765399dff53973cf477b5bba68051a1756a891f30581a2b0e8a7bae8c950c957408b13907932e6e0ed6381957f15169a249aa9442a0f19d8b693317bcbd148fd97cfcd5b438e49240448e09960919ee6e07fbbd18b09bd5deff64f17a99cb9937f2b160aac8b06c7387a9ffc82648a9f0378988c410523156cd5b12d97c9d173e55121463483174c7ea665b0423768221e602f3032f78235fad841c0fbf2553185b5c89d11b20022948cb28241c6d91708d680aaab34bdf13633660fccd71c510b6a433913e99b34b1e85bb9e2243ad96bd4c1c14fb5048e206cda0e11463b4463eb7e10f3a6ea3734b1b62181e202c50587baff767dc82b7477bd99524fa565af354fa5d7f684eafd1e100b52b8c7cba08bd9001d0b1340fb843debefb374cb15949e5ae16f413586e09ea2b33962277d26c356e626f93b8c93a1925bba4fea4b6c4e54023a60d083271072aa65c8ba00493a11b2ab39cba5cbb9e9101c7c0e6067ae0712d72b0646bf8faf1a794f7393cf638cb0b433984b49bc8d663eb860a12d5a0d5ca98721581326458423c881507bba5aa9d56030b709419dab12bcebe6b24630929764ed53fb59994ca2328735cc1a10b24a80afb4498e09aa5dc118cb6240edcfff9cf0b96ce737f35415613f6cc590cb77affef4ec757790efb27e63853aecbd39daa45cbc38793d13ffd38ddc2dd01707489747ece55d7027fa00b962f4ecd75f4073a037ff78b42f274420b08156c45d3fc90d35e011ed1d93fe6d244051b5be489155b7ca708653b93f7305f38d785f88d90df9c18d241fce531d2615a3e9348556e1b191b3b32cc7e103194963b3d5a5e787d13d5231fbcdd9142a4d62448ffcda5dabc742f032b8f866517ee91351ad8debab1dcfb91c7bbb4313ff2c1f786cafaba0e3d5e50474ed1cea5fa55ed534d5d662029ce804037179e2c4879ba6d7226492b565939557a23552384734a317b501b835d271435d9129dbf8719f60095304d1770c158c8ddd9d327da4ac353a7b2df71f42f01caabda22d123872703a4ae0b562b85f20fdba405499b5b48f1050b877c703e71728b387b9c3fc738913e9c491b7da7053e3c38625c7283973b8432cde59c8db0a702f6c6b61291a6d009ff9</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好，这里需要密码。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"这里有东西被加密了，需要输入密码查看哦。","more":"这里有东西被加密了，需要输入密码查看哦。","origin":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n","encrypt":true},{"title":"iot边缘计算","date":"2022-09-24T11:25:51.000Z","_content":"## 稳定可靠的通信技术\n\n### 有线通信技术\n\n优点：稳定性高，可靠性强\n\n缺点：受限于传输媒介\n\n以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网\n\nRS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1\n\nRS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn\n\nM-Bus：户用仪表总线，远程抄表，低成本组网\n\nPLC：电力线通信，表表->工业网关 \n\n### 无线通信技术\n\n2G,3G,4G：蜂窝移动通信\n\nBluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控\n\nWi-Fi：连接到无线局域网，速度快\n\nZigBee：低功耗局域网协议\t物体遮挡衰减厉害  \n\nZ-Wave：用于住宅。30-100m\t网络简单，速率较低\n\n### lpwa低功耗广域网\n\nSigFox：低功耗，ISM射频频段\n\nNB-lot：窄频网络，可部署在蜂窝网络 \n\nLoRa：开源MAC层协议\n\n![image-20220923194944959](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png)\n\n![image-20220923195011645](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png)\n\n## OceanConnect\n\n![image-20220923195209078](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png)\n\n统一接口，方便拓展\n\n### MQTT和HTTP\n\n消息队列遥测传输：Message Queuing Telemetry Transport\n\nIBM开发的基于TCP/IP的即时通讯协议\n\n采用订阅发布的模式，长连接方式\n\n优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低\n\n智慧家庭\n\nCoAP：Constrained Application Protocol\n\n专用于资源受限设备的通信，NB-lot/LoRa\n\n从http发展而来，采用请求响应\n\n最小4字节\n\n### 对比\n\n![image-20220923195746901](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png)\n\n物联网平台层次\n\n![image-20220923195812117](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png)\n\n接入无关，可靠性，安全性，弹性伸缩，能力开放\n\n![image-20220923200007426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png)\n\n设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap/HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理\n\n鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权\n\n规则引擎：规则绑定，满足条件，自动执行动作\n\nPortal：SP，OSS，Operation\n\n### 平台架构\n\n![image-20220923201228365](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png)\n\nIoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发\n\nDM Server：设备管理服务器，物联网管理和升级\n\nRule Engine：规则引擎，用户设定规则满足业务需求\n\nMongoDB：用户信息数据库\n\nCIG：云网关\n\n南向的终端设备可以通过CIG的协议适配连接平台\n\n平台通过API Server接入北向的iot应用服务器\n\n业务流程：\n\n![image-20220923201805426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png)\n\n### NB-iot\n\n是一项基于窄带的通信技术\n\nHSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息\n\nEPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关\n\n应用层：web界面","source":"_posts/2022/10/iot.md","raw":"---\ntitle: iot边缘计算\ndate: 2022-09-24 19:25:51\ntags: [边缘计算]\ncategories: [笔记]\n---\n## 稳定可靠的通信技术\n\n### 有线通信技术\n\n优点：稳定性高，可靠性强\n\n缺点：受限于传输媒介\n\n以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网\n\nRS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1\n\nRS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn\n\nM-Bus：户用仪表总线，远程抄表，低成本组网\n\nPLC：电力线通信，表表->工业网关 \n\n### 无线通信技术\n\n2G,3G,4G：蜂窝移动通信\n\nBluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控\n\nWi-Fi：连接到无线局域网，速度快\n\nZigBee：低功耗局域网协议\t物体遮挡衰减厉害  \n\nZ-Wave：用于住宅。30-100m\t网络简单，速率较低\n\n### lpwa低功耗广域网\n\nSigFox：低功耗，ISM射频频段\n\nNB-lot：窄频网络，可部署在蜂窝网络 \n\nLoRa：开源MAC层协议\n\n![image-20220923194944959](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png)\n\n![image-20220923195011645](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png)\n\n## OceanConnect\n\n![image-20220923195209078](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png)\n\n统一接口，方便拓展\n\n### MQTT和HTTP\n\n消息队列遥测传输：Message Queuing Telemetry Transport\n\nIBM开发的基于TCP/IP的即时通讯协议\n\n采用订阅发布的模式，长连接方式\n\n优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低\n\n智慧家庭\n\nCoAP：Constrained Application Protocol\n\n专用于资源受限设备的通信，NB-lot/LoRa\n\n从http发展而来，采用请求响应\n\n最小4字节\n\n### 对比\n\n![image-20220923195746901](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png)\n\n物联网平台层次\n\n![image-20220923195812117](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png)\n\n接入无关，可靠性，安全性，弹性伸缩，能力开放\n\n![image-20220923200007426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png)\n\n设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap/HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理\n\n鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权\n\n规则引擎：规则绑定，满足条件，自动执行动作\n\nPortal：SP，OSS，Operation\n\n### 平台架构\n\n![image-20220923201228365](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png)\n\nIoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发\n\nDM Server：设备管理服务器，物联网管理和升级\n\nRule Engine：规则引擎，用户设定规则满足业务需求\n\nMongoDB：用户信息数据库\n\nCIG：云网关\n\n南向的终端设备可以通过CIG的协议适配连接平台\n\n平台通过API Server接入北向的iot应用服务器\n\n业务流程：\n\n![image-20220923201805426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png)\n\n### NB-iot\n\n是一项基于窄带的通信技术\n\nHSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息\n\nEPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关\n\n应用层：web界面","slug":"iot","published":1,"updated":"2022-09-28T13:25:38.519Z","_id":"cl8gu5er4000ka08fhrsz15bd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"稳定可靠的通信技术\"><a href=\"#稳定可靠的通信技术\" class=\"headerlink\" title=\"稳定可靠的通信技术\"></a>稳定可靠的通信技术</h2><h3 id=\"有线通信技术\"><a href=\"#有线通信技术\" class=\"headerlink\" title=\"有线通信技术\"></a>有线通信技术</h3><p>优点：稳定性高，可靠性强</p>\n<p>缺点：受限于传输媒介</p>\n<p>以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网</p>\n<p>RS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1</p>\n<p>RS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn</p>\n<p>M-Bus：户用仪表总线，远程抄表，低成本组网</p>\n<p>PLC：电力线通信，表表-&gt;工业网关 </p>\n<h3 id=\"无线通信技术\"><a href=\"#无线通信技术\" class=\"headerlink\" title=\"无线通信技术\"></a>无线通信技术</h3><p>2G,3G,4G：蜂窝移动通信</p>\n<p>Bluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控</p>\n<p>Wi-Fi：连接到无线局域网，速度快</p>\n<p>ZigBee：低功耗局域网协议\t物体遮挡衰减厉害  </p>\n<p>Z-Wave：用于住宅。30-100m\t网络简单，速率较低</p>\n<h3 id=\"lpwa低功耗广域网\"><a href=\"#lpwa低功耗广域网\" class=\"headerlink\" title=\"lpwa低功耗广域网\"></a>lpwa低功耗广域网</h3><p>SigFox：低功耗，ISM射频频段</p>\n<p>NB-lot：窄频网络，可部署在蜂窝网络 </p>\n<p>LoRa：开源MAC层协议</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png\"\n                      alt=\"image-20220923194944959\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png\"\n                      alt=\"image-20220923195011645\"\n                ></p>\n<h2 id=\"OceanConnect\"><a href=\"#OceanConnect\" class=\"headerlink\" title=\"OceanConnect\"></a>OceanConnect</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png\"\n                      alt=\"image-20220923195209078\"\n                ></p>\n<p>统一接口，方便拓展</p>\n<h3 id=\"MQTT和HTTP\"><a href=\"#MQTT和HTTP\" class=\"headerlink\" title=\"MQTT和HTTP\"></a>MQTT和HTTP</h3><p>消息队列遥测传输：Message Queuing Telemetry Transport</p>\n<p>IBM开发的基于TCP&#x2F;IP的即时通讯协议</p>\n<p>采用订阅发布的模式，长连接方式</p>\n<p>优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低</p>\n<p>智慧家庭</p>\n<p>CoAP：Constrained Application Protocol</p>\n<p>专用于资源受限设备的通信，NB-lot&#x2F;LoRa</p>\n<p>从http发展而来，采用请求响应</p>\n<p>最小4字节</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png\"\n                      alt=\"image-20220923195746901\"\n                ></p>\n<p>物联网平台层次</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png\"\n                      alt=\"image-20220923195812117\"\n                ></p>\n<p>接入无关，可靠性，安全性，弹性伸缩，能力开放</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png\"\n                      alt=\"image-20220923200007426\"\n                ></p>\n<p>设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap&#x2F;HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理</p>\n<p>鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权</p>\n<p>规则引擎：规则绑定，满足条件，自动执行动作</p>\n<p>Portal：SP，OSS，Operation</p>\n<h3 id=\"平台架构\"><a href=\"#平台架构\" class=\"headerlink\" title=\"平台架构\"></a>平台架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png\"\n                      alt=\"image-20220923201228365\"\n                ></p>\n<p>IoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发</p>\n<p>DM Server：设备管理服务器，物联网管理和升级</p>\n<p>Rule Engine：规则引擎，用户设定规则满足业务需求</p>\n<p>MongoDB：用户信息数据库</p>\n<p>CIG：云网关</p>\n<p>南向的终端设备可以通过CIG的协议适配连接平台</p>\n<p>平台通过API Server接入北向的iot应用服务器</p>\n<p>业务流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png\"\n                      alt=\"image-20220923201805426\"\n                ></p>\n<h3 id=\"NB-iot\"><a href=\"#NB-iot\" class=\"headerlink\" title=\"NB-iot\"></a>NB-iot</h3><p>是一项基于窄带的通信技术</p>\n<p>HSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息</p>\n<p>EPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关</p>\n<p>应用层：web界面</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h2 id=\"稳定可靠的通信技术\"><a href=\"#稳定可靠的通信技术\" class=\"headerlink\" title=\"稳定可靠的通信技术\"></a>稳定可靠的通信技术</h2><h3 id=\"有线通信技术\"><a href=\"#有线通信技术\" class=\"headerlink\" title=\"有线通信技术\"></a>有线通信技术</h3><p>优点：稳定性高，可靠性强</p>\n<p>缺点：受限于传输媒介</p>\n<p>以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网</p>\n<p>RS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1</p>\n<p>RS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn</p>\n<p>M-Bus：户用仪表总线，远程抄表，低成本组网</p>\n<p>PLC：电力线通信，表表-&gt;工业网关 </p>\n<h3 id=\"无线通信技术\"><a href=\"#无线通信技术\" class=\"headerlink\" title=\"无线通信技术\"></a>无线通信技术</h3><p>2G,3G,4G：蜂窝移动通信</p>\n<p>Bluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控</p>\n<p>Wi-Fi：连接到无线局域网，速度快</p>\n<p>ZigBee：低功耗局域网协议\t物体遮挡衰减厉害  </p>\n<p>Z-Wave：用于住宅。30-100m\t网络简单，速率较低</p>\n<h3 id=\"lpwa低功耗广域网\"><a href=\"#lpwa低功耗广域网\" class=\"headerlink\" title=\"lpwa低功耗广域网\"></a>lpwa低功耗广域网</h3><p>SigFox：低功耗，ISM射频频段</p>\n<p>NB-lot：窄频网络，可部署在蜂窝网络 </p>\n<p>LoRa：开源MAC层协议</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png\"\n                      alt=\"image-20220923194944959\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png\"\n                      alt=\"image-20220923195011645\"\n                ></p>\n<h2 id=\"OceanConnect\"><a href=\"#OceanConnect\" class=\"headerlink\" title=\"OceanConnect\"></a>OceanConnect</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png\"\n                      alt=\"image-20220923195209078\"\n                ></p>\n<p>统一接口，方便拓展</p>\n<h3 id=\"MQTT和HTTP\"><a href=\"#MQTT和HTTP\" class=\"headerlink\" title=\"MQTT和HTTP\"></a>MQTT和HTTP</h3><p>消息队列遥测传输：Message Queuing Telemetry Transport</p>\n<p>IBM开发的基于TCP&#x2F;IP的即时通讯协议</p>\n<p>采用订阅发布的模式，长连接方式</p>\n<p>优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低</p>\n<p>智慧家庭</p>\n<p>CoAP：Constrained Application Protocol</p>\n<p>专用于资源受限设备的通信，NB-lot&#x2F;LoRa</p>\n<p>从http发展而来，采用请求响应</p>\n<p>最小4字节</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png\"\n                      alt=\"image-20220923195746901\"\n                ></p>\n<p>物联网平台层次</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png\"\n                      alt=\"image-20220923195812117\"\n                ></p>\n<p>接入无关，可靠性，安全性，弹性伸缩，能力开放</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png\"\n                      alt=\"image-20220923200007426\"\n                ></p>\n<p>设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap&#x2F;HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理</p>\n<p>鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权</p>\n<p>规则引擎：规则绑定，满足条件，自动执行动作</p>\n<p>Portal：SP，OSS，Operation</p>\n<h3 id=\"平台架构\"><a href=\"#平台架构\" class=\"headerlink\" title=\"平台架构\"></a>平台架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png\"\n                      alt=\"image-20220923201228365\"\n                ></p>\n<p>IoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发</p>\n<p>DM Server：设备管理服务器，物联网管理和升级</p>\n<p>Rule Engine：规则引擎，用户设定规则满足业务需求</p>\n<p>MongoDB：用户信息数据库</p>\n<p>CIG：云网关</p>\n<p>南向的终端设备可以通过CIG的协议适配连接平台</p>\n<p>平台通过API Server接入北向的iot应用服务器</p>\n<p>业务流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png\"\n                      alt=\"image-20220923201805426\"\n                ></p>\n<h3 id=\"NB-iot\"><a href=\"#NB-iot\" class=\"headerlink\" title=\"NB-iot\"></a>NB-iot</h3><p>是一项基于窄带的通信技术</p>\n<p>HSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息</p>\n<p>EPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关</p>\n<p>应用层：web界面</p>\n"},{"title":"Git使用","date":"2022-09-14T13:55:14.000Z","_content":"# Git使用\n**Git Bash**：Unix与Linux风格的命令行，使用最多，推荐最多\n**Git CMD**：Windows风格的命令行\n**Git GUI**：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令\n所有的配置文件，其实都保存在本地！\n查看配置 git config -l\n\n```\n#查看系统config\ngit config --system --list\n　　\n#查看当前用户（global）配置\ngit config --global  --lis\n```\n \n## 三个区域\nGit本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：\n![图片](https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png)\n**Workspace**：工作区，就是你平时存放项目代码的地方\n\n**Index / Stage**：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n\n**Repository**：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n\n**Remote**：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换","source":"_posts/2022/09/Git使用.md","raw":"---\ntitle: Git使用\ndate: 2022-09-14 21:55:14\ntags: [Github]\ncategories: [常用工具]\n---\n# Git使用\n**Git Bash**：Unix与Linux风格的命令行，使用最多，推荐最多\n**Git CMD**：Windows风格的命令行\n**Git GUI**：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令\n所有的配置文件，其实都保存在本地！\n查看配置 git config -l\n\n```\n#查看系统config\ngit config --system --list\n　　\n#查看当前用户（global）配置\ngit config --global  --lis\n```\n \n## 三个区域\nGit本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：\n![图片](https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png)\n**Workspace**：工作区，就是你平时存放项目代码的地方\n\n**Index / Stage**：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n\n**Repository**：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n\n**Remote**：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换","slug":"Git使用","published":1,"updated":"2022-09-28T13:23:49.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8mees4t00006gu7ff2v5ozd","content":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br><strong>Git CMD</strong>：Windows风格的命令行<br><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看系统config</span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\">　　</span><br><span class=\"line\">#查看当前用户（global）配置</span><br><span class=\"line\">git config --global  --lis</span><br></pre></td></tr></table></figure>\n<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png\"\n                      alt=\"图片\"\n                ><br><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</p>\n<p><strong>Index &#x2F; Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p>\n<p><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>\n<p><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br><strong>Git CMD</strong>：Windows风格的命令行<br><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看系统config</span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\">　　</span><br><span class=\"line\">#查看当前用户（global）配置</span><br><span class=\"line\">git config --global  --lis</span><br></pre></td></tr></table></figure>\n<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png\"\n                      alt=\"图片\"\n                ><br><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</p>\n<p><strong>Index &#x2F; Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p>\n<p><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>\n<p><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>\n"},{"title":"Lambda表达式","date":"2022-09-28T13:07:45.000Z","_content":"# Lambda表达式\n\n💛[原文地址](https://www.cnblogs.com/haixiang/p/11029639.html)，转载请注明出处!\n\n### Lambda简介\n\nLambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。\n\nJDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。\n\n### 对接口的要求\n\n虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。**Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法**\n\njdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。\n\n### @FunctionalInterface\n\n修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。\n\n### Lambda 基础语法\n\n我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。\n\n```java\n/**多参数无返回*/\n@FunctionalInterface\npublic interface NoReturnMultiParam {\n    void method(int a, int b);\n}\n\n/**无参无返回值*/\n@FunctionalInterface\npublic interface NoReturnNoParam {\n    void method();\n}\n\n/**一个参数无返回*/\n@FunctionalInterface\npublic interface NoReturnOneParam {\n    void method(int a);\n}\n\n/**多个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnMultiParam {\n    int method(int a, int b);\n}\n\n/*** 无参有返回*/\n@FunctionalInterface\npublic interface ReturnNoParam {\n    int method();\n}\n\n/**一个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnOneParam {\n    int method(int a);\n}\n```\n\n语法形式为 () -> {}，其中 () 用来描述参数列表，{} 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test1 {\n    public static void main(String[] args) {\n\n        //无参无返回\n        NoReturnNoParam noReturnNoParam = () -> {\n            System.out.println(\"NoReturnNoParam\");\n        };\n        noReturnNoParam.method();\n\n        //一个参数无返回\n        NoReturnOneParam noReturnOneParam = (int a) -> {\n            System.out.println(\"NoReturnOneParam param:\" + a);\n        };\n        noReturnOneParam.method(6);\n\n        //多个参数无返回\n        NoReturnMultiParam noReturnMultiParam = (int a, int b) -> {\n            System.out.println(\"NoReturnMultiParam param:\" + \"{\" + a +\",\" + + b +\"}\");\n        };\n        noReturnMultiParam.method(6, 8);\n\n        //无参有返回值\n        ReturnNoParam returnNoParam = () -> {\n            System.out.print(\"ReturnNoParam\");\n            return 1;\n        };\n\n        int res = returnNoParam.method();\n        System.out.println(\"return:\" + res);\n\n        //一个参数有返回值\n        ReturnOneParam returnOneParam = (int a) -> {\n            System.out.println(\"ReturnOneParam param:\" + a);\n            return 1;\n        };\n\n        int res2 = returnOneParam.method(6);\n        System.out.println(\"return:\" + res2);\n\n        //多个参数有返回值\n        ReturnMultiParam returnMultiParam = (int a, int b) -> {\n            System.out.println(\"ReturnMultiParam param:\" + \"{\" + a + \",\" + b +\"}\");\n            return 1;\n        };\n\n        int res3 = returnMultiParam.method(6, 8);\n        System.out.println(\"return:\" + res3);\n    }\n}\n```\n\n### Lambda 语法简化\n\n我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test2 {\n    public static void main(String[] args) {\n\n        //1.简化参数类型，可以不写参数类型，但是必须所有参数都不写\n        NoReturnMultiParam lamdba1 = (a, b) -> {\n            System.out.println(\"简化参数类型\");\n        };\n        lamdba1.method(1, 2);\n\n        //2.简化参数小括号，如果只有一个参数则可以省略参数小括号\n        NoReturnOneParam lambda2 = a -> {\n            System.out.println(\"简化参数小括号\");\n        };\n        lambda2.method(1);\n\n        //3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号\n        NoReturnNoParam lambda3 = () -> System.out.println(\"简化方法体大括号\");\n        lambda3.method();\n\n        //4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号\n        ReturnOneParam lambda4 = a -> a+3;\n        System.out.println(lambda4.method(5));\n\n        ReturnMultiParam lambda5 = (a, b) -> a+b;\n        System.out.println(lambda5.method(1, 1));\n    }\n}\n```\n\n### Lambda 表达式常用示例\n\n**lambda 表达式引用方法**\n\n有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。\n\n**语法**\n\n 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象\n\n```java\npublic class Exe1 {\n    public static void main(String[] args) {\n        ReturnOneParam lambda1 = a -> doubleNum(a);\n        System.out.println(lambda1.method(3));\n\n        //lambda2 引用了已经实现的 doubleNum 方法\n        ReturnOneParam lambda2 = Exe1::doubleNum;\n        System.out.println(lambda2.method(3));\n\n        Exe1 exe = new Exe1();\n\n        //lambda4 引用了已经实现的 addTwo 方法\n        ReturnOneParam lambda4 = exe::addTwo;\n        System.out.println(lambda4.method(2));\n    }\n\n    /**\n     * 要求\n     * 1.参数数量和类型要与接口中定义的一致\n     * 2.返回值类型要与接口中定义的一致\n     */\n    public static int doubleNum(int a) {\n        return a * 2;\n    }\n\n    public int addTwo(int a) {\n        return a + 2;\n    }\n}\n```\n\n**构造方法的引用**\n\n一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。\n\n```java\ninterface ItemCreatorBlankConstruct {\n    Item getItem();\n}\ninterface ItemCreatorParamContruct {\n    Item getItem(int id, String name, double price);\n}\n\npublic class Exe2 {\n    public static void main(String[] args) {\n        ItemCreatorBlankConstruct creator = () -> new Item();\n        Item item = creator.getItem();\n\n        ItemCreatorBlankConstruct creator2 = Item::new;\n        Item item2 = creator2.getItem();\n\n        ItemCreatorParamContruct creator3 = Item::new;\n        Item item3 = creator3.getItem(112, \"鼠标\", 135.99);\n    }\n}\n```\n\n**lambda 表达式创建线程**\n\n我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。\n\n```java\n  Thread t = new Thread(() -> {\n      for (int i = 0; i < 10; i++) {\n        System.out.println(2 + \":\" + i);\n      }\n    });\n  \tt.start();\n```\n\n**遍历集合**\n\n我们可以调用集合的 `public void forEach(Consumer<? super E> action)` 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。\n\n```java\n \t@FunctionalInterface\n    public interface Consumer<T> {\n        void accept(T t);\n        //....\n    }\n```\n\n```java\n\tArrayList<Integer> list = new ArrayList<>();\n    Collections.addAll(list, 1,2,3,4,5);\n    //lambda表达式 方法引用\n    list.forEach(System.out::println);\n\n    list.forEach(element -> {\n      if (element % 2 == 0) {\n        System.out.println(element);\n      }\n    });\n```\n\n**删除集合中的某个元素**\n\n我们通过`public boolean removeIf(Predicate<? super E> filter)`方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。\n\n```java\n\tArrayList<Item> items = new ArrayList<>();\n    items.add(new Item(11, \"小牙刷\", 12.05 ));\n    items.add(new Item(5, \"日本马桶盖\", 999.05 ));\n    items.add(new Item(7, \"格力空调\", 888.88 ));\n    items.add(new Item(17, \"肥皂\", 2.00 ));\n    items.add(new Item(9, \"冰箱\", 4200.00 ));\n\n    items.removeIf(ele -> ele.getId() == 7);\n\n    //通过 foreach 遍历，查看是否已经删除\n    items.forEach(System.out::println);\n```\n\n**集合内元素的排序**\n\n在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。\n\n```java\n    ArrayList<Item> list = new ArrayList<>();\n    list.add(new Item(13, \"背心\", 7.80));\n    list.add(new Item(11, \"半袖\", 37.80));\n    list.add(new Item(14, \"风衣\", 139.80));\n    list.add(new Item(12, \"秋裤\", 55.33));\n\n    /*\n            list.sort(new Comparator<Item>() {\n                @Override\n                public int compare(Item o1, Item o2) {\n                    return o1.getId()  - o2.getId();\n                }\n            });\n            */\n\n    list.sort((o1, o2) -> o1.getId() - o2.getId());\n\n    System.out.println(list);\n```\n\n### Lambda 表达式中的闭包问题\n\n这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。\n\n```java\nimport java.util.function.Consumer;\npublic class Main {\n    public static void main(String[] args) {\n\n        int num = 10;\n\n        Consumer<String> consumer = ele -> {\n            System.out.println(num);\n        };\n\n        //num = num + 2;\n        consumer.accept(\"hello\");\n    }\n}\n```\n\n","source":"_posts/2022/09/Lambda表达式.md","raw":"---\ntitle: Lambda表达式\ndate: 2022-09-28 21:07:45\ntags: [Lambda]  \ncategories: [JAVA,基础知识]\n---\n# Lambda表达式\n\n💛[原文地址](https://www.cnblogs.com/haixiang/p/11029639.html)，转载请注明出处!\n\n### Lambda简介\n\nLambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。\n\nJDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。\n\n### 对接口的要求\n\n虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。**Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法**\n\njdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。\n\n### @FunctionalInterface\n\n修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。\n\n### Lambda 基础语法\n\n我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。\n\n```java\n/**多参数无返回*/\n@FunctionalInterface\npublic interface NoReturnMultiParam {\n    void method(int a, int b);\n}\n\n/**无参无返回值*/\n@FunctionalInterface\npublic interface NoReturnNoParam {\n    void method();\n}\n\n/**一个参数无返回*/\n@FunctionalInterface\npublic interface NoReturnOneParam {\n    void method(int a);\n}\n\n/**多个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnMultiParam {\n    int method(int a, int b);\n}\n\n/*** 无参有返回*/\n@FunctionalInterface\npublic interface ReturnNoParam {\n    int method();\n}\n\n/**一个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnOneParam {\n    int method(int a);\n}\n```\n\n语法形式为 () -> {}，其中 () 用来描述参数列表，{} 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test1 {\n    public static void main(String[] args) {\n\n        //无参无返回\n        NoReturnNoParam noReturnNoParam = () -> {\n            System.out.println(\"NoReturnNoParam\");\n        };\n        noReturnNoParam.method();\n\n        //一个参数无返回\n        NoReturnOneParam noReturnOneParam = (int a) -> {\n            System.out.println(\"NoReturnOneParam param:\" + a);\n        };\n        noReturnOneParam.method(6);\n\n        //多个参数无返回\n        NoReturnMultiParam noReturnMultiParam = (int a, int b) -> {\n            System.out.println(\"NoReturnMultiParam param:\" + \"{\" + a +\",\" + + b +\"}\");\n        };\n        noReturnMultiParam.method(6, 8);\n\n        //无参有返回值\n        ReturnNoParam returnNoParam = () -> {\n            System.out.print(\"ReturnNoParam\");\n            return 1;\n        };\n\n        int res = returnNoParam.method();\n        System.out.println(\"return:\" + res);\n\n        //一个参数有返回值\n        ReturnOneParam returnOneParam = (int a) -> {\n            System.out.println(\"ReturnOneParam param:\" + a);\n            return 1;\n        };\n\n        int res2 = returnOneParam.method(6);\n        System.out.println(\"return:\" + res2);\n\n        //多个参数有返回值\n        ReturnMultiParam returnMultiParam = (int a, int b) -> {\n            System.out.println(\"ReturnMultiParam param:\" + \"{\" + a + \",\" + b +\"}\");\n            return 1;\n        };\n\n        int res3 = returnMultiParam.method(6, 8);\n        System.out.println(\"return:\" + res3);\n    }\n}\n```\n\n### Lambda 语法简化\n\n我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test2 {\n    public static void main(String[] args) {\n\n        //1.简化参数类型，可以不写参数类型，但是必须所有参数都不写\n        NoReturnMultiParam lamdba1 = (a, b) -> {\n            System.out.println(\"简化参数类型\");\n        };\n        lamdba1.method(1, 2);\n\n        //2.简化参数小括号，如果只有一个参数则可以省略参数小括号\n        NoReturnOneParam lambda2 = a -> {\n            System.out.println(\"简化参数小括号\");\n        };\n        lambda2.method(1);\n\n        //3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号\n        NoReturnNoParam lambda3 = () -> System.out.println(\"简化方法体大括号\");\n        lambda3.method();\n\n        //4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号\n        ReturnOneParam lambda4 = a -> a+3;\n        System.out.println(lambda4.method(5));\n\n        ReturnMultiParam lambda5 = (a, b) -> a+b;\n        System.out.println(lambda5.method(1, 1));\n    }\n}\n```\n\n### Lambda 表达式常用示例\n\n**lambda 表达式引用方法**\n\n有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。\n\n**语法**\n\n 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象\n\n```java\npublic class Exe1 {\n    public static void main(String[] args) {\n        ReturnOneParam lambda1 = a -> doubleNum(a);\n        System.out.println(lambda1.method(3));\n\n        //lambda2 引用了已经实现的 doubleNum 方法\n        ReturnOneParam lambda2 = Exe1::doubleNum;\n        System.out.println(lambda2.method(3));\n\n        Exe1 exe = new Exe1();\n\n        //lambda4 引用了已经实现的 addTwo 方法\n        ReturnOneParam lambda4 = exe::addTwo;\n        System.out.println(lambda4.method(2));\n    }\n\n    /**\n     * 要求\n     * 1.参数数量和类型要与接口中定义的一致\n     * 2.返回值类型要与接口中定义的一致\n     */\n    public static int doubleNum(int a) {\n        return a * 2;\n    }\n\n    public int addTwo(int a) {\n        return a + 2;\n    }\n}\n```\n\n**构造方法的引用**\n\n一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。\n\n```java\ninterface ItemCreatorBlankConstruct {\n    Item getItem();\n}\ninterface ItemCreatorParamContruct {\n    Item getItem(int id, String name, double price);\n}\n\npublic class Exe2 {\n    public static void main(String[] args) {\n        ItemCreatorBlankConstruct creator = () -> new Item();\n        Item item = creator.getItem();\n\n        ItemCreatorBlankConstruct creator2 = Item::new;\n        Item item2 = creator2.getItem();\n\n        ItemCreatorParamContruct creator3 = Item::new;\n        Item item3 = creator3.getItem(112, \"鼠标\", 135.99);\n    }\n}\n```\n\n**lambda 表达式创建线程**\n\n我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。\n\n```java\n  Thread t = new Thread(() -> {\n      for (int i = 0; i < 10; i++) {\n        System.out.println(2 + \":\" + i);\n      }\n    });\n  \tt.start();\n```\n\n**遍历集合**\n\n我们可以调用集合的 `public void forEach(Consumer<? super E> action)` 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。\n\n```java\n \t@FunctionalInterface\n    public interface Consumer<T> {\n        void accept(T t);\n        //....\n    }\n```\n\n```java\n\tArrayList<Integer> list = new ArrayList<>();\n    Collections.addAll(list, 1,2,3,4,5);\n    //lambda表达式 方法引用\n    list.forEach(System.out::println);\n\n    list.forEach(element -> {\n      if (element % 2 == 0) {\n        System.out.println(element);\n      }\n    });\n```\n\n**删除集合中的某个元素**\n\n我们通过`public boolean removeIf(Predicate<? super E> filter)`方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。\n\n```java\n\tArrayList<Item> items = new ArrayList<>();\n    items.add(new Item(11, \"小牙刷\", 12.05 ));\n    items.add(new Item(5, \"日本马桶盖\", 999.05 ));\n    items.add(new Item(7, \"格力空调\", 888.88 ));\n    items.add(new Item(17, \"肥皂\", 2.00 ));\n    items.add(new Item(9, \"冰箱\", 4200.00 ));\n\n    items.removeIf(ele -> ele.getId() == 7);\n\n    //通过 foreach 遍历，查看是否已经删除\n    items.forEach(System.out::println);\n```\n\n**集合内元素的排序**\n\n在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。\n\n```java\n    ArrayList<Item> list = new ArrayList<>();\n    list.add(new Item(13, \"背心\", 7.80));\n    list.add(new Item(11, \"半袖\", 37.80));\n    list.add(new Item(14, \"风衣\", 139.80));\n    list.add(new Item(12, \"秋裤\", 55.33));\n\n    /*\n            list.sort(new Comparator<Item>() {\n                @Override\n                public int compare(Item o1, Item o2) {\n                    return o1.getId()  - o2.getId();\n                }\n            });\n            */\n\n    list.sort((o1, o2) -> o1.getId() - o2.getId());\n\n    System.out.println(list);\n```\n\n### Lambda 表达式中的闭包问题\n\n这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。\n\n```java\nimport java.util.function.Consumer;\npublic class Main {\n    public static void main(String[] args) {\n\n        int num = 10;\n\n        Consumer<String> consumer = ele -> {\n            System.out.println(num);\n        };\n\n        //num = num + 2;\n        consumer.accept(\"hello\");\n    }\n}\n```\n\n","slug":"Lambda表达式","published":1,"updated":"2022-09-29T15:28:35.397Z","_id":"cl8mees4w00016gu78hcue39r","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>💛<a class=\"link\"   href=\"https://www.cnblogs.com/haixiang/p/11029639.html\" >原文地址<i class=\"fas fa-external-link-alt\"></i></a>，转载请注明出处!</p>\n<h3 id=\"Lambda简介\"><a href=\"#Lambda简介\" class=\"headerlink\" title=\"Lambda简介\"></a>Lambda简介</h3><p>Lambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>JDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。</p>\n<h3 id=\"对接口的要求\"><a href=\"#对接口的要求\" class=\"headerlink\" title=\"对接口的要求\"></a>对接口的要求</h3><p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。<strong>Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法</strong></p>\n<p>jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</p>\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p>\n<h3 id=\"Lambda-基础语法\"><a href=\"#Lambda-基础语法\" class=\"headerlink\" title=\"Lambda 基础语法\"></a>Lambda 基础语法</h3><p>我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**多参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**无参无返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** 无参有返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法形式为 () -&gt; {}，其中 () 用来描述参数列表，{} 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">noReturnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnNoParam&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnNoParam.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">noReturnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">noReturnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a +<span class=\"string\">&quot;,&quot;</span> + + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnNoParam</span> <span class=\"variable\">returnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;ReturnNoParam&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> returnNoParam.method();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">returnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res2</span> <span class=\"operator\">=</span> returnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">returnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a + <span class=\"string\">&quot;,&quot;</span> + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res3</span> <span class=\"operator\">=</span> returnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-语法简化\"><a href=\"#Lambda-语法简化\" class=\"headerlink\" title=\"Lambda 语法简化\"></a>Lambda 语法简化</h3><p>我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">lamdba1</span> <span class=\"operator\">=</span> (a, b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数类型&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lamdba1.method(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> a -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数小括号&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lambda2.method(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">lambda3</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;简化方法体大括号&quot;</span>);</span><br><span class=\"line\">        lambda3.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> a -&gt; a+<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">lambda5</span> <span class=\"operator\">=</span> (a, b) -&gt; a+b;</span><br><span class=\"line\">        System.out.println(lambda5.method(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式常用示例\"><a href=\"#Lambda-表达式常用示例\" class=\"headerlink\" title=\"Lambda 表达式常用示例\"></a>Lambda 表达式常用示例</h3><p><strong>lambda 表达式引用方法</strong></p>\n<p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p>\n<p><strong>语法</strong></p>\n<p> 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda1</span> <span class=\"operator\">=</span> a -&gt; doubleNum(a);</span><br><span class=\"line\">        System.out.println(lambda1.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> Exe1::doubleNum;</span><br><span class=\"line\">        System.out.println(lambda2.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Exe1</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exe1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> exe::addTwo;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 要求</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">doubleNum</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">addTwo</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构造方法的引用</strong></p>\n<p>一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorBlankConstruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorParamContruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">double</span> price)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator</span> <span class=\"operator\">=</span> () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>();</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> creator.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator2</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item2</span> <span class=\"operator\">=</span> creator2.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorParamContruct</span> <span class=\"variable\">creator3</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item3</span> <span class=\"operator\">=</span> creator3.getItem(<span class=\"number\">112</span>, <span class=\"string\">&quot;鼠标&quot;</span>, <span class=\"number\">135.99</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lambda 表达式创建线程</strong></p>\n<p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">2</span> + <span class=\"string\">&quot;:&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\tt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历集合</strong></p>\n<p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;T&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">      <span class=\"comment\">//....</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   Collections.addAll(list, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">   <span class=\"comment\">//lambda表达式 方法引用</span></span><br><span class=\"line\">   list.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   list.forEach(element -&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (element % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       System.out.println(element);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除集合中的某个元素</strong></p>\n<p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; items = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;小牙刷&quot;</span>, <span class=\"number\">12.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;日本马桶盖&quot;</span>, <span class=\"number\">999.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;格力空调&quot;</span>, <span class=\"number\">888.88</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">17</span>, <span class=\"string\">&quot;肥皂&quot;</span>, <span class=\"number\">2.00</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"number\">4200.00</span> ));</span><br><span class=\"line\"></span><br><span class=\"line\">   items.removeIf(ele -&gt; ele.getId() == <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class=\"line\">   items.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p><strong>集合内元素的排序</strong></p>\n<p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">13</span>, <span class=\"string\">&quot;背心&quot;</span>, <span class=\"number\">7.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;半袖&quot;</span>, <span class=\"number\">37.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">14</span>, <span class=\"string\">&quot;风衣&quot;</span>, <span class=\"number\">139.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">12</span>, <span class=\"string\">&quot;秋裤&quot;</span>, <span class=\"number\">55.33</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            @Override</span></span><br><span class=\"line\"><span class=\"comment\">            public int compare(Item o1, Item o2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return o1.getId()  - o2.getId();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式中的闭包问题\"><a href=\"#Lambda-表达式中的闭包问题\" class=\"headerlink\" title=\"Lambda 表达式中的闭包问题\"></a>Lambda 表达式中的闭包问题</h3><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//num = num + 2;</span></span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>💛<a class=\"link\"   href=\"https://www.cnblogs.com/haixiang/p/11029639.html\" >原文地址<i class=\"fas fa-external-link-alt\"></i></a>，转载请注明出处!</p>\n<h3 id=\"Lambda简介\"><a href=\"#Lambda简介\" class=\"headerlink\" title=\"Lambda简介\"></a>Lambda简介</h3><p>Lambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>JDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。</p>\n<h3 id=\"对接口的要求\"><a href=\"#对接口的要求\" class=\"headerlink\" title=\"对接口的要求\"></a>对接口的要求</h3><p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。<strong>Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法</strong></p>\n<p>jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</p>\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p>\n<h3 id=\"Lambda-基础语法\"><a href=\"#Lambda-基础语法\" class=\"headerlink\" title=\"Lambda 基础语法\"></a>Lambda 基础语法</h3><p>我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**多参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**无参无返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** 无参有返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法形式为 () -&gt; {}，其中 () 用来描述参数列表，{} 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">noReturnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnNoParam&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnNoParam.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">noReturnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">noReturnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a +<span class=\"string\">&quot;,&quot;</span> + + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnNoParam</span> <span class=\"variable\">returnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;ReturnNoParam&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> returnNoParam.method();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">returnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res2</span> <span class=\"operator\">=</span> returnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">returnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a + <span class=\"string\">&quot;,&quot;</span> + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res3</span> <span class=\"operator\">=</span> returnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-语法简化\"><a href=\"#Lambda-语法简化\" class=\"headerlink\" title=\"Lambda 语法简化\"></a>Lambda 语法简化</h3><p>我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">lamdba1</span> <span class=\"operator\">=</span> (a, b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数类型&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lamdba1.method(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> a -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数小括号&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lambda2.method(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">lambda3</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;简化方法体大括号&quot;</span>);</span><br><span class=\"line\">        lambda3.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> a -&gt; a+<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">lambda5</span> <span class=\"operator\">=</span> (a, b) -&gt; a+b;</span><br><span class=\"line\">        System.out.println(lambda5.method(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式常用示例\"><a href=\"#Lambda-表达式常用示例\" class=\"headerlink\" title=\"Lambda 表达式常用示例\"></a>Lambda 表达式常用示例</h3><p><strong>lambda 表达式引用方法</strong></p>\n<p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p>\n<p><strong>语法</strong></p>\n<p> 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda1</span> <span class=\"operator\">=</span> a -&gt; doubleNum(a);</span><br><span class=\"line\">        System.out.println(lambda1.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> Exe1::doubleNum;</span><br><span class=\"line\">        System.out.println(lambda2.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Exe1</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exe1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> exe::addTwo;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 要求</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">doubleNum</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">addTwo</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构造方法的引用</strong></p>\n<p>一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorBlankConstruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorParamContruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">double</span> price)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator</span> <span class=\"operator\">=</span> () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>();</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> creator.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator2</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item2</span> <span class=\"operator\">=</span> creator2.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorParamContruct</span> <span class=\"variable\">creator3</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item3</span> <span class=\"operator\">=</span> creator3.getItem(<span class=\"number\">112</span>, <span class=\"string\">&quot;鼠标&quot;</span>, <span class=\"number\">135.99</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lambda 表达式创建线程</strong></p>\n<p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">2</span> + <span class=\"string\">&quot;:&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\tt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历集合</strong></p>\n<p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;T&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">      <span class=\"comment\">//....</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   Collections.addAll(list, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">   <span class=\"comment\">//lambda表达式 方法引用</span></span><br><span class=\"line\">   list.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   list.forEach(element -&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (element % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       System.out.println(element);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除集合中的某个元素</strong></p>\n<p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; items = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;小牙刷&quot;</span>, <span class=\"number\">12.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;日本马桶盖&quot;</span>, <span class=\"number\">999.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;格力空调&quot;</span>, <span class=\"number\">888.88</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">17</span>, <span class=\"string\">&quot;肥皂&quot;</span>, <span class=\"number\">2.00</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"number\">4200.00</span> ));</span><br><span class=\"line\"></span><br><span class=\"line\">   items.removeIf(ele -&gt; ele.getId() == <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class=\"line\">   items.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p><strong>集合内元素的排序</strong></p>\n<p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">13</span>, <span class=\"string\">&quot;背心&quot;</span>, <span class=\"number\">7.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;半袖&quot;</span>, <span class=\"number\">37.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">14</span>, <span class=\"string\">&quot;风衣&quot;</span>, <span class=\"number\">139.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">12</span>, <span class=\"string\">&quot;秋裤&quot;</span>, <span class=\"number\">55.33</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            @Override</span></span><br><span class=\"line\"><span class=\"comment\">            public int compare(Item o1, Item o2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return o1.getId()  - o2.getId();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式中的闭包问题\"><a href=\"#Lambda-表达式中的闭包问题\" class=\"headerlink\" title=\"Lambda 表达式中的闭包问题\"></a>Lambda 表达式中的闭包问题</h3><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//num = num + 2;</span></span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"ROS入门教程","date":"2022-09-28T13:40:14.000Z","_content":"# ROS入门学习\n\n## 一、Ubuntu环境搭建\n\n**建议版本**：Ubuntu18.04 or Ubuntu16.04\n\n**安装方法**：虚拟机安装、硬盘安装（推荐）\n\n![image-20220928213527604](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png)\n\n### 方法一：虚拟机安装Ubuntu\n\n**1.虚拟机安装**：https://blog.csdn.net/hao5119266/article/details/89198275/\n\n**2.Ubuntu镜像下载**，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本\n\n官方下载链接（不推荐）：https://ubuntu.com/download\n\n中科大元：http://mirrors.ustc.edu.cn/ubuntu-releases/\n\n阿里云源：https://mirrors.aliyun.com/ubuntu-releases/\n\n北理工源：https://mirror.bit.edu.cn/ubuntu-releases/\n\n3.Ubuntu安装：https://blog.csdn.net/woshinsy/article/details/124150654\n\n### 方法二：硬盘安装Ubuntu（双系统)\n\n谨慎操作，最好有自己安装系统的经验！\n\n教程如下：https://blog.csdn.net/weixin_43091381/article/details/108522223##\n\n## 二、Linux基本命令\n\n**常用指令**：https://blog.csdn.net/qq_46416934/article/details/123190966\n\n命令大全：https://www.runoob.com/linux/linux-command-manual.html\n\n## 三、ROS安装\n\n安装教程https://blog.csdn.net/my_id_kt/article/details/123753771\n\n**注意**：根据Ubuntu版本安装指定版本的ROS\n\n## 四、ROS基础学习\n\n推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：\n\nhttps://www.bilibili.com/video/BV1zt411G7Vn?p=1\n\n**CSDN教程**：\n\nhttps://blog.csdn.net/mbdong/article/details/109310874\n\nhttps://blog.csdn.net/u011832219/category_10500120.html","source":"_posts/2022/09/ROS入门教程.md","raw":"---\ntitle: ROS入门教程\ndate: 2022-09-28 21:40:14\ntags: [ROS]\ncategories: [笔记]\n---\n# ROS入门学习\n\n## 一、Ubuntu环境搭建\n\n**建议版本**：Ubuntu18.04 or Ubuntu16.04\n\n**安装方法**：虚拟机安装、硬盘安装（推荐）\n\n![image-20220928213527604](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png)\n\n### 方法一：虚拟机安装Ubuntu\n\n**1.虚拟机安装**：https://blog.csdn.net/hao5119266/article/details/89198275/\n\n**2.Ubuntu镜像下载**，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本\n\n官方下载链接（不推荐）：https://ubuntu.com/download\n\n中科大元：http://mirrors.ustc.edu.cn/ubuntu-releases/\n\n阿里云源：https://mirrors.aliyun.com/ubuntu-releases/\n\n北理工源：https://mirror.bit.edu.cn/ubuntu-releases/\n\n3.Ubuntu安装：https://blog.csdn.net/woshinsy/article/details/124150654\n\n### 方法二：硬盘安装Ubuntu（双系统)\n\n谨慎操作，最好有自己安装系统的经验！\n\n教程如下：https://blog.csdn.net/weixin_43091381/article/details/108522223##\n\n## 二、Linux基本命令\n\n**常用指令**：https://blog.csdn.net/qq_46416934/article/details/123190966\n\n命令大全：https://www.runoob.com/linux/linux-command-manual.html\n\n## 三、ROS安装\n\n安装教程https://blog.csdn.net/my_id_kt/article/details/123753771\n\n**注意**：根据Ubuntu版本安装指定版本的ROS\n\n## 四、ROS基础学习\n\n推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：\n\nhttps://www.bilibili.com/video/BV1zt411G7Vn?p=1\n\n**CSDN教程**：\n\nhttps://blog.csdn.net/mbdong/article/details/109310874\n\nhttps://blog.csdn.net/u011832219/category_10500120.html","slug":"ROS入门教程","published":1,"updated":"2022-09-29T15:28:35.398Z","_id":"cl8mees4z00046gu74bs4fayp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ROS入门学习\"><a href=\"#ROS入门学习\" class=\"headerlink\" title=\"ROS入门学习\"></a>ROS入门学习</h1><h2 id=\"一、Ubuntu环境搭建\"><a href=\"#一、Ubuntu环境搭建\" class=\"headerlink\" title=\"一、Ubuntu环境搭建\"></a>一、Ubuntu环境搭建</h2><p><strong>建议版本</strong>：Ubuntu18.04 or Ubuntu16.04</p>\n<p><strong>安装方法</strong>：虚拟机安装、硬盘安装（推荐）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png\"\n                      alt=\"image-20220928213527604\"\n                ></p>\n<h3 id=\"方法一：虚拟机安装Ubuntu\"><a href=\"#方法一：虚拟机安装Ubuntu\" class=\"headerlink\" title=\"方法一：虚拟机安装Ubuntu\"></a>方法一：虚拟机安装Ubuntu</h3><p><strong>1.虚拟机安装</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/hao5119266/article/details/89198275/\" >https://blog.csdn.net/hao5119266/article/details/89198275/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>2.Ubuntu镜像下载</strong>，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本</p>\n<p>官方下载链接（不推荐）：<a class=\"link\"   href=\"https://ubuntu.com/download\" >https://ubuntu.com/download<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中科大元：<a class=\"link\"   href=\"http://mirrors.ustc.edu.cn/ubuntu-releases/\" >http://mirrors.ustc.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>阿里云源：<a class=\"link\"   href=\"https://mirrors.aliyun.com/ubuntu-releases/\" >https://mirrors.aliyun.com/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>北理工源：<a class=\"link\"   href=\"https://mirror.bit.edu.cn/ubuntu-releases/\" >https://mirror.bit.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>3.Ubuntu安装：<a class=\"link\"   href=\"https://blog.csdn.net/woshinsy/article/details/124150654\" >https://blog.csdn.net/woshinsy/article/details/124150654<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"方法二：硬盘安装Ubuntu（双系统\"><a href=\"#方法二：硬盘安装Ubuntu（双系统\" class=\"headerlink\" title=\"方法二：硬盘安装Ubuntu（双系统)\"></a>方法二：硬盘安装Ubuntu（双系统)</h3><p>谨慎操作，最好有自己安装系统的经验！</p>\n<p>教程如下：<a class=\"link\"   href=\"https://blog.csdn.net/weixin_43091381/article/details/108522223##\" >https://blog.csdn.net/weixin_43091381/article/details/108522223##<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"二、Linux基本命令\"><a href=\"#二、Linux基本命令\" class=\"headerlink\" title=\"二、Linux基本命令\"></a>二、Linux基本命令</h2><p><strong>常用指令</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/qq_46416934/article/details/123190966\" >https://blog.csdn.net/qq_46416934/article/details/123190966<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>命令大全：<a class=\"link\"   href=\"https://www.runoob.com/linux/linux-command-manual.html\" >https://www.runoob.com/linux/linux-command-manual.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"三、ROS安装\"><a href=\"#三、ROS安装\" class=\"headerlink\" title=\"三、ROS安装\"></a>三、ROS安装</h2><p>安装教程<a class=\"link\"   href=\"https://blog.csdn.net/my_id_kt/article/details/123753771\" >https://blog.csdn.net/my_id_kt/article/details/123753771<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>注意</strong>：根据Ubuntu版本安装指定版本的ROS</p>\n<h2 id=\"四、ROS基础学习\"><a href=\"#四、ROS基础学习\" class=\"headerlink\" title=\"四、ROS基础学习\"></a>四、ROS基础学习</h2><p>推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：</p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1zt411G7Vn?p=1\" >https://www.bilibili.com/video/BV1zt411G7Vn?p=1<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>CSDN教程</strong>：</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/mbdong/article/details/109310874\" >https://blog.csdn.net/mbdong/article/details/109310874<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/u011832219/category_10500120.html\" >https://blog.csdn.net/u011832219/category_10500120.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"ROS入门学习\"><a href=\"#ROS入门学习\" class=\"headerlink\" title=\"ROS入门学习\"></a>ROS入门学习</h1><h2 id=\"一、Ubuntu环境搭建\"><a href=\"#一、Ubuntu环境搭建\" class=\"headerlink\" title=\"一、Ubuntu环境搭建\"></a>一、Ubuntu环境搭建</h2><p><strong>建议版本</strong>：Ubuntu18.04 or Ubuntu16.04</p>\n<p><strong>安装方法</strong>：虚拟机安装、硬盘安装（推荐）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png\"\n                      alt=\"image-20220928213527604\"\n                ></p>\n<h3 id=\"方法一：虚拟机安装Ubuntu\"><a href=\"#方法一：虚拟机安装Ubuntu\" class=\"headerlink\" title=\"方法一：虚拟机安装Ubuntu\"></a>方法一：虚拟机安装Ubuntu</h3><p><strong>1.虚拟机安装</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/hao5119266/article/details/89198275/\" >https://blog.csdn.net/hao5119266/article/details/89198275/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>2.Ubuntu镜像下载</strong>，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本</p>\n<p>官方下载链接（不推荐）：<a class=\"link\"   href=\"https://ubuntu.com/download\" >https://ubuntu.com/download<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中科大元：<a class=\"link\"   href=\"http://mirrors.ustc.edu.cn/ubuntu-releases/\" >http://mirrors.ustc.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>阿里云源：<a class=\"link\"   href=\"https://mirrors.aliyun.com/ubuntu-releases/\" >https://mirrors.aliyun.com/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>北理工源：<a class=\"link\"   href=\"https://mirror.bit.edu.cn/ubuntu-releases/\" >https://mirror.bit.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>3.Ubuntu安装：<a class=\"link\"   href=\"https://blog.csdn.net/woshinsy/article/details/124150654\" >https://blog.csdn.net/woshinsy/article/details/124150654<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"方法二：硬盘安装Ubuntu（双系统\"><a href=\"#方法二：硬盘安装Ubuntu（双系统\" class=\"headerlink\" title=\"方法二：硬盘安装Ubuntu（双系统)\"></a>方法二：硬盘安装Ubuntu（双系统)</h3><p>谨慎操作，最好有自己安装系统的经验！</p>\n<p>教程如下：<a class=\"link\"   href=\"https://blog.csdn.net/weixin_43091381/article/details/108522223##\" >https://blog.csdn.net/weixin_43091381/article/details/108522223##<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"二、Linux基本命令\"><a href=\"#二、Linux基本命令\" class=\"headerlink\" title=\"二、Linux基本命令\"></a>二、Linux基本命令</h2><p><strong>常用指令</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/qq_46416934/article/details/123190966\" >https://blog.csdn.net/qq_46416934/article/details/123190966<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>命令大全：<a class=\"link\"   href=\"https://www.runoob.com/linux/linux-command-manual.html\" >https://www.runoob.com/linux/linux-command-manual.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"三、ROS安装\"><a href=\"#三、ROS安装\" class=\"headerlink\" title=\"三、ROS安装\"></a>三、ROS安装</h2><p>安装教程<a class=\"link\"   href=\"https://blog.csdn.net/my_id_kt/article/details/123753771\" >https://blog.csdn.net/my_id_kt/article/details/123753771<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>注意</strong>：根据Ubuntu版本安装指定版本的ROS</p>\n<h2 id=\"四、ROS基础学习\"><a href=\"#四、ROS基础学习\" class=\"headerlink\" title=\"四、ROS基础学习\"></a>四、ROS基础学习</h2><p>推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：</p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1zt411G7Vn?p=1\" >https://www.bilibili.com/video/BV1zt411G7Vn?p=1<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>CSDN教程</strong>：</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/mbdong/article/details/109310874\" >https://blog.csdn.net/mbdong/article/details/109310874<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/u011832219/category_10500120.html\" >https://blog.csdn.net/u011832219/category_10500120.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"边缘计算","date":"2022-09-26T11:21:08.000Z","password":"hello","abstract":"这里有东西被加密了，需要输入密码查看哦。","message":"您好，这里需要密码。","wrong_pass_message":"抱歉，这个密码看着不太对，请再试试。","wrong_hash_message":"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。","_content":"# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n \n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n\n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n","source":"_posts/2022/09/边缘计算.md","raw":"---\ntitle: 边缘计算\ndate: 2022-09-26 19:21:08\ntags: [边缘计算]\ncategories: [笔记]\npassword: hello\nabstract: 这里有东西被加密了，需要输入密码查看哦。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n---\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n \n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n\n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n","slug":"边缘计算","published":1,"updated":"2022-09-29T15:28:35.401Z","_id":"cl8mees5300086gu75ito8art","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，这个密码看着不太对，请再试试。\" data-whm=\"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e7dba1a73c0f45cbf1140db8890dcf51630bc9656b4a585f94c46879c8c96e9b\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好，这里需要密码。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"这里有东西被加密了，需要输入密码查看哦。","more":"这里有东西被加密了，需要输入密码查看哦。","origin":"<h1 id=\"MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems\"><a href=\"#MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems\" class=\"headerlink\" title=\"MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\"></a>MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求<br>传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）<br>面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。<br>解决方案：开发一种高效建模QoS目标的有远见的优化方案<br>MCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化<br>结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。</p>\n<p>挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。</p>\n<h3 id=\"任务波动性和主机移动性\"><a href=\"#任务波动性和主机移动性\" class=\"headerlink\" title=\"任务波动性和主机移动性\"></a>任务波动性和主机移动性</h3><p>任务波动性:不断变化的资源需求和服务需求<br>主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。<br>参考文献，重新调度</p>\n<blockquote>\n<p>J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.<br>e-Sci. Grid Comput., 2005, pp. 8–147.</p>\n</blockquote>\n<p>为了避免过多的开销，这类方法的客观估计需要非常准确</p>\n<h3 id=\"研究现状\"><a href=\"#研究现状\" class=\"headerlink\" title=\"研究现状\"></a>研究现状</h3><p>进化方案<br>强化学习<br>启发式算法<br>元启发式算法</p>\n<h3 id=\"新见解\"><a href=\"#新见解\" class=\"headerlink\" title=\"新见解\"></a>新见解</h3><p>过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。<br>结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。<br>为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。</p>\n<h3 id=\"相关工作介绍\"><a href=\"#相关工作介绍\" class=\"headerlink\" title=\"相关工作介绍\"></a>相关工作介绍</h3><p>启发式算法，一些经典作品使用启发式算法来优化工作流调度决策<br>目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率</p>\n<h1 id=\"MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems-1\"><a href=\"#MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems-1\" class=\"headerlink\" title=\"MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\"></a>MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems</h1><h2 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求<br>传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）<br>面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。<br>解决方案：开发一种高效建模QoS目标的有远见的优化方案<br>MCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化<br>结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%</p>\n<h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。</p>\n<p>挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。</p>\n<h3 id=\"任务波动性和主机移动性-1\"><a href=\"#任务波动性和主机移动性-1\" class=\"headerlink\" title=\"任务波动性和主机移动性\"></a>任务波动性和主机移动性</h3><p>任务波动性:不断变化的资源需求和服务需求<br>主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。<br>参考文献，重新调度</p>\n<blockquote>\n<p>J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.<br>e-Sci. Grid Comput., 2005, pp. 8–147.</p>\n</blockquote>\n<p>为了避免过多的开销，这类方法的客观估计需要非常准确</p>\n<h3 id=\"研究现状-1\"><a href=\"#研究现状-1\" class=\"headerlink\" title=\"研究现状\"></a>研究现状</h3><p>进化方案<br>强化学习<br>启发式算法<br>元启发式算法</p>\n<h3 id=\"新见解-1\"><a href=\"#新见解-1\" class=\"headerlink\" title=\"新见解\"></a>新见解</h3><p>过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。<br>结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。<br>为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。</p>\n<h3 id=\"相关工作介绍-1\"><a href=\"#相关工作介绍-1\" class=\"headerlink\" title=\"相关工作介绍\"></a>相关工作介绍</h3><p>启发式算法，一些经典作品使用启发式算法来优化工作流调度决策<br>目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率</p>\n","encrypt":true}],"PostAsset":[],"PostCategory":[{"post_id":"cl8gu5eql0001a08f5y1l2r21","category_id":"cl8mees4x00026gu77upah6ap","_id":"cl8mees55000a6gu7efrf71ni"},{"post_id":"cl8mees4t00006gu7ff2v5ozd","category_id":"cl8mees4x00026gu77upah6ap","_id":"cl8mees55000d6gu76crd560t"},{"post_id":"cl8mees4z00046gu74bs4fayp","category_id":"cl8mees55000b6gu7dis43uf1","_id":"cl8mees57000i6gu781oyddys"},{"post_id":"cl8mees5300086gu75ito8art","category_id":"cl8mees55000b6gu7dis43uf1","_id":"cl8mees58000k6gu7d07kfytf"},{"post_id":"cl8mees4w00016gu78hcue39r","category_id":"cl8mees5200056gu7bqbrd73i","_id":"cl8mees58000m6gu79dyc2fg5"},{"post_id":"cl8mees4w00016gu78hcue39r","category_id":"cl8mees57000h6gu792mr5zd7","_id":"cl8mees58000n6gu745tt50tk"},{"post_id":"cl8gu5er4000ka08fhrsz15bd","category_id":"cl8mees55000b6gu7dis43uf1","_id":"cl8mees58000o6gu784jb8sqz"}],"PostTag":[{"post_id":"cl8gu5er4000ka08fhrsz15bd","tag_id":"cl8gu5er5000ma08f2jxi97al","_id":"cl8gu5er6000na08fg500cl9r"},{"post_id":"cl8gu5eql0001a08f5y1l2r21","tag_id":"cl8mees4z00036gu7dcqb09cw","_id":"cl8mees5300076gu76khgexe7"},{"post_id":"cl8mees4t00006gu7ff2v5ozd","tag_id":"cl8mees4z00036gu7dcqb09cw","_id":"cl8mees5400096gu7hqx3fzsi"},{"post_id":"cl8mees5300086gu75ito8art","tag_id":"cl8gu5er5000ma08f2jxi97al","_id":"cl8mees56000f6gu72gjtgoz3"},{"post_id":"cl8mees4w00016gu78hcue39r","tag_id":"cl8mees5200066gu7drlfa820","_id":"cl8mees57000g6gu74zjp5l7r"},{"post_id":"cl8mees4z00046gu74bs4fayp","tag_id":"cl8mees55000c6gu72lmbeltj","_id":"cl8mees57000j6gu75nu159ee"}],"Tag":[{"name":"子模块","_id":"cl8gu5eqs0005a08f1rqsh1a9"},{"name":"Hello","_id":"cl8gu5eqw000ba08f1sstca8e"},{"name":"tag","_id":"cl8gu5eqx000fa08fh3g4cw0c"},{"name":"边缘计算","_id":"cl8gu5er5000ma08f2jxi97al"},{"name":"Github","_id":"cl8mees4z00036gu7dcqb09cw"},{"name":"Lambda","_id":"cl8mees5200066gu7drlfa820"},{"name":"ROS","_id":"cl8mees55000c6gu72lmbeltj"}]}}