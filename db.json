{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/keep/source/images/favicon.bak.png","path":"images/favicon.bak.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/click.js","path":"js/click.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/my/mouse.styl","path":"css/my/mouse.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/links.yml","hash":"c812a7c3dc7ad187a12b7a7a72a23dfd4243cf10","modified":1664465315395},{"_id":"source/categories/index.md","hash":"b564abe0166daa87c3c660cb2c14da2aac7137ee","modified":1664465315403},{"_id":"source/about/index.md","hash":"7ad7d03b2b74090cba1f44305554e75ea2da38fe","modified":1664465315403},{"_id":"source/changelog/index.md","hash":"9a1e50476e41ac873b9da9b5387de841180a2275","modified":1664465315404},{"_id":"source/links/index.md","hash":"d55f865776e4ba3c4ceb25cd261a72f738af02d9","modified":1664465315405},{"_id":"source/heart/index.md","hash":"88788949cb4c0a30f1b08ecd0890bb410ad338f8","modified":1669216867661},{"_id":"source/tags/index.md","hash":"155eed058c13866fe4a670edad91eb0755e487bd","modified":1664465315405},{"_id":"source/archives/index.md","hash":"e4d9227ebcc524520f3ffd5213454a26bc05f667","modified":1664467338135},{"_id":"source/_posts/2022/10/camunda基础篇.md","hash":"e0876dab703edd685cad63834eb3ec79d70502da","modified":1667657819505},{"_id":"source/_posts/2022/10/goodjob.md","hash":"2e76980b9ddfa6f216d6603457fc0bbc5e0abe67","modified":1668869774824},{"_id":"source/_posts/2022/10/camunda高级篇.md","hash":"ce1fd3b5f8ec2c51f6ff244e1ea84cdb62b87cc2","modified":1667657819507},{"_id":"source/_posts/2022/10/flowable实战篇.md","hash":"5b23c369e7a7d0127e1fd21e087c0e729cc0fb9d","modified":1667657819510},{"_id":"source/_posts/2022/10/flowable进阶篇.md","hash":"10ef410d6cd99eecd9a87f12b22d71f7f472643a","modified":1667657819512},{"_id":"source/_posts/2022/10/iot.md","hash":"6d926dfd5a1d4e1d45325d55a7dfa270c3a1fe39","modified":1664467647878},{"_id":"source/_posts/2022/09/Git使用.md","hash":"9493e15a48c6f5e50d1dfb54fa95d829bb5e5a5c","modified":1664465315396},{"_id":"source/_posts/2022/09/Lambda表达式.md","hash":"cac02581346b65f8e36c2799f895a8c9442c9f6e","modified":1664465315397},{"_id":"source/_posts/2022/09/ROS入门教程.md","hash":"a41e9fd49ddc2ebefe95e4a0714358912e162388","modified":1664465315398},{"_id":"source/_posts/2022/09/git子模块.md","hash":"4f8527511768d0cf74f5f0ce2e1f81baae3ae3f4","modified":1664465315400},{"_id":"source/_posts/2022/09/hello-world.md","hash":"4e727a98c5a9e06cd4b0efdbceae4813f4e01059","modified":1667657819504},{"_id":"source/_posts/2022/11/云原生入门-md.md","hash":"458abea91dd9cdbc8041687d6d979e86a39d9c6d","modified":1667657819514},{"_id":"source/_posts/2022/09/边缘计算.md","hash":"afe0f274f828551b03fcd4c747a6ffea0dabf3f0","modified":1664465315401},{"_id":"source/_posts/2022/11/在Docker中部署ROS.md","hash":"e1c2f125bd378f00b2907ed752851b116cec63d0","modified":1668436176373},{"_id":"source/_posts/2022/11/A-multi-faceted-optimization-scheduling-framework.md","hash":"7f33f5ed690234a560a629c44c4f82409cca32dd","modified":1668436176373},{"_id":"source/_posts/2022/10/camunda进阶篇.md","hash":"1a7de0331f2bff9b77fdc37e5c00689b906dd338","modified":1667657819506},{"_id":"source/_posts/2022/10/flowable基础篇.md","hash":"9300a42ee58cd51407c3bd216b0c1f1bf6bce004","modified":1667657819509},{"_id":"source/_posts/2022/10/flowable高级篇.md","hash":"ed7e5930719fc29105e747b68c161ea891ba8204","modified":1667657819513},{"_id":"themes/keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1664465357498},{"_id":"themes/keep/.gitignore","hash":"9f5eebec6128f0029691c28190673d959cb0f234","modified":1664030904429},{"_id":"themes/keep/.npmignore","hash":"48eee50624f0ad4ed5b37ae81e95f5e5cb4c7f7f","modified":1664465472838},{"_id":"themes/keep/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1664465472839},{"_id":"themes/keep/package.json","hash":"a3be00d629d52f6cadde16fea48a0f68c288da07","modified":1664465472882},{"_id":"themes/keep/README_zh-TW.md","hash":"9913cf385c568a516055b27a9c944cc95263b3bc","modified":1664465472841},{"_id":"themes/keep/README_zh-CN.md","hash":"d3bfa4f8720b73455d9e77f3e918de60daca01d7","modified":1664465472840},{"_id":"themes/keep/_config.yml","hash":"8b55eae3ac7e7fc2d508d161f32a765083d3a7a9","modified":1664465472844},{"_id":"themes/keep/README.md","hash":"06ef53a5daecd42cfe7d653f9331e5ea66f1f590","modified":1664465472840},{"_id":"themes/keep/.github/FUNDING.yml","hash":"04ebd5562487625d07c01767f7b68312772bf3db","modified":1664030904429},{"_id":"themes/keep/languages/zh-CN.yml","hash":"f8b9da63093739b5b7a555e8d1aa0f30d38171dc","modified":1664465472847},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664465472877},{"_id":"themes/keep/languages/zh-TW.yml","hash":"428b304a3ad542072bb578ed312bb06794a654e1","modified":1664465472847},{"_id":"themes/keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1664465472877},{"_id":"themes/keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1664465472878},{"_id":"themes/keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1664465472846},{"_id":"themes/keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1664465472879},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664465472879},{"_id":"themes/keep/layout/article-content.ejs","hash":"9597d26784b62b0060950e8af2f71322013d3828","modified":1664465472878},{"_id":"themes/keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1664465472880},{"_id":"themes/keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1664465472879},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664465472882},{"_id":"themes/keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1664465472881},{"_id":"themes/keep/layout/layout.ejs","hash":"3e52fca8ee1de0024dd293f322fbbd2a5b138956","modified":1664465472880},{"_id":"themes/keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1664465472881},{"_id":"themes/keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1664465472885},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1664465472881},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1664465472848},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1664465472848},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1664465472870},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"fb04ac78cfee23b5f73b8721925e9c7fc168e2aa","modified":1664465472849},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"ab773935e9fe7a5f06d8d3691b7fc7eb779ff7d3","modified":1668436289577},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1664465472871},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1664465472872},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"697eb90b6448d1dcecc0fc19f1033086697bb2f8","modified":1664465472871},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1664465472873},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1664465472873},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1664465472872},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1664465472872},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1664465472875},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1664465472874},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1664465472875},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1664465472884},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1664465472876},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1664465472876},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"9b149793aac46a1d7550ca2db49e215feffe1178","modified":1664465472884},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1664465472877},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1664465472883},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1664465472883},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1664465472876},{"_id":"themes/keep/source/images/favicon.bak.png","hash":"fc743c812f414c060f53967d1301dd1532655894","modified":1665589381797},{"_id":"themes/keep/source/images/avatar.png","hash":"89cc68415842475c97101441f8e09cc0466df56a","modified":1664465472904},{"_id":"themes/keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1664465472904},{"_id":"themes/keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1664465472904},{"_id":"themes/keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1664465472905},{"_id":"themes/keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1664465472907},{"_id":"themes/keep/source/images/favicon.png","hash":"3ea21444819364d01897aa1130618213a865b48b","modified":1665589588596},{"_id":"themes/keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1664465472907},{"_id":"themes/keep/source/js/click.js","hash":"5856365b5fb0d442d0a7871ebbbb3602990ca0ec","modified":1664465472908},{"_id":"themes/keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1664465472909},{"_id":"themes/keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1664465472908},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1664465472910},{"_id":"themes/keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1664465472909},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1664465472908},{"_id":"themes/keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1664465472912},{"_id":"themes/keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1664465472911},{"_id":"themes/keep/source/js/utils.js","hash":"356c23107a336b682a7101dfc856fa6e0e6cdb76","modified":1664465472912},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1664465472891},{"_id":"themes/keep/source/css/style.styl","hash":"f0f0bdff6774b71b33b22b4452751c6a467f13fb","modified":1664465472903},{"_id":"themes/keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1664465472911},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1664465472927},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1664465472930},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1664465472930},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1664465472931},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1664465472869},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1664465472870},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1664465472870},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1664465357499},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1664465472874},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1664465472910},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1664465472889},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1664465472911},{"_id":"themes/keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1664465472886},{"_id":"themes/keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1664465472890},{"_id":"themes/keep/source/css/common/basic.styl","hash":"2ecd4b0d469038a0753ad2de3eb2ba8c20f809db","modified":1664465472886},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"254ca2715de67d5783adfae40723a7917b6d9f8a","modified":1664465472900},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1664465472889},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"8f62a171debaa09d653328d0c76e170f82351a40","modified":1664465472900},{"_id":"themes/keep/source/css/layout/page.styl","hash":"7dda6b19e10b4c49bc79cc0ab0e1f262f5f2b1ac","modified":1664465472901},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"9af1e7fbc52aad0b4a47593813961a32a1d2b5c5","modified":1664465472900},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"73af0b51aee119b2135dc8cd53cd3a3ad215fff6","modified":1664465472902},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"28ea212b14e664d08de4ce93db1e0153e48a11ed","modified":1664465472901},{"_id":"themes/keep/source/css/my/mouse.styl","hash":"9daa6e5ad453d14b4930d2091432e23ea36f77ce","modified":1664465472902},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1664465472888},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"029336439c79ece32d25f8fee9dc018206fbcd1b","modified":1664465472901},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1664465472887},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1664465472887},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1664465472895},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1664465472891},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1664465472892},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"8ca83a4fe1afbb15669becebcde3ed0e12ac07bb","modified":1664465472892},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1664465472898},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"7e1c77d7c293d5583c431ca1bcec7eee2d83c10e","modified":1664465472895},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"e724a19e0ae3d173ae33d31054381ad7a0df7453","modified":1664465472896},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1664465472897},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"97768d3f95e8cf36fd3f783a5deb7e8fcaa5c67d","modified":1664465472897},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"39d03031033aa3bb9d3a76fdb5056966334e9221","modified":1664465472899},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1664465472897},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1664465472898},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1664465472899},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1664465472898},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"f1cec5eb066c13f17d0acc997790404d059fbd3f","modified":1664465472899},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1664465472893},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1664465472894},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1664465472893},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1664465472894},{"_id":"themes/keep/source/images/logo.png","hash":"2dcc2a490b517fc98d73dfc49394e4f9b112b8e3","modified":1664465472907},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1664465472926},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1664465472925},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1664465472946},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1664465472946},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1664465472915},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1664465472924},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1664465472929},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1664465472944},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1664465472934},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1664465472921},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1664465472941}],"Category":[{"name":"笔记","_id":"clas9ersi0004dk8f8zvc45ko"},{"name":"常用工具","_id":"clas9ersy000udk8fg3vxby0d"},{"name":"JAVA","_id":"clas9ert10012dk8fhzsd17l7"},{"name":"基础知识","parent":"clas9ert10012dk8fhzsd17l7","_id":"clas9ert4001edk8ff9d68faq"}],"Data":[{"_id":"links","data":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}],"Page":[{"title":"about","date":"2022-09-15T11:28:16.000Z","comment":true,"_content":"# 💡About me： 添加主题\n\n| **目标**  | 您想要什么样的想法？              |\n| ------- | ----------------------- |\n| **参与者** | @提及您自己和其他人              |\n| **相关**  | - 🔗 [插入一些文档或链接]() |\n\n## 灵感\n\n使用您点击“返回”时显示的工具栏来添加图片、视频等\n\n\n## 想法\n\n向团队提出一个问题，让事情顺利进行\n\n----------\n## 后续步骤\n\n- [ ] 打破陈规 @某人\n- [ ] 从待办到完成 @某人\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-09-15 19:28:16\ncomment: true\n---\n# 💡About me： 添加主题\n\n| **目标**  | 您想要什么样的想法？              |\n| ------- | ----------------------- |\n| **参与者** | @提及您自己和其他人              |\n| **相关**  | - 🔗 [插入一些文档或链接]() |\n\n## 灵感\n\n使用您点击“返回”时显示的工具栏来添加图片、视频等\n\n\n## 想法\n\n向团队提出一个问题，让事情顺利进行\n\n----------\n## 后续步骤\n\n- [ ] 打破陈规 @某人\n- [ ] 从待办到完成 @某人\n","updated":"2022-09-29T15:28:35.403Z","path":"about/index.html","comments":1,"layout":"page","_id":"clas9ersa0000dk8feyes6b6y","content":"<h1 id=\"💡About-me：-添加主题\"><a href=\"#💡About-me：-添加主题\" class=\"headerlink\" title=\"💡About me： 添加主题\"></a>💡About me： 添加主题</h1><table>\n<thead>\n<tr>\n<th><strong>目标</strong></th>\n<th>您想要什么样的想法？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>参与者</strong></td>\n<td>@提及您自己和其他人</td>\n</tr>\n<tr>\n<td><strong>相关</strong></td>\n<td>- 🔗 <a href=\"\">插入一些文档或链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"灵感\"><a href=\"#灵感\" class=\"headerlink\" title=\"灵感\"></a>灵感</h2><p>使用您点击“返回”时显示的工具栏来添加图片、视频等</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>向团队提出一个问题，让事情顺利进行</p>\n<hr>\n<h2 id=\"后续步骤\"><a href=\"#后续步骤\" class=\"headerlink\" title=\"后续步骤\"></a>后续步骤</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 打破陈规 @某人</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从待办到完成 @某人</li>\n</ul>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"💡About-me：-添加主题\"><a href=\"#💡About-me：-添加主题\" class=\"headerlink\" title=\"💡About me： 添加主题\"></a>💡About me： 添加主题</h1><table>\n<thead>\n<tr>\n<th><strong>目标</strong></th>\n<th>您想要什么样的想法？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>参与者</strong></td>\n<td>@提及您自己和其他人</td>\n</tr>\n<tr>\n<td><strong>相关</strong></td>\n<td>- 🔗 <a href=\"\">插入一些文档或链接</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"灵感\"><a href=\"#灵感\" class=\"headerlink\" title=\"灵感\"></a>灵感</h2><p>使用您点击“返回”时显示的工具栏来添加图片、视频等</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>向团队提出一个问题，让事情顺利进行</p>\n<hr>\n<h2 id=\"后续步骤\"><a href=\"#后续步骤\" class=\"headerlink\" title=\"后续步骤\"></a>后续步骤</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 打破陈规 @某人</li>\n<li><input disabled=\"\" type=\"checkbox\"> 从待办到完成 @某人</li>\n</ul>\n"},{"title":"categories","date":"2022-09-19T06:59:53.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-09-19 14:59:53\n---\n","updated":"2022-09-29T15:28:35.403Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clas9ersg0002dk8f2mcfdpu2","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""},{"title":"更新日志","date":"2022-09-15T11:30:07.000Z","comment":true,"_content":"# 🕘 更新日志 添加事件名称\n\n# 2022-09-02\n\n****\n## 更新内容\n\n@提及您自己并添加其他人\n\n\n## 议程\n- 会议议程\n\n\n## 讨论\n- 我们实际讨论的内容\n\n\n## 操作项目\n\n- [ ] 我们来完成这项任务 @某人","source":"changelog/index.md","raw":"---\ntitle: 更新日志\ndate: 2022-09-15 19:30:07\ncomment: true\n---\n# 🕘 更新日志 添加事件名称\n\n# 2022-09-02\n\n****\n## 更新内容\n\n@提及您自己并添加其他人\n\n\n## 议程\n- 会议议程\n\n\n## 讨论\n- 我们实际讨论的内容\n\n\n## 操作项目\n\n- [ ] 我们来完成这项任务 @某人","updated":"2022-09-29T15:28:35.404Z","path":"changelog/index.html","comments":1,"layout":"page","_id":"clas9ersk0006dk8f64qp023m","content":"<h1 id=\"🕘-更新日志-添加事件名称\"><a href=\"#🕘-更新日志-添加事件名称\" class=\"headerlink\" title=\"🕘 更新日志 添加事件名称\"></a>🕘 更新日志 添加事件名称</h1><h1 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h1><hr>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><p>@提及您自己并添加其他人</p>\n<h2 id=\"议程\"><a href=\"#议程\" class=\"headerlink\" title=\"议程\"></a>议程</h2><ul>\n<li>会议议程</li>\n</ul>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><ul>\n<li>我们实际讨论的内容</li>\n</ul>\n<h2 id=\"操作项目\"><a href=\"#操作项目\" class=\"headerlink\" title=\"操作项目\"></a>操作项目</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 我们来完成这项任务 @某人</li>\n</ul>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"🕘-更新日志-添加事件名称\"><a href=\"#🕘-更新日志-添加事件名称\" class=\"headerlink\" title=\"🕘 更新日志 添加事件名称\"></a>🕘 更新日志 添加事件名称</h1><h1 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h1><hr>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><p>@提及您自己并添加其他人</p>\n<h2 id=\"议程\"><a href=\"#议程\" class=\"headerlink\" title=\"议程\"></a>议程</h2><ul>\n<li>会议议程</li>\n</ul>\n<h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><ul>\n<li>我们实际讨论的内容</li>\n</ul>\n<h2 id=\"操作项目\"><a href=\"#操作项目\" class=\"headerlink\" title=\"操作项目\"></a>操作项目</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 我们来完成这项任务 @某人</li>\n</ul>\n"},{"title":"heart","date":"2022-11-14T15:41:24.000Z","_content":"\n<canvas id=\"pinkboard\"></canvas>\n\n<script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"></script>\n<script>\nconsole.log(\"js loaded\");\nvar settings = {\n\tparticles: {\n\t\tlength: 500,\n\t\t// maximum amount of particles\n\t\tduration: 2,\n\t\t// particle duration in sec\n\t\tvelocity: 100,\n\t\t// particle velocity in pixels/sec\n\t\teffect: -0.75,\n\t\t// play with this for a nice effect\n\t\tsize: 30,\n\t\t// particle size in pixels\n\t},\n};\n\n/*\n * RequestAnimationFrame polyfill by Erik Möller\n */\n\n(\n\tfunction() {\n\t\tconsole.log(\"heart into page\");\n\n\t\tvar b = 0;\n\t\tvar c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n\t\tfor (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n\t\t\twindow.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n\t\t\twindow.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"]\n\t\t}\n\t\tif (!window.requestAnimationFrame) {\n\t\t\twindow.requestAnimationFrame = function(h, e) {\n\t\t\t\tvar d = new Date()\n\t\t\t\t\t.getTime();\n\t\t\t\tvar f = Math.max(0, 16 - (d - b));\n\t\t\t\tvar g = window.setTimeout(function() {\n\t\t\t\t\t\th(d + f)\n\t\t\t\t\t},\n\t\t\t\t\tf);\n\t\t\t\tb = d + f;\n\t\t\t\treturn g\n\t\t\t}\n\t\t}\n\t\tif (!window.cancelAnimationFrame) {\n\t\t\twindow.cancelAnimationFrame = function(d) {\n\t\t\t\tclearTimeout(d)\n\t\t\t}\n\t\t}\n\t}());\n\n/*\n * Point class\n */\nvar Point = (function() {\n\tfunction Point(x, y) {\n\t\tthis.x = (typeof x !== 'undefined') ? x : 0;\n\t\tthis.y = (typeof y !== 'undefined') ? y : 0;\n\t}\n\tPoint.prototype.clone = function() {\n\t\treturn new Point(this.x, this.y);\n\t};\n\tPoint.prototype.length = function(length) {\n\t\tif (typeof length == 'undefined') return Math.sqrt(this.x * this.x + this.y * this.y);\n\t\tthis.normalize();\n\t\tthis.x *= length;\n\t\tthis.y *= length;\n\t\treturn this;\n\t};\n\tPoint.prototype.normalize = function() {\n\t\tvar length = this.length();\n\t\tthis.x /= length;\n\t\tthis.y /= length;\n\t\treturn this;\n\t};\n\treturn Point;\n})();\n\n/*\n * Particle class\n */\nvar Particle = (function() {\n\tfunction Particle() {\n\t\tthis.position = new Point();\n\t\tthis.velocity = new Point();\n\t\tthis.acceleration = new Point();\n\t\tthis.age = 0;\n\t}\n\tParticle.prototype.initialize = function(x, y, dx, dy) {\n\t\tthis.position.x = x;\n\t\tthis.position.y = y;\n\t\tthis.velocity.x = dx;\n\t\tthis.velocity.y = dy;\n\t\tthis.acceleration.x = dx * settings.particles.effect;\n\t\tthis.acceleration.y = dy * settings.particles.effect;\n\t\tthis.age = 0;\n\t};\n\tParticle.prototype.update = function(deltaTime) {\n\t\tthis.position.x += this.velocity.x * deltaTime;\n\t\tthis.position.y += this.velocity.y * deltaTime;\n\t\tthis.velocity.x += this.acceleration.x * deltaTime;\n\t\tthis.velocity.y += this.acceleration.y * deltaTime;\n\t\tthis.age += deltaTime;\n\t};\n\tParticle.prototype.draw = function(context, image) {\n\t\tfunction ease(t) {\n\t\t\treturn (--t) * t * t + 1;\n\t\t}\n\t\tvar size = image.width * ease(this.age / settings.particles.duration);\n\t\tcontext.globalAlpha = 1 - this.age / settings.particles.duration;\n\t\tcontext.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\n\t};\n\treturn Particle;\n})();\n\n/*\n * ParticlePool class\n */\nvar ParticlePool = (function() {\n\tvar particles, firstActive = 0,\n\t\tfirstFree = 0,\n\t\tduration = settings.particles.duration;\n\n\tfunction ParticlePool(length) {\n\t\t// create and populate particle pool\n\t\tparticles = new Array(length);\n\t\tfor (var i = 0; i < particles.length; i++) particles[i] = new Particle();\n\t}\n\tParticlePool.prototype.add = function(x, y, dx, dy) {\n\t\tparticles[firstFree].initialize(x, y, dx, dy);\n\n\t\t// handle circular queue\n\t\tfirstFree++;\n\t\tif (firstFree == particles.length) firstFree = 0;\n\t\tif (firstActive == firstFree) firstActive++;\n\t\tif (firstActive == particles.length) firstActive = 0;\n\t};\n\tParticlePool.prototype.update = function(deltaTime) {\n\t\tvar i;\n\n\t\t// update active particles\n\t\tif (firstActive < firstFree) {\n\t\t\tfor (i = firstActive; i < firstFree; i++) particles[i].update(deltaTime);\n\t\t}\n\t\tif (firstFree < firstActive) {\n\t\t\tfor (i = firstActive; i < particles.length; i++) particles[i].update(deltaTime);\n\t\t\tfor (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n\t\t}\n\n\t\t// remove inactive particles\n\t\twhile (particles[firstActive].age >= duration && firstActive != firstFree) {\n\t\t\tfirstActive++;\n\t\t\tif (firstActive == particles.length) firstActive = 0;\n\t\t}\n\n\t};\n\tParticlePool.prototype.draw = function(context, image) {\n\t\t// draw active particles\n\t\tif (firstActive < firstFree) {\n\t\t\tfor (i = firstActive; i < firstFree; i++) particles[i].draw(context, image);\n\t\t}\n\t\tif (firstFree < firstActive) {\n\t\t\tfor (i = firstActive; i < particles.length; i++) particles[i].draw(context, image);\n\t\t\tfor (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n\t\t}\n\t};\n\treturn ParticlePool;\n})();\n\n/*\n * Putting it all together\n */\n\n$(document).ready(function() {\n\tcanvas = document.getElementById(\"pinkboard\");\n\tconsole.log(\"heart into\");\n\tconsole.log(canvas)\n\tvar canvasObj = document.getElementById(\"pinkboard\");\n\tvar parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n\t// console.log(parentObj.clientWidth);\n\tcanvasObj.width = parentObj.clientWidth;\n\tcanvasObj.height = parentObj.clientWidth;\n\n\twindow.addEventListener(\"resize\", () => {\n\t\tvar canvasObj = document.getElementById(\"pinkboard\");\n\t\tif (canvasObj) {\n\t\t\tvar parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n\t\t\t// console.log(parentObj.clientWidth);\n\t\t\tcanvasObj.width = parentObj.clientWidth;\n\t\t\tcanvasObj.height = parentObj.clientWidth;\n\t\t}\n\t});\n\n\n\tvar context = canvas.getContext('2d'),\n\t\tparticles = new ParticlePool(settings.particles.length),\n\t\tparticleRate = settings.particles.length / settings.particles.duration,\n\t\t// particles/sec\n\t\ttime;\n\n\t// get point on heart with -PI <= t <= PI\n\tfunction pointOnHeart(t) {\n\t\treturn new Point(160 * Math.pow(Math.sin(t), 3), 130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25);\n\t}\n\n\t// creating the particle image using a dummy canvas\n\tvar image = (function() {\n\t\tvar canvas = document.createElement('canvas'),\n\t\t\tcontext = canvas.getContext('2d');\n\t\tcanvas.width = settings.particles.size;\n\t\tcanvas.height = settings.particles.size;\n\t\t// helper function to create the path\n\t\tfunction to(t) {\n\t\t\tvar point = pointOnHeart(t);\n\t\t\tpoint.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\n\t\t\tpoint.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\n\t\t\treturn point;\n\t\t}\n\t\t// create the path\n\t\tcontext.beginPath();\n\t\tvar t = -Math.PI;\n\t\tvar point = to(t);\n\t\tcontext.moveTo(point.x, point.y);\n\t\twhile (t < Math.PI) {\n\t\t\tt += 0.01; // baby steps!\n\t\t\tpoint = to(t);\n\t\t\tcontext.lineTo(point.x, point.y);\n\t\t}\n\t\tcontext.closePath();\n\t\t// create the fill\n\t\tcontext.fillStyle = '#ea80b0';\n\t\tcontext.fill();\n\t\t// create the image\n\t\tvar image = new Image();\n\t\timage.src = canvas.toDataURL();\n\t\treturn image;\n\t})();\n\n\t// render that thing!\n\tfunction render() {\n\t\t// next animation frame\n\t\trequestAnimationFrame(render);\n\n\t\t// update time\n\t\tvar newTime = new Date()\n\t\t\t.getTime() / 1000,\n\t\t\tdeltaTime = newTime - (time || newTime);\n\t\ttime = newTime;\n\n\t\t// clear canvas\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// create new particles\n\t\tvar amount = particleRate * deltaTime;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n\t\t\tvar dir = pos.clone()\n\t\t\t\t.length(settings.particles.velocity);\n\t\t\tparticles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\n\t\t}\n\n\t\t// update and draw particles\n\t\tparticles.update(deltaTime);\n\t\tparticles.draw(context, image);\n\t}\n\n\t// handle (re-)sizing of the canvas\n\tfunction onResize() {\n\t\tcanvas.width = canvas.clientWidth;\n\t\tcanvas.height = canvas.clientHeight;\n\t}\n\twindow.onresize = onResize;\n\n\t// delay rendering bootstrap\n\tsetTimeout(function() {\n\t\t\tonResize();\n\t\t\trender();\n\t\t},\n\t\t10);\n});\n//)(document.getElementById(\"pinkboard\"));\n\n</script>","source":"heart/index.md","raw":"---\ntitle: heart\ndate: 2022-11-14 23:41:24\n---\n\n<canvas id=\"pinkboard\"></canvas>\n\n<script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"></script>\n<script>\nconsole.log(\"js loaded\");\nvar settings = {\n\tparticles: {\n\t\tlength: 500,\n\t\t// maximum amount of particles\n\t\tduration: 2,\n\t\t// particle duration in sec\n\t\tvelocity: 100,\n\t\t// particle velocity in pixels/sec\n\t\teffect: -0.75,\n\t\t// play with this for a nice effect\n\t\tsize: 30,\n\t\t// particle size in pixels\n\t},\n};\n\n/*\n * RequestAnimationFrame polyfill by Erik Möller\n */\n\n(\n\tfunction() {\n\t\tconsole.log(\"heart into page\");\n\n\t\tvar b = 0;\n\t\tvar c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n\t\tfor (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n\t\t\twindow.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n\t\t\twindow.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"]\n\t\t}\n\t\tif (!window.requestAnimationFrame) {\n\t\t\twindow.requestAnimationFrame = function(h, e) {\n\t\t\t\tvar d = new Date()\n\t\t\t\t\t.getTime();\n\t\t\t\tvar f = Math.max(0, 16 - (d - b));\n\t\t\t\tvar g = window.setTimeout(function() {\n\t\t\t\t\t\th(d + f)\n\t\t\t\t\t},\n\t\t\t\t\tf);\n\t\t\t\tb = d + f;\n\t\t\t\treturn g\n\t\t\t}\n\t\t}\n\t\tif (!window.cancelAnimationFrame) {\n\t\t\twindow.cancelAnimationFrame = function(d) {\n\t\t\t\tclearTimeout(d)\n\t\t\t}\n\t\t}\n\t}());\n\n/*\n * Point class\n */\nvar Point = (function() {\n\tfunction Point(x, y) {\n\t\tthis.x = (typeof x !== 'undefined') ? x : 0;\n\t\tthis.y = (typeof y !== 'undefined') ? y : 0;\n\t}\n\tPoint.prototype.clone = function() {\n\t\treturn new Point(this.x, this.y);\n\t};\n\tPoint.prototype.length = function(length) {\n\t\tif (typeof length == 'undefined') return Math.sqrt(this.x * this.x + this.y * this.y);\n\t\tthis.normalize();\n\t\tthis.x *= length;\n\t\tthis.y *= length;\n\t\treturn this;\n\t};\n\tPoint.prototype.normalize = function() {\n\t\tvar length = this.length();\n\t\tthis.x /= length;\n\t\tthis.y /= length;\n\t\treturn this;\n\t};\n\treturn Point;\n})();\n\n/*\n * Particle class\n */\nvar Particle = (function() {\n\tfunction Particle() {\n\t\tthis.position = new Point();\n\t\tthis.velocity = new Point();\n\t\tthis.acceleration = new Point();\n\t\tthis.age = 0;\n\t}\n\tParticle.prototype.initialize = function(x, y, dx, dy) {\n\t\tthis.position.x = x;\n\t\tthis.position.y = y;\n\t\tthis.velocity.x = dx;\n\t\tthis.velocity.y = dy;\n\t\tthis.acceleration.x = dx * settings.particles.effect;\n\t\tthis.acceleration.y = dy * settings.particles.effect;\n\t\tthis.age = 0;\n\t};\n\tParticle.prototype.update = function(deltaTime) {\n\t\tthis.position.x += this.velocity.x * deltaTime;\n\t\tthis.position.y += this.velocity.y * deltaTime;\n\t\tthis.velocity.x += this.acceleration.x * deltaTime;\n\t\tthis.velocity.y += this.acceleration.y * deltaTime;\n\t\tthis.age += deltaTime;\n\t};\n\tParticle.prototype.draw = function(context, image) {\n\t\tfunction ease(t) {\n\t\t\treturn (--t) * t * t + 1;\n\t\t}\n\t\tvar size = image.width * ease(this.age / settings.particles.duration);\n\t\tcontext.globalAlpha = 1 - this.age / settings.particles.duration;\n\t\tcontext.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\n\t};\n\treturn Particle;\n})();\n\n/*\n * ParticlePool class\n */\nvar ParticlePool = (function() {\n\tvar particles, firstActive = 0,\n\t\tfirstFree = 0,\n\t\tduration = settings.particles.duration;\n\n\tfunction ParticlePool(length) {\n\t\t// create and populate particle pool\n\t\tparticles = new Array(length);\n\t\tfor (var i = 0; i < particles.length; i++) particles[i] = new Particle();\n\t}\n\tParticlePool.prototype.add = function(x, y, dx, dy) {\n\t\tparticles[firstFree].initialize(x, y, dx, dy);\n\n\t\t// handle circular queue\n\t\tfirstFree++;\n\t\tif (firstFree == particles.length) firstFree = 0;\n\t\tif (firstActive == firstFree) firstActive++;\n\t\tif (firstActive == particles.length) firstActive = 0;\n\t};\n\tParticlePool.prototype.update = function(deltaTime) {\n\t\tvar i;\n\n\t\t// update active particles\n\t\tif (firstActive < firstFree) {\n\t\t\tfor (i = firstActive; i < firstFree; i++) particles[i].update(deltaTime);\n\t\t}\n\t\tif (firstFree < firstActive) {\n\t\t\tfor (i = firstActive; i < particles.length; i++) particles[i].update(deltaTime);\n\t\t\tfor (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n\t\t}\n\n\t\t// remove inactive particles\n\t\twhile (particles[firstActive].age >= duration && firstActive != firstFree) {\n\t\t\tfirstActive++;\n\t\t\tif (firstActive == particles.length) firstActive = 0;\n\t\t}\n\n\t};\n\tParticlePool.prototype.draw = function(context, image) {\n\t\t// draw active particles\n\t\tif (firstActive < firstFree) {\n\t\t\tfor (i = firstActive; i < firstFree; i++) particles[i].draw(context, image);\n\t\t}\n\t\tif (firstFree < firstActive) {\n\t\t\tfor (i = firstActive; i < particles.length; i++) particles[i].draw(context, image);\n\t\t\tfor (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n\t\t}\n\t};\n\treturn ParticlePool;\n})();\n\n/*\n * Putting it all together\n */\n\n$(document).ready(function() {\n\tcanvas = document.getElementById(\"pinkboard\");\n\tconsole.log(\"heart into\");\n\tconsole.log(canvas)\n\tvar canvasObj = document.getElementById(\"pinkboard\");\n\tvar parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n\t// console.log(parentObj.clientWidth);\n\tcanvasObj.width = parentObj.clientWidth;\n\tcanvasObj.height = parentObj.clientWidth;\n\n\twindow.addEventListener(\"resize\", () => {\n\t\tvar canvasObj = document.getElementById(\"pinkboard\");\n\t\tif (canvasObj) {\n\t\t\tvar parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n\t\t\t// console.log(parentObj.clientWidth);\n\t\t\tcanvasObj.width = parentObj.clientWidth;\n\t\t\tcanvasObj.height = parentObj.clientWidth;\n\t\t}\n\t});\n\n\n\tvar context = canvas.getContext('2d'),\n\t\tparticles = new ParticlePool(settings.particles.length),\n\t\tparticleRate = settings.particles.length / settings.particles.duration,\n\t\t// particles/sec\n\t\ttime;\n\n\t// get point on heart with -PI <= t <= PI\n\tfunction pointOnHeart(t) {\n\t\treturn new Point(160 * Math.pow(Math.sin(t), 3), 130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25);\n\t}\n\n\t// creating the particle image using a dummy canvas\n\tvar image = (function() {\n\t\tvar canvas = document.createElement('canvas'),\n\t\t\tcontext = canvas.getContext('2d');\n\t\tcanvas.width = settings.particles.size;\n\t\tcanvas.height = settings.particles.size;\n\t\t// helper function to create the path\n\t\tfunction to(t) {\n\t\t\tvar point = pointOnHeart(t);\n\t\t\tpoint.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\n\t\t\tpoint.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\n\t\t\treturn point;\n\t\t}\n\t\t// create the path\n\t\tcontext.beginPath();\n\t\tvar t = -Math.PI;\n\t\tvar point = to(t);\n\t\tcontext.moveTo(point.x, point.y);\n\t\twhile (t < Math.PI) {\n\t\t\tt += 0.01; // baby steps!\n\t\t\tpoint = to(t);\n\t\t\tcontext.lineTo(point.x, point.y);\n\t\t}\n\t\tcontext.closePath();\n\t\t// create the fill\n\t\tcontext.fillStyle = '#ea80b0';\n\t\tcontext.fill();\n\t\t// create the image\n\t\tvar image = new Image();\n\t\timage.src = canvas.toDataURL();\n\t\treturn image;\n\t})();\n\n\t// render that thing!\n\tfunction render() {\n\t\t// next animation frame\n\t\trequestAnimationFrame(render);\n\n\t\t// update time\n\t\tvar newTime = new Date()\n\t\t\t.getTime() / 1000,\n\t\t\tdeltaTime = newTime - (time || newTime);\n\t\ttime = newTime;\n\n\t\t// clear canvas\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// create new particles\n\t\tvar amount = particleRate * deltaTime;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n\t\t\tvar dir = pos.clone()\n\t\t\t\t.length(settings.particles.velocity);\n\t\t\tparticles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\n\t\t}\n\n\t\t// update and draw particles\n\t\tparticles.update(deltaTime);\n\t\tparticles.draw(context, image);\n\t}\n\n\t// handle (re-)sizing of the canvas\n\tfunction onResize() {\n\t\tcanvas.width = canvas.clientWidth;\n\t\tcanvas.height = canvas.clientHeight;\n\t}\n\twindow.onresize = onResize;\n\n\t// delay rendering bootstrap\n\tsetTimeout(function() {\n\t\t\tonResize();\n\t\t\trender();\n\t\t},\n\t\t10);\n});\n//)(document.getElementById(\"pinkboard\"));\n\n</script>","updated":"2022-11-23T15:21:07.661Z","path":"heart/index.html","_id":"clas9ersm0008dk8f9rds0d34","comments":1,"layout":"page","content":"<p><canvas id=\"pinkboard\"></canvas></p>\n<script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"></script>\n<script>\nconsole.log(\"js loaded\");\nvar settings = {\n    particles: {\n        length: 500,\n        // maximum amount of particles\n        duration: 2,\n        // particle duration in sec\n        velocity: 100,\n        // particle velocity in pixels/sec\n        effect: -0.75,\n        // play with this for a nice effect\n        size: 30,\n        // particle size in pixels\n    },\n};\n\n/*\n * RequestAnimationFrame polyfill by Erik Möller\n */\n\n(\n    function() {\n        console.log(\"heart into page\");\n\n        var b = 0;\n        var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n        for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n            window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n            window.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"]\n        }\n        if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = function(h, e) {\n                var d = new Date()\n                    .getTime();\n                var f = Math.max(0, 16 - (d - b));\n                var g = window.setTimeout(function() {\n                        h(d + f)\n                    },\n                    f);\n                b = d + f;\n                return g\n            }\n        }\n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(d) {\n                clearTimeout(d)\n            }\n        }\n    }());\n\n/*\n * Point class\n */\nvar Point = (function() {\n    function Point(x, y) {\n        this.x = (typeof x !== 'undefined') ? x : 0;\n        this.y = (typeof y !== 'undefined') ? y : 0;\n    }\n    Point.prototype.clone = function() {\n        return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function(length) {\n        if (typeof length == 'undefined') return Math.sqrt(this.x * this.x + this.y * this.y);\n        this.normalize();\n        this.x *= length;\n        this.y *= length;\n        return this;\n    };\n    Point.prototype.normalize = function() {\n        var length = this.length();\n        this.x /= length;\n        this.y /= length;\n        return this;\n    };\n    return Point;\n})();\n\n/*\n * Particle class\n */\nvar Particle = (function() {\n    function Particle() {\n        this.position = new Point();\n        this.velocity = new Point();\n        this.acceleration = new Point();\n        this.age = 0;\n    }\n    Particle.prototype.initialize = function(x, y, dx, dy) {\n        this.position.x = x;\n        this.position.y = y;\n        this.velocity.x = dx;\n        this.velocity.y = dy;\n        this.acceleration.x = dx * settings.particles.effect;\n        this.acceleration.y = dy * settings.particles.effect;\n        this.age = 0;\n    };\n    Particle.prototype.update = function(deltaTime) {\n        this.position.x += this.velocity.x * deltaTime;\n        this.position.y += this.velocity.y * deltaTime;\n        this.velocity.x += this.acceleration.x * deltaTime;\n        this.velocity.y += this.acceleration.y * deltaTime;\n        this.age += deltaTime;\n    };\n    Particle.prototype.draw = function(context, image) {\n        function ease(t) {\n            return (--t) * t * t + 1;\n        }\n        var size = image.width * ease(this.age / settings.particles.duration);\n        context.globalAlpha = 1 - this.age / settings.particles.duration;\n        context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\n    };\n    return Particle;\n})();\n\n/*\n * ParticlePool class\n */\nvar ParticlePool = (function() {\n    var particles, firstActive = 0,\n        firstFree = 0,\n        duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n        // create and populate particle pool\n        particles = new Array(length);\n        for (var i = 0; i < particles.length; i++) particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function(x, y, dx, dy) {\n        particles[firstFree].initialize(x, y, dx, dy);\n\n        // handle circular queue\n        firstFree++;\n        if (firstFree == particles.length) firstFree = 0;\n        if (firstActive == firstFree) firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function(deltaTime) {\n        var i;\n\n        // update active particles\n        if (firstActive < firstFree) {\n            for (i = firstActive; i < firstFree; i++) particles[i].update(deltaTime);\n        }\n        if (firstFree < firstActive) {\n            for (i = firstActive; i < particles.length; i++) particles[i].update(deltaTime);\n            for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n        }\n\n        // remove inactive particles\n        while (particles[firstActive].age >= duration && firstActive != firstFree) {\n            firstActive++;\n            if (firstActive == particles.length) firstActive = 0;\n        }\n\n    };\n    ParticlePool.prototype.draw = function(context, image) {\n        // draw active particles\n        if (firstActive < firstFree) {\n            for (i = firstActive; i < firstFree; i++) particles[i].draw(context, image);\n        }\n        if (firstFree < firstActive) {\n            for (i = firstActive; i < particles.length; i++) particles[i].draw(context, image);\n            for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n        }\n    };\n    return ParticlePool;\n})();\n\n/*\n * Putting it all together\n */\n\n$(document).ready(function() {\n    canvas = document.getElementById(\"pinkboard\");\n    console.log(\"heart into\");\n    console.log(canvas)\n    var canvasObj = document.getElementById(\"pinkboard\");\n    var parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n    // console.log(parentObj.clientWidth);\n    canvasObj.width = parentObj.clientWidth;\n    canvasObj.height = parentObj.clientWidth;\n\n    window.addEventListener(\"resize\", () => {\n        var canvasObj = document.getElementById(\"pinkboard\");\n        if (canvasObj) {\n            var parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n            // console.log(parentObj.clientWidth);\n            canvasObj.width = parentObj.clientWidth;\n            canvasObj.height = parentObj.clientWidth;\n        }\n    });\n\n\n    var context = canvas.getContext('2d'),\n        particles = new ParticlePool(settings.particles.length),\n        particleRate = settings.particles.length / settings.particles.duration,\n        // particles/sec\n        time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n        return new Point(160 * Math.pow(Math.sin(t), 3), 130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25);\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function() {\n        var canvas = document.createElement('canvas'),\n            context = canvas.getContext('2d');\n        canvas.width = settings.particles.size;\n        canvas.height = settings.particles.size;\n        // helper function to create the path\n        function to(t) {\n            var point = pointOnHeart(t);\n            point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\n            point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\n            return point;\n        }\n        // create the path\n        context.beginPath();\n        var t = -Math.PI;\n        var point = to(t);\n        context.moveTo(point.x, point.y);\n        while (t < Math.PI) {\n            t += 0.01; // baby steps!\n            point = to(t);\n            context.lineTo(point.x, point.y);\n        }\n        context.closePath();\n        // create the fill\n        context.fillStyle = '#ea80b0';\n        context.fill();\n        // create the image\n        var image = new Image();\n        image.src = canvas.toDataURL();\n        return image;\n    })();\n\n    // render that thing!\n    function render() {\n        // next animation frame\n        requestAnimationFrame(render);\n\n        // update time\n        var newTime = new Date()\n            .getTime() / 1000,\n            deltaTime = newTime - (time || newTime);\n        time = newTime;\n\n        // clear canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        // create new particles\n        var amount = particleRate * deltaTime;\n        for (var i = 0; i < amount; i++) {\n            var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n            var dir = pos.clone()\n                .length(settings.particles.velocity);\n            particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\n        }\n\n        // update and draw particles\n        particles.update(deltaTime);\n        particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function() {\n            onResize();\n            render();\n        },\n        10);\n});\n//)(document.getElementById(\"pinkboard\"));\n\n</script>","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<p><canvas id=\"pinkboard\"></canvas></p>\n<script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"></script>\n<script>\nconsole.log(\"js loaded\");\nvar settings = {\n    particles: {\n        length: 500,\n        // maximum amount of particles\n        duration: 2,\n        // particle duration in sec\n        velocity: 100,\n        // particle velocity in pixels/sec\n        effect: -0.75,\n        // play with this for a nice effect\n        size: 30,\n        // particle size in pixels\n    },\n};\n\n/*\n * RequestAnimationFrame polyfill by Erik Möller\n */\n\n(\n    function() {\n        console.log(\"heart into page\");\n\n        var b = 0;\n        var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n        for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n            window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n            window.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"]\n        }\n        if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = function(h, e) {\n                var d = new Date()\n                    .getTime();\n                var f = Math.max(0, 16 - (d - b));\n                var g = window.setTimeout(function() {\n                        h(d + f)\n                    },\n                    f);\n                b = d + f;\n                return g\n            }\n        }\n        if (!window.cancelAnimationFrame) {\n            window.cancelAnimationFrame = function(d) {\n                clearTimeout(d)\n            }\n        }\n    }());\n\n/*\n * Point class\n */\nvar Point = (function() {\n    function Point(x, y) {\n        this.x = (typeof x !== 'undefined') ? x : 0;\n        this.y = (typeof y !== 'undefined') ? y : 0;\n    }\n    Point.prototype.clone = function() {\n        return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function(length) {\n        if (typeof length == 'undefined') return Math.sqrt(this.x * this.x + this.y * this.y);\n        this.normalize();\n        this.x *= length;\n        this.y *= length;\n        return this;\n    };\n    Point.prototype.normalize = function() {\n        var length = this.length();\n        this.x /= length;\n        this.y /= length;\n        return this;\n    };\n    return Point;\n})();\n\n/*\n * Particle class\n */\nvar Particle = (function() {\n    function Particle() {\n        this.position = new Point();\n        this.velocity = new Point();\n        this.acceleration = new Point();\n        this.age = 0;\n    }\n    Particle.prototype.initialize = function(x, y, dx, dy) {\n        this.position.x = x;\n        this.position.y = y;\n        this.velocity.x = dx;\n        this.velocity.y = dy;\n        this.acceleration.x = dx * settings.particles.effect;\n        this.acceleration.y = dy * settings.particles.effect;\n        this.age = 0;\n    };\n    Particle.prototype.update = function(deltaTime) {\n        this.position.x += this.velocity.x * deltaTime;\n        this.position.y += this.velocity.y * deltaTime;\n        this.velocity.x += this.acceleration.x * deltaTime;\n        this.velocity.y += this.acceleration.y * deltaTime;\n        this.age += deltaTime;\n    };\n    Particle.prototype.draw = function(context, image) {\n        function ease(t) {\n            return (--t) * t * t + 1;\n        }\n        var size = image.width * ease(this.age / settings.particles.duration);\n        context.globalAlpha = 1 - this.age / settings.particles.duration;\n        context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\n    };\n    return Particle;\n})();\n\n/*\n * ParticlePool class\n */\nvar ParticlePool = (function() {\n    var particles, firstActive = 0,\n        firstFree = 0,\n        duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n        // create and populate particle pool\n        particles = new Array(length);\n        for (var i = 0; i < particles.length; i++) particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function(x, y, dx, dy) {\n        particles[firstFree].initialize(x, y, dx, dy);\n\n        // handle circular queue\n        firstFree++;\n        if (firstFree == particles.length) firstFree = 0;\n        if (firstActive == firstFree) firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function(deltaTime) {\n        var i;\n\n        // update active particles\n        if (firstActive < firstFree) {\n            for (i = firstActive; i < firstFree; i++) particles[i].update(deltaTime);\n        }\n        if (firstFree < firstActive) {\n            for (i = firstActive; i < particles.length; i++) particles[i].update(deltaTime);\n            for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n        }\n\n        // remove inactive particles\n        while (particles[firstActive].age >= duration && firstActive != firstFree) {\n            firstActive++;\n            if (firstActive == particles.length) firstActive = 0;\n        }\n\n    };\n    ParticlePool.prototype.draw = function(context, image) {\n        // draw active particles\n        if (firstActive < firstFree) {\n            for (i = firstActive; i < firstFree; i++) particles[i].draw(context, image);\n        }\n        if (firstFree < firstActive) {\n            for (i = firstActive; i < particles.length; i++) particles[i].draw(context, image);\n            for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n        }\n    };\n    return ParticlePool;\n})();\n\n/*\n * Putting it all together\n */\n\n$(document).ready(function() {\n    canvas = document.getElementById(\"pinkboard\");\n    console.log(\"heart into\");\n    console.log(canvas)\n    var canvasObj = document.getElementById(\"pinkboard\");\n    var parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n    // console.log(parentObj.clientWidth);\n    canvasObj.width = parentObj.clientWidth;\n    canvasObj.height = parentObj.clientWidth;\n\n    window.addEventListener(\"resize\", () => {\n        var canvasObj = document.getElementById(\"pinkboard\");\n        if (canvasObj) {\n            var parentObj = canvasObj.parentNode; //.parentNode.parentNode;\n            // console.log(parentObj.clientWidth);\n            canvasObj.width = parentObj.clientWidth;\n            canvasObj.height = parentObj.clientWidth;\n        }\n    });\n\n\n    var context = canvas.getContext('2d'),\n        particles = new ParticlePool(settings.particles.length),\n        particleRate = settings.particles.length / settings.particles.duration,\n        // particles/sec\n        time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n        return new Point(160 * Math.pow(Math.sin(t), 3), 130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25);\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function() {\n        var canvas = document.createElement('canvas'),\n            context = canvas.getContext('2d');\n        canvas.width = settings.particles.size;\n        canvas.height = settings.particles.size;\n        // helper function to create the path\n        function to(t) {\n            var point = pointOnHeart(t);\n            point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\n            point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\n            return point;\n        }\n        // create the path\n        context.beginPath();\n        var t = -Math.PI;\n        var point = to(t);\n        context.moveTo(point.x, point.y);\n        while (t < Math.PI) {\n            t += 0.01; // baby steps!\n            point = to(t);\n            context.lineTo(point.x, point.y);\n        }\n        context.closePath();\n        // create the fill\n        context.fillStyle = '#ea80b0';\n        context.fill();\n        // create the image\n        var image = new Image();\n        image.src = canvas.toDataURL();\n        return image;\n    })();\n\n    // render that thing!\n    function render() {\n        // next animation frame\n        requestAnimationFrame(render);\n\n        // update time\n        var newTime = new Date()\n            .getTime() / 1000,\n            deltaTime = newTime - (time || newTime);\n        time = newTime;\n\n        // clear canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        // create new particles\n        var amount = particleRate * deltaTime;\n        for (var i = 0; i < amount; i++) {\n            var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n            var dir = pos.clone()\n                .length(settings.particles.velocity);\n            particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\n        }\n\n        // update and draw particles\n        particles.update(deltaTime);\n        particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function() {\n            onResize();\n            render();\n        },\n        10);\n});\n//)(document.getElementById(\"pinkboard\"));\n\n</script>"},{"title":"links","date":"2022-09-15T05:16:24.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-09-15 13:16:24\n---\n","updated":"2022-09-29T15:28:35.405Z","path":"links/index.html","comments":1,"layout":"page","_id":"clas9ersn000adk8f19lodhwk","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-09-15T11:29:45.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-09-15 19:29:45\n---\n","updated":"2022-09-29T15:28:35.405Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clas9ersq000edk8f0r55cd9c","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2022-09-29T16:02:18.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2022-09-30 00:02:18\n---\n","updated":"2022-09-29T16:02:18.135Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clas9ersr000gdk8f3699gjgr","content":"","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"camunda基础篇","date":"2022-10-20T08:38:59.000Z","_content":"# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# 工作流相关介绍\n\n**BPM**(BusinessProcessManagement)，业务流程管理是一种管理原则，通常也可以代指BPMS(BusinessProcessManagementSuite)，是一个实现整合不同系统和数据的流程管理软件套件.\n\n**BPMN**(BusinessProcessModelandNotation)是基于流程图的通用可视化标准。该流程图被设计用于创建业务流程操作的图形化模型。业务流程模型就是图形化对象的网状图，包括活动和用于定义这些活动执行顺序的`流程设计器`。BPMN2.0正式版本于2011年1月3日发布，常见的`工作流引擎`如：Activiti、Flowable、jBPM 都基于 BPMN 2.0 标准。\n\n然后来看看BPM的发展历程：\n\n![image-20220830005000114](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220830005000114.png)\n\n# Camunda介绍\n\n官网地址：https://camunda.com/\n\n中文站点：http://camunda-cn.shaochenfeng.com/\n\n下载：https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/\n\n案例地址：[Congratulation! | docs.camunda.org](https://docs.camunda.org/get-started/quick-start/complete/)\n\n前期准备工作: JAVA1.8以上的JRE或JDK\n\n## Camunda Modeler \n\nCamunda Modeler 是Camunda 官方提供的一个流程设计器，用于编辑流程图以及其他模型【表单】，也就是一个流程图的绘图工具。可以官方下载，也可以在提供给大家的资料中获取。获取后直接解压缩即可，注意：解压安装到非中文目录中!!!\n\n![image-20220901105936567](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901105936567.png)\n\n\n\n启动的效果：\n\n![image-20220901110007447](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110007447.png)\n\n\n\n## Camunda BPM\n\n下载地址 https://camunda.com/download/\n\nCamunda BPM 是Camunda官方提供的一个`业务流程管理`平台,用来管理，部署的流程定义、执行任务，策略等。下载安装一个Camunda平台，成功解压 Camunda 平台的发行版后，执行名为start.bat（对于 Windows 用户）或start.sh（对于 Unix 用户）的脚本。此脚本将启动应用程序服务器。\n\n![image-20220901110225636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110225636.png)\n\n打开您的 Web 浏览器并导航到http://localhost:8080/以访问欢迎页面，Camunda的管理平台。\n\n\n\n![image-20220718162641800](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162641800.png)\n\n\n\n登录成功的主页：\n\n![image-20220718162726028](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162726028.png)\n\n\n\n\n\n\n\n## 入门案例\n\n### 创建简单流程\n\n我们先通过 Modeler 来绘制一个简单流程\n\n1.) 创建流程：选择 BPMN diagram (Camunda Platform)\n\n![image-20220901110718700](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110718700.png)\n\n2.) 创建开始节点：并设定节点名称\n\n![image-20220901110850675](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110850675.png)\n\n3.) 创建服务节点：设置处理方式\n\n![image-20220901110926577](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110926577.png)\n\n![image-20220901111045576](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111045576.png)\n\n我们切换节点的类型为 `service Task`\n\n![image-20220901111125584](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111125584.png)\n\n![image-20220901111141656](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111141656.png)\n\n然后我们需要配置`刷卡付款`节点，服务类型有很多执行的方法，这次我们使用“external（外部）”任务模式。\n\n![image-20220901111330988](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111330988.png)\n\n具体配置内容为\n\n![image-20220901111419588](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111419588.png)\n\n\n\n4.) 添加结束节点\n\n![image-20220901111521063](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111521063.png)\n\n\n\n5.) 配置流程参数\n\n点击画布的空白处，右侧的面板会显示当前流程本身的参数,这里我们修改id为*payment-retrieval*，id是区分流程的标识然后修改Name 为“付款流程”最后确保 `Executable`是勾选的，只有`Executable`被勾选，流程才能执行\n\n![image-20220901111725855](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111725855.png)\n\n\n\n### 外部任务\n\n在上面设计的流程图，`刷卡付款`节点的处理是外部任务，Camunda 可以使多种语言实现业务逻辑，我们以Java为例来介绍。\n\n添加相关的依赖：\n\n```xml\n    <dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.camunda.bpm</groupId>\n\t\t\t<artifactId>camunda-external-task-client</artifactId>\n\t\t\t<version>7.15.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-simple</artifactId>\n\t\t\t<version>1.6.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t<version>2.3.1</version>\n\t\t</dependency>\n\t</dependencies>\n\n```\n\n编写处理的业务逻辑的代码\n\n```java\nimport org.camunda.bpm.client.ExternalTaskClient;\n\nimport java.awt.*;\nimport java.net.URI;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        ExternalTaskClient client = ExternalTaskClient.create()\n                .baseUrl(\"http://localhost:8080/engine-rest\")\n                .asyncResponseTimeout(10000) // 长轮询超时时间\n                .build();\n        // 订阅指定的外部任务\n        client.subscribe(\"charge-card\")\n                .lockDuration(1000)\n                .handler(((externalTask, externalTaskService) -> {\n                    // 获取流程变量\n                    String item = (String) externalTask.getVariable(\"item\");\n                    Long amount = (Long) externalTask.getVariable(\"amount\");\n                    System.out.println(\"item--->\"+item + \"  amount-->\" + amount);\n                    try {\n                        Desktop.getDesktop().browse(new URI(\"https://docs.camunda.org/get-started/quick-start/complete\"));\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                    // 完成任务\n                    externalTaskService.complete(externalTask);\n                })).open();\n    }\n}\n\n```\n\n运行该方法即可，当流程处理时会执行相关逻辑。\n\n\n\n### 3.3 部署流程\n\n接下来我们就可以来部署上面定义的流程了。使用 Camunda Modeler 部署流程，点击工具栏中的部署按钮可以将当前流程部署到流程引擎，点击部署按钮，输入Deployment Name 为 “Payment” ，输入下方REST Endpoint 为http://localhost:8080/engine-rest ，然后点击右下角Deploy部署\n\n\n部署操作：\n\n![image-20220901102738775](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102738775.png)\n\n部署的时候报错：原因是安装路径中有中文\n\n![image-20220901101904825](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901101904825.png)\n\n\n\n部署成功：\n\n![image-20220901102705446](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102705446.png)\n\n\n\n然后在BPM中我们可以查看部署的流程：\n\n![image-20220901112401741](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112401741.png)\n\n\n\n\n\n### 启动流程\n\n我们使用Rest API发起流程，所以需要一个接口测试工具（例如：Postman），或者也可以使用电脑自带的curl\n\ncurl执行如下命令\n\n```curl\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"variables\": {\"amount\": {\"value\":555,\"type\":\"long\"}, \"item\": {\"value\":\"item-xyz\"} } }' http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start\n\n```\n\npostman方式处理\n\n在url中输入：http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start 通过`POST`方式提交，提交的方式是`JSON` 数据，具体内容为：\n\n```json\n{\n\t\"variables\": {\n\t\t\"amount\": {\n\t\t\t\"value\":555,\n\t\t\t\"type\":\"long\"\n\t\t},\n\t\t\"item\": {\n\t\t\t\"value\": \"item-xyz\"\n\t\t}\n\t}\n}\n\n```\n\n![image-20220901112634925](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112634925.png)\n\n然后我们点击发送，操作成功可以看到如下的返回信息\n\n![image-20220901112709320](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112709320.png)\n\n\n\n同时任务执行后我们在控制台可以看到相关的信息\n\n![image-20220901112810150](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112810150.png)\n\n\n\n\n\n# 案例扩展\n\n上面的案例过于简单，我们添加不同的任务节点和网关来丰富下\n\n## 用户任务\n\n\n\n### 添加节点\n\n 我们在上面的案例中添加一个`用户任务`来处理流程。\n\n![image-20220903233945199](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903233945199.png)\n\n点击刚刚创建的`批准付款`节点，然后通过扳手设置节点的类型为`用户任务`(User Task)\n\n![image-20220903234050669](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234050669.png)\n\n\n\n然后设置节点的审批人为`demo`\n\n![image-20220903234231682](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234231682.png)\n\n\n\n### 配置表单\n\n在`用户节点`处我们绑定表单数据。然后创建表单相关的字段，并添加对应的描述信息。\n\n![image-20220904001026418](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001026418.png)\n\n> amount字段：\n>\n> ​     ID:amount\n>\n> ​     Type:long\n>\n> ​     Label:金额\n>\n> Item字段：\n>\n> ​     ID:item\n>\n> ​     Type:string\n>\n> ​     Label:项目\n>\n> Approved字段：\n>\n> ​     ID:approved\n>\n> ​     Type:boolean\n>\n> ​     Label:是否同意\n\n\n\n### 部署流程\n\n流程定义好之后我们就可以部署流程了。直接在`Camunda Modeler`工具栏上的上传按钮将流程上传到流程引擎中。部署后在`Camunda Web`中查看部署的流程。\n\n![image-20220904001636662](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001636662.png)\n\n\n\n\n\n### 测试流程\n\n打开任务列表（http://localhost:8080/camunda/app/tasklist/），使用 demo / demo 登录。点击右上角的 `Start process` ，在弹出的对话框中选择“付款流程”.\n\n![image-20220904001816475](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001816475.png)\n\n这时会弹出编辑流程变量的对话框，可以通过点击 Add a variable 按钮添加变量，这次我们先不添加，直接点击右下角` Start `启动流程。\n\n![image-20220904001902564](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001902564.png)\n\n这时，在任务列表应该就能看到刚创建的人工任务了，如果没有可以手动刷新一下\n\n![image-20220904001953028](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001953028.png)\n\n\n\n到这儿这个`用户任务`节点的人工审核就应该要处理了，我们在下一个案例中继续这个案例，我们加入排他网关来处理。\n\n\n\n\n\n## 排他网关\n\n我们将使用**排他网关**(*Exclusive Gateways*)，为流程添加分支，仅在金额足够大的时候进行人工审核.\n\n### 添加网关节点\n\n首先打开`Camunda Modeler `，在左侧的工具架中找到网关（菱形），将它拖动到“付款请求”和“刷卡付款”之间，将“批准付款”向下移动再添加一个网关，调整流程，最后看起来类似这样：\n\n![image-20220904004632887](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004632887.png)\n\n\n\n### 配置网关\n\n接下来，我们选择“<1000”的连线，打开属性面板，选择“Condition Type”为“Expression”，这里我们使用[JAVA统一表达式语言](https://docs.camunda.org/manual/latest/user-guide/process-engine/expression-language/)编写条件，这里要做的是在金额小于1000时直接刷卡付款，则输入表达式 `${amount<1000}`\n\n![image-20220904004725626](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004725626.png)\n\n同样的，对另一条线也进行配置，表达式为`${amount>=1000}`\n\n![image-20220904004747234](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004747234.png)\n\n然后`是否批准`的排他网关节点我们也需要处理下\n\n![image-20220904004845594](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004845594.png)\n\n![image-20220904004910392](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004910392.png)\n\n\n\n### 部署流程\n\n部署流程和上面的操作是一样的。\n\n![image-20220904005023089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005023089.png)\n\n\n\n### 测试操作\n\n打开任务列表（http://localhost:8080/camunda/app/tasklist/），使用 demo / demo 登录,点击右上角的 Start process ，在弹出的对话框中选择“付款流程”,上面例子中，我们直接点击 Start，但这次我们要增加几个变量来测试动态的流程。\n\n![image-20220904005221732](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005221732.png)\n\n试着更改 `amount` 的值，查看对流程执行顺序的影响\n\n\n\n\n\n## 决策自动化\n\n在上面的案例中我们在审批时是通过`用户任务`结合表单来做的审批，本案例我们来看看我们通过`DMN`为流程添加一个业务规则来处理\n\n### 添加业务规则\n\n打开 Camunda Modeler，点击 “批准付款”，在右面的扳手菜单中，将类型改为“**Business Rule Task** ”（业务规则任务）\n\n![image-20220904113549016](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113549016.png)\n\n下一步，将属性面板中的 `Implementation` 选择为`DMN`，输入 Decision Ref 为 `approve-payment`，为了将决策的结果存入流程变量，我们还需要编辑结果变量Result Variable 为`approved`，结果类型 Map Decision Result 选择为 `singleEntry `，最后结果如下：\n\n\n![image-20220904113700661](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113700661.png)\n\n\n\n### 创建DMN表\n\n点击 `File > New File > DMN Diagram`创建一个新的DMN,现在画布上已经存在一个决策元素了，选择它，然后在右侧属性面板中更改`Id`和`Name`，这里的Id需要和流程中的`Decision Ref`属性一致，这次我们输入Id为`approve-payment`\n\n![image-20220904113803219](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113803219.png)\n\n接下来，点击决策元素左上角的表格按钮，创建新的DMN表.\n\n![image-20220904113905505](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113905505.png)\n\n\n\n### 编辑DMN表\n\n首先编辑输入参数，在本例中，为了简单，我们依据项目名进行判断，规则可以使用 `FEEL 表达式`、`JUEL`或者 `Script` 书写，详情可以阅读 https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/\n\n双击表格中的*Input*，编辑第一个输入参数\n\n![image-20220904114105012](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114105012.png)\n\n下面，设置输入参数，双击*Output*编辑\n\n![image-20220904114133016](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114133016.png)\n\n下面，我们点击左侧的蓝色加号，添加一些规则，最后类似这样：\n\n![image-20220904114210501](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114210501.png)\n\n\n\n### 部署DMN表\n\n点击底部的部署按钮，将DMN部署到流程引擎中\n\n![image-20220904114317458](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114317458.png)\n\n\n\n### 流程案例测试\n\n现在打开 http://localhost:8080/camunda/app/cockpit/ ，使用demo/demo登录，可以看到决策定义增加了一个，点击进去可以看到刚才编辑的DMN.\n\n![image-20220904114413678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114413678.png)\n\n点击进去可以看到对应的决策信息\n\n![image-20220904114452196](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114452196.png)\n\n\n\n然后我们部署流程然后启动流程\n\n![image-20220904114623954](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114623954.png)\n\n该流程决策输出的`approved`为true\n\n![image-20220904114740904](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114740904.png)\n\n\n\n更改下输入的参数\n\n![image-20220904114822563](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114822563.png)\n\n该决策中输出的`approved`为false\n\n![image-20220904114913062](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114913062.png)\n\n好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java/boge3306)\n\n![image-20220904115333970](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png)\n\n","source":"_posts/2022/10/camunda基础篇.md","raw":"---\ntitle: camunda基础篇\ndate: 2022-10-20 16:38:59\ntags: [BPMN,camunda]\ncategories: [笔记]\n---\n# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# 工作流相关介绍\n\n**BPM**(BusinessProcessManagement)，业务流程管理是一种管理原则，通常也可以代指BPMS(BusinessProcessManagementSuite)，是一个实现整合不同系统和数据的流程管理软件套件.\n\n**BPMN**(BusinessProcessModelandNotation)是基于流程图的通用可视化标准。该流程图被设计用于创建业务流程操作的图形化模型。业务流程模型就是图形化对象的网状图，包括活动和用于定义这些活动执行顺序的`流程设计器`。BPMN2.0正式版本于2011年1月3日发布，常见的`工作流引擎`如：Activiti、Flowable、jBPM 都基于 BPMN 2.0 标准。\n\n然后来看看BPM的发展历程：\n\n![image-20220830005000114](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220830005000114.png)\n\n# Camunda介绍\n\n官网地址：https://camunda.com/\n\n中文站点：http://camunda-cn.shaochenfeng.com/\n\n下载：https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/\n\n案例地址：[Congratulation! | docs.camunda.org](https://docs.camunda.org/get-started/quick-start/complete/)\n\n前期准备工作: JAVA1.8以上的JRE或JDK\n\n## Camunda Modeler \n\nCamunda Modeler 是Camunda 官方提供的一个流程设计器，用于编辑流程图以及其他模型【表单】，也就是一个流程图的绘图工具。可以官方下载，也可以在提供给大家的资料中获取。获取后直接解压缩即可，注意：解压安装到非中文目录中!!!\n\n![image-20220901105936567](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901105936567.png)\n\n\n\n启动的效果：\n\n![image-20220901110007447](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110007447.png)\n\n\n\n## Camunda BPM\n\n下载地址 https://camunda.com/download/\n\nCamunda BPM 是Camunda官方提供的一个`业务流程管理`平台,用来管理，部署的流程定义、执行任务，策略等。下载安装一个Camunda平台，成功解压 Camunda 平台的发行版后，执行名为start.bat（对于 Windows 用户）或start.sh（对于 Unix 用户）的脚本。此脚本将启动应用程序服务器。\n\n![image-20220901110225636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110225636.png)\n\n打开您的 Web 浏览器并导航到http://localhost:8080/以访问欢迎页面，Camunda的管理平台。\n\n\n\n![image-20220718162641800](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162641800.png)\n\n\n\n登录成功的主页：\n\n![image-20220718162726028](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162726028.png)\n\n\n\n\n\n\n\n## 入门案例\n\n### 创建简单流程\n\n我们先通过 Modeler 来绘制一个简单流程\n\n1.) 创建流程：选择 BPMN diagram (Camunda Platform)\n\n![image-20220901110718700](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110718700.png)\n\n2.) 创建开始节点：并设定节点名称\n\n![image-20220901110850675](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110850675.png)\n\n3.) 创建服务节点：设置处理方式\n\n![image-20220901110926577](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110926577.png)\n\n![image-20220901111045576](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111045576.png)\n\n我们切换节点的类型为 `service Task`\n\n![image-20220901111125584](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111125584.png)\n\n![image-20220901111141656](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111141656.png)\n\n然后我们需要配置`刷卡付款`节点，服务类型有很多执行的方法，这次我们使用“external（外部）”任务模式。\n\n![image-20220901111330988](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111330988.png)\n\n具体配置内容为\n\n![image-20220901111419588](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111419588.png)\n\n\n\n4.) 添加结束节点\n\n![image-20220901111521063](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111521063.png)\n\n\n\n5.) 配置流程参数\n\n点击画布的空白处，右侧的面板会显示当前流程本身的参数,这里我们修改id为*payment-retrieval*，id是区分流程的标识然后修改Name 为“付款流程”最后确保 `Executable`是勾选的，只有`Executable`被勾选，流程才能执行\n\n![image-20220901111725855](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111725855.png)\n\n\n\n### 外部任务\n\n在上面设计的流程图，`刷卡付款`节点的处理是外部任务，Camunda 可以使多种语言实现业务逻辑，我们以Java为例来介绍。\n\n添加相关的依赖：\n\n```xml\n    <dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.camunda.bpm</groupId>\n\t\t\t<artifactId>camunda-external-task-client</artifactId>\n\t\t\t<version>7.15.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-simple</artifactId>\n\t\t\t<version>1.6.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t<version>2.3.1</version>\n\t\t</dependency>\n\t</dependencies>\n\n```\n\n编写处理的业务逻辑的代码\n\n```java\nimport org.camunda.bpm.client.ExternalTaskClient;\n\nimport java.awt.*;\nimport java.net.URI;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        ExternalTaskClient client = ExternalTaskClient.create()\n                .baseUrl(\"http://localhost:8080/engine-rest\")\n                .asyncResponseTimeout(10000) // 长轮询超时时间\n                .build();\n        // 订阅指定的外部任务\n        client.subscribe(\"charge-card\")\n                .lockDuration(1000)\n                .handler(((externalTask, externalTaskService) -> {\n                    // 获取流程变量\n                    String item = (String) externalTask.getVariable(\"item\");\n                    Long amount = (Long) externalTask.getVariable(\"amount\");\n                    System.out.println(\"item--->\"+item + \"  amount-->\" + amount);\n                    try {\n                        Desktop.getDesktop().browse(new URI(\"https://docs.camunda.org/get-started/quick-start/complete\"));\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                    // 完成任务\n                    externalTaskService.complete(externalTask);\n                })).open();\n    }\n}\n\n```\n\n运行该方法即可，当流程处理时会执行相关逻辑。\n\n\n\n### 3.3 部署流程\n\n接下来我们就可以来部署上面定义的流程了。使用 Camunda Modeler 部署流程，点击工具栏中的部署按钮可以将当前流程部署到流程引擎，点击部署按钮，输入Deployment Name 为 “Payment” ，输入下方REST Endpoint 为http://localhost:8080/engine-rest ，然后点击右下角Deploy部署\n\n\n部署操作：\n\n![image-20220901102738775](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102738775.png)\n\n部署的时候报错：原因是安装路径中有中文\n\n![image-20220901101904825](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901101904825.png)\n\n\n\n部署成功：\n\n![image-20220901102705446](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102705446.png)\n\n\n\n然后在BPM中我们可以查看部署的流程：\n\n![image-20220901112401741](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112401741.png)\n\n\n\n\n\n### 启动流程\n\n我们使用Rest API发起流程，所以需要一个接口测试工具（例如：Postman），或者也可以使用电脑自带的curl\n\ncurl执行如下命令\n\n```curl\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"variables\": {\"amount\": {\"value\":555,\"type\":\"long\"}, \"item\": {\"value\":\"item-xyz\"} } }' http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start\n\n```\n\npostman方式处理\n\n在url中输入：http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start 通过`POST`方式提交，提交的方式是`JSON` 数据，具体内容为：\n\n```json\n{\n\t\"variables\": {\n\t\t\"amount\": {\n\t\t\t\"value\":555,\n\t\t\t\"type\":\"long\"\n\t\t},\n\t\t\"item\": {\n\t\t\t\"value\": \"item-xyz\"\n\t\t}\n\t}\n}\n\n```\n\n![image-20220901112634925](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112634925.png)\n\n然后我们点击发送，操作成功可以看到如下的返回信息\n\n![image-20220901112709320](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112709320.png)\n\n\n\n同时任务执行后我们在控制台可以看到相关的信息\n\n![image-20220901112810150](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112810150.png)\n\n\n\n\n\n# 案例扩展\n\n上面的案例过于简单，我们添加不同的任务节点和网关来丰富下\n\n## 用户任务\n\n\n\n### 添加节点\n\n 我们在上面的案例中添加一个`用户任务`来处理流程。\n\n![image-20220903233945199](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903233945199.png)\n\n点击刚刚创建的`批准付款`节点，然后通过扳手设置节点的类型为`用户任务`(User Task)\n\n![image-20220903234050669](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234050669.png)\n\n\n\n然后设置节点的审批人为`demo`\n\n![image-20220903234231682](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234231682.png)\n\n\n\n### 配置表单\n\n在`用户节点`处我们绑定表单数据。然后创建表单相关的字段，并添加对应的描述信息。\n\n![image-20220904001026418](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001026418.png)\n\n> amount字段：\n>\n> ​     ID:amount\n>\n> ​     Type:long\n>\n> ​     Label:金额\n>\n> Item字段：\n>\n> ​     ID:item\n>\n> ​     Type:string\n>\n> ​     Label:项目\n>\n> Approved字段：\n>\n> ​     ID:approved\n>\n> ​     Type:boolean\n>\n> ​     Label:是否同意\n\n\n\n### 部署流程\n\n流程定义好之后我们就可以部署流程了。直接在`Camunda Modeler`工具栏上的上传按钮将流程上传到流程引擎中。部署后在`Camunda Web`中查看部署的流程。\n\n![image-20220904001636662](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001636662.png)\n\n\n\n\n\n### 测试流程\n\n打开任务列表（http://localhost:8080/camunda/app/tasklist/），使用 demo / demo 登录。点击右上角的 `Start process` ，在弹出的对话框中选择“付款流程”.\n\n![image-20220904001816475](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001816475.png)\n\n这时会弹出编辑流程变量的对话框，可以通过点击 Add a variable 按钮添加变量，这次我们先不添加，直接点击右下角` Start `启动流程。\n\n![image-20220904001902564](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001902564.png)\n\n这时，在任务列表应该就能看到刚创建的人工任务了，如果没有可以手动刷新一下\n\n![image-20220904001953028](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001953028.png)\n\n\n\n到这儿这个`用户任务`节点的人工审核就应该要处理了，我们在下一个案例中继续这个案例，我们加入排他网关来处理。\n\n\n\n\n\n## 排他网关\n\n我们将使用**排他网关**(*Exclusive Gateways*)，为流程添加分支，仅在金额足够大的时候进行人工审核.\n\n### 添加网关节点\n\n首先打开`Camunda Modeler `，在左侧的工具架中找到网关（菱形），将它拖动到“付款请求”和“刷卡付款”之间，将“批准付款”向下移动再添加一个网关，调整流程，最后看起来类似这样：\n\n![image-20220904004632887](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004632887.png)\n\n\n\n### 配置网关\n\n接下来，我们选择“<1000”的连线，打开属性面板，选择“Condition Type”为“Expression”，这里我们使用[JAVA统一表达式语言](https://docs.camunda.org/manual/latest/user-guide/process-engine/expression-language/)编写条件，这里要做的是在金额小于1000时直接刷卡付款，则输入表达式 `${amount<1000}`\n\n![image-20220904004725626](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004725626.png)\n\n同样的，对另一条线也进行配置，表达式为`${amount>=1000}`\n\n![image-20220904004747234](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004747234.png)\n\n然后`是否批准`的排他网关节点我们也需要处理下\n\n![image-20220904004845594](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004845594.png)\n\n![image-20220904004910392](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004910392.png)\n\n\n\n### 部署流程\n\n部署流程和上面的操作是一样的。\n\n![image-20220904005023089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005023089.png)\n\n\n\n### 测试操作\n\n打开任务列表（http://localhost:8080/camunda/app/tasklist/），使用 demo / demo 登录,点击右上角的 Start process ，在弹出的对话框中选择“付款流程”,上面例子中，我们直接点击 Start，但这次我们要增加几个变量来测试动态的流程。\n\n![image-20220904005221732](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005221732.png)\n\n试着更改 `amount` 的值，查看对流程执行顺序的影响\n\n\n\n\n\n## 决策自动化\n\n在上面的案例中我们在审批时是通过`用户任务`结合表单来做的审批，本案例我们来看看我们通过`DMN`为流程添加一个业务规则来处理\n\n### 添加业务规则\n\n打开 Camunda Modeler，点击 “批准付款”，在右面的扳手菜单中，将类型改为“**Business Rule Task** ”（业务规则任务）\n\n![image-20220904113549016](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113549016.png)\n\n下一步，将属性面板中的 `Implementation` 选择为`DMN`，输入 Decision Ref 为 `approve-payment`，为了将决策的结果存入流程变量，我们还需要编辑结果变量Result Variable 为`approved`，结果类型 Map Decision Result 选择为 `singleEntry `，最后结果如下：\n\n\n![image-20220904113700661](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113700661.png)\n\n\n\n### 创建DMN表\n\n点击 `File > New File > DMN Diagram`创建一个新的DMN,现在画布上已经存在一个决策元素了，选择它，然后在右侧属性面板中更改`Id`和`Name`，这里的Id需要和流程中的`Decision Ref`属性一致，这次我们输入Id为`approve-payment`\n\n![image-20220904113803219](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113803219.png)\n\n接下来，点击决策元素左上角的表格按钮，创建新的DMN表.\n\n![image-20220904113905505](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113905505.png)\n\n\n\n### 编辑DMN表\n\n首先编辑输入参数，在本例中，为了简单，我们依据项目名进行判断，规则可以使用 `FEEL 表达式`、`JUEL`或者 `Script` 书写，详情可以阅读 https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/\n\n双击表格中的*Input*，编辑第一个输入参数\n\n![image-20220904114105012](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114105012.png)\n\n下面，设置输入参数，双击*Output*编辑\n\n![image-20220904114133016](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114133016.png)\n\n下面，我们点击左侧的蓝色加号，添加一些规则，最后类似这样：\n\n![image-20220904114210501](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114210501.png)\n\n\n\n### 部署DMN表\n\n点击底部的部署按钮，将DMN部署到流程引擎中\n\n![image-20220904114317458](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114317458.png)\n\n\n\n### 流程案例测试\n\n现在打开 http://localhost:8080/camunda/app/cockpit/ ，使用demo/demo登录，可以看到决策定义增加了一个，点击进去可以看到刚才编辑的DMN.\n\n![image-20220904114413678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114413678.png)\n\n点击进去可以看到对应的决策信息\n\n![image-20220904114452196](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114452196.png)\n\n\n\n然后我们部署流程然后启动流程\n\n![image-20220904114623954](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114623954.png)\n\n该流程决策输出的`approved`为true\n\n![image-20220904114740904](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114740904.png)\n\n\n\n更改下输入的参数\n\n![image-20220904114822563](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114822563.png)\n\n该决策中输出的`approved`为false\n\n![image-20220904114913062](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114913062.png)\n\n好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java/boge3306)\n\n![image-20220904115333970](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png)\n\n","slug":"camunda基础篇","published":1,"updated":"2022-11-05T14:16:59.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersd0001dk8f2mgfh7zt","content":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"工作流相关介绍\"><a href=\"#工作流相关介绍\" class=\"headerlink\" title=\"工作流相关介绍\"></a>工作流相关介绍</h1><p><strong>BPM</strong>(BusinessProcessManagement)，业务流程管理是一种管理原则，通常也可以代指BPMS(BusinessProcessManagementSuite)，是一个实现整合不同系统和数据的流程管理软件套件.</p>\n<p><strong>BPMN</strong>(BusinessProcessModelandNotation)是基于流程图的通用可视化标准。该流程图被设计用于创建业务流程操作的图形化模型。业务流程模型就是图形化对象的网状图，包括活动和用于定义这些活动执行顺序的<code>流程设计器</code>。BPMN2.0正式版本于2011年1月3日发布，常见的<code>工作流引擎</code>如：Activiti、Flowable、jBPM 都基于 BPMN 2.0 标准。</p>\n<p>然后来看看BPM的发展历程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220830005000114.png\"\n                      alt=\"image-20220830005000114\"\n                ></p>\n<h1 id=\"Camunda介绍\"><a href=\"#Camunda介绍\" class=\"headerlink\" title=\"Camunda介绍\"></a>Camunda介绍</h1><p>官网地址：<a class=\"link\"   href=\"https://camunda.com/\" >https://camunda.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中文站点：<a class=\"link\"   href=\"http://camunda-cn.shaochenfeng.com/\" >http://camunda-cn.shaochenfeng.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>下载：<a class=\"link\"   href=\"https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/\" >https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>案例地址：<a class=\"link\"   href=\"https://docs.camunda.org/get-started/quick-start/complete/\" >Congratulation! | docs.camunda.org<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>前期准备工作: JAVA1.8以上的JRE或JDK</p>\n<h2 id=\"Camunda-Modeler\"><a href=\"#Camunda-Modeler\" class=\"headerlink\" title=\"Camunda Modeler\"></a>Camunda Modeler</h2><p>Camunda Modeler 是Camunda 官方提供的一个流程设计器，用于编辑流程图以及其他模型【表单】，也就是一个流程图的绘图工具。可以官方下载，也可以在提供给大家的资料中获取。获取后直接解压缩即可，注意：解压安装到非中文目录中!!!</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901105936567.png\"\n                      alt=\"image-20220901105936567\"\n                ></p>\n<p>启动的效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110007447.png\"\n                      alt=\"image-20220901110007447\"\n                ></p>\n<h2 id=\"Camunda-BPM\"><a href=\"#Camunda-BPM\" class=\"headerlink\" title=\"Camunda BPM\"></a>Camunda BPM</h2><p>下载地址 <a class=\"link\"   href=\"https://camunda.com/download/\" >https://camunda.com/download/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>Camunda BPM 是Camunda官方提供的一个<code>业务流程管理</code>平台,用来管理，部署的流程定义、执行任务，策略等。下载安装一个Camunda平台，成功解压 Camunda 平台的发行版后，执行名为start.bat（对于 Windows 用户）或start.sh（对于 Unix 用户）的脚本。此脚本将启动应用程序服务器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110225636.png\"\n                      alt=\"image-20220901110225636\"\n                ></p>\n<p>打开您的 Web 浏览器并导航到<a class=\"link\"   href=\"http://localhost:8080/%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2%EF%BC%8CCamunda%E7%9A%84%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E3%80%82\" >http://localhost:8080/以访问欢迎页面，Camunda的管理平台。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162641800.png\"\n                      alt=\"image-20220718162641800\"\n                ></p>\n<p>登录成功的主页：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162726028.png\"\n                      alt=\"image-20220718162726028\"\n                ></p>\n<h2 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h2><h3 id=\"创建简单流程\"><a href=\"#创建简单流程\" class=\"headerlink\" title=\"创建简单流程\"></a>创建简单流程</h3><p>我们先通过 Modeler 来绘制一个简单流程</p>\n<p>1.) 创建流程：选择 BPMN diagram (Camunda Platform)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110718700.png\"\n                      alt=\"image-20220901110718700\"\n                ></p>\n<p>2.) 创建开始节点：并设定节点名称</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110850675.png\"\n                      alt=\"image-20220901110850675\"\n                ></p>\n<p>3.) 创建服务节点：设置处理方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110926577.png\"\n                      alt=\"image-20220901110926577\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111045576.png\"\n                      alt=\"image-20220901111045576\"\n                ></p>\n<p>我们切换节点的类型为 <code>service Task</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111125584.png\"\n                      alt=\"image-20220901111125584\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111141656.png\"\n                      alt=\"image-20220901111141656\"\n                ></p>\n<p>然后我们需要配置<code>刷卡付款</code>节点，服务类型有很多执行的方法，这次我们使用“external（外部）”任务模式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111330988.png\"\n                      alt=\"image-20220901111330988\"\n                ></p>\n<p>具体配置内容为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111419588.png\"\n                      alt=\"image-20220901111419588\"\n                ></p>\n<p>4.) 添加结束节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111521063.png\"\n                      alt=\"image-20220901111521063\"\n                ></p>\n<p>5.) 配置流程参数</p>\n<p>点击画布的空白处，右侧的面板会显示当前流程本身的参数,这里我们修改id为<em>payment-retrieval</em>，id是区分流程的标识然后修改Name 为“付款流程”最后确保 <code>Executable</code>是勾选的，只有<code>Executable</code>被勾选，流程才能执行</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111725855.png\"\n                      alt=\"image-20220901111725855\"\n                ></p>\n<h3 id=\"外部任务\"><a href=\"#外部任务\" class=\"headerlink\" title=\"外部任务\"></a>外部任务</h3><p>在上面设计的流程图，<code>刷卡付款</code>节点的处理是外部任务，Camunda 可以使多种语言实现业务逻辑，我们以Java为例来介绍。</p>\n<p>添加相关的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-external-task-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编写处理的业务逻辑的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.client.ExternalTaskClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExternalTaskClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> ExternalTaskClient.create()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">&quot;http://localhost:8080/engine-rest&quot;</span>)</span><br><span class=\"line\">                .asyncResponseTimeout(<span class=\"number\">10000</span>) <span class=\"comment\">// 长轮询超时时间</span></span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 订阅指定的外部任务</span></span><br><span class=\"line\">        client.subscribe(<span class=\"string\">&quot;charge-card&quot;</span>)</span><br><span class=\"line\">                .lockDuration(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                .handler(((externalTask, externalTaskService) -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取流程变量</span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> (String) externalTask.getVariable(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">Long</span> <span class=\"variable\">amount</span> <span class=\"operator\">=</span> (Long) externalTask.getVariable(<span class=\"string\">&quot;amount&quot;</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;item---&gt;&quot;</span>+item + <span class=\"string\">&quot;  amount--&gt;&quot;</span> + amount);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Desktop.getDesktop().browse(<span class=\"keyword\">new</span> <span class=\"title class_\">URI</span>(<span class=\"string\">&quot;https://docs.camunda.org/get-started/quick-start/complete&quot;</span>));</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">                    externalTaskService.complete(externalTask);</span><br><span class=\"line\">                &#125;)).open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行该方法即可，当流程处理时会执行相关逻辑。</p>\n<h3 id=\"3-3-部署流程\"><a href=\"#3-3-部署流程\" class=\"headerlink\" title=\"3.3 部署流程\"></a>3.3 部署流程</h3><p>接下来我们就可以来部署上面定义的流程了。使用 Camunda Modeler 部署流程，点击工具栏中的部署按钮可以将当前流程部署到流程引擎，点击部署按钮，输入Deployment Name 为 “Payment” ，输入下方REST Endpoint 为<a class=\"link\"   href=\"http://localhost:8080/engine-rest\" >http://localhost:8080/engine-rest<i class=\"fas fa-external-link-alt\"></i></a> ，然后点击右下角Deploy部署</p>\n<p>部署操作：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102738775.png\"\n                      alt=\"image-20220901102738775\"\n                ></p>\n<p>部署的时候报错：原因是安装路径中有中文</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901101904825.png\"\n                      alt=\"image-20220901101904825\"\n                ></p>\n<p>部署成功：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102705446.png\"\n                      alt=\"image-20220901102705446\"\n                ></p>\n<p>然后在BPM中我们可以查看部署的流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112401741.png\"\n                      alt=\"image-20220901112401741\"\n                ></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>我们使用Rest API发起流程，所以需要一个接口测试工具（例如：Postman），或者也可以使用电脑自带的curl</p>\n<p>curl执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;variables&quot;: &#123;&quot;amount&quot;: &#123;&quot;value&quot;:555,&quot;type&quot;:&quot;long&quot;&#125;, &quot;item&quot;: &#123;&quot;value&quot;:&quot;item-xyz&quot;&#125; &#125; &#125;&#x27; http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>postman方式处理</p>\n<p>在url中输入：<a class=\"link\"   href=\"http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start\" >http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start<i class=\"fas fa-external-link-alt\"></i></a> 通过<code>POST</code>方式提交，提交的方式是<code>JSON</code> 数据，具体内容为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;variables&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;amount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">555</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;item&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;item-xyz&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112634925.png\"\n                      alt=\"image-20220901112634925\"\n                ></p>\n<p>然后我们点击发送，操作成功可以看到如下的返回信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112709320.png\"\n                      alt=\"image-20220901112709320\"\n                ></p>\n<p>同时任务执行后我们在控制台可以看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112810150.png\"\n                      alt=\"image-20220901112810150\"\n                ></p>\n<h1 id=\"案例扩展\"><a href=\"#案例扩展\" class=\"headerlink\" title=\"案例扩展\"></a>案例扩展</h1><p>上面的案例过于简单，我们添加不同的任务节点和网关来丰富下</p>\n<h2 id=\"用户任务\"><a href=\"#用户任务\" class=\"headerlink\" title=\"用户任务\"></a>用户任务</h2><h3 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h3><p> 我们在上面的案例中添加一个<code>用户任务</code>来处理流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903233945199.png\"\n                      alt=\"image-20220903233945199\"\n                ></p>\n<p>点击刚刚创建的<code>批准付款</code>节点，然后通过扳手设置节点的类型为<code>用户任务</code>(User Task)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234050669.png\"\n                      alt=\"image-20220903234050669\"\n                ></p>\n<p>然后设置节点的审批人为<code>demo</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234231682.png\"\n                      alt=\"image-20220903234231682\"\n                ></p>\n<h3 id=\"配置表单\"><a href=\"#配置表单\" class=\"headerlink\" title=\"配置表单\"></a>配置表单</h3><p>在<code>用户节点</code>处我们绑定表单数据。然后创建表单相关的字段，并添加对应的描述信息。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001026418.png\"\n                      alt=\"image-20220904001026418\"\n                ></p>\n<blockquote>\n<p>amount字段：</p>\n<p>​     ID:amount</p>\n<p>​     Type:long</p>\n<p>​     Label:金额</p>\n<p>Item字段：</p>\n<p>​     ID:item</p>\n<p>​     Type:string</p>\n<p>​     Label:项目</p>\n<p>Approved字段：</p>\n<p>​     ID:approved</p>\n<p>​     Type:boolean</p>\n<p>​     Label:是否同意</p>\n</blockquote>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>流程定义好之后我们就可以部署流程了。直接在<code>Camunda Modeler</code>工具栏上的上传按钮将流程上传到流程引擎中。部署后在<code>Camunda Web</code>中查看部署的流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001636662.png\"\n                      alt=\"image-20220904001636662\"\n                ></p>\n<h3 id=\"测试流程\"><a href=\"#测试流程\" class=\"headerlink\" title=\"测试流程\"></a>测试流程</h3><p>打开任务列表（<a class=\"link\"   href=\"http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8\" >http://localhost:8080/camunda/app/tasklist/），使用<i class=\"fas fa-external-link-alt\"></i></a> demo &#x2F; demo 登录。点击右上角的 <code>Start process</code> ，在弹出的对话框中选择“付款流程”.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001816475.png\"\n                      alt=\"image-20220904001816475\"\n                ></p>\n<p>这时会弹出编辑流程变量的对话框，可以通过点击 Add a variable 按钮添加变量，这次我们先不添加，直接点击右下角<code>Start</code>启动流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001902564.png\"\n                      alt=\"image-20220904001902564\"\n                ></p>\n<p>这时，在任务列表应该就能看到刚创建的人工任务了，如果没有可以手动刷新一下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001953028.png\"\n                      alt=\"image-20220904001953028\"\n                ></p>\n<p>到这儿这个<code>用户任务</code>节点的人工审核就应该要处理了，我们在下一个案例中继续这个案例，我们加入排他网关来处理。</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p>我们将使用<strong>排他网关</strong>(<em>Exclusive Gateways</em>)，为流程添加分支，仅在金额足够大的时候进行人工审核.</p>\n<h3 id=\"添加网关节点\"><a href=\"#添加网关节点\" class=\"headerlink\" title=\"添加网关节点\"></a>添加网关节点</h3><p>首先打开<code>Camunda Modeler </code>，在左侧的工具架中找到网关（菱形），将它拖动到“付款请求”和“刷卡付款”之间，将“批准付款”向下移动再添加一个网关，调整流程，最后看起来类似这样：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004632887.png\"\n                      alt=\"image-20220904004632887\"\n                ></p>\n<h3 id=\"配置网关\"><a href=\"#配置网关\" class=\"headerlink\" title=\"配置网关\"></a>配置网关</h3><p>接下来，我们选择“&lt;1000”的连线，打开属性面板，选择“Condition Type”为“Expression”，这里我们使用<a class=\"link\"   href=\"https://docs.camunda.org/manual/latest/user-guide/process-engine/expression-language/\" >JAVA统一表达式语言<i class=\"fas fa-external-link-alt\"></i></a>编写条件，这里要做的是在金额小于1000时直接刷卡付款，则输入表达式 <code>$&#123;amount&lt;1000&#125;</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004725626.png\"\n                      alt=\"image-20220904004725626\"\n                ></p>\n<p>同样的，对另一条线也进行配置，表达式为<code>$&#123;amount&gt;=1000&#125;</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004747234.png\"\n                      alt=\"image-20220904004747234\"\n                ></p>\n<p>然后<code>是否批准</code>的排他网关节点我们也需要处理下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004845594.png\"\n                      alt=\"image-20220904004845594\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004910392.png\"\n                      alt=\"image-20220904004910392\"\n                ></p>\n<h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>部署流程和上面的操作是一样的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005023089.png\"\n                      alt=\"image-20220904005023089\"\n                ></p>\n<h3 id=\"测试操作\"><a href=\"#测试操作\" class=\"headerlink\" title=\"测试操作\"></a>测试操作</h3><p>打开任务列表（<a class=\"link\"   href=\"http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8\" >http://localhost:8080/camunda/app/tasklist/），使用<i class=\"fas fa-external-link-alt\"></i></a> demo &#x2F; demo 登录,点击右上角的 Start process ，在弹出的对话框中选择“付款流程”,上面例子中，我们直接点击 Start，但这次我们要增加几个变量来测试动态的流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005221732.png\"\n                      alt=\"image-20220904005221732\"\n                ></p>\n<p>试着更改 <code>amount</code> 的值，查看对流程执行顺序的影响</p>\n<h2 id=\"决策自动化\"><a href=\"#决策自动化\" class=\"headerlink\" title=\"决策自动化\"></a>决策自动化</h2><p>在上面的案例中我们在审批时是通过<code>用户任务</code>结合表单来做的审批，本案例我们来看看我们通过<code>DMN</code>为流程添加一个业务规则来处理</p>\n<h3 id=\"添加业务规则\"><a href=\"#添加业务规则\" class=\"headerlink\" title=\"添加业务规则\"></a>添加业务规则</h3><p>打开 Camunda Modeler，点击 “批准付款”，在右面的扳手菜单中，将类型改为“<strong>Business Rule Task</strong> ”（业务规则任务）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113549016.png\"\n                      alt=\"image-20220904113549016\"\n                ></p>\n<p>下一步，将属性面板中的 <code>Implementation</code> 选择为<code>DMN</code>，输入 Decision Ref 为 <code>approve-payment</code>，为了将决策的结果存入流程变量，我们还需要编辑结果变量Result Variable 为<code>approved</code>，结果类型 Map Decision Result 选择为 <code>singleEntry </code>，最后结果如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113700661.png\"\n                      alt=\"image-20220904113700661\"\n                ></p>\n<h3 id=\"创建DMN表\"><a href=\"#创建DMN表\" class=\"headerlink\" title=\"创建DMN表\"></a>创建DMN表</h3><p>点击 <code>File &gt; New File &gt; DMN Diagram</code>创建一个新的DMN,现在画布上已经存在一个决策元素了，选择它，然后在右侧属性面板中更改<code>Id</code>和<code>Name</code>，这里的Id需要和流程中的<code>Decision Ref</code>属性一致，这次我们输入Id为<code>approve-payment</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113803219.png\"\n                      alt=\"image-20220904113803219\"\n                ></p>\n<p>接下来，点击决策元素左上角的表格按钮，创建新的DMN表.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113905505.png\"\n                      alt=\"image-20220904113905505\"\n                ></p>\n<h3 id=\"编辑DMN表\"><a href=\"#编辑DMN表\" class=\"headerlink\" title=\"编辑DMN表\"></a>编辑DMN表</h3><p>首先编辑输入参数，在本例中，为了简单，我们依据项目名进行判断，规则可以使用 <code>FEEL 表达式</code>、<code>JUEL</code>或者 <code>Script</code> 书写，详情可以阅读 <a class=\"link\"   href=\"https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/\" >https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>双击表格中的<em>Input</em>，编辑第一个输入参数</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114105012.png\"\n                      alt=\"image-20220904114105012\"\n                ></p>\n<p>下面，设置输入参数，双击<em>Output</em>编辑</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114133016.png\"\n                      alt=\"image-20220904114133016\"\n                ></p>\n<p>下面，我们点击左侧的蓝色加号，添加一些规则，最后类似这样：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114210501.png\"\n                      alt=\"image-20220904114210501\"\n                ></p>\n<h3 id=\"部署DMN表\"><a href=\"#部署DMN表\" class=\"headerlink\" title=\"部署DMN表\"></a>部署DMN表</h3><p>点击底部的部署按钮，将DMN部署到流程引擎中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114317458.png\"\n                      alt=\"image-20220904114317458\"\n                ></p>\n<h3 id=\"流程案例测试\"><a href=\"#流程案例测试\" class=\"headerlink\" title=\"流程案例测试\"></a>流程案例测试</h3><p>现在打开 <a class=\"link\"   href=\"http://localhost:8080/camunda/app/cockpit/\" >http://localhost:8080/camunda/app/cockpit/<i class=\"fas fa-external-link-alt\"></i></a> ，使用demo&#x2F;demo登录，可以看到决策定义增加了一个，点击进去可以看到刚才编辑的DMN.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114413678.png\"\n                      alt=\"image-20220904114413678\"\n                ></p>\n<p>点击进去可以看到对应的决策信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114452196.png\"\n                      alt=\"image-20220904114452196\"\n                ></p>\n<p>然后我们部署流程然后启动流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114623954.png\"\n                      alt=\"image-20220904114623954\"\n                ></p>\n<p>该流程决策输出的<code>approved</code>为true</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114740904.png\"\n                      alt=\"image-20220904114740904\"\n                ></p>\n<p>更改下输入的参数</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114822563.png\"\n                      alt=\"image-20220904114822563\"\n                ></p>\n<p>该决策中输出的<code>approved</code>为false</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114913062.png\"\n                      alt=\"image-20220904114913062\"\n                ></p>\n<p>好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java&#x2F;boge3306)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png\"\n                      alt=\"image-20220904115333970\"\n                ></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"工作流相关介绍\"><a href=\"#工作流相关介绍\" class=\"headerlink\" title=\"工作流相关介绍\"></a>工作流相关介绍</h1><p><strong>BPM</strong>(BusinessProcessManagement)，业务流程管理是一种管理原则，通常也可以代指BPMS(BusinessProcessManagementSuite)，是一个实现整合不同系统和数据的流程管理软件套件.</p>\n<p><strong>BPMN</strong>(BusinessProcessModelandNotation)是基于流程图的通用可视化标准。该流程图被设计用于创建业务流程操作的图形化模型。业务流程模型就是图形化对象的网状图，包括活动和用于定义这些活动执行顺序的<code>流程设计器</code>。BPMN2.0正式版本于2011年1月3日发布，常见的<code>工作流引擎</code>如：Activiti、Flowable、jBPM 都基于 BPMN 2.0 标准。</p>\n<p>然后来看看BPM的发展历程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220830005000114.png\"\n                      alt=\"image-20220830005000114\"\n                ></p>\n<h1 id=\"Camunda介绍\"><a href=\"#Camunda介绍\" class=\"headerlink\" title=\"Camunda介绍\"></a>Camunda介绍</h1><p>官网地址：<a class=\"link\"   href=\"https://camunda.com/\" >https://camunda.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中文站点：<a class=\"link\"   href=\"http://camunda-cn.shaochenfeng.com/\" >http://camunda-cn.shaochenfeng.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>下载：<a class=\"link\"   href=\"https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/\" >https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>案例地址：<a class=\"link\"   href=\"https://docs.camunda.org/get-started/quick-start/complete/\" >Congratulation! | docs.camunda.org<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>前期准备工作: JAVA1.8以上的JRE或JDK</p>\n<h2 id=\"Camunda-Modeler\"><a href=\"#Camunda-Modeler\" class=\"headerlink\" title=\"Camunda Modeler\"></a>Camunda Modeler</h2><p>Camunda Modeler 是Camunda 官方提供的一个流程设计器，用于编辑流程图以及其他模型【表单】，也就是一个流程图的绘图工具。可以官方下载，也可以在提供给大家的资料中获取。获取后直接解压缩即可，注意：解压安装到非中文目录中!!!</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901105936567.png\"\n                      alt=\"image-20220901105936567\"\n                ></p>\n<p>启动的效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110007447.png\"\n                      alt=\"image-20220901110007447\"\n                ></p>\n<h2 id=\"Camunda-BPM\"><a href=\"#Camunda-BPM\" class=\"headerlink\" title=\"Camunda BPM\"></a>Camunda BPM</h2><p>下载地址 <a class=\"link\"   href=\"https://camunda.com/download/\" >https://camunda.com/download/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>Camunda BPM 是Camunda官方提供的一个<code>业务流程管理</code>平台,用来管理，部署的流程定义、执行任务，策略等。下载安装一个Camunda平台，成功解压 Camunda 平台的发行版后，执行名为start.bat（对于 Windows 用户）或start.sh（对于 Unix 用户）的脚本。此脚本将启动应用程序服务器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110225636.png\"\n                      alt=\"image-20220901110225636\"\n                ></p>\n<p>打开您的 Web 浏览器并导航到<a class=\"link\"   href=\"http://localhost:8080/%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2%EF%BC%8CCamunda%E7%9A%84%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E3%80%82\" >http://localhost:8080/以访问欢迎页面，Camunda的管理平台。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162641800.png\"\n                      alt=\"image-20220718162641800\"\n                ></p>\n<p>登录成功的主页：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220718162726028.png\"\n                      alt=\"image-20220718162726028\"\n                ></p>\n<h2 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h2><h3 id=\"创建简单流程\"><a href=\"#创建简单流程\" class=\"headerlink\" title=\"创建简单流程\"></a>创建简单流程</h3><p>我们先通过 Modeler 来绘制一个简单流程</p>\n<p>1.) 创建流程：选择 BPMN diagram (Camunda Platform)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110718700.png\"\n                      alt=\"image-20220901110718700\"\n                ></p>\n<p>2.) 创建开始节点：并设定节点名称</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110850675.png\"\n                      alt=\"image-20220901110850675\"\n                ></p>\n<p>3.) 创建服务节点：设置处理方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901110926577.png\"\n                      alt=\"image-20220901110926577\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111045576.png\"\n                      alt=\"image-20220901111045576\"\n                ></p>\n<p>我们切换节点的类型为 <code>service Task</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111125584.png\"\n                      alt=\"image-20220901111125584\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111141656.png\"\n                      alt=\"image-20220901111141656\"\n                ></p>\n<p>然后我们需要配置<code>刷卡付款</code>节点，服务类型有很多执行的方法，这次我们使用“external（外部）”任务模式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111330988.png\"\n                      alt=\"image-20220901111330988\"\n                ></p>\n<p>具体配置内容为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111419588.png\"\n                      alt=\"image-20220901111419588\"\n                ></p>\n<p>4.) 添加结束节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111521063.png\"\n                      alt=\"image-20220901111521063\"\n                ></p>\n<p>5.) 配置流程参数</p>\n<p>点击画布的空白处，右侧的面板会显示当前流程本身的参数,这里我们修改id为<em>payment-retrieval</em>，id是区分流程的标识然后修改Name 为“付款流程”最后确保 <code>Executable</code>是勾选的，只有<code>Executable</code>被勾选，流程才能执行</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901111725855.png\"\n                      alt=\"image-20220901111725855\"\n                ></p>\n<h3 id=\"外部任务\"><a href=\"#外部任务\" class=\"headerlink\" title=\"外部任务\"></a>外部任务</h3><p>在上面设计的流程图，<code>刷卡付款</code>节点的处理是外部任务，Camunda 可以使多种语言实现业务逻辑，我们以Java为例来介绍。</p>\n<p>添加相关的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-external-task-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编写处理的业务逻辑的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.client.ExternalTaskClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExternalTaskClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> ExternalTaskClient.create()</span><br><span class=\"line\">                .baseUrl(<span class=\"string\">&quot;http://localhost:8080/engine-rest&quot;</span>)</span><br><span class=\"line\">                .asyncResponseTimeout(<span class=\"number\">10000</span>) <span class=\"comment\">// 长轮询超时时间</span></span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 订阅指定的外部任务</span></span><br><span class=\"line\">        client.subscribe(<span class=\"string\">&quot;charge-card&quot;</span>)</span><br><span class=\"line\">                .lockDuration(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                .handler(((externalTask, externalTaskService) -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取流程变量</span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> (String) externalTask.getVariable(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">Long</span> <span class=\"variable\">amount</span> <span class=\"operator\">=</span> (Long) externalTask.getVariable(<span class=\"string\">&quot;amount&quot;</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;item---&gt;&quot;</span>+item + <span class=\"string\">&quot;  amount--&gt;&quot;</span> + amount);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Desktop.getDesktop().browse(<span class=\"keyword\">new</span> <span class=\"title class_\">URI</span>(<span class=\"string\">&quot;https://docs.camunda.org/get-started/quick-start/complete&quot;</span>));</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">                    externalTaskService.complete(externalTask);</span><br><span class=\"line\">                &#125;)).open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行该方法即可，当流程处理时会执行相关逻辑。</p>\n<h3 id=\"3-3-部署流程\"><a href=\"#3-3-部署流程\" class=\"headerlink\" title=\"3.3 部署流程\"></a>3.3 部署流程</h3><p>接下来我们就可以来部署上面定义的流程了。使用 Camunda Modeler 部署流程，点击工具栏中的部署按钮可以将当前流程部署到流程引擎，点击部署按钮，输入Deployment Name 为 “Payment” ，输入下方REST Endpoint 为<a class=\"link\"   href=\"http://localhost:8080/engine-rest\" >http://localhost:8080/engine-rest<i class=\"fas fa-external-link-alt\"></i></a> ，然后点击右下角Deploy部署</p>\n<p>部署操作：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102738775.png\"\n                      alt=\"image-20220901102738775\"\n                ></p>\n<p>部署的时候报错：原因是安装路径中有中文</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901101904825.png\"\n                      alt=\"image-20220901101904825\"\n                ></p>\n<p>部署成功：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901102705446.png\"\n                      alt=\"image-20220901102705446\"\n                ></p>\n<p>然后在BPM中我们可以查看部署的流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112401741.png\"\n                      alt=\"image-20220901112401741\"\n                ></p>\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>我们使用Rest API发起流程，所以需要一个接口测试工具（例如：Postman），或者也可以使用电脑自带的curl</p>\n<p>curl执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;variables&quot;: &#123;&quot;amount&quot;: &#123;&quot;value&quot;:555,&quot;type&quot;:&quot;long&quot;&#125;, &quot;item&quot;: &#123;&quot;value&quot;:&quot;item-xyz&quot;&#125; &#125; &#125;&#x27; http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>postman方式处理</p>\n<p>在url中输入：<a class=\"link\"   href=\"http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start\" >http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start<i class=\"fas fa-external-link-alt\"></i></a> 通过<code>POST</code>方式提交，提交的方式是<code>JSON</code> 数据，具体内容为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;variables&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;amount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">555</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;item&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;item-xyz&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112634925.png\"\n                      alt=\"image-20220901112634925\"\n                ></p>\n<p>然后我们点击发送，操作成功可以看到如下的返回信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112709320.png\"\n                      alt=\"image-20220901112709320\"\n                ></p>\n<p>同时任务执行后我们在控制台可以看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220901112810150.png\"\n                      alt=\"image-20220901112810150\"\n                ></p>\n<h1 id=\"案例扩展\"><a href=\"#案例扩展\" class=\"headerlink\" title=\"案例扩展\"></a>案例扩展</h1><p>上面的案例过于简单，我们添加不同的任务节点和网关来丰富下</p>\n<h2 id=\"用户任务\"><a href=\"#用户任务\" class=\"headerlink\" title=\"用户任务\"></a>用户任务</h2><h3 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h3><p> 我们在上面的案例中添加一个<code>用户任务</code>来处理流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903233945199.png\"\n                      alt=\"image-20220903233945199\"\n                ></p>\n<p>点击刚刚创建的<code>批准付款</code>节点，然后通过扳手设置节点的类型为<code>用户任务</code>(User Task)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234050669.png\"\n                      alt=\"image-20220903234050669\"\n                ></p>\n<p>然后设置节点的审批人为<code>demo</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220903234231682.png\"\n                      alt=\"image-20220903234231682\"\n                ></p>\n<h3 id=\"配置表单\"><a href=\"#配置表单\" class=\"headerlink\" title=\"配置表单\"></a>配置表单</h3><p>在<code>用户节点</code>处我们绑定表单数据。然后创建表单相关的字段，并添加对应的描述信息。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001026418.png\"\n                      alt=\"image-20220904001026418\"\n                ></p>\n<blockquote>\n<p>amount字段：</p>\n<p>​     ID:amount</p>\n<p>​     Type:long</p>\n<p>​     Label:金额</p>\n<p>Item字段：</p>\n<p>​     ID:item</p>\n<p>​     Type:string</p>\n<p>​     Label:项目</p>\n<p>Approved字段：</p>\n<p>​     ID:approved</p>\n<p>​     Type:boolean</p>\n<p>​     Label:是否同意</p>\n</blockquote>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>流程定义好之后我们就可以部署流程了。直接在<code>Camunda Modeler</code>工具栏上的上传按钮将流程上传到流程引擎中。部署后在<code>Camunda Web</code>中查看部署的流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001636662.png\"\n                      alt=\"image-20220904001636662\"\n                ></p>\n<h3 id=\"测试流程\"><a href=\"#测试流程\" class=\"headerlink\" title=\"测试流程\"></a>测试流程</h3><p>打开任务列表（<a class=\"link\"   href=\"http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8\" >http://localhost:8080/camunda/app/tasklist/），使用<i class=\"fas fa-external-link-alt\"></i></a> demo &#x2F; demo 登录。点击右上角的 <code>Start process</code> ，在弹出的对话框中选择“付款流程”.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001816475.png\"\n                      alt=\"image-20220904001816475\"\n                ></p>\n<p>这时会弹出编辑流程变量的对话框，可以通过点击 Add a variable 按钮添加变量，这次我们先不添加，直接点击右下角<code>Start</code>启动流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001902564.png\"\n                      alt=\"image-20220904001902564\"\n                ></p>\n<p>这时，在任务列表应该就能看到刚创建的人工任务了，如果没有可以手动刷新一下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904001953028.png\"\n                      alt=\"image-20220904001953028\"\n                ></p>\n<p>到这儿这个<code>用户任务</code>节点的人工审核就应该要处理了，我们在下一个案例中继续这个案例，我们加入排他网关来处理。</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p>我们将使用<strong>排他网关</strong>(<em>Exclusive Gateways</em>)，为流程添加分支，仅在金额足够大的时候进行人工审核.</p>\n<h3 id=\"添加网关节点\"><a href=\"#添加网关节点\" class=\"headerlink\" title=\"添加网关节点\"></a>添加网关节点</h3><p>首先打开<code>Camunda Modeler </code>，在左侧的工具架中找到网关（菱形），将它拖动到“付款请求”和“刷卡付款”之间，将“批准付款”向下移动再添加一个网关，调整流程，最后看起来类似这样：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004632887.png\"\n                      alt=\"image-20220904004632887\"\n                ></p>\n<h3 id=\"配置网关\"><a href=\"#配置网关\" class=\"headerlink\" title=\"配置网关\"></a>配置网关</h3><p>接下来，我们选择“&lt;1000”的连线，打开属性面板，选择“Condition Type”为“Expression”，这里我们使用<a class=\"link\"   href=\"https://docs.camunda.org/manual/latest/user-guide/process-engine/expression-language/\" >JAVA统一表达式语言<i class=\"fas fa-external-link-alt\"></i></a>编写条件，这里要做的是在金额小于1000时直接刷卡付款，则输入表达式 <code>$&#123;amount&lt;1000&#125;</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004725626.png\"\n                      alt=\"image-20220904004725626\"\n                ></p>\n<p>同样的，对另一条线也进行配置，表达式为<code>$&#123;amount&gt;=1000&#125;</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004747234.png\"\n                      alt=\"image-20220904004747234\"\n                ></p>\n<p>然后<code>是否批准</code>的排他网关节点我们也需要处理下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004845594.png\"\n                      alt=\"image-20220904004845594\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904004910392.png\"\n                      alt=\"image-20220904004910392\"\n                ></p>\n<h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>部署流程和上面的操作是一样的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005023089.png\"\n                      alt=\"image-20220904005023089\"\n                ></p>\n<h3 id=\"测试操作\"><a href=\"#测试操作\" class=\"headerlink\" title=\"测试操作\"></a>测试操作</h3><p>打开任务列表（<a class=\"link\"   href=\"http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8\" >http://localhost:8080/camunda/app/tasklist/），使用<i class=\"fas fa-external-link-alt\"></i></a> demo &#x2F; demo 登录,点击右上角的 Start process ，在弹出的对话框中选择“付款流程”,上面例子中，我们直接点击 Start，但这次我们要增加几个变量来测试动态的流程。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904005221732.png\"\n                      alt=\"image-20220904005221732\"\n                ></p>\n<p>试着更改 <code>amount</code> 的值，查看对流程执行顺序的影响</p>\n<h2 id=\"决策自动化\"><a href=\"#决策自动化\" class=\"headerlink\" title=\"决策自动化\"></a>决策自动化</h2><p>在上面的案例中我们在审批时是通过<code>用户任务</code>结合表单来做的审批，本案例我们来看看我们通过<code>DMN</code>为流程添加一个业务规则来处理</p>\n<h3 id=\"添加业务规则\"><a href=\"#添加业务规则\" class=\"headerlink\" title=\"添加业务规则\"></a>添加业务规则</h3><p>打开 Camunda Modeler，点击 “批准付款”，在右面的扳手菜单中，将类型改为“<strong>Business Rule Task</strong> ”（业务规则任务）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113549016.png\"\n                      alt=\"image-20220904113549016\"\n                ></p>\n<p>下一步，将属性面板中的 <code>Implementation</code> 选择为<code>DMN</code>，输入 Decision Ref 为 <code>approve-payment</code>，为了将决策的结果存入流程变量，我们还需要编辑结果变量Result Variable 为<code>approved</code>，结果类型 Map Decision Result 选择为 <code>singleEntry </code>，最后结果如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113700661.png\"\n                      alt=\"image-20220904113700661\"\n                ></p>\n<h3 id=\"创建DMN表\"><a href=\"#创建DMN表\" class=\"headerlink\" title=\"创建DMN表\"></a>创建DMN表</h3><p>点击 <code>File &gt; New File &gt; DMN Diagram</code>创建一个新的DMN,现在画布上已经存在一个决策元素了，选择它，然后在右侧属性面板中更改<code>Id</code>和<code>Name</code>，这里的Id需要和流程中的<code>Decision Ref</code>属性一致，这次我们输入Id为<code>approve-payment</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113803219.png\"\n                      alt=\"image-20220904113803219\"\n                ></p>\n<p>接下来，点击决策元素左上角的表格按钮，创建新的DMN表.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904113905505.png\"\n                      alt=\"image-20220904113905505\"\n                ></p>\n<h3 id=\"编辑DMN表\"><a href=\"#编辑DMN表\" class=\"headerlink\" title=\"编辑DMN表\"></a>编辑DMN表</h3><p>首先编辑输入参数，在本例中，为了简单，我们依据项目名进行判断，规则可以使用 <code>FEEL 表达式</code>、<code>JUEL</code>或者 <code>Script</code> 书写，详情可以阅读 <a class=\"link\"   href=\"https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/\" >https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>双击表格中的<em>Input</em>，编辑第一个输入参数</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114105012.png\"\n                      alt=\"image-20220904114105012\"\n                ></p>\n<p>下面，设置输入参数，双击<em>Output</em>编辑</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114133016.png\"\n                      alt=\"image-20220904114133016\"\n                ></p>\n<p>下面，我们点击左侧的蓝色加号，添加一些规则，最后类似这样：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114210501.png\"\n                      alt=\"image-20220904114210501\"\n                ></p>\n<h3 id=\"部署DMN表\"><a href=\"#部署DMN表\" class=\"headerlink\" title=\"部署DMN表\"></a>部署DMN表</h3><p>点击底部的部署按钮，将DMN部署到流程引擎中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114317458.png\"\n                      alt=\"image-20220904114317458\"\n                ></p>\n<h3 id=\"流程案例测试\"><a href=\"#流程案例测试\" class=\"headerlink\" title=\"流程案例测试\"></a>流程案例测试</h3><p>现在打开 <a class=\"link\"   href=\"http://localhost:8080/camunda/app/cockpit/\" >http://localhost:8080/camunda/app/cockpit/<i class=\"fas fa-external-link-alt\"></i></a> ，使用demo&#x2F;demo登录，可以看到决策定义增加了一个，点击进去可以看到刚才编辑的DMN.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114413678.png\"\n                      alt=\"image-20220904114413678\"\n                ></p>\n<p>点击进去可以看到对应的决策信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114452196.png\"\n                      alt=\"image-20220904114452196\"\n                ></p>\n<p>然后我们部署流程然后启动流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114623954.png\"\n                      alt=\"image-20220904114623954\"\n                ></p>\n<p>该流程决策输出的<code>approved</code>为true</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114740904.png\"\n                      alt=\"image-20220904114740904\"\n                ></p>\n<p>更改下输入的参数</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114822563.png\"\n                      alt=\"image-20220904114822563\"\n                ></p>\n<p>该决策中输出的<code>approved</code>为false</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904114913062.png\"\n                      alt=\"image-20220904114913062\"\n                ></p>\n<p>好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java&#x2F;boge3306)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png\"\n                      alt=\"image-20220904115333970\"\n                ></p>\n"},{"title":"camunda进阶篇","date":"2022-10-20T08:38:45.000Z","_content":"# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# ProcessEngine\n\nProcessEngine是Camunda流程引擎的核心。我们在流程中的很多具体的处理比如`流程部署`、`流程部署`、`流程审批`等操作都是通过`XXXService`来处理的。而相关的`XXXService`都是通过`ProcessEngine`来管理的。所以对于`ProcessEngine`的创建方式还是很有必要掌握的。\n\n\n\n## 通过xml配置方式\n\n配置你的流程引擎的最简单的方法是通过一个叫做`camunda.cfg.xml`的XML文件。使用这个文件，你可以简单这样做:\n\n```java\n    @Test\n    public void processEngine3(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n我们定义如下的`camunda.cfg.xml`文件。注意`camunda.cfg.xml`必须包含一个id为`processEngineConfiguration`的bean\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"processEngineConfiguration\" class=\"org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n\n        <property name=\"jdbcUrl\" value=\"jdbc:h2:mem:camunda;DB_CLOSE_DELAY=1000\" />\n        <property name=\"jdbcDriver\" value=\"org.h2.Driver\" />\n        <property name=\"jdbcUsername\" value=\"sa\" />\n        <property name=\"jdbcPassword\" value=\"\" />\n\n        <property name=\"databaseSchemaUpdate\" value=\"true\" />\n\n        <property name=\"jobExecutorActivate\" value=\"false\" />\n\n        <property name=\"mailServerHost\" value=\"mail.my-corp.com\" />\n        <property name=\"mailServerPort\" value=\"5025\" />\n    </bean>\n\n</beans>\n```\n\n如果没有找到`camunda.cfg.xml`资源，默认引擎将搜索`activiti.cfg.xml`文件作为备用。如果两者都缺失，引擎就会停止运行，并打印出关于缺失配置资源的错误信息。\n\n请注意，配置XML实际上是一个Spring配置。这并不意味着Camunda引擎只能在Spring环境中使用。我们只是在内部利用Spring的解析和依赖注入功能来建立引擎。\n\nProcessEngineConfiguration对象也可以使用配置文件以编程方式创建。也可以使用不同的bean id。\n\n```java\nProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();\nProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);\nProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);\nProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);\nProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);\n```\n\n\n\n\n\n## JavaAPI方式\n\n我们也可以通过创建正确的ProcessEngineConfiguration对象或使用一些预定义的对象，以编程方式配置流程引擎。\n\n```java\nProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\nProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();\n```\n\n- `org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration`\n  流程引擎是以独立的方式使用的。引擎本身将负责处理事务。默认情况下，只有在引擎启动时才会检查数据库（如果没有数据库模式或模式版本不正确，会抛出一个异常）。\n- `org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration`\n  这是一个用于单元测试的工具类。引擎本身将负责处理事务。默认使用H2内存数据库。该数据库将在引擎启动和关闭时被创建和删除。当使用这个时，可能不需要额外的配置（除了，当使用Job执行器（job executor）或邮件功能时）。\n- `org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration`\n  当流程引擎被用于Spring环境时使用。\n\n\n\n```java\n    @Test\n    public void processEngine1(){\n        ProcessEngineConfigurationImpl cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/camunda1?serverTimezone=UTC\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)\n                .setHistory(\"full\");\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n\n   @Test\n    public void processEngine2(){\n        ProcessEngineConfiguration cfg = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\n        cfg.setJdbcUrl(\"jdbc:mysql://localhost:3306/camunda2?serverTimezone=UTC\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)\n                .setHistory(\"full\");\n\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n\n\n## SpringBoot项目\n\n在SpringBoot项目会根据我们导入的依赖完成自动装配，从而完成ProcessEngine的自动注入。我们可以来分析下源码。\n\n![image-20220911234908597](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234908597.png)\n\n我们需要注意对于Camunda的相关配置。我们可以在application.yml 中配置。原因是 CamundaBpmProperties的处理。然后就是 @Import(CamundaBpmConfiguration.class) 。 在CamundaBpmConfiguration会完成相关的 ProcessEngineConfiguration 的相关注入。\n\n![image-20220911234945653](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234945653.png)\n\n![image-20220911235223373](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911235223373.png)\n\n\n\n这块感兴趣的小伙伴可以仔细阅读下。\n\n\n\n## Service API\n\nJava API是与引擎互动的最常见方式。中心起点是`ProcessEngine`，它可以通过几种方式创建，如配置部分所述。从ProcessEngine中，你可以获得包含工作流/BPM方法的各种服务。`ProcessEngine`和`服务对象`是`线程安全`的。所以你可以为整个服务器保留对其中一个对象的引用.\n\n![img](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/api.services.png)\n\n\n\n\n\n```java\nProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n\nRepositoryService repositoryService = processEngine.getRepositoryService();\nRuntimeService runtimeService = processEngine.getRuntimeService();\nTaskService taskService = processEngine.getTaskService();\nIdentityService identityService = processEngine.getIdentityService();\nFormService formService = processEngine.getFormService();\nHistoryService historyService = processEngine.getHistoryService();\nManagementService managementService = processEngine.getManagementService();\nFilterService filterService = processEngine.getFilterService();\nExternalTaskService externalTaskService = processEngine.getExternalTaskService();\nCaseService caseService = processEngine.getCaseService();\nDecisionService decisionService = processEngine.getDecisionService();\n```\n\n**注意**：所有的服务都是`无状态的`。这意味着你可以很容易地在一个集群的多个节点上运行Camunda平台，每个节点都去同一个数据库，而不必担心哪个机器实际执行了以前的调用。对任何服务的任何调用都是无状态的，无论它在哪里执行。\n\n每个服务的简单介绍\n\n| 服务名称                             | 介绍                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| 仓库服务**RepositoryService**        | 提供了管理和操纵部署和流程定义的操作                         |\n| 运行时服务-**RuntimeService**        | 首先可以通过一个流程定义启动多个流程实例。也能用于处理检索和存储流程变量的服务 |\n| 任务服务-**TaskService**             | 围绕用户审批操作的一切都会被归纳到TaskService。比如：查询分配给用户或组的任务，创建新的独立任务。这些是与流程实例无关的任务，操纵一个任务被分配给哪个用户，或者哪个用户以某种方式参与到任务中，声称并完成一项任务。声称意味着有人决定成为该任务的受让人，意味着这个用户将完成该任务。完成意味着 “完成任务的工作”等 |\n| 身份服务-**IdentityService**         | 是非常简单的。它允许对组和用户进行管理（创建、更新、删除、查询…）。重要的是要理解，核心引擎实际上在运行时并不对用户进行任何检查 |\n| 表单服务-**FormService**             | 一个可选的服务。提供了表单功能                               |\n| 历史服务-**HistoryService**          | 暴露了引擎收集的所有历史数据。当执行流程时，引擎可以保留很多数据（这是可配置的），如流程实例的开始时间、谁做了哪些任务、完成任务花了多长时间、每个流程实例遵循的路径等。该服务主要暴露了访问这些数据的查询功能。 |\n| 管理服务-**ManagementService**       | 它允许检索关于数据库表和表元数据的信息。此外，它暴露了查询功能和Job的管理操作。Job在引擎中被用于各种事情，如定时器、异步延续、延迟暂停/激活等。 |\n| 过滤器服务-**FilterService**         | 允许创建和管理过滤器。过滤器是像任务查询一样的存储查询。例如，过滤器被任务列表用来过滤用户任务 |\n| 外部任务服务-**ExternalTaskService** | 提供对外部任务实例的访问。外部任务代表在外部处理的工作项目，独立于流程引擎。 |\n| 案例服务-**CaseService**             | 与运行时服务（**RuntimeService**）类似，但用于案例实例。它处理启动案例定义的新案例实例并管理案例执行的生命周期。该服务也被用来检索和更新案例实例的流程变量。 |\n| 决策服务-**DecisionService**         | 允许评估部署在引擎中的决策。它是评估独立于流程定义的业务规则任务中的决策的一种选择。 |\n\n\n\n\n\n# 任务分配\n\n## 固定分配\n\n在指派`用户任务`的审批人时。我们是直接指派的固定账号。但是为了保证流程设计审批的灵活性。我们需要各种不同的分配方式，所以这节我们就详细的来介绍先在Camunda中我们可以使用的相关的分配方式\n\n\n\n固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式.\n\n![image-20220912003431387](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003431387.png)\n\n\n\n这种方式就非常简单。不再过多赘述。\n\n\n\n## 值表达式\n\n**值表达式 Value expression**: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如:\n\n```java\n${myVar}\n${myBean.myProperty}\n```\n\n![image-20220912003628341](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003628341.png)\n\n\n\n然后可以演示下这个案例，先部署该流程。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"请假流程\")\n                .addClasspathResource(\"flow/1-01-任务分配.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n然后在启动流程实例。启动流程实例后会进入到`人事审批`这个节点，有`值表达式`的存在，我们需要在启动的过程中就给其赋值。\n\n![image-20220912004447956](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004447956.png)\n\n绑定流程变量的操作\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_0uiy3j1:1:712d273a-31f0-11ed-9e27-c03c59ad2248\";\n        // 定义一个Map集合，存储相关的流程变量信息\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        // 通过 RuntimeService 启动一个流程实例，同时绑定了对应的流程变量信息\n        runtimeService.startProcessInstanceById(processInstanceId,map);\n    }\n```\n\n通过后台查看数据我们可以发现`act_ru_task`中有了一条`人事审批`的任务，而且对于的审批人就是`demo`也就是我们给对应的流程变量的赋值\n\n![image-20220912004819089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004819089.png)\n\n而对应的流程变量信息存储在`act_ru_variable`中。\n\n![image-20220912004949936](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004949936.png)\n\n\n\n## 方法表达式\n\n**方法表达式 Method expression**: 调用一个方法，可以带或不带参数。**当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。**传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如： boge3306\n\n```java\n${printer.print()}\n${myBean.getAssignee()}\n${myBean.addNewOrder('orderName')}\n${myBean.doSomething(myVar, execution)}\n```\n\nmyBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法.我们通过案例来演示下。我们先定义对应的Service\n\n```java\n@Service\npublic class MyBean {\n\n    public String getAssignee(){\n        System.out.println(\"getAssignee 方法执行了....\");\n        return \"demo\";\n    }\n}\n```\n\n然后我们在对应的流程图中来定义。\n\n![image-20220912005546442](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912005546442.png)\n\n\n\n然后通过部署启动操作来看看。\n\n![image-20220912010330601](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010330601.png)\n\n![image-20220912010405626](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010405626.png)\n\n通过这块的演示，我们就可以基于我们的外部条件来结合我们的逻辑实现动态的来指定对应的处理人。\n\n\n\n## 监听器配置\n\n可以使用监听器来完成很多Camunda的流程业务。我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee。创建自定义监听器：\n\n```java\n/**\n * 自定义的一个 Task 监听器\n * 我们需要在监听器中完成 处理人的动态指派\n */\npublic class MyFirstTaskListener implements TaskListener {\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        System.out.println(\"MyFirstTaskListener --- > 执行了\");\n        // 针对 是创建Task节点的事件\n        if(EVENTNAME_CREATE.equals(delegateTask.getEventName())){\n            // 指派对应的处理人\n            delegateTask.setAssignee(\"demo\");\n        }\n    }\n}\n```\n\n然后在流程图中绑定对应的监听器\n\n![image-20220912011453664](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011453664.png)\n\n然后我们部署和启动流程后，可以看到对应的触发效果\n\n![image-20220912011644311](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011644311.png)\n\n表结构中也可以看到相关的信息\n\n![image-20220912011735815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011735815.png)\n\n说明这块的处理是完全可行的。\n\n\n\n# 流程变量\n\n流程变量可以用将数据添加到流程的运行时状态中，或者更具体地说，变量作用域中。改变实体的各种API可以用来更新这些附加的变量。一般来说，一个变量由一个名称和一个值组成。名称用于在整个流程中识别变量。例如，如果一个活动（activity）设置了一个名为 *var* 的变量，那么后续活动中可以通过使用这个名称来访问它。变量的值是一个 Java 对象。\n\n## 运行时变量\n\n流程实例运行时的变量，存入act_ru_variable表中。在流程实例运行结束时，此实例的变量在表中删除。在流程实例创建及启动时，可设置流程变量。所有的`startProcessInstanceXXX`方法都有一个可选参数用于设置变量。例如，`RuntimeService`中\n\n```java\nProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables);\n```\n\n也可以在流程执行中加入变量。例如，(*RuntimeService*):\n\n```java\n    void setVariable(String executionId, String variableName, Object value);\n    void setVariableLocal(String executionId, String variableName, Object value);\n    void setVariables(String executionId, Map<String, ? extends Object> variables);\n    void setVariablesLocal(String executionId, Map<String, ? extends Object> variables);\n```\n\n读取变量方法:\n\n```java\n    Map<String, Object> getVariables(String executionId);\n    Map<String, Object> getVariablesLocal(String executionId);\n    Map<String, Object> getVariables(String executionId, Collection<String> variableNames);\n    Map<String, Object> getVariablesLocal(String executionId, Collection<String> variableNames);\n    Object getVariable(String executionId, String variableName);\n    <T> T getVariable(String executionId, String variableName, Class<T> variableClass);\n```\n\n**注意**：由于流程实例结束时，对应在运行时表的数据跟着被删除。所以查询一个已经完结流程实例的变量，只能在历史变量表中查找。\n\n当然运行时变量我们也可以根据对应的作用域把他分为`全局变量`和`局部变量`.\n\n### 全局变量\n\n流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量\n\n注意：如：    Global变量：userId（变量名）、zhangsan（变量值）\n\nglobal 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。\n\n案例：\n\n定义监听器\n\n```java\npublic class MySecondListener implements TaskListener {\n\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        // 获取所有的流程变量\n        Map<String, Object> variables = delegateTask.getVariables();\n        Set<String> keys = variables.keySet();\n        for (String key : keys) {\n            Object obj = variables.get(key);\n            System.out.println(key + \" = \" + obj);\n            if(obj instanceof  String){\n              // 修改 流程变量的信息\n              // variables.put(key,obj + \":boge3306\"); 直接修改Map中的数据 达不到修改流程变量的效果\n              delegateTask.setVariable(key,obj + \":boge3306\");\n            }\n        }\n    }\n}\n```\n\n设计流程\n\n![image-20220913011512486](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913011512486.png)\n\n\n\n案例代码：\n\n```java\n@SpringBootTest(classes = Application.class)\npublic class AssigneeTaskTest {\n\n    @Autowired\n    RepositoryService repositoryService;\n\n    @Autowired\n    RuntimeService runtimeService;\n\n\n    @Autowired\n    TaskService taskService;\n\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"请假流程-监听器\")\n                .addClasspathResource(\"flow/04-任务分配-监听器分配.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processDefId = \"Process_08kf7mp:1:d154c0f5-326d-11ed-841a-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 启动流程实例，绑定对应的流程变量\n     */\n    @Test\n    public void startFlowVariables(){\n        String processDefId = \"Process_1t425hs:1:539f152d-326a-11ed-ab57-c03c59ad2248\";\n        // 声明一个 Map 集合\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        // 启动流程实例，同时绑定对应的流程变量信息\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId,map);\n\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 流程审批\n     */\n    @Test\n    public void completeTask(){\n        taskService.complete(\"29a0614c-3267-11ed-a030-c03c59ad2248\");\n    }\n\n    /**\n     * 流程审批\n     *    同样需要绑定对应的流程变量的值\n     */\n    @Test\n    public void completeTaskVariables(){\n        // 声明一个 Map 集合\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user2\",\"demo\");\n        taskService.complete(\"dd013840-326a-11ed-b589-c03c59ad2248\",map);\n    }\n}\n```\n\n\n\n\n\n### 局部变量\n\n任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。\n\nLocal 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 \n\n我们通过RuntimeService 设置的Local变量绑定的是 executionId。在该流程中有效\n\n![image-20220913120555429](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913120555429.png)\n\n```java\n    /**\n     * 设置Local流程变量\n     */\n    @Test\n    public void setVariableLocal(){\n        String executionId = \"368f9fdc-3317-11ed-871d-c03c59ad2248\";\n        runtimeService.setVariableLocal(executionId,\"orderId\",\"10006\");\n        runtimeService.setVariableLocal(executionId,\"user2\",\"波波烤鸭1\");\n    }\n```\n\n\n\n我们通过TaskService设置的Local变量的作用域是和TaskId绑定的，作用域就在这一个Task生命周期中。\n\n```java\n    @Test\n    public void taskLocalVariables(){\n        taskService.setVariableLocal(\"7eb1b34b-3318-11ed-b9e6-c03c59ad2248\",\"user2\",\"波哥66666\");\n    }\n```\n\n\n\n\n\n## 历史变量\n\n历史变量，存入`act_hi_varinst`表中。在流程启动时，流程变量会同时存入历史变量表中；在流程结束时，历史表中的变量仍然存在。可理解为“永久代”的流程变量。\n\n获取已完成的、id为’XXX’的流程实例中，所有的`HistoricVariableInstances`（历史变量实例），并以变量名排序。\n\n```java\nhistoryService.createHistoricVariableInstanceQuery()\n    .processInstanceId(\"XXX\")\n    .orderByVariableName.desc()\n    .list();\n```\n\n\n\n\n\n\n\n# 身份服务\n\n在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。\n\n身份服务是对各种用户/组库的API抽象。其基本实体是：\n\n- User: 使用不同ID区分的不同用户\n- Group: 使用不同ID区分的不同组\n- Membership: 组与用户之间的关系\n- Tenant: 使用不同ID区分的不同租户\n- Tenant Membership: 租户与 用户/组 之间的关系\n\n## 候选人\n\n### 绘制流程图\n\n首先绘制一个如下的基本流程图。然后我们分别来指派处理人。\n\n![image-20220917101906123](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917101906123.png)\n\n\n\n人事审批这块我们可以直接来指定多个候选人来处理。`demo,zhang,lisi`\n\n![image-20220917102115513](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102115513.png)\n\n在总经理审批的位置我们在设计的时候不太清楚会是谁来审批，所以通过值表达式来处理。\n\n![image-20220917102211814](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102211814.png)\n\n设计完成后对应的xml中的数据为：\n\n![image-20220917102259478](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102259478.png)\n\n\n\n### 部署和启动流程\n\n创建了流程图后我们就可以直接来部署该流程。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人案例\")\n                .addClasspathResource(\"flow/候选人案例.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n接着就可以直接来启动该流程了。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_05vjqic:1:cca1e181-362e-11ed-b8fc-c03c59ad2248\";\n        runtimeService.startProcessInstanceById(processInstanceId);\n    }\n```\n\n启动完成流程后我们进入到`act_ru_task`中可以发现我们创建的流程任务信息，但是`处理人`字段还是空的。\n\n![image-20220917102625541](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102625541.png)\n\n\n\n![image-20220917102655865](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102655865.png)\n\n\n\n注意：相关的候选人的信息存储在了`act_ru_identitylink`表中。\n\n![image-20220917104657296](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917104657296.png)\n\n对应的查询操作如下：\n\n```java\n    @Test\n    public void getTaskCandidate(){\n        List<IdentityLink> identityLinksForTask = taskService.getIdentityLinksForTask(\"023f0279-362f-11ed-8d8a-c03c59ad2248\");\n        for (IdentityLink identityLink : identityLinksForTask) {\n            System.out.println(identityLink.getTaskId());\n            System.out.println(identityLink.getProcessDefId());\n            System.out.println(identityLink.getUserId());\n        }\n    }\n```\n\n\n\n\n\n### 任务的拾取\n\n候选要操作我们需要通过`拾取`的行为把`候选人`转换为`处理人`.那么候选人登录后需要能查询出来他可以`拾取`的任务。在camunda的web应用中我们可以看到这样的操作。`demo`账号登录。\n\n![image-20220917103124214](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103124214.png)\n\n在代码上的实现，先来看查询操作。\n\n```java\n    /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     */\n    @Test\n    public void queryTaskCandidate(){\n\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskCandidateUser(\"demo\")\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 查询当前任务所有的候选人\n     */\n    @Test\n    public void getTaskCandidate(){\n        String taskId = \"52b2642a-36fa-11ed-bde4-c03c59ad2248\";\n        List<IdentityLink> linksForTask = taskService.getIdentityLinksForTask(taskId);\n        if(linksForTask != null && linksForTask.size() > 0){\n            for (IdentityLink identityLink : linksForTask) {\n                System.out.println(identityLink.getUserId());\n            }\n        }\n    }\n```\n\n然后我们就可以在上面的基础上来做`拾取`的操作了。\n\n```java\n    /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     */\n    @Test\n    public void claimTaskCandidate(){\n\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskCandidateUser(\"demo\")\n                .list();\n        for (Task task : list) {\n            taskService.claim(task.getId(),\"demo\");\n        }\n    }\n```\n\n进入到表结构中你会发现这条Task记录的处理人被指派为了`demo`,而且在Web端可以看到可以审批了。\n\n![image-20220917103743685](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103743685.png)\n\n\n\n注意：这时`demo`拾取了任务之后其他的用户就不能再拾取了，查询的时候也查询不到了。\n\n\n\n\n\n### 任务的归还\n\n拾取任务后如果不想操作那么可以归还任务。\n\n```java\n    /**\n     * 退还任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void unclaimTaskCandidate(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null){\n            // 归还相关的任务  置空即可\n            taskService.setAssignee(task.getId(),null);\n            System.out.println(\"归还拾取成功\");\n        }\n    }\n```\n\n\n\n### 任务的交接\n\n拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理.\n\n```java\n    @Test\n    public void taskCandidate(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null){\n            // 任务交接\n            taskService.setAssignee(task.getId(),\"zhang\");\n            System.out.println(\"任务交接给了zhang\");\n        }\n    }\n```\n\n\n\n### 任务完成\n\n正常的任务处理\n\n```java\n    @Test\n    public void completeTask1(){\n        String taskId = \"023f0279-362f-11ed-8d8a-c03c59ad2248\";\n        // 但是下一个节点的 处理人是值表达式 我们需要赋值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        map.put(\"user2\",\"zhangsan\");\n        map.put(\"user3\",\"wangwu\");\n        taskService.complete(taskId,map);\n    }\n```\n\n当然我们通过值表达式来处理的候选人操作。在`act_ru_identitylink`表中同样有相关记录，我们需要结合流程变量表来处理了。但是处理的API和上面是一样的。\n\n\n\n## 候选人组\n\n当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。\n\n\n\n### 管理用户和组\n\n#### 用户管理\n\n我们需要先单独维护用户信息。后台对应的表结构是`ACT_ID_USER`.\n\n```java\n    /**\n     * 维护用户\n     */\n    @Test\n    public void createUser(){\n        User user = identityService.newUser(\"zhang\");\n        user.setFirstName(\"张\");\n        user.setLastName(\"三\");\n        user.setEmail(\"zhangsan@qq.com\");\n        user.setPassword(\"123456\");\n        identityService.saveUser(user);\n    }\n```\n\n要更新或者删除用户的话。通过相关API即可完成\n\n```java\n    @Test\n    public void updateUser(){\n        User user = identityService.createUserQuery().userId(\"zhang\").singleResult();\n        user.setPassword(\"123\");\n        identityService.saveUser(user);\n    }\n    @Test\n    public void deleteUser(){\n        identityService.deleteUser(\"zhang\");\n    }\n```\n\n\n\n#### Group管理\n\n维护对应的Group信息，后台对应的表结构是`ACT_ID_GROUP`\n\n```java\n    /**\n     * 创建用户组\n     */\n    @Test\n    public void createGroup(){\n        // 创建Group对象并指定相关的信息\n        Group group = identityService.newGroup(\"group1\");\n        group.setName(\"开发部\");\n        group.setType(\"type1\");\n        // 创建Group对应的表结构数据\n        identityService.saveGroup(group);\n    }\n```\n\n更新和删除参考上面的`用户管理`\n\n\n\n#### 用户分配组\n\n用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是`ACT_ID_MEMBERSHIP`\n\n```java\n    /**\n     * 将用户分配给对应的Group\n     */\n    @Test\n    public void userGroup(){\n        // 根据组的编号找到对应的Group对象\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        // 创建 MemberShip 建立用户和组的关系\n        identityService.createMembership(\"zhang\",group.getId());\n    }\n```\n\n\n\n### 候选人组应用\n\n搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了\n\n#### 创建流程图\n\n创建一个简单的请假流程，处理人通过候选人组的方式来处理。\n\n![image-20220917201151251](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201151251.png)\n\n#### 流程的部署运行\n\n然后我们把流程部署和运行。\n\n```java\n /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人组案例\")\n                .addClasspathResource(\"flow/候选人组.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_1gvo8so:1:3e253edb-3682-11ed-a1ff-c03c59ad2248\";\n        runtimeService.startProcessInstanceById(processInstanceId);\n    }\n```\n\n部署成功后我们可以在`act_ru_identitylink`中看到对应的记录。\n\n![image-20220917201747129](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201747129.png)\n\n\n\n#### 任务的拾取和完成\n\n然后完成任务的查询拾取和处理操作。逻辑是根据当前的登录`用户`找到对应的`组`，然后根据`组`找到对应的任务信息。\n\n```java\n   /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidateGroup(){\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(\"zhang\").singleResult();\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"711d5726-3682-11ed-8b9b-c03c59ad2248\")\n                .taskCandidateGroup(group.getId())\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate1(){\n        String userId = \"zhang\";\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(userId).singleResult();\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"711d5726-3682-11ed-8b9b-c03c59ad2248\")\n                .taskCandidateGroup(group.getId())\n                .singleResult();\n        if(task != null) {\n            // 任务拾取\n            taskService.claim(task.getId(),userId);\n            System.out.println(\"任务拾取成功\");\n        }\n    }\n```\n\n拾取后的操作和前面是一样的，就没必要赘述。当然我们在定义流程的时候也可以通过值表达式来处理，我们需要注意赋值即可。\n\n\n\n## 租户\n\n*多租户* 是指一个单一的Camunda应用需要为多个的租户服务的情况。对于每个租户来说，应该有某些隔离的保证。例如，一个租户的流程实例不应干扰另一个租户的流程实例。\n\n多租户可以通过两种不同的方式实现。一种是使用每个租户一个流程引擎。另一种方式是只使用一个流程引擎，并将数据与租户标识符相关联。这两种方式在数据隔离程度、维护工作和可扩展性方面各有不同。两种方式的组合也是可能的。\n\n多租户可以使用租户标识符（即tenant-ids）的流程引擎来实现。所有租户的数据都存储在一个表中（同一数据库和表结构）。通过存储在列中的租户标识符来提供隔离。\n\n![image-20220917203832905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917203832905.png)\n\n\n\n### 租户管理\n\n租户对应于`act_id.tenant`表结构中的数据。我们可以先来维护租户的相关信息。创建`长沙分公司`的租户信息\n\n```java\n    /**\n     * 创建租户\n     */\n    @Test\n    public void createTenant(){\n        Tenant tenant = identityService.newTenant(\"cs\");\n        tenant.setName(\"长沙分公司\");\n        identityService.saveTenant(tenant);\n    }\n```\n\n![image-20220918220534584](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220534584.png)\n\n\n\n当然参考前面的删除和更新操作也可以非常轻松的完成`租户`相关信息的处理。然后我们来看下租户和用户和组的关系。\n\n```java\n    /**\n     * 建立 租户 和 组的关系\n     * 当然也可以建立 租户和用户的关系。只是这种比较少用\n     */\n    @Test\n    public void createTenantAndGroupShip(){\n        identityService.createTenantGroupMembership(\"cs\",\"group1\");\n    }\n```\n\n![image-20220918220924950](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220924950.png)\n\n\n\n\n\n### 部署操作\n\n我们在部署流程的时候可以指定对应的租户编号。如果不指定租户编号，说明该流程是属于所有租户的。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人案例-租户\")\n                .tenantId(\"tenant1\")\n                .addClasspathResource(\"flow/候选人案例.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n\n### 查看部署流程\n\n设置了租户编号后，我们要做相关的查询，可以通过如下的API来实现\n\n```java\n    /**\n     * 基于租户 查询相关的部署流程\n     */\n    @Test\n    public void getByTenantId(){\n        List<Deployment> list = repositoryService.createDeploymentQuery()\n                .tenantIdIn(\"cs\")\n                .list();\n        for (Deployment deployment : list) {\n            System.out.println(\"deployment.getId() = \" + deployment.getId());\n            System.out.println(\"deployment.getName() = \" + deployment.getName());\n            System.out.println(\"------------\");\n        }\n    }\n\n    \n```\n\n通过调用`withoutTenantId()`来查询不属于任何租户的部署。\n\n```java\n@Test\n    public void getByWithoutTenantId(){\n        List<Deployment> list = repositoryService.createDeploymentQuery()\n                .withoutTenantId() // 查询出所有不属于任何tenantId的记录\n                .list();\n        for (Deployment deployment : list) {\n            System.out.println(\"deployment.getId() = \" + deployment.getId());\n            System.out.println(\"deployment.getName() = \" + deployment.getName());\n            System.out.println(\"------------\");\n        }\n    }\n```\n\n\n\n也可以通过调用`includeDeploymentsWithoutTenantId()`来查询属于特定租户或不属于租户的部署。\n\n```\n@Test\npublic void getByIncludTenantId(){\n    List<Deployment> list = repositoryService.createDeploymentQuery()\n            .tenantIdIn(\"cs\")\n            .includeDeploymentsWithoutTenantId() // 查询出 tenant1 和 不属于 租户的记录\n            .list();\n    for (Deployment deployment : list) {\n        System.out.println(\"deployment.getId() = \" + deployment.getId());\n        System.out.println(\"deployment.getName() = \" + deployment.getName());\n        System.out.println(\"------------\");\n    }\n}\n```\n\n与 “部署查询” 类似，定义查询允许通过一个或多个租户和不属于任何租户的定义进行过滤。\n\n```java\nList<ProcessDefinition> processDefinitions = repositoryService\n  .createProcessDefinitionQuery()\n  .tenantIdIn(\"cs\")\n  .includeProcessDefinitionsWithoutTenantId();\n  .list();\n```\n\n\n\n\n\n### 启动流程实例\n\n通过key创建一个为多租户部署的流程定义的实例，必须在`ProcessInstantiationBuilder` 中传递租户标识符 。\n\n```java\n    /**\n     * 租户 启动一个流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processKey = \"Process_05vjqic\";\n        ProcessInstance processInstance = runtimeService\n                .createProcessInstanceByKey(processKey)\n                .processDefinitionTenantId(\"cs\")\n                .execute();\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    @Test\n    public void startFlow1(){\n        String processId = \"Process_05vjqic:1:a6b23794-3767-11ed-a4df-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService\n                .createProcessInstanceById(processId)\n                .execute();\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n启动后流程后，在创建的Task记录中我们可以看到对应的`租户`信息\n\n![image-20220918234504559](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234504559.png)\n\n因为我们在流程设计的时候就指定了第一个节点的候选人是`group1`,所以在`act_ru_identitylink`表中可以看到相关的记录。\n\n![image-20220918234618891](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234618891.png)\n\n\n\n### 任务拾取\n\n接下来就可以对任务做`拾取`的操作了\n\n```java\n   /**\n     * 根据当前登录用户 查询到需要拾取的任务\n     */\n    @Test\n    public void claimTask(){\n        // 根据登录用户查询到对应的Group\n        List<Group> groups = identityService.createGroupQuery().groupMember(\"demo\").list();\n        if(groups != null && groups.size() > 0){\n            for (Group group : groups) {\n                // 根据 group 找到对应的 租户\n                List<Tenant> tenants = identityService.createTenantQuery().groupMember(group.getId()).list();\n                List<String> tenantStrings = new ArrayList<>();\n                if(tenants != null && tenants.size() > 0){\n                    tenantStrings = tenants.stream().map((item)->{\n                        return item.getId();\n                    }).collect(Collectors.toList());\n\n                    String[] ss = new String[tenantStrings.size()];\n                    tenantStrings.toArray(ss);\n                    List<Task> list = taskService.createTaskQuery()\n                            .tenantIdIn(ss)\n                            .list();\n                    if(list != null && list.size() > 0){\n                        for (Task task : list) {\n                            System.out.println(\"task.getId() = \" + task.getId());\n                        }\n                    }\n                }\n\n            }\n        }\n\n    }\n```\n\n可以查询到对应的拾取就比较简单了\n\n```java\n    @Test\n    public void claimTask(){\n        // 根据登录用户查询到对应的Group\n        List<Group> groups = identityService.createGroupQuery().groupMember(\"demo\").list();\n        if(groups != null && groups.size() > 0){\n            for (Group group : groups) {\n                // 根据 group 找到对应的 租户\n                List<Tenant> tenants = identityService.createTenantQuery().groupMember(group.getId()).list();\n                List<String> tenantStrings = new ArrayList<>();\n                if(tenants != null && tenants.size() > 0){\n                    tenantStrings = tenants.stream().map((item)->{\n                        return item.getId();\n                    }).collect(Collectors.toList());\n\n                    String[] ss = new String[tenantStrings.size()];\n                    tenantStrings.toArray(ss);\n                    List<Task> list = taskService.createTaskQuery()\n                            .tenantIdIn(ss)\n                            .list();\n                    if(list != null && list.size() > 0){\n                        for (Task task : list) {\n                            taskService.claim(task.getId(),\"demo\");\n                        }\n                    }\n                }\n\n            }\n        }\n\n    }\n\n```\n\n![image-20220919003450202](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220919003450202.png)\n\n能够拾取成功，那么后面的操作就是任务的审批。接下来的操作就和前面是一样的了。不再赘述~\n\n\n\n\n\n\n\n# 网关篇\n\n网关用来控制流程的流向\n\n## 排他网关\n\n`排他网关`（exclusive gateway）（也叫*异或网关 XOR gateway*，或者更专业的，*基于数据的排他网关 exclusive data-based gateway*），用于对流程中的**决策**建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为*true*）继续流程。\n\n绘制流程图：\n\n![image-20220922002931276](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922002931276.png)\n\n\n\n对应的XML文件\n\n![image-20220922003022802](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003022802.png)\n\n流程演示\n\n```java\n   /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"排他网关\")\n                .addClasspathResource(\"flow/排他网关.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n\n    /**\n     * 通过流程定义Id 启动\n     */\n    @Test\n    public void startFlow(){\n        String processId = \"Process_0eykic0:1:efadfc92-39c9-11ed-8f13-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"day\",4);\n        taskService.complete(\"21a323ee-39ca-11ed-8b49-c03c59ad2248\",map);\n    }\n```\n\n传递的是`day=4`会走中间的路线。\n\n![image-20220922003119262](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003119262.png)\n\n## 并行网关\n\n并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：\n\n* fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。\n\n* join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。\n\n注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。\n\n**与其他网关的主要区别是，并行网关不会解析条件。** **即使顺序流中定义了条件，也会被忽略。**\n\n![image-20220922003323785](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003323785.png)\n\n## 包含网关\n\n包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。\n\n包含网关的功能是基于进入和外出顺序流的：\n\n* 分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。\n\n* 汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。\n\n\n\n![image-20220922005111023](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005111023.png)\n\n\n\n\n\n当输入`day=4`时，走了第二和第三条路线\n\n![image-20220922005536912](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005536912.png)\n\n\n\n\n\n# 事件篇\n\n`事件`（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：*捕获（catching）*与*抛出（throwing）*事件。\n\n- **捕获:** 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。\n- **抛出:** 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。\n\n## 定时器事件\n\n定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件\n\n### 定时器启动事件\n\n定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。\n\n***请注意**：*子流程不能有定时器启动事件。\n\n***请注意**：*定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。\n\n***请注意**：*当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。\n\n定时器启动事件，用其中有一个钟表图标的圆圈来表示。我们通过具体案例来介绍\n\n![image-20220926104055183](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104055183.png)\n\n部署流程后等待到具体的时间，我们查看任务即可\n\n![image-20220926104152240](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104152240.png)\n\n\n\n时间定义这块使用的是  https://en.wikipedia.org/wiki/ISO_8601#Dates  ISO 8601 格式\n\n上面我们是通过指定固定时间来启动的，我们也可以通过`duraction`间隔时间来处理。\n\n![image-20220926105514506](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926105514506.png)\n\n\n\n通过间隔的方式来启动。\n\ntimeCycle：指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式\n\n* 第一种是按照[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals)标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3/PT10H\n* 也可以使用*timeCycle*的可选属性*endDate*，或者像这样直接写在时间表达式的结尾：`R3/PT10H/${EndDate}`。 当到达endDate时，应用会停止，并为该任务创建其他作业\n* 也可以通过cron表达式来处理\n\n\n\n案例：重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate\n\n```java\npublic class MyJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"MyJavaDelegate:执行了。。。\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n![image-20220926110231335](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110231335.png)\n\n在控制台可以看到对应的效果\n\n![image-20220926110317226](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110317226.png)\n\n也可以指定结束时间\n\n```xml\n      <timerEventDefinition>\n        <timeCycle>R3/PT30S/2022-03-28T21:46:11+00:00</timeCycle>\n      </timerEventDefinition>\n```\n\n\n\n此外还可以通过cron表达式来处理：\n\n```xml\n0 0/5 * * * ?\n```\n\n每隔5秒启动\n\n### 定时器中间事件\n\n在我们具体的流程处理中，A节点处理完成后，定时触发B节点的处理。\n\n![image-20220927002456358](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927002456358.png)\n\n### 定时器边界事件\n\n人工任务1如果在定义的`2022-09-27T23:36:14`这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.\n\n![image-20220927003701033](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927003701033.png)\n\n\n\n\n\n## 消息事件\n\n### 启动事件\n\n消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解\n\n![image-20220927004852502](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927004852502.png)\n\n\n\n启动流程实例可以通过普通的方式来触发，当然也可以通过对应的API来处理\n\n```java\n    /**\n     * 消息启动事件\n     */\n    @Test\n    public void startMessageFlow(){\n        runtimeService.startProcessInstanceByMessage(\"firstMessage\");\n    }\n```\n\n\n\n### 中间事件\n\n消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，`自动流程1`处理完成后，需要接收特定的消息之后才能进入到`自动流程2`\n\n![image-20220927005944099](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927005944099.png)\n\n正常的流程部署，启动和审批后，我们需要发送对应的消息来触发这个中间事件。\n\n```java\n    /**\n     * 发送消息\n     */\n    @Test\n    public void sendMsg(){\n        runtimeService.messageEventReceived(\"secondMessage\",\"da2028e9-3dbc-11ed-adb0-c03c59ad2248\");\n    }\n```\n\n\n\n\n\n### 边界事件\n\n消息边界事件，如果在消息触发前还没有，案例演示：\n\n![image-20220927010931908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927010931908.png)\n\n然后正常的部署，启动流程，如果在发布对应的消息之前还没有审批`用户任务1`,那当我们发送对应的消息后就会触发对应的消息边界事件。\n\n```java\n    /**\n     * 发送消息\n     */\n    @Test\n    public void sendMsg(){\n        runtimeService.messageEventReceived(\"thirdMessage\",\"0d2a30e2-3dbf-11ed-9e28-c03c59ad2248\");\n    }\n```\n\n\n\n\n\n## 错误事件\n\n### 开始事件\n\n错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。**错误启动事件不能用于启动流程实例**。\n\n错误启动事件总是中断。我们通过案例来介绍。\n\n![image-20220927113303497](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113303497.png)\n\n绘制事件子流程要注意：\n\n![image-20220927113345613](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113345613.png)\n\n选择错误启动事件\n\n![image-20220927113423993](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113423993.png)\n\n\n\n然后配置流程节点信息\n\n![image-20220927113506045](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113506045.png)\n\n![image-20220927113528120](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113528120.png)\n\n然后在JavaDelegate中抛出对应的异常\n\n```java\npublic class FirstJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"FirstJavaDelegate:执行了\" + LocalDateTime.now().toString());\n        // 抛出的信息必须对应于error的Code信息\n        throw new BpmnError(\"errorCode01\");\n    }\n}\n```\n\n然后正常部署，启动流程。然后我们就可以看到对应的流转了\n\n![image-20220927113652951](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113652951.png)\n\n\n\n### 边界事件\n\n当子流程执行中对外抛出了相关的异常，那么我们设置的错误边界事件就能对应的捕获到相关的事件，然后做对应的处理，相关案例如下：\n\n![image-20220927114818638](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114818638.png)\n\n绘制错误边界流程图的时候需要先绘制中间事件的图标，然后拖拽到子流程的边界，然后修改对应的类型即可，错误边界事件绑定抛出对应的errorCode\n\n![image-20220927114939647](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114939647.png)\n\n然后对应的抛出的信息\n\n```java\npublic class SecondJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"SecondJavaDelegate:执行了\" + LocalDateTime.now().toString());\n        // 抛出的信息必须对应于error的Code信息\n        throw new BpmnError(\"errorCode02\");\n    }\n}\n```\n\n\n\n然后部署启动流程即可看到对应的效果\n\n![image-20220927115037027](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927115037027.png)\n\n\n\n\n\n## 信号事件\n\n### 开始事件\n\n通过信号来启动流程实例\n\n![image-20220928232328300](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232328300.png)\n\n部署流程和发送信号来启动流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"事件-信号开始事件\")\n\n                .addClasspathResource(\"flow/23-事件-信号事件-开始事件.bpmn\")\n\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 通过信号来触发启动事件的执行\n     */\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal01\");\n    }\n```\n\n效果：\n\n![image-20220928232951167](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232951167.png)\n\n### 中间捕获事件\n\n案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。\n\n![image-20220928233200534](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233200534.png)\n\n在这个案例中我们需要部署流程，启动流程，然后`用户任务1`审批后，我们发布相关的信号，然后会进入到`用户任务2`中\n\n```java\n   /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"事件-信号中间捕获事件\")\n\n                .addClasspathResource(\"flow/24-事件-信号事件-中间捕获事件.bpmn\")\n\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processDefId = \"Process_002gvxw:1:cfcc56ac-3f42-11ed-a689-c03c59ad2248\";\n\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal02\");\n    }\n```\n\n效果：\n\n![image-20220928233556274](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233556274.png)\n\n### 中间抛出事件\n\n信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：\n\n![image-20220928234118517](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928234118517.png)\n\n正常的部署流程，然后做流程的审批，注意`用户任务4`需要先审批，然后处于信号捕获的状态，然后我们`用户任务2`的审批，抛出信号事件，那么对应的捕获事件才能触发，这儿有先后顺序。\n\n![image-20220928235157519](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235157519.png)\n\n### 边界事件\n\n最后来看看信号边界事件，案例如下：\n\n![image-20220928235443496](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235443496.png)\n\n部署启动流程，如果`用户任务1`审批了，就会进入到`用户任务2`审批，如果`用户任务1`还没审批，然后发送的相关的信号，会被信号边界事件捕获，从而进入到`用户任务3`\n\n```java\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal04\");\n    }\n```\n\n\n\n![image-20220928235841363](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235841363.png)\n\n\n\n\n\n## 结束事件\n\n### 错误结束事件\n\n当流程执行到达**错误结束事件（error end event）**时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：\n\n![image-20220929002020963](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002020963.png)\n\n\n\n部署流程，然后启动流程，`用户任务1`审批\n\n![image-20220929002528362](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002528362.png)\n\n设置流程变量`flag==1`然后会走`错误结束事件`。会触发对应的边界事件\n\n![image-20220929002622297](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002622297.png)\n\n\n\n### 中断结束事件\n\n中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：\n\n#### 案例一\n\n介绍没有子流程的情况下终止流程的场景：\n\n![image-20220929003541120](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929003541120.png)\n\n\n\n\n\n#### 案例二\n\n案例二我们来看看有子流程的场景下：\n\n![image-20220929004654376](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929004654376.png)\n\n### 取消结束事件\n\n取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。\n\n具体通过案例来讲解：\n\n\n\n![image-20220929010451477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010451477.png)\n\n效果：\n\n![image-20220929010913632](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010913632.png)\n\n\n\n### 补偿事件\n\n通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：\n\n![image-20220929012202047](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012202047.png)\n\n\n\n案例效果：\n\n![image-20220929012149315](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012149315.png)\n\n\n\n\n\n# 多人会签\n\nMultiple Instance\n\n## 会签说明\n\n多实例活动是为业务流程中的某个步骤定义重复的一种方式。在编程概念中，多实例与 `for each` 结构相匹配：它允许对给定集合中的每个项目按顺序或并行地执行某个步骤或甚至一个完整的子流程。\n\n多实例是一个有额外属性（所谓的 “多实例特性”）的常规活动，它将导致该活动在运行时被多次执行。以下活动可以成为多实例活动。\n\n- Service Task 服务任务\n- Send Task 发送任务\n- User Task 用户任务\n- Business Rule Task 业务规则任务\n- Script Task 脚本任务\n- Receive Task 接收任务\n- Manual Task 手动任务\n- (Embedded) Sub-Process （嵌入）子流程\n- Call Activity 发起活动\n- Transaction Subprocess 事务子流程\n\n网关或事件不能成为多实例。\n\n如果一个活动是多实例的，这将由活动底部的三条短线表示。三条垂直线表示实例将以**并行**方式执行，而三条水平线表示**顺序**执行。\n\n![image-20221001234837327](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221001234837327.png)\n\n\n\n\n\n按照规范的要求，每个实例所创建的执行的每个父执行将有以下变量：\n\n- **nrOfInstances**: 实例的总数量\n- **nrOfActiveInstances**: 当前活动的，即尚未完成的实例的数量。对于一个连续的多实例，这将永远是1。\n- **nrOfCompletedInstances**: 已经完成的实例的数量。\n\n这些值可以通过调用 “execution.getVariable(x) “方法检索。\n\n此外，每个创建的执行将有一个执行本地变量（即对其他执行不可见，也不存储在流程实例级别）。\n\n- **loopCounter**: 表示该特定实例的`for each`循环中的索引\n\n为了使一个活动成为多实例，活动xml元素必须有一个`multiInstanceLoopCharacteristics`子元素。\n\n```xml\n<multiInstanceLoopCharacteristics isSequential=\"false|true\">\n ...\n</multiInstanceLoopCharacteristics>\n```\n\n`isSequential`属性表示该活动的实例是按顺序执行还是并行执行。\n\n## 并行会签\n\n### 绘制流程图\n\n![image-20221002000056981](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000056981.png)\n\n>loop cardinality：循环基数。可选项。可以直接填整数，表示会签的人数。\n>Collection：集合。可选项。会签人数的集合，通常为list，和loop cardinality二选一。\n>Element variable：元素变量。选择Collection时必选，为collection集合每次遍历的元素。\n>Completion condition：完成条件。可选。比如设置一个人完成后会签结束，那么其他人的代办任务都会消失。\n\n在用户任务节点绑定了一个监听器，监听`create`行为，该监听器我们是通过UEL表达式来实现的，`mulitiInstanceTaskListener`是我们注入到Spring容器中的对象。\n\n![image-20221002000233782](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000233782.png)\n\n监听器的内容为：\n\n```java\n@Component(\"mulitiInstanceTaskListener\")\npublic class MulitiInstanceTaskListener implements Serializable {\n    \n    public void completeListener(DelegateExecution execution){\n        System.out.println(\"任务：\"+execution.getId());\n        System.out.println(\"persons:\" + execution.getVariable(\"persons\"));\n        System.out.println(\"person\" + execution.getVariable(\"person\"));\n        \n    }\n}\n```\n\n然后对应的`Completion condition`我们可以在Java代码中处理\n\n```java\n@Component(\"mulitiInstanceCompleteTask\")\npublic class MulitiInstanceCompleteTask implements Serializable {\n    /**\n     * 完成任务是需要触发的方法\n     * @param execution\n     * @return\n     *     false 表示会签任务还没有结束\n     \n     *     true 表示会签任务结束了\n     */\n    public boolean completeTask(DelegateExecution execution) {\n        System.out.println(\"总的会签任务数量：\" + execution.getVariable(\"nrOfInstances\")\n                + \"当前获取的会签任务数量：\" + execution.getVariable(\"nrOfActiveInstances\")\n                + \" - \" + \"已经完成的会签任务数量：\" + execution.getVariable(\"nrOfCompletedInstances\"));\n        //有一个人同意就通过\n        Boolean flag = (Boolean) execution.getVariable(\"flag\");\n        System.out.println(\"当前意见：\"+flag);\n        return flag;\n    }\n}\n```\n\n上面的三个变量是Flowable中自带的可用变量\n\n1. nrOfInstances:该会签环节中总共有多少个实例\n\n2. nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。\n\n3. nrOfCompletedInstances:已经完成的实例的数量\n\n\n\n### 部署流程\n\n普通的部署流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"多实例\")\n                .addClasspathResource(\"flow/diagram_1.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n\n\n### 启动流程\n\n在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\")，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248\",map);\n    }\n```\n\n\n\n启动后我们就可以在数据库中看到产生了3个Task\n\n![image-20221002000640899](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000640899.png)\n\n\n\n### 处理任务\n\n启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",false);\n        taskService.complete(\"71337501-b22e-11ec-a534-c03c59ad2248\",map);\n    }\n```\n\n当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出\n\n![image-20221002000853424](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000853424.png)\n\n同时Task表中的记录还有两条\n\n![image-20221002000931060](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000931060.png)\n\n然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",true); // 设置为true 结束多人会签\n        taskService.complete(\"713570d4-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n这时任务节点就结束了~\n\n## 串行会签\n\n串行会签指的是在多实例中，处理人按照对应的顺序来一个个的处理任务。\n\n### 流程图\n\n![image-20221002001501320](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002001501320.png)\n\n上面定义的是一个`串行会签`的流程图。循环3次，集合数据在`persons`中，每次循环的数据存储在循环变量`person`中，同时`person`也是对应的处理人的流程变量。\n\n\n\n### 部署和启动流程\n\n部署就是正常的部署了，不再赘述，启动流程的时候我们需要对集合做赋值。\n\n```java\n    @Test\n    public void startFlow(){\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据 串行会按照集合的循序来处理\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        String processDefId = \"Process_0ltwc4j:1:bd87ed49-41a3-11ed-9ec4-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId,map);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n启动后会创建一个Task，处理人是`张三`。然后处理完成后会创建下一个task，处理人是`李四`按循序来处理了。\n\n\n\n\n\n# 任务回退\n\n任务回退驳回撤销相关的操作在实际的开发中还是会经常遇到的，我们来看看Camunda中针对这些情况是如何处理的。\n\n## 串行的回退\n\n我们先从最简单的串行流程来分析，案例如下\n\n![image-20221005155134800](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155134800.png)\n\n上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是`user1`,`user2`,`user3`,`user4`.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"回退\")\n                .addClasspathResource(\"flow/串行回退.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n    /**\n     * 通过流程定义Id 启动\n     */\n    @Test\n    public void startFlow(){\n        String processId = \"Process_1up6ocm:1:d924ab29-43f9-11ed-b4f1-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        taskService.complete(\"45bf40bf-43fa-11ed-8abe-c03c59ad2248\");\n    }\n```\n\n![image-20221004233745178](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221004233745178.png)\n\n然后我们来完成回退到`user3`\n\n```java\n    /**\n     * 任务回退\n     *\n     */\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"cb7b11bf-4486-11ed-bbb6-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_17ubvwq\") // 回退到对应的节点前  通过 节点的key 来实现\n                       // .cancelActivityInstance(processInstanceId) // 整个任务会取消\n                        .cancelAllForActivity(\"Activity_0jyi1pp\") // 取消原来的节点\n                        .execute();\n        /*String processDefinitionId = \"\";\n        runtimeService.createModification(\"\");*/\n    }\n```\n\n效果：\n\n![image-20221005155543672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155543672.png)\n\n然后在历史表中可以看到对应的走向\n\n![image-20221005155709087](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155709087.png)\n\n具体过程为：\n\n![image-20221005155909565](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155909565.png)\n\n然后我们可以从`user3`回退到`user1`\n\n![image-20221005160133670](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160133670.png)\n\n![image-20221005160200316](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160200316.png)\n\n要取消当前的任务直接调用`cancelActivityInstance(processInstanceId)`方法即可。\n\n相关方法说明：\n\n| 类别                       | 方法                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| 在活动前启动               | 回退到这个节点                                               |\n|                            | startBeforeActivity(String activityId)                       |\n|                            | startBeforeActivity(String activityId, String ancestorActivityInstanceId) |\n| 在活动后启动               | 通过 `startAfterActivity` 在一个活动之后运行，意味着将从活动的下一节点开始执行 |\n|                            | startAfterActivity(String activityId)                        |\n|                            | startAfterActivity(String activityId, String ancestorActivityInstanceId) |\n| 启动一个过渡               | 通过 `startTransition` 启动一个过渡，就意味着在一个给定的序列流上开始执行。当有多个流出的序列流时，这可以与 `startAfterActivity` 一起使用。如果成功，该指令从序列流开始执行流程模型，直到达到等待状态。 |\n|                            | startTransition(String transitionId)                         |\n|                            | startTransition(String transition, String ancestorActivityInstanceId) |\n| 取消一个活动实例           | 通过`cancelActivityInstance`取消一个特定的活动实例。既可以是一个活动实例，如用户任务的实例，也可以是层次结构中更高范围的实例，如子流程的实例 |\n|                            | cancelActivityInstance(String activityInstanceId)            |\n| 取消一个过渡实例           | 过渡实例表示即将以异步延续的形式进入/离开一个活动的执行流。一个已经创建但尚未执行的异步延续Job被表示为一个过渡实例。这些实例可以通过`cancelTransitionInstance`来取消 |\n|                            | cancelTransitionInstance(String activityInstanceId)          |\n| 取消一个活动的所有活动实例 | 通过指令 `cancelAllForActivity` 来取消一个特定活动的所有活动和过渡实例。 |\n|                            | cancelAllForActivity(String activityId)                      |\n\n\n\n## 并行的回退\n\n接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：\n\n![image-20221005193633031](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193633031.png)\n\n部署后，启动流程实例。运行到如下的节点，然后回退到`用户审批1`\n\n![image-20221005193931957](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193931957.png)\n\n然后我们来做回退操作\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a1d40268-44a2-11ed-9b63-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_0n0ddnj\") // 回退到对应的节点前  通过 节点的key 来实现\n                       // .cancelActivityInstance(processInstanceId) // 整个任务会取消\n                        .cancelAllForActivity(\"Activity_184rpuo\") // 取消原来的节点\n                        .cancelAllForActivity(\"Activity_08w6j91\")\n                        .execute();\n        /*String processDefinitionId = \"\";\n        runtimeService.createModification(\"\");*/\n    }\n```\n\n上面我们根据流程`实例回退`同时需要取消掉之前的两个节点。在历史表中也可以看到这个流程\n\n![image-20221005194635852](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194635852.png)\n\n在上面例子的基础上我们来实现如下的流程回退操作。\n\n![image-20221005194807783](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194807783.png)\n\n![image-20221005194904013](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194904013.png)\n\n具体的回退代码\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a1d40268-44a2-11ed-9b63-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_184rpuo\") // 回退到对应的节点前  通过 节点的key 来实现\n                        .startBeforeActivity(\"Activity_08w6j91\")\n                        .cancelAllForActivity(\"Activity_0ma3n4p\") // 取消原来的节点\n                        .execute();\n    }\n```\n\n然后查看历史任务同样可以看到具体的实现\n\n![image-20221005195142559](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005195142559.png)\n\n\n\n## 排他网关回退\n\n然后我们来看看在有排他网关的情况下，如果我们要调整流程的走向应该要怎么来处理。\n\n![image-20221005200528761](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200528761.png)\n\n也就是实际的场景中可能先走到了`用户2`审批，后面发现不合理，就需要回退到`用户1`后面然后再调整流程变量，流转到`用户3`处。\n\n![image-20221005200901486](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200901486.png)\n\n然后我们来看看具体的回退操作\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"6a70a33b-44a6-11ed-8557-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Gateway_0ah4coh\") // 回退到排他网关之前\n                        .setVariable(\"num\",-1) // 设置流程变量\n                        .cancelAllForActivity(\"Activity_0x9stxl\") // 取消原来的节点\n                        .execute();\n    }\n\n```\n\n回退到`排他网关`节点，然后设置流程变量`num=-1`然后会走`用户3`的审批。同时取消原来节点的审批\n\n![image-20221005201429581](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005201429581.png)\n\n\n然后我们来看看有子流程的场景下的回退处理\n\n![image-20221005204950474](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005204950474.png)\n\n我们来看看从子流程回退到主流程的操作。\n\n![image-20221005205324729](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205324729.png)\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a3311551-44ac-11ed-97c0-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_00kwccq\") // 回退到排他网关之前\n                        .cancelAllForActivity(\"Activity_01835pn\") // 取消原来的节点\n                        .execute();\n    }\n```\n\n在历史表中查看记录\n\n![image-20221005205659817](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205659817.png)\n\n\n\n## 重启/恢复实例\n\n在流程实例终止后，其历史数据仍然存在，并且可以被访问以重启流程实例，前提是历史级别被设置为FULL。 例如，当流程没有以期望的方式终止时，重启流程实例是有用的。这个API的使用的其他可能情况有：\n\n- 恢复被错误地取消的流程实例的到最后状态\n- 由于错误路由导致流程实例终止后，重启流程实例\n\n为了执行这样的操作，流程引擎提供了 *流程实例重启API* `RuntimeService.restartProcessInstances(..)` 。该API允许通过使用流式构建器在一次调用中指定多个实例化指令。\n\n![image-20221005210910364](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005210910364.png)\n\n部署启动流程实例后进入并行网关。然后流程实例被中断了\n\n```java\n    @Test\n    public void deleteProcessId(){\n        String processId = \"cfd58b31-44ae-11ed-92f5-c03c59ad2248\";\n        runtimeService.deleteProcessInstance(processId,\"测试删除\");\n    }\n```\n\n![image-20221005211329315](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005211329315.png)\n\n之后，我们决定恢复该流程实例到最后状态：\n\n```java\n    @Test\n    public void recoveryProcessInstancess(){\n        runtimeService\n                .restartProcessInstances(\"Process_08wyw1g:1:ad8f483f-44ae-11ed-aee8-c03c59ad2248\") // 流程定义ID\n                .startBeforeActivity(\"Activity_03vnv63\")\n                .startBeforeActivity(\"Activity_0b7mtmx\")\n                .processInstanceIds(\"cfd58b31-44ae-11ed-92f5-c03c59ad2248\") // 流程实例ID\n                .execute();\n    }\n```\n\n流程实例已经用最后一组变量重启了。然而，在重启的流程实例中，只有全局变量被恢复了。 本地变量还需要调用 `RuntimeService.setVariableLocal(..)` 手动设置。\n\n>从技术上讲，创建的是一个新的流程实例。\n>\n>**请注意:** 历史流程和重启的流程实例的id是不同的。\n\n\n\n\n\n# 动态表单\n\n接下来我们看看动态表单的应用，在Camunda中表单分为内置表单和动态表单。\n\n## 内置表单\n\n内置表单就是在绘制流程图的时候同时绘制表单。这种方式其实就是绑定了对应的流程变量，不是太灵活。但还是来讲解下。\n\n![image-20221014160336988](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160336988.png)\n\n### 启动流程绑定\n\n我们先来看下在启动流程的时候就设置相关的表单\n\n![image-20221014160501005](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160501005.png)\n\n对应的流程图\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:modeler=\"http://camunda.org/schema/modeler/1.0\" id=\"Definitions_1pnd5o3\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"Camunda Modeler\" exporterVersion=\"4.12.0\" modeler:executionPlatform=\"Camunda Platform\" modeler:executionPlatformVersion=\"7.15.0\">\n  <bpmn:process id=\"Process_13abncz\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:extensionElements>\n        <camunda:formData>\n          <camunda:formField id=\"days\" label=\"请假天数\" type=\"long\" defaultValue=\"1\" />\n          <camunda:formField id=\"reason\" label=\"请假原因\" type=\"string\" />\n        </camunda:formData>\n      </bpmn:extensionElements>\n      <bpmn:outgoing>Flow_09xirvq</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:sequenceFlow id=\"Flow_09xirvq\" sourceRef=\"StartEvent_1\" targetRef=\"Activity_0a81mdi\" />\n    <bpmn:sequenceFlow id=\"Flow_1i0viip\" sourceRef=\"Activity_0a81mdi\" targetRef=\"Activity_01qg6se\" />\n    <bpmn:endEvent id=\"Event_1mj58zz\">\n      <bpmn:incoming>Flow_1asp8i3</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1asp8i3\" sourceRef=\"Activity_01qg6se\" targetRef=\"Event_1mj58zz\" />\n    <bpmn:userTask id=\"Activity_0a81mdi\" name=\"用户任务1\" camunda:assignee=\"demo\">\n      <bpmn:incoming>Flow_09xirvq</bpmn:incoming>\n      <bpmn:outgoing>Flow_1i0viip</bpmn:outgoing>\n    </bpmn:userTask>\n    <bpmn:userTask id=\"Activity_01qg6se\" name=\"用户任务2\" camunda:assignee=\"demo\">\n      <bpmn:incoming>Flow_1i0viip</bpmn:incoming>\n      <bpmn:outgoing>Flow_1asp8i3</bpmn:outgoing>\n    </bpmn:userTask>\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_13abncz\">\n      <bpmndi:BPMNEdge id=\"Flow_09xirvq_di\" bpmnElement=\"Flow_09xirvq\">\n        <di:waypoint x=\"188\" y=\"117\" />\n        <di:waypoint x=\"240\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_1i0viip_di\" bpmnElement=\"Flow_1i0viip\">\n        <di:waypoint x=\"340\" y=\"117\" />\n        <di:waypoint x=\"400\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_1asp8i3_di\" bpmnElement=\"Flow_1asp8i3\">\n        <di:waypoint x=\"500\" y=\"117\" />\n        <di:waypoint x=\"562\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1mj58zz_di\" bpmnElement=\"Event_1mj58zz\">\n        <dc:Bounds x=\"562\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_09e81f3_di\" bpmnElement=\"Activity_0a81mdi\">\n        <dc:Bounds x=\"240\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_0ot1277_di\" bpmnElement=\"Activity_01qg6se\">\n        <dc:Bounds x=\"400\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>\n\n```\n\n可以看到对应的xml中就配置了表单的数据\n\n![image-20221014160601636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160601636.png)\n\n\n\n部署流程\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"表单01\")\n                .addClasspathResource(\"flow/表单-01.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n部署完流程后我们可以通过对应的API查看流程对应的表单信息\n\n```java\n@Test\npublic void getStartFromData(){\n    String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n    // 根据流程定义找到对应的 表单数据。\n    StartFormData startFormData = formService\n        .getStartFormData(processDefId);\n    // 找到对应的表单域的集合\n    List<FormField> formFields = startFormData.getFormFields();\n    for (FormField formField : formFields) {\n        // 获取每个具体的表单域\n        System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n    }\n}\n```\n\n![image-20221014161737726](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014161737726.png)\n\n启动流程：两种方式\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"5\");\n        map.put(\"reason\",\"想休息下\");\n        // 正常启动的时候可以通过流程变量来给表单设置数据，也可以不设置\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(processDefId,map);\n    }\n\n    /**\n     * 通过FormService来启动一个表单流程\n     * @throws Exception\n     */\n    @Test\n    void startFormServiceFlow() throws Exception{\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",2);\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = formService.submitStartForm(processDefId,map);\n    }\n```\n\n启动流程后走到了`用户任务1`这个节点\n\n![image-20221014162003762](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162003762.png)\n\n想要查看对应的表单数据。通过如下方法可以实现\n\n```java\n    /**\n     * 根据Task编号来查看表单数据\n     */\n    @Test\n    void getTaskFormData(){\n        String taskId = \"426b11e6-4b85-11ed-b15a-c03c59ad2248\";\n\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        // 根据流程定义找到对应的 表单数据。\n        StartFormData startFormData = formService.getStartFormData(processDefId);\n        List<FormField> formFields = startFormData.getFormFields();\n        for (FormField formField : formFields) {\n            // 获取每个具体的表单域\n            System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n            // 根据taskId 找到对应的流程变量的值 也就是 表单的数据\n            System.out.println(formField.getId() + \" = \" + taskService.getVariable(taskId, formField.getId()));\n        }\n    }\n```\n\n\n\n![image-20221014162117179](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162117179.png)\n\n### 任务节点绑定\n\n上的方式绑定的表单数据在整个流程实例运作中都可以使用，还有一种方式我们是在具体的任务节点上绑定表单数据。我们来看看。\n\n![image-20221014162658765](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162658765.png)\n\n流程图中是在 `用户任务01` 这个节点绑定的表单数据了\n\n![image-20221014162905992](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162905992.png)\n\n部署流程：\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"表单01\")\n                .addClasspathResource(\"flow/表单-02.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n启动一个流程实例：普通流程启动\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        String processDefId = \"Process_1xf3zgp:1:11da0157-4b9a-11ed-8750-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n    }\n```\n\n然后现在流程执行到了`用户任务01`出。我们绑定的有流程表单。我们可以查询看看。先来查询Task对应的表单信息\n\n![image-20221014165547832](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165547832.png)\n\n```java\n    @Test\n    void getTaskFormData(){\n        String taskId = \"bff75f55-4b9a-11ed-9709-c03c59ad2248\";\n        TaskFormData taskFormData = formService.getTaskFormData(taskId);\n        List<FormField> formFields = taskFormData.getFormFields();\n        for (FormField formField : formFields) {\n            // 获取每个具体的表单域\n            System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n        }\n    }\n```\n\n![image-20221014163939776](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014163939776.png)\n\n然后可以给表单的相关信息赋值\n\n```java\n    @Test\n    void setTaskFormData(){\n        String taskId = \"bff75f55-4b9a-11ed-9709-c03c59ad2248\";\n        taskService.setVariable(taskId,\"days1\",5);\n        taskService.setVariable(taskId,\"reason1\",\"个人原因\");\n    }\n```\n\n然后可以看到表单的信息\n\n![image-20221014165040994](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165040994.png)\n\n\n\n![image-20221014165131403](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165131403.png)\n\n审批完成到下一个节点\n\n![image-20221014165620888](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165620888.png)\n\n这时我们再查询下看能不能找到对应的表单信息\n\n![image-20221014165737958](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165737958.png)\n\n\n\n好了这个是我们讲的直接在流程中内嵌表单的应用\n\n\n\n## 外置表单\n\n我们还可以自己定义一个 HTML+JS 的动态表单，然后在审批相关节点的时候渲染展示。\n\n### 定义一个表单\n\n我们先定义一个简单的表单\n\n![image-20221015134123018](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134123018.png)\n\n### 流程绑定\n\n然后在流程设计的时候绑定对应的表单\n\n![image-20221015134202377](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134202377.png)\n\n部署流程后启动\n\n![image-20221015134234163](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134234163.png)\n\n![image-20221015134256088](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134256088.png)\n\n在跳转后的地址中有taskId和回调的接口地址","source":"_posts/2022/10/camunda进阶篇.md","raw":"---\ntitle: camunda进阶篇\ndate: 2022-10-20 16:38:45\ntags: [BPMN,camunda]\ncategories: [笔记]\n---\n# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# ProcessEngine\n\nProcessEngine是Camunda流程引擎的核心。我们在流程中的很多具体的处理比如`流程部署`、`流程部署`、`流程审批`等操作都是通过`XXXService`来处理的。而相关的`XXXService`都是通过`ProcessEngine`来管理的。所以对于`ProcessEngine`的创建方式还是很有必要掌握的。\n\n\n\n## 通过xml配置方式\n\n配置你的流程引擎的最简单的方法是通过一个叫做`camunda.cfg.xml`的XML文件。使用这个文件，你可以简单这样做:\n\n```java\n    @Test\n    public void processEngine3(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n我们定义如下的`camunda.cfg.xml`文件。注意`camunda.cfg.xml`必须包含一个id为`processEngineConfiguration`的bean\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"processEngineConfiguration\" class=\"org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n\n        <property name=\"jdbcUrl\" value=\"jdbc:h2:mem:camunda;DB_CLOSE_DELAY=1000\" />\n        <property name=\"jdbcDriver\" value=\"org.h2.Driver\" />\n        <property name=\"jdbcUsername\" value=\"sa\" />\n        <property name=\"jdbcPassword\" value=\"\" />\n\n        <property name=\"databaseSchemaUpdate\" value=\"true\" />\n\n        <property name=\"jobExecutorActivate\" value=\"false\" />\n\n        <property name=\"mailServerHost\" value=\"mail.my-corp.com\" />\n        <property name=\"mailServerPort\" value=\"5025\" />\n    </bean>\n\n</beans>\n```\n\n如果没有找到`camunda.cfg.xml`资源，默认引擎将搜索`activiti.cfg.xml`文件作为备用。如果两者都缺失，引擎就会停止运行，并打印出关于缺失配置资源的错误信息。\n\n请注意，配置XML实际上是一个Spring配置。这并不意味着Camunda引擎只能在Spring环境中使用。我们只是在内部利用Spring的解析和依赖注入功能来建立引擎。\n\nProcessEngineConfiguration对象也可以使用配置文件以编程方式创建。也可以使用不同的bean id。\n\n```java\nProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();\nProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);\nProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);\nProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);\nProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);\n```\n\n\n\n\n\n## JavaAPI方式\n\n我们也可以通过创建正确的ProcessEngineConfiguration对象或使用一些预定义的对象，以编程方式配置流程引擎。\n\n```java\nProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\nProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();\n```\n\n- `org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration`\n  流程引擎是以独立的方式使用的。引擎本身将负责处理事务。默认情况下，只有在引擎启动时才会检查数据库（如果没有数据库模式或模式版本不正确，会抛出一个异常）。\n- `org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration`\n  这是一个用于单元测试的工具类。引擎本身将负责处理事务。默认使用H2内存数据库。该数据库将在引擎启动和关闭时被创建和删除。当使用这个时，可能不需要额外的配置（除了，当使用Job执行器（job executor）或邮件功能时）。\n- `org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration`\n  当流程引擎被用于Spring环境时使用。\n\n\n\n```java\n    @Test\n    public void processEngine1(){\n        ProcessEngineConfigurationImpl cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/camunda1?serverTimezone=UTC\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)\n                .setHistory(\"full\");\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n\n   @Test\n    public void processEngine2(){\n        ProcessEngineConfiguration cfg = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();\n        cfg.setJdbcUrl(\"jdbc:mysql://localhost:3306/camunda2?serverTimezone=UTC\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)\n                .setHistory(\"full\");\n\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n\n\n## SpringBoot项目\n\n在SpringBoot项目会根据我们导入的依赖完成自动装配，从而完成ProcessEngine的自动注入。我们可以来分析下源码。\n\n![image-20220911234908597](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234908597.png)\n\n我们需要注意对于Camunda的相关配置。我们可以在application.yml 中配置。原因是 CamundaBpmProperties的处理。然后就是 @Import(CamundaBpmConfiguration.class) 。 在CamundaBpmConfiguration会完成相关的 ProcessEngineConfiguration 的相关注入。\n\n![image-20220911234945653](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234945653.png)\n\n![image-20220911235223373](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911235223373.png)\n\n\n\n这块感兴趣的小伙伴可以仔细阅读下。\n\n\n\n## Service API\n\nJava API是与引擎互动的最常见方式。中心起点是`ProcessEngine`，它可以通过几种方式创建，如配置部分所述。从ProcessEngine中，你可以获得包含工作流/BPM方法的各种服务。`ProcessEngine`和`服务对象`是`线程安全`的。所以你可以为整个服务器保留对其中一个对象的引用.\n\n![img](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/api.services.png)\n\n\n\n\n\n```java\nProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n\nRepositoryService repositoryService = processEngine.getRepositoryService();\nRuntimeService runtimeService = processEngine.getRuntimeService();\nTaskService taskService = processEngine.getTaskService();\nIdentityService identityService = processEngine.getIdentityService();\nFormService formService = processEngine.getFormService();\nHistoryService historyService = processEngine.getHistoryService();\nManagementService managementService = processEngine.getManagementService();\nFilterService filterService = processEngine.getFilterService();\nExternalTaskService externalTaskService = processEngine.getExternalTaskService();\nCaseService caseService = processEngine.getCaseService();\nDecisionService decisionService = processEngine.getDecisionService();\n```\n\n**注意**：所有的服务都是`无状态的`。这意味着你可以很容易地在一个集群的多个节点上运行Camunda平台，每个节点都去同一个数据库，而不必担心哪个机器实际执行了以前的调用。对任何服务的任何调用都是无状态的，无论它在哪里执行。\n\n每个服务的简单介绍\n\n| 服务名称                             | 介绍                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| 仓库服务**RepositoryService**        | 提供了管理和操纵部署和流程定义的操作                         |\n| 运行时服务-**RuntimeService**        | 首先可以通过一个流程定义启动多个流程实例。也能用于处理检索和存储流程变量的服务 |\n| 任务服务-**TaskService**             | 围绕用户审批操作的一切都会被归纳到TaskService。比如：查询分配给用户或组的任务，创建新的独立任务。这些是与流程实例无关的任务，操纵一个任务被分配给哪个用户，或者哪个用户以某种方式参与到任务中，声称并完成一项任务。声称意味着有人决定成为该任务的受让人，意味着这个用户将完成该任务。完成意味着 “完成任务的工作”等 |\n| 身份服务-**IdentityService**         | 是非常简单的。它允许对组和用户进行管理（创建、更新、删除、查询…）。重要的是要理解，核心引擎实际上在运行时并不对用户进行任何检查 |\n| 表单服务-**FormService**             | 一个可选的服务。提供了表单功能                               |\n| 历史服务-**HistoryService**          | 暴露了引擎收集的所有历史数据。当执行流程时，引擎可以保留很多数据（这是可配置的），如流程实例的开始时间、谁做了哪些任务、完成任务花了多长时间、每个流程实例遵循的路径等。该服务主要暴露了访问这些数据的查询功能。 |\n| 管理服务-**ManagementService**       | 它允许检索关于数据库表和表元数据的信息。此外，它暴露了查询功能和Job的管理操作。Job在引擎中被用于各种事情，如定时器、异步延续、延迟暂停/激活等。 |\n| 过滤器服务-**FilterService**         | 允许创建和管理过滤器。过滤器是像任务查询一样的存储查询。例如，过滤器被任务列表用来过滤用户任务 |\n| 外部任务服务-**ExternalTaskService** | 提供对外部任务实例的访问。外部任务代表在外部处理的工作项目，独立于流程引擎。 |\n| 案例服务-**CaseService**             | 与运行时服务（**RuntimeService**）类似，但用于案例实例。它处理启动案例定义的新案例实例并管理案例执行的生命周期。该服务也被用来检索和更新案例实例的流程变量。 |\n| 决策服务-**DecisionService**         | 允许评估部署在引擎中的决策。它是评估独立于流程定义的业务规则任务中的决策的一种选择。 |\n\n\n\n\n\n# 任务分配\n\n## 固定分配\n\n在指派`用户任务`的审批人时。我们是直接指派的固定账号。但是为了保证流程设计审批的灵活性。我们需要各种不同的分配方式，所以这节我们就详细的来介绍先在Camunda中我们可以使用的相关的分配方式\n\n\n\n固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式.\n\n![image-20220912003431387](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003431387.png)\n\n\n\n这种方式就非常简单。不再过多赘述。\n\n\n\n## 值表达式\n\n**值表达式 Value expression**: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如:\n\n```java\n${myVar}\n${myBean.myProperty}\n```\n\n![image-20220912003628341](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003628341.png)\n\n\n\n然后可以演示下这个案例，先部署该流程。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"请假流程\")\n                .addClasspathResource(\"flow/1-01-任务分配.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n然后在启动流程实例。启动流程实例后会进入到`人事审批`这个节点，有`值表达式`的存在，我们需要在启动的过程中就给其赋值。\n\n![image-20220912004447956](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004447956.png)\n\n绑定流程变量的操作\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_0uiy3j1:1:712d273a-31f0-11ed-9e27-c03c59ad2248\";\n        // 定义一个Map集合，存储相关的流程变量信息\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        // 通过 RuntimeService 启动一个流程实例，同时绑定了对应的流程变量信息\n        runtimeService.startProcessInstanceById(processInstanceId,map);\n    }\n```\n\n通过后台查看数据我们可以发现`act_ru_task`中有了一条`人事审批`的任务，而且对于的审批人就是`demo`也就是我们给对应的流程变量的赋值\n\n![image-20220912004819089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004819089.png)\n\n而对应的流程变量信息存储在`act_ru_variable`中。\n\n![image-20220912004949936](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004949936.png)\n\n\n\n## 方法表达式\n\n**方法表达式 Method expression**: 调用一个方法，可以带或不带参数。**当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。**传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如： boge3306\n\n```java\n${printer.print()}\n${myBean.getAssignee()}\n${myBean.addNewOrder('orderName')}\n${myBean.doSomething(myVar, execution)}\n```\n\nmyBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法.我们通过案例来演示下。我们先定义对应的Service\n\n```java\n@Service\npublic class MyBean {\n\n    public String getAssignee(){\n        System.out.println(\"getAssignee 方法执行了....\");\n        return \"demo\";\n    }\n}\n```\n\n然后我们在对应的流程图中来定义。\n\n![image-20220912005546442](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912005546442.png)\n\n\n\n然后通过部署启动操作来看看。\n\n![image-20220912010330601](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010330601.png)\n\n![image-20220912010405626](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010405626.png)\n\n通过这块的演示，我们就可以基于我们的外部条件来结合我们的逻辑实现动态的来指定对应的处理人。\n\n\n\n## 监听器配置\n\n可以使用监听器来完成很多Camunda的流程业务。我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee。创建自定义监听器：\n\n```java\n/**\n * 自定义的一个 Task 监听器\n * 我们需要在监听器中完成 处理人的动态指派\n */\npublic class MyFirstTaskListener implements TaskListener {\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        System.out.println(\"MyFirstTaskListener --- > 执行了\");\n        // 针对 是创建Task节点的事件\n        if(EVENTNAME_CREATE.equals(delegateTask.getEventName())){\n            // 指派对应的处理人\n            delegateTask.setAssignee(\"demo\");\n        }\n    }\n}\n```\n\n然后在流程图中绑定对应的监听器\n\n![image-20220912011453664](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011453664.png)\n\n然后我们部署和启动流程后，可以看到对应的触发效果\n\n![image-20220912011644311](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011644311.png)\n\n表结构中也可以看到相关的信息\n\n![image-20220912011735815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011735815.png)\n\n说明这块的处理是完全可行的。\n\n\n\n# 流程变量\n\n流程变量可以用将数据添加到流程的运行时状态中，或者更具体地说，变量作用域中。改变实体的各种API可以用来更新这些附加的变量。一般来说，一个变量由一个名称和一个值组成。名称用于在整个流程中识别变量。例如，如果一个活动（activity）设置了一个名为 *var* 的变量，那么后续活动中可以通过使用这个名称来访问它。变量的值是一个 Java 对象。\n\n## 运行时变量\n\n流程实例运行时的变量，存入act_ru_variable表中。在流程实例运行结束时，此实例的变量在表中删除。在流程实例创建及启动时，可设置流程变量。所有的`startProcessInstanceXXX`方法都有一个可选参数用于设置变量。例如，`RuntimeService`中\n\n```java\nProcessInstance startProcessInstanceById(String processDefinitionId, Map<String, Object> variables);\n```\n\n也可以在流程执行中加入变量。例如，(*RuntimeService*):\n\n```java\n    void setVariable(String executionId, String variableName, Object value);\n    void setVariableLocal(String executionId, String variableName, Object value);\n    void setVariables(String executionId, Map<String, ? extends Object> variables);\n    void setVariablesLocal(String executionId, Map<String, ? extends Object> variables);\n```\n\n读取变量方法:\n\n```java\n    Map<String, Object> getVariables(String executionId);\n    Map<String, Object> getVariablesLocal(String executionId);\n    Map<String, Object> getVariables(String executionId, Collection<String> variableNames);\n    Map<String, Object> getVariablesLocal(String executionId, Collection<String> variableNames);\n    Object getVariable(String executionId, String variableName);\n    <T> T getVariable(String executionId, String variableName, Class<T> variableClass);\n```\n\n**注意**：由于流程实例结束时，对应在运行时表的数据跟着被删除。所以查询一个已经完结流程实例的变量，只能在历史变量表中查找。\n\n当然运行时变量我们也可以根据对应的作用域把他分为`全局变量`和`局部变量`.\n\n### 全局变量\n\n流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量\n\n注意：如：    Global变量：userId（变量名）、zhangsan（变量值）\n\nglobal 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。\n\n案例：\n\n定义监听器\n\n```java\npublic class MySecondListener implements TaskListener {\n\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        // 获取所有的流程变量\n        Map<String, Object> variables = delegateTask.getVariables();\n        Set<String> keys = variables.keySet();\n        for (String key : keys) {\n            Object obj = variables.get(key);\n            System.out.println(key + \" = \" + obj);\n            if(obj instanceof  String){\n              // 修改 流程变量的信息\n              // variables.put(key,obj + \":boge3306\"); 直接修改Map中的数据 达不到修改流程变量的效果\n              delegateTask.setVariable(key,obj + \":boge3306\");\n            }\n        }\n    }\n}\n```\n\n设计流程\n\n![image-20220913011512486](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913011512486.png)\n\n\n\n案例代码：\n\n```java\n@SpringBootTest(classes = Application.class)\npublic class AssigneeTaskTest {\n\n    @Autowired\n    RepositoryService repositoryService;\n\n    @Autowired\n    RuntimeService runtimeService;\n\n\n    @Autowired\n    TaskService taskService;\n\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"请假流程-监听器\")\n                .addClasspathResource(\"flow/04-任务分配-监听器分配.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processDefId = \"Process_08kf7mp:1:d154c0f5-326d-11ed-841a-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 启动流程实例，绑定对应的流程变量\n     */\n    @Test\n    public void startFlowVariables(){\n        String processDefId = \"Process_1t425hs:1:539f152d-326a-11ed-ab57-c03c59ad2248\";\n        // 声明一个 Map 集合\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        // 启动流程实例，同时绑定对应的流程变量信息\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId,map);\n\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 流程审批\n     */\n    @Test\n    public void completeTask(){\n        taskService.complete(\"29a0614c-3267-11ed-a030-c03c59ad2248\");\n    }\n\n    /**\n     * 流程审批\n     *    同样需要绑定对应的流程变量的值\n     */\n    @Test\n    public void completeTaskVariables(){\n        // 声明一个 Map 集合\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user2\",\"demo\");\n        taskService.complete(\"dd013840-326a-11ed-b589-c03c59ad2248\",map);\n    }\n}\n```\n\n\n\n\n\n### 局部变量\n\n任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。\n\nLocal 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 \n\n我们通过RuntimeService 设置的Local变量绑定的是 executionId。在该流程中有效\n\n![image-20220913120555429](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913120555429.png)\n\n```java\n    /**\n     * 设置Local流程变量\n     */\n    @Test\n    public void setVariableLocal(){\n        String executionId = \"368f9fdc-3317-11ed-871d-c03c59ad2248\";\n        runtimeService.setVariableLocal(executionId,\"orderId\",\"10006\");\n        runtimeService.setVariableLocal(executionId,\"user2\",\"波波烤鸭1\");\n    }\n```\n\n\n\n我们通过TaskService设置的Local变量的作用域是和TaskId绑定的，作用域就在这一个Task生命周期中。\n\n```java\n    @Test\n    public void taskLocalVariables(){\n        taskService.setVariableLocal(\"7eb1b34b-3318-11ed-b9e6-c03c59ad2248\",\"user2\",\"波哥66666\");\n    }\n```\n\n\n\n\n\n## 历史变量\n\n历史变量，存入`act_hi_varinst`表中。在流程启动时，流程变量会同时存入历史变量表中；在流程结束时，历史表中的变量仍然存在。可理解为“永久代”的流程变量。\n\n获取已完成的、id为’XXX’的流程实例中，所有的`HistoricVariableInstances`（历史变量实例），并以变量名排序。\n\n```java\nhistoryService.createHistoricVariableInstanceQuery()\n    .processInstanceId(\"XXX\")\n    .orderByVariableName.desc()\n    .list();\n```\n\n\n\n\n\n\n\n# 身份服务\n\n在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。\n\n身份服务是对各种用户/组库的API抽象。其基本实体是：\n\n- User: 使用不同ID区分的不同用户\n- Group: 使用不同ID区分的不同组\n- Membership: 组与用户之间的关系\n- Tenant: 使用不同ID区分的不同租户\n- Tenant Membership: 租户与 用户/组 之间的关系\n\n## 候选人\n\n### 绘制流程图\n\n首先绘制一个如下的基本流程图。然后我们分别来指派处理人。\n\n![image-20220917101906123](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917101906123.png)\n\n\n\n人事审批这块我们可以直接来指定多个候选人来处理。`demo,zhang,lisi`\n\n![image-20220917102115513](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102115513.png)\n\n在总经理审批的位置我们在设计的时候不太清楚会是谁来审批，所以通过值表达式来处理。\n\n![image-20220917102211814](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102211814.png)\n\n设计完成后对应的xml中的数据为：\n\n![image-20220917102259478](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102259478.png)\n\n\n\n### 部署和启动流程\n\n创建了流程图后我们就可以直接来部署该流程。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人案例\")\n                .addClasspathResource(\"flow/候选人案例.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n接着就可以直接来启动该流程了。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_05vjqic:1:cca1e181-362e-11ed-b8fc-c03c59ad2248\";\n        runtimeService.startProcessInstanceById(processInstanceId);\n    }\n```\n\n启动完成流程后我们进入到`act_ru_task`中可以发现我们创建的流程任务信息，但是`处理人`字段还是空的。\n\n![image-20220917102625541](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102625541.png)\n\n\n\n![image-20220917102655865](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102655865.png)\n\n\n\n注意：相关的候选人的信息存储在了`act_ru_identitylink`表中。\n\n![image-20220917104657296](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917104657296.png)\n\n对应的查询操作如下：\n\n```java\n    @Test\n    public void getTaskCandidate(){\n        List<IdentityLink> identityLinksForTask = taskService.getIdentityLinksForTask(\"023f0279-362f-11ed-8d8a-c03c59ad2248\");\n        for (IdentityLink identityLink : identityLinksForTask) {\n            System.out.println(identityLink.getTaskId());\n            System.out.println(identityLink.getProcessDefId());\n            System.out.println(identityLink.getUserId());\n        }\n    }\n```\n\n\n\n\n\n### 任务的拾取\n\n候选要操作我们需要通过`拾取`的行为把`候选人`转换为`处理人`.那么候选人登录后需要能查询出来他可以`拾取`的任务。在camunda的web应用中我们可以看到这样的操作。`demo`账号登录。\n\n![image-20220917103124214](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103124214.png)\n\n在代码上的实现，先来看查询操作。\n\n```java\n    /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     */\n    @Test\n    public void queryTaskCandidate(){\n\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskCandidateUser(\"demo\")\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 查询当前任务所有的候选人\n     */\n    @Test\n    public void getTaskCandidate(){\n        String taskId = \"52b2642a-36fa-11ed-bde4-c03c59ad2248\";\n        List<IdentityLink> linksForTask = taskService.getIdentityLinksForTask(taskId);\n        if(linksForTask != null && linksForTask.size() > 0){\n            for (IdentityLink identityLink : linksForTask) {\n                System.out.println(identityLink.getUserId());\n            }\n        }\n    }\n```\n\n然后我们就可以在上面的基础上来做`拾取`的操作了。\n\n```java\n    /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     */\n    @Test\n    public void claimTaskCandidate(){\n\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskCandidateUser(\"demo\")\n                .list();\n        for (Task task : list) {\n            taskService.claim(task.getId(),\"demo\");\n        }\n    }\n```\n\n进入到表结构中你会发现这条Task记录的处理人被指派为了`demo`,而且在Web端可以看到可以审批了。\n\n![image-20220917103743685](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103743685.png)\n\n\n\n注意：这时`demo`拾取了任务之后其他的用户就不能再拾取了，查询的时候也查询不到了。\n\n\n\n\n\n### 任务的归还\n\n拾取任务后如果不想操作那么可以归还任务。\n\n```java\n    /**\n     * 退还任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void unclaimTaskCandidate(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null){\n            // 归还相关的任务  置空即可\n            taskService.setAssignee(task.getId(),null);\n            System.out.println(\"归还拾取成功\");\n        }\n    }\n```\n\n\n\n### 任务的交接\n\n拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理.\n\n```java\n    @Test\n    public void taskCandidate(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"023da2e6-362f-11ed-8d8a-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null){\n            // 任务交接\n            taskService.setAssignee(task.getId(),\"zhang\");\n            System.out.println(\"任务交接给了zhang\");\n        }\n    }\n```\n\n\n\n### 任务完成\n\n正常的任务处理\n\n```java\n    @Test\n    public void completeTask1(){\n        String taskId = \"023f0279-362f-11ed-8d8a-c03c59ad2248\";\n        // 但是下一个节点的 处理人是值表达式 我们需要赋值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"user1\",\"demo\");\n        map.put(\"user2\",\"zhangsan\");\n        map.put(\"user3\",\"wangwu\");\n        taskService.complete(taskId,map);\n    }\n```\n\n当然我们通过值表达式来处理的候选人操作。在`act_ru_identitylink`表中同样有相关记录，我们需要结合流程变量表来处理了。但是处理的API和上面是一样的。\n\n\n\n## 候选人组\n\n当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。\n\n\n\n### 管理用户和组\n\n#### 用户管理\n\n我们需要先单独维护用户信息。后台对应的表结构是`ACT_ID_USER`.\n\n```java\n    /**\n     * 维护用户\n     */\n    @Test\n    public void createUser(){\n        User user = identityService.newUser(\"zhang\");\n        user.setFirstName(\"张\");\n        user.setLastName(\"三\");\n        user.setEmail(\"zhangsan@qq.com\");\n        user.setPassword(\"123456\");\n        identityService.saveUser(user);\n    }\n```\n\n要更新或者删除用户的话。通过相关API即可完成\n\n```java\n    @Test\n    public void updateUser(){\n        User user = identityService.createUserQuery().userId(\"zhang\").singleResult();\n        user.setPassword(\"123\");\n        identityService.saveUser(user);\n    }\n    @Test\n    public void deleteUser(){\n        identityService.deleteUser(\"zhang\");\n    }\n```\n\n\n\n#### Group管理\n\n维护对应的Group信息，后台对应的表结构是`ACT_ID_GROUP`\n\n```java\n    /**\n     * 创建用户组\n     */\n    @Test\n    public void createGroup(){\n        // 创建Group对象并指定相关的信息\n        Group group = identityService.newGroup(\"group1\");\n        group.setName(\"开发部\");\n        group.setType(\"type1\");\n        // 创建Group对应的表结构数据\n        identityService.saveGroup(group);\n    }\n```\n\n更新和删除参考上面的`用户管理`\n\n\n\n#### 用户分配组\n\n用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是`ACT_ID_MEMBERSHIP`\n\n```java\n    /**\n     * 将用户分配给对应的Group\n     */\n    @Test\n    public void userGroup(){\n        // 根据组的编号找到对应的Group对象\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        // 创建 MemberShip 建立用户和组的关系\n        identityService.createMembership(\"zhang\",group.getId());\n    }\n```\n\n\n\n### 候选人组应用\n\n搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了\n\n#### 创建流程图\n\n创建一个简单的请假流程，处理人通过候选人组的方式来处理。\n\n![image-20220917201151251](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201151251.png)\n\n#### 流程的部署运行\n\n然后我们把流程部署和运行。\n\n```java\n /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人组案例\")\n                .addClasspathResource(\"flow/候选人组.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processInstanceId = \"Process_1gvo8so:1:3e253edb-3682-11ed-a1ff-c03c59ad2248\";\n        runtimeService.startProcessInstanceById(processInstanceId);\n    }\n```\n\n部署成功后我们可以在`act_ru_identitylink`中看到对应的记录。\n\n![image-20220917201747129](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201747129.png)\n\n\n\n#### 任务的拾取和完成\n\n然后完成任务的查询拾取和处理操作。逻辑是根据当前的登录`用户`找到对应的`组`，然后根据`组`找到对应的任务信息。\n\n```java\n   /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidateGroup(){\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(\"zhang\").singleResult();\n        List<Task> list = taskService.createTaskQuery()\n                .processInstanceId(\"711d5726-3682-11ed-8b9b-c03c59ad2248\")\n                .taskCandidateGroup(group.getId())\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate1(){\n        String userId = \"zhang\";\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(userId).singleResult();\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"711d5726-3682-11ed-8b9b-c03c59ad2248\")\n                .taskCandidateGroup(group.getId())\n                .singleResult();\n        if(task != null) {\n            // 任务拾取\n            taskService.claim(task.getId(),userId);\n            System.out.println(\"任务拾取成功\");\n        }\n    }\n```\n\n拾取后的操作和前面是一样的，就没必要赘述。当然我们在定义流程的时候也可以通过值表达式来处理，我们需要注意赋值即可。\n\n\n\n## 租户\n\n*多租户* 是指一个单一的Camunda应用需要为多个的租户服务的情况。对于每个租户来说，应该有某些隔离的保证。例如，一个租户的流程实例不应干扰另一个租户的流程实例。\n\n多租户可以通过两种不同的方式实现。一种是使用每个租户一个流程引擎。另一种方式是只使用一个流程引擎，并将数据与租户标识符相关联。这两种方式在数据隔离程度、维护工作和可扩展性方面各有不同。两种方式的组合也是可能的。\n\n多租户可以使用租户标识符（即tenant-ids）的流程引擎来实现。所有租户的数据都存储在一个表中（同一数据库和表结构）。通过存储在列中的租户标识符来提供隔离。\n\n![image-20220917203832905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917203832905.png)\n\n\n\n### 租户管理\n\n租户对应于`act_id.tenant`表结构中的数据。我们可以先来维护租户的相关信息。创建`长沙分公司`的租户信息\n\n```java\n    /**\n     * 创建租户\n     */\n    @Test\n    public void createTenant(){\n        Tenant tenant = identityService.newTenant(\"cs\");\n        tenant.setName(\"长沙分公司\");\n        identityService.saveTenant(tenant);\n    }\n```\n\n![image-20220918220534584](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220534584.png)\n\n\n\n当然参考前面的删除和更新操作也可以非常轻松的完成`租户`相关信息的处理。然后我们来看下租户和用户和组的关系。\n\n```java\n    /**\n     * 建立 租户 和 组的关系\n     * 当然也可以建立 租户和用户的关系。只是这种比较少用\n     */\n    @Test\n    public void createTenantAndGroupShip(){\n        identityService.createTenantGroupMembership(\"cs\",\"group1\");\n    }\n```\n\n![image-20220918220924950](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220924950.png)\n\n\n\n\n\n### 部署操作\n\n我们在部署流程的时候可以指定对应的租户编号。如果不指定租户编号，说明该流程是属于所有租户的。\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"候选人案例-租户\")\n                .tenantId(\"tenant1\")\n                .addClasspathResource(\"flow/候选人案例.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n\n### 查看部署流程\n\n设置了租户编号后，我们要做相关的查询，可以通过如下的API来实现\n\n```java\n    /**\n     * 基于租户 查询相关的部署流程\n     */\n    @Test\n    public void getByTenantId(){\n        List<Deployment> list = repositoryService.createDeploymentQuery()\n                .tenantIdIn(\"cs\")\n                .list();\n        for (Deployment deployment : list) {\n            System.out.println(\"deployment.getId() = \" + deployment.getId());\n            System.out.println(\"deployment.getName() = \" + deployment.getName());\n            System.out.println(\"------------\");\n        }\n    }\n\n    \n```\n\n通过调用`withoutTenantId()`来查询不属于任何租户的部署。\n\n```java\n@Test\n    public void getByWithoutTenantId(){\n        List<Deployment> list = repositoryService.createDeploymentQuery()\n                .withoutTenantId() // 查询出所有不属于任何tenantId的记录\n                .list();\n        for (Deployment deployment : list) {\n            System.out.println(\"deployment.getId() = \" + deployment.getId());\n            System.out.println(\"deployment.getName() = \" + deployment.getName());\n            System.out.println(\"------------\");\n        }\n    }\n```\n\n\n\n也可以通过调用`includeDeploymentsWithoutTenantId()`来查询属于特定租户或不属于租户的部署。\n\n```\n@Test\npublic void getByIncludTenantId(){\n    List<Deployment> list = repositoryService.createDeploymentQuery()\n            .tenantIdIn(\"cs\")\n            .includeDeploymentsWithoutTenantId() // 查询出 tenant1 和 不属于 租户的记录\n            .list();\n    for (Deployment deployment : list) {\n        System.out.println(\"deployment.getId() = \" + deployment.getId());\n        System.out.println(\"deployment.getName() = \" + deployment.getName());\n        System.out.println(\"------------\");\n    }\n}\n```\n\n与 “部署查询” 类似，定义查询允许通过一个或多个租户和不属于任何租户的定义进行过滤。\n\n```java\nList<ProcessDefinition> processDefinitions = repositoryService\n  .createProcessDefinitionQuery()\n  .tenantIdIn(\"cs\")\n  .includeProcessDefinitionsWithoutTenantId();\n  .list();\n```\n\n\n\n\n\n### 启动流程实例\n\n通过key创建一个为多租户部署的流程定义的实例，必须在`ProcessInstantiationBuilder` 中传递租户标识符 。\n\n```java\n    /**\n     * 租户 启动一个流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processKey = \"Process_05vjqic\";\n        ProcessInstance processInstance = runtimeService\n                .createProcessInstanceByKey(processKey)\n                .processDefinitionTenantId(\"cs\")\n                .execute();\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    @Test\n    public void startFlow1(){\n        String processId = \"Process_05vjqic:1:a6b23794-3767-11ed-a4df-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService\n                .createProcessInstanceById(processId)\n                .execute();\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n启动后流程后，在创建的Task记录中我们可以看到对应的`租户`信息\n\n![image-20220918234504559](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234504559.png)\n\n因为我们在流程设计的时候就指定了第一个节点的候选人是`group1`,所以在`act_ru_identitylink`表中可以看到相关的记录。\n\n![image-20220918234618891](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234618891.png)\n\n\n\n### 任务拾取\n\n接下来就可以对任务做`拾取`的操作了\n\n```java\n   /**\n     * 根据当前登录用户 查询到需要拾取的任务\n     */\n    @Test\n    public void claimTask(){\n        // 根据登录用户查询到对应的Group\n        List<Group> groups = identityService.createGroupQuery().groupMember(\"demo\").list();\n        if(groups != null && groups.size() > 0){\n            for (Group group : groups) {\n                // 根据 group 找到对应的 租户\n                List<Tenant> tenants = identityService.createTenantQuery().groupMember(group.getId()).list();\n                List<String> tenantStrings = new ArrayList<>();\n                if(tenants != null && tenants.size() > 0){\n                    tenantStrings = tenants.stream().map((item)->{\n                        return item.getId();\n                    }).collect(Collectors.toList());\n\n                    String[] ss = new String[tenantStrings.size()];\n                    tenantStrings.toArray(ss);\n                    List<Task> list = taskService.createTaskQuery()\n                            .tenantIdIn(ss)\n                            .list();\n                    if(list != null && list.size() > 0){\n                        for (Task task : list) {\n                            System.out.println(\"task.getId() = \" + task.getId());\n                        }\n                    }\n                }\n\n            }\n        }\n\n    }\n```\n\n可以查询到对应的拾取就比较简单了\n\n```java\n    @Test\n    public void claimTask(){\n        // 根据登录用户查询到对应的Group\n        List<Group> groups = identityService.createGroupQuery().groupMember(\"demo\").list();\n        if(groups != null && groups.size() > 0){\n            for (Group group : groups) {\n                // 根据 group 找到对应的 租户\n                List<Tenant> tenants = identityService.createTenantQuery().groupMember(group.getId()).list();\n                List<String> tenantStrings = new ArrayList<>();\n                if(tenants != null && tenants.size() > 0){\n                    tenantStrings = tenants.stream().map((item)->{\n                        return item.getId();\n                    }).collect(Collectors.toList());\n\n                    String[] ss = new String[tenantStrings.size()];\n                    tenantStrings.toArray(ss);\n                    List<Task> list = taskService.createTaskQuery()\n                            .tenantIdIn(ss)\n                            .list();\n                    if(list != null && list.size() > 0){\n                        for (Task task : list) {\n                            taskService.claim(task.getId(),\"demo\");\n                        }\n                    }\n                }\n\n            }\n        }\n\n    }\n\n```\n\n![image-20220919003450202](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220919003450202.png)\n\n能够拾取成功，那么后面的操作就是任务的审批。接下来的操作就和前面是一样的了。不再赘述~\n\n\n\n\n\n\n\n# 网关篇\n\n网关用来控制流程的流向\n\n## 排他网关\n\n`排他网关`（exclusive gateway）（也叫*异或网关 XOR gateway*，或者更专业的，*基于数据的排他网关 exclusive data-based gateway*），用于对流程中的**决策**建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为*true*）继续流程。\n\n绘制流程图：\n\n![image-20220922002931276](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922002931276.png)\n\n\n\n对应的XML文件\n\n![image-20220922003022802](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003022802.png)\n\n流程演示\n\n```java\n   /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"排他网关\")\n                .addClasspathResource(\"flow/排他网关.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n\n    /**\n     * 通过流程定义Id 启动\n     */\n    @Test\n    public void startFlow(){\n        String processId = \"Process_0eykic0:1:efadfc92-39c9-11ed-8f13-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"day\",4);\n        taskService.complete(\"21a323ee-39ca-11ed-8b49-c03c59ad2248\",map);\n    }\n```\n\n传递的是`day=4`会走中间的路线。\n\n![image-20220922003119262](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003119262.png)\n\n## 并行网关\n\n并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：\n\n* fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。\n\n* join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。\n\n注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。\n\n**与其他网关的主要区别是，并行网关不会解析条件。** **即使顺序流中定义了条件，也会被忽略。**\n\n![image-20220922003323785](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003323785.png)\n\n## 包含网关\n\n包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。\n\n包含网关的功能是基于进入和外出顺序流的：\n\n* 分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。\n\n* 汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。\n\n\n\n![image-20220922005111023](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005111023.png)\n\n\n\n\n\n当输入`day=4`时，走了第二和第三条路线\n\n![image-20220922005536912](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005536912.png)\n\n\n\n\n\n# 事件篇\n\n`事件`（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：*捕获（catching）*与*抛出（throwing）*事件。\n\n- **捕获:** 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。\n- **抛出:** 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。\n\n## 定时器事件\n\n定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件\n\n### 定时器启动事件\n\n定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。\n\n***请注意**：*子流程不能有定时器启动事件。\n\n***请注意**：*定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。\n\n***请注意**：*当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。\n\n定时器启动事件，用其中有一个钟表图标的圆圈来表示。我们通过具体案例来介绍\n\n![image-20220926104055183](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104055183.png)\n\n部署流程后等待到具体的时间，我们查看任务即可\n\n![image-20220926104152240](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104152240.png)\n\n\n\n时间定义这块使用的是  https://en.wikipedia.org/wiki/ISO_8601#Dates  ISO 8601 格式\n\n上面我们是通过指定固定时间来启动的，我们也可以通过`duraction`间隔时间来处理。\n\n![image-20220926105514506](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926105514506.png)\n\n\n\n通过间隔的方式来启动。\n\ntimeCycle：指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式\n\n* 第一种是按照[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals)标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3/PT10H\n* 也可以使用*timeCycle*的可选属性*endDate*，或者像这样直接写在时间表达式的结尾：`R3/PT10H/${EndDate}`。 当到达endDate时，应用会停止，并为该任务创建其他作业\n* 也可以通过cron表达式来处理\n\n\n\n案例：重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate\n\n```java\npublic class MyJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"MyJavaDelegate:执行了。。。\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n![image-20220926110231335](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110231335.png)\n\n在控制台可以看到对应的效果\n\n![image-20220926110317226](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110317226.png)\n\n也可以指定结束时间\n\n```xml\n      <timerEventDefinition>\n        <timeCycle>R3/PT30S/2022-03-28T21:46:11+00:00</timeCycle>\n      </timerEventDefinition>\n```\n\n\n\n此外还可以通过cron表达式来处理：\n\n```xml\n0 0/5 * * * ?\n```\n\n每隔5秒启动\n\n### 定时器中间事件\n\n在我们具体的流程处理中，A节点处理完成后，定时触发B节点的处理。\n\n![image-20220927002456358](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927002456358.png)\n\n### 定时器边界事件\n\n人工任务1如果在定义的`2022-09-27T23:36:14`这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.\n\n![image-20220927003701033](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927003701033.png)\n\n\n\n\n\n## 消息事件\n\n### 启动事件\n\n消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解\n\n![image-20220927004852502](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927004852502.png)\n\n\n\n启动流程实例可以通过普通的方式来触发，当然也可以通过对应的API来处理\n\n```java\n    /**\n     * 消息启动事件\n     */\n    @Test\n    public void startMessageFlow(){\n        runtimeService.startProcessInstanceByMessage(\"firstMessage\");\n    }\n```\n\n\n\n### 中间事件\n\n消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，`自动流程1`处理完成后，需要接收特定的消息之后才能进入到`自动流程2`\n\n![image-20220927005944099](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927005944099.png)\n\n正常的流程部署，启动和审批后，我们需要发送对应的消息来触发这个中间事件。\n\n```java\n    /**\n     * 发送消息\n     */\n    @Test\n    public void sendMsg(){\n        runtimeService.messageEventReceived(\"secondMessage\",\"da2028e9-3dbc-11ed-adb0-c03c59ad2248\");\n    }\n```\n\n\n\n\n\n### 边界事件\n\n消息边界事件，如果在消息触发前还没有，案例演示：\n\n![image-20220927010931908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927010931908.png)\n\n然后正常的部署，启动流程，如果在发布对应的消息之前还没有审批`用户任务1`,那当我们发送对应的消息后就会触发对应的消息边界事件。\n\n```java\n    /**\n     * 发送消息\n     */\n    @Test\n    public void sendMsg(){\n        runtimeService.messageEventReceived(\"thirdMessage\",\"0d2a30e2-3dbf-11ed-9e28-c03c59ad2248\");\n    }\n```\n\n\n\n\n\n## 错误事件\n\n### 开始事件\n\n错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。**错误启动事件不能用于启动流程实例**。\n\n错误启动事件总是中断。我们通过案例来介绍。\n\n![image-20220927113303497](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113303497.png)\n\n绘制事件子流程要注意：\n\n![image-20220927113345613](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113345613.png)\n\n选择错误启动事件\n\n![image-20220927113423993](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113423993.png)\n\n\n\n然后配置流程节点信息\n\n![image-20220927113506045](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113506045.png)\n\n![image-20220927113528120](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113528120.png)\n\n然后在JavaDelegate中抛出对应的异常\n\n```java\npublic class FirstJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"FirstJavaDelegate:执行了\" + LocalDateTime.now().toString());\n        // 抛出的信息必须对应于error的Code信息\n        throw new BpmnError(\"errorCode01\");\n    }\n}\n```\n\n然后正常部署，启动流程。然后我们就可以看到对应的流转了\n\n![image-20220927113652951](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113652951.png)\n\n\n\n### 边界事件\n\n当子流程执行中对外抛出了相关的异常，那么我们设置的错误边界事件就能对应的捕获到相关的事件，然后做对应的处理，相关案例如下：\n\n![image-20220927114818638](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114818638.png)\n\n绘制错误边界流程图的时候需要先绘制中间事件的图标，然后拖拽到子流程的边界，然后修改对应的类型即可，错误边界事件绑定抛出对应的errorCode\n\n![image-20220927114939647](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114939647.png)\n\n然后对应的抛出的信息\n\n```java\npublic class SecondJavaDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) throws Exception {\n        System.out.println(\"SecondJavaDelegate:执行了\" + LocalDateTime.now().toString());\n        // 抛出的信息必须对应于error的Code信息\n        throw new BpmnError(\"errorCode02\");\n    }\n}\n```\n\n\n\n然后部署启动流程即可看到对应的效果\n\n![image-20220927115037027](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927115037027.png)\n\n\n\n\n\n## 信号事件\n\n### 开始事件\n\n通过信号来启动流程实例\n\n![image-20220928232328300](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232328300.png)\n\n部署流程和发送信号来启动流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"事件-信号开始事件\")\n\n                .addClasspathResource(\"flow/23-事件-信号事件-开始事件.bpmn\")\n\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 通过信号来触发启动事件的执行\n     */\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal01\");\n    }\n```\n\n效果：\n\n![image-20220928232951167](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232951167.png)\n\n### 中间捕获事件\n\n案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。\n\n![image-20220928233200534](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233200534.png)\n\n在这个案例中我们需要部署流程，启动流程，然后`用户任务1`审批后，我们发布相关的信号，然后会进入到`用户任务2`中\n\n```java\n   /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"事件-信号中间捕获事件\")\n\n                .addClasspathResource(\"flow/24-事件-信号事件-中间捕获事件.bpmn\")\n\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startFlow(){\n        String processDefId = \"Process_002gvxw:1:cfcc56ac-3f42-11ed-a689-c03c59ad2248\";\n\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal02\");\n    }\n```\n\n效果：\n\n![image-20220928233556274](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233556274.png)\n\n### 中间抛出事件\n\n信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：\n\n![image-20220928234118517](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928234118517.png)\n\n正常的部署流程，然后做流程的审批，注意`用户任务4`需要先审批，然后处于信号捕获的状态，然后我们`用户任务2`的审批，抛出信号事件，那么对应的捕获事件才能触发，这儿有先后顺序。\n\n![image-20220928235157519](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235157519.png)\n\n### 边界事件\n\n最后来看看信号边界事件，案例如下：\n\n![image-20220928235443496](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235443496.png)\n\n部署启动流程，如果`用户任务1`审批了，就会进入到`用户任务2`审批，如果`用户任务1`还没审批，然后发送的相关的信号，会被信号边界事件捕获，从而进入到`用户任务3`\n\n```java\n    @Test\n    public void signalRecevied(){\n        runtimeService.signalEventReceived(\"signal04\");\n    }\n```\n\n\n\n![image-20220928235841363](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235841363.png)\n\n\n\n\n\n## 结束事件\n\n### 错误结束事件\n\n当流程执行到达**错误结束事件（error end event）**时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：\n\n![image-20220929002020963](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002020963.png)\n\n\n\n部署流程，然后启动流程，`用户任务1`审批\n\n![image-20220929002528362](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002528362.png)\n\n设置流程变量`flag==1`然后会走`错误结束事件`。会触发对应的边界事件\n\n![image-20220929002622297](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002622297.png)\n\n\n\n### 中断结束事件\n\n中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：\n\n#### 案例一\n\n介绍没有子流程的情况下终止流程的场景：\n\n![image-20220929003541120](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929003541120.png)\n\n\n\n\n\n#### 案例二\n\n案例二我们来看看有子流程的场景下：\n\n![image-20220929004654376](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929004654376.png)\n\n### 取消结束事件\n\n取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。\n\n具体通过案例来讲解：\n\n\n\n![image-20220929010451477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010451477.png)\n\n效果：\n\n![image-20220929010913632](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010913632.png)\n\n\n\n### 补偿事件\n\n通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：\n\n![image-20220929012202047](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012202047.png)\n\n\n\n案例效果：\n\n![image-20220929012149315](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012149315.png)\n\n\n\n\n\n# 多人会签\n\nMultiple Instance\n\n## 会签说明\n\n多实例活动是为业务流程中的某个步骤定义重复的一种方式。在编程概念中，多实例与 `for each` 结构相匹配：它允许对给定集合中的每个项目按顺序或并行地执行某个步骤或甚至一个完整的子流程。\n\n多实例是一个有额外属性（所谓的 “多实例特性”）的常规活动，它将导致该活动在运行时被多次执行。以下活动可以成为多实例活动。\n\n- Service Task 服务任务\n- Send Task 发送任务\n- User Task 用户任务\n- Business Rule Task 业务规则任务\n- Script Task 脚本任务\n- Receive Task 接收任务\n- Manual Task 手动任务\n- (Embedded) Sub-Process （嵌入）子流程\n- Call Activity 发起活动\n- Transaction Subprocess 事务子流程\n\n网关或事件不能成为多实例。\n\n如果一个活动是多实例的，这将由活动底部的三条短线表示。三条垂直线表示实例将以**并行**方式执行，而三条水平线表示**顺序**执行。\n\n![image-20221001234837327](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221001234837327.png)\n\n\n\n\n\n按照规范的要求，每个实例所创建的执行的每个父执行将有以下变量：\n\n- **nrOfInstances**: 实例的总数量\n- **nrOfActiveInstances**: 当前活动的，即尚未完成的实例的数量。对于一个连续的多实例，这将永远是1。\n- **nrOfCompletedInstances**: 已经完成的实例的数量。\n\n这些值可以通过调用 “execution.getVariable(x) “方法检索。\n\n此外，每个创建的执行将有一个执行本地变量（即对其他执行不可见，也不存储在流程实例级别）。\n\n- **loopCounter**: 表示该特定实例的`for each`循环中的索引\n\n为了使一个活动成为多实例，活动xml元素必须有一个`multiInstanceLoopCharacteristics`子元素。\n\n```xml\n<multiInstanceLoopCharacteristics isSequential=\"false|true\">\n ...\n</multiInstanceLoopCharacteristics>\n```\n\n`isSequential`属性表示该活动的实例是按顺序执行还是并行执行。\n\n## 并行会签\n\n### 绘制流程图\n\n![image-20221002000056981](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000056981.png)\n\n>loop cardinality：循环基数。可选项。可以直接填整数，表示会签的人数。\n>Collection：集合。可选项。会签人数的集合，通常为list，和loop cardinality二选一。\n>Element variable：元素变量。选择Collection时必选，为collection集合每次遍历的元素。\n>Completion condition：完成条件。可选。比如设置一个人完成后会签结束，那么其他人的代办任务都会消失。\n\n在用户任务节点绑定了一个监听器，监听`create`行为，该监听器我们是通过UEL表达式来实现的，`mulitiInstanceTaskListener`是我们注入到Spring容器中的对象。\n\n![image-20221002000233782](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000233782.png)\n\n监听器的内容为：\n\n```java\n@Component(\"mulitiInstanceTaskListener\")\npublic class MulitiInstanceTaskListener implements Serializable {\n    \n    public void completeListener(DelegateExecution execution){\n        System.out.println(\"任务：\"+execution.getId());\n        System.out.println(\"persons:\" + execution.getVariable(\"persons\"));\n        System.out.println(\"person\" + execution.getVariable(\"person\"));\n        \n    }\n}\n```\n\n然后对应的`Completion condition`我们可以在Java代码中处理\n\n```java\n@Component(\"mulitiInstanceCompleteTask\")\npublic class MulitiInstanceCompleteTask implements Serializable {\n    /**\n     * 完成任务是需要触发的方法\n     * @param execution\n     * @return\n     *     false 表示会签任务还没有结束\n     \n     *     true 表示会签任务结束了\n     */\n    public boolean completeTask(DelegateExecution execution) {\n        System.out.println(\"总的会签任务数量：\" + execution.getVariable(\"nrOfInstances\")\n                + \"当前获取的会签任务数量：\" + execution.getVariable(\"nrOfActiveInstances\")\n                + \" - \" + \"已经完成的会签任务数量：\" + execution.getVariable(\"nrOfCompletedInstances\"));\n        //有一个人同意就通过\n        Boolean flag = (Boolean) execution.getVariable(\"flag\");\n        System.out.println(\"当前意见：\"+flag);\n        return flag;\n    }\n}\n```\n\n上面的三个变量是Flowable中自带的可用变量\n\n1. nrOfInstances:该会签环节中总共有多少个实例\n\n2. nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。\n\n3. nrOfCompletedInstances:已经完成的实例的数量\n\n\n\n### 部署流程\n\n普通的部署流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deployFlow(){\n\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"多实例\")\n                .addClasspathResource(\"flow/diagram_1.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n\n\n### 启动流程\n\n在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\")，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248\",map);\n    }\n```\n\n\n\n启动后我们就可以在数据库中看到产生了3个Task\n\n![image-20221002000640899](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000640899.png)\n\n\n\n### 处理任务\n\n启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",false);\n        taskService.complete(\"71337501-b22e-11ec-a534-c03c59ad2248\",map);\n    }\n```\n\n当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出\n\n![image-20221002000853424](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000853424.png)\n\n同时Task表中的记录还有两条\n\n![image-20221002000931060](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000931060.png)\n\n然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",true); // 设置为true 结束多人会签\n        taskService.complete(\"713570d4-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n这时任务节点就结束了~\n\n## 串行会签\n\n串行会签指的是在多实例中，处理人按照对应的顺序来一个个的处理任务。\n\n### 流程图\n\n![image-20221002001501320](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002001501320.png)\n\n上面定义的是一个`串行会签`的流程图。循环3次，集合数据在`persons`中，每次循环的数据存储在循环变量`person`中，同时`person`也是对应的处理人的流程变量。\n\n\n\n### 部署和启动流程\n\n部署就是正常的部署了，不再赘述，启动流程的时候我们需要对集合做赋值。\n\n```java\n    @Test\n    public void startFlow(){\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据 串行会按照集合的循序来处理\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        String processDefId = \"Process_0ltwc4j:1:bd87ed49-41a3-11ed-9ec4-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId,map);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n启动后会创建一个Task，处理人是`张三`。然后处理完成后会创建下一个task，处理人是`李四`按循序来处理了。\n\n\n\n\n\n# 任务回退\n\n任务回退驳回撤销相关的操作在实际的开发中还是会经常遇到的，我们来看看Camunda中针对这些情况是如何处理的。\n\n## 串行的回退\n\n我们先从最简单的串行流程来分析，案例如下\n\n![image-20221005155134800](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155134800.png)\n\n上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是`user1`,`user2`,`user3`,`user4`.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"回退\")\n                .addClasspathResource(\"flow/串行回退.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n    /**\n     * 通过流程定义Id 启动\n     */\n    @Test\n    public void startFlow(){\n        String processId = \"Process_1up6ocm:1:d924ab29-43f9-11ed-b4f1-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processId);\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        taskService.complete(\"45bf40bf-43fa-11ed-8abe-c03c59ad2248\");\n    }\n```\n\n![image-20221004233745178](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221004233745178.png)\n\n然后我们来完成回退到`user3`\n\n```java\n    /**\n     * 任务回退\n     *\n     */\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"cb7b11bf-4486-11ed-bbb6-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_17ubvwq\") // 回退到对应的节点前  通过 节点的key 来实现\n                       // .cancelActivityInstance(processInstanceId) // 整个任务会取消\n                        .cancelAllForActivity(\"Activity_0jyi1pp\") // 取消原来的节点\n                        .execute();\n        /*String processDefinitionId = \"\";\n        runtimeService.createModification(\"\");*/\n    }\n```\n\n效果：\n\n![image-20221005155543672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155543672.png)\n\n然后在历史表中可以看到对应的走向\n\n![image-20221005155709087](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155709087.png)\n\n具体过程为：\n\n![image-20221005155909565](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155909565.png)\n\n然后我们可以从`user3`回退到`user1`\n\n![image-20221005160133670](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160133670.png)\n\n![image-20221005160200316](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160200316.png)\n\n要取消当前的任务直接调用`cancelActivityInstance(processInstanceId)`方法即可。\n\n相关方法说明：\n\n| 类别                       | 方法                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| 在活动前启动               | 回退到这个节点                                               |\n|                            | startBeforeActivity(String activityId)                       |\n|                            | startBeforeActivity(String activityId, String ancestorActivityInstanceId) |\n| 在活动后启动               | 通过 `startAfterActivity` 在一个活动之后运行，意味着将从活动的下一节点开始执行 |\n|                            | startAfterActivity(String activityId)                        |\n|                            | startAfterActivity(String activityId, String ancestorActivityInstanceId) |\n| 启动一个过渡               | 通过 `startTransition` 启动一个过渡，就意味着在一个给定的序列流上开始执行。当有多个流出的序列流时，这可以与 `startAfterActivity` 一起使用。如果成功，该指令从序列流开始执行流程模型，直到达到等待状态。 |\n|                            | startTransition(String transitionId)                         |\n|                            | startTransition(String transition, String ancestorActivityInstanceId) |\n| 取消一个活动实例           | 通过`cancelActivityInstance`取消一个特定的活动实例。既可以是一个活动实例，如用户任务的实例，也可以是层次结构中更高范围的实例，如子流程的实例 |\n|                            | cancelActivityInstance(String activityInstanceId)            |\n| 取消一个过渡实例           | 过渡实例表示即将以异步延续的形式进入/离开一个活动的执行流。一个已经创建但尚未执行的异步延续Job被表示为一个过渡实例。这些实例可以通过`cancelTransitionInstance`来取消 |\n|                            | cancelTransitionInstance(String activityInstanceId)          |\n| 取消一个活动的所有活动实例 | 通过指令 `cancelAllForActivity` 来取消一个特定活动的所有活动和过渡实例。 |\n|                            | cancelAllForActivity(String activityId)                      |\n\n\n\n## 并行的回退\n\n接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：\n\n![image-20221005193633031](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193633031.png)\n\n部署后，启动流程实例。运行到如下的节点，然后回退到`用户审批1`\n\n![image-20221005193931957](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193931957.png)\n\n然后我们来做回退操作\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a1d40268-44a2-11ed-9b63-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_0n0ddnj\") // 回退到对应的节点前  通过 节点的key 来实现\n                       // .cancelActivityInstance(processInstanceId) // 整个任务会取消\n                        .cancelAllForActivity(\"Activity_184rpuo\") // 取消原来的节点\n                        .cancelAllForActivity(\"Activity_08w6j91\")\n                        .execute();\n        /*String processDefinitionId = \"\";\n        runtimeService.createModification(\"\");*/\n    }\n```\n\n上面我们根据流程`实例回退`同时需要取消掉之前的两个节点。在历史表中也可以看到这个流程\n\n![image-20221005194635852](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194635852.png)\n\n在上面例子的基础上我们来实现如下的流程回退操作。\n\n![image-20221005194807783](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194807783.png)\n\n![image-20221005194904013](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194904013.png)\n\n具体的回退代码\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a1d40268-44a2-11ed-9b63-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_184rpuo\") // 回退到对应的节点前  通过 节点的key 来实现\n                        .startBeforeActivity(\"Activity_08w6j91\")\n                        .cancelAllForActivity(\"Activity_0ma3n4p\") // 取消原来的节点\n                        .execute();\n    }\n```\n\n然后查看历史任务同样可以看到具体的实现\n\n![image-20221005195142559](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005195142559.png)\n\n\n\n## 排他网关回退\n\n然后我们来看看在有排他网关的情况下，如果我们要调整流程的走向应该要怎么来处理。\n\n![image-20221005200528761](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200528761.png)\n\n也就是实际的场景中可能先走到了`用户2`审批，后面发现不合理，就需要回退到`用户1`后面然后再调整流程变量，流转到`用户3`处。\n\n![image-20221005200901486](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200901486.png)\n\n然后我们来看看具体的回退操作\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"6a70a33b-44a6-11ed-8557-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Gateway_0ah4coh\") // 回退到排他网关之前\n                        .setVariable(\"num\",-1) // 设置流程变量\n                        .cancelAllForActivity(\"Activity_0x9stxl\") // 取消原来的节点\n                        .execute();\n    }\n\n```\n\n回退到`排他网关`节点，然后设置流程变量`num=-1`然后会走`用户3`的审批。同时取消原来节点的审批\n\n![image-20221005201429581](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005201429581.png)\n\n\n然后我们来看看有子流程的场景下的回退处理\n\n![image-20221005204950474](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005204950474.png)\n\n我们来看看从子流程回退到主流程的操作。\n\n![image-20221005205324729](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205324729.png)\n\n```java\n    @Test\n    public void rollbackTask(){\n        String processInstanceId = \"a3311551-44ac-11ed-97c0-c03c59ad2248\";\n        runtimeService.createProcessInstanceModification(processInstanceId)\n                        .startBeforeActivity(\"Activity_00kwccq\") // 回退到排他网关之前\n                        .cancelAllForActivity(\"Activity_01835pn\") // 取消原来的节点\n                        .execute();\n    }\n```\n\n在历史表中查看记录\n\n![image-20221005205659817](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205659817.png)\n\n\n\n## 重启/恢复实例\n\n在流程实例终止后，其历史数据仍然存在，并且可以被访问以重启流程实例，前提是历史级别被设置为FULL。 例如，当流程没有以期望的方式终止时，重启流程实例是有用的。这个API的使用的其他可能情况有：\n\n- 恢复被错误地取消的流程实例的到最后状态\n- 由于错误路由导致流程实例终止后，重启流程实例\n\n为了执行这样的操作，流程引擎提供了 *流程实例重启API* `RuntimeService.restartProcessInstances(..)` 。该API允许通过使用流式构建器在一次调用中指定多个实例化指令。\n\n![image-20221005210910364](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005210910364.png)\n\n部署启动流程实例后进入并行网关。然后流程实例被中断了\n\n```java\n    @Test\n    public void deleteProcessId(){\n        String processId = \"cfd58b31-44ae-11ed-92f5-c03c59ad2248\";\n        runtimeService.deleteProcessInstance(processId,\"测试删除\");\n    }\n```\n\n![image-20221005211329315](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005211329315.png)\n\n之后，我们决定恢复该流程实例到最后状态：\n\n```java\n    @Test\n    public void recoveryProcessInstancess(){\n        runtimeService\n                .restartProcessInstances(\"Process_08wyw1g:1:ad8f483f-44ae-11ed-aee8-c03c59ad2248\") // 流程定义ID\n                .startBeforeActivity(\"Activity_03vnv63\")\n                .startBeforeActivity(\"Activity_0b7mtmx\")\n                .processInstanceIds(\"cfd58b31-44ae-11ed-92f5-c03c59ad2248\") // 流程实例ID\n                .execute();\n    }\n```\n\n流程实例已经用最后一组变量重启了。然而，在重启的流程实例中，只有全局变量被恢复了。 本地变量还需要调用 `RuntimeService.setVariableLocal(..)` 手动设置。\n\n>从技术上讲，创建的是一个新的流程实例。\n>\n>**请注意:** 历史流程和重启的流程实例的id是不同的。\n\n\n\n\n\n# 动态表单\n\n接下来我们看看动态表单的应用，在Camunda中表单分为内置表单和动态表单。\n\n## 内置表单\n\n内置表单就是在绘制流程图的时候同时绘制表单。这种方式其实就是绑定了对应的流程变量，不是太灵活。但还是来讲解下。\n\n![image-20221014160336988](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160336988.png)\n\n### 启动流程绑定\n\n我们先来看下在启动流程的时候就设置相关的表单\n\n![image-20221014160501005](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160501005.png)\n\n对应的流程图\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:modeler=\"http://camunda.org/schema/modeler/1.0\" id=\"Definitions_1pnd5o3\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"Camunda Modeler\" exporterVersion=\"4.12.0\" modeler:executionPlatform=\"Camunda Platform\" modeler:executionPlatformVersion=\"7.15.0\">\n  <bpmn:process id=\"Process_13abncz\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:extensionElements>\n        <camunda:formData>\n          <camunda:formField id=\"days\" label=\"请假天数\" type=\"long\" defaultValue=\"1\" />\n          <camunda:formField id=\"reason\" label=\"请假原因\" type=\"string\" />\n        </camunda:formData>\n      </bpmn:extensionElements>\n      <bpmn:outgoing>Flow_09xirvq</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:sequenceFlow id=\"Flow_09xirvq\" sourceRef=\"StartEvent_1\" targetRef=\"Activity_0a81mdi\" />\n    <bpmn:sequenceFlow id=\"Flow_1i0viip\" sourceRef=\"Activity_0a81mdi\" targetRef=\"Activity_01qg6se\" />\n    <bpmn:endEvent id=\"Event_1mj58zz\">\n      <bpmn:incoming>Flow_1asp8i3</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_1asp8i3\" sourceRef=\"Activity_01qg6se\" targetRef=\"Event_1mj58zz\" />\n    <bpmn:userTask id=\"Activity_0a81mdi\" name=\"用户任务1\" camunda:assignee=\"demo\">\n      <bpmn:incoming>Flow_09xirvq</bpmn:incoming>\n      <bpmn:outgoing>Flow_1i0viip</bpmn:outgoing>\n    </bpmn:userTask>\n    <bpmn:userTask id=\"Activity_01qg6se\" name=\"用户任务2\" camunda:assignee=\"demo\">\n      <bpmn:incoming>Flow_1i0viip</bpmn:incoming>\n      <bpmn:outgoing>Flow_1asp8i3</bpmn:outgoing>\n    </bpmn:userTask>\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_13abncz\">\n      <bpmndi:BPMNEdge id=\"Flow_09xirvq_di\" bpmnElement=\"Flow_09xirvq\">\n        <di:waypoint x=\"188\" y=\"117\" />\n        <di:waypoint x=\"240\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_1i0viip_di\" bpmnElement=\"Flow_1i0viip\">\n        <di:waypoint x=\"340\" y=\"117\" />\n        <di:waypoint x=\"400\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_1asp8i3_di\" bpmnElement=\"Flow_1asp8i3\">\n        <di:waypoint x=\"500\" y=\"117\" />\n        <di:waypoint x=\"562\" y=\"117\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"152\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1mj58zz_di\" bpmnElement=\"Event_1mj58zz\">\n        <dc:Bounds x=\"562\" y=\"99\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_09e81f3_di\" bpmnElement=\"Activity_0a81mdi\">\n        <dc:Bounds x=\"240\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_0ot1277_di\" bpmnElement=\"Activity_01qg6se\">\n        <dc:Bounds x=\"400\" y=\"77\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>\n\n```\n\n可以看到对应的xml中就配置了表单的数据\n\n![image-20221014160601636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160601636.png)\n\n\n\n部署流程\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"表单01\")\n                .addClasspathResource(\"flow/表单-01.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n部署完流程后我们可以通过对应的API查看流程对应的表单信息\n\n```java\n@Test\npublic void getStartFromData(){\n    String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n    // 根据流程定义找到对应的 表单数据。\n    StartFormData startFormData = formService\n        .getStartFormData(processDefId);\n    // 找到对应的表单域的集合\n    List<FormField> formFields = startFormData.getFormFields();\n    for (FormField formField : formFields) {\n        // 获取每个具体的表单域\n        System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n    }\n}\n```\n\n![image-20221014161737726](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014161737726.png)\n\n启动流程：两种方式\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"5\");\n        map.put(\"reason\",\"想休息下\");\n        // 正常启动的时候可以通过流程变量来给表单设置数据，也可以不设置\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(processDefId,map);\n    }\n\n    /**\n     * 通过FormService来启动一个表单流程\n     * @throws Exception\n     */\n    @Test\n    void startFormServiceFlow() throws Exception{\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",2);\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = formService.submitStartForm(processDefId,map);\n    }\n```\n\n启动流程后走到了`用户任务1`这个节点\n\n![image-20221014162003762](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162003762.png)\n\n想要查看对应的表单数据。通过如下方法可以实现\n\n```java\n    /**\n     * 根据Task编号来查看表单数据\n     */\n    @Test\n    void getTaskFormData(){\n        String taskId = \"426b11e6-4b85-11ed-b15a-c03c59ad2248\";\n\n        String processDefId = \"Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248\";\n        // 根据流程定义找到对应的 表单数据。\n        StartFormData startFormData = formService.getStartFormData(processDefId);\n        List<FormField> formFields = startFormData.getFormFields();\n        for (FormField formField : formFields) {\n            // 获取每个具体的表单域\n            System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n            // 根据taskId 找到对应的流程变量的值 也就是 表单的数据\n            System.out.println(formField.getId() + \" = \" + taskService.getVariable(taskId, formField.getId()));\n        }\n    }\n```\n\n\n\n![image-20221014162117179](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162117179.png)\n\n### 任务节点绑定\n\n上的方式绑定的表单数据在整个流程实例运作中都可以使用，还有一种方式我们是在具体的任务节点上绑定表单数据。我们来看看。\n\n![image-20221014162658765](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162658765.png)\n\n流程图中是在 `用户任务01` 这个节点绑定的表单数据了\n\n![image-20221014162905992](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162905992.png)\n\n部署流程：\n\n```java\n    /**\n     * 完成流程的部署操作\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"表单01\")\n                .addClasspathResource(\"flow/表单-02.bpmn\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n    }\n```\n\n启动一个流程实例：普通流程启动\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        String processDefId = \"Process_1xf3zgp:1:11da0157-4b9a-11ed-8750-c03c59ad2248\";\n        ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefId);\n    }\n```\n\n然后现在流程执行到了`用户任务01`出。我们绑定的有流程表单。我们可以查询看看。先来查询Task对应的表单信息\n\n![image-20221014165547832](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165547832.png)\n\n```java\n    @Test\n    void getTaskFormData(){\n        String taskId = \"bff75f55-4b9a-11ed-9709-c03c59ad2248\";\n        TaskFormData taskFormData = formService.getTaskFormData(taskId);\n        List<FormField> formFields = taskFormData.getFormFields();\n        for (FormField formField : formFields) {\n            // 获取每个具体的表单域\n            System.out.println(formField.getId() + \" \" + formField.getLabel() + \" \" + formField.getValue().getValue());\n        }\n    }\n```\n\n![image-20221014163939776](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014163939776.png)\n\n然后可以给表单的相关信息赋值\n\n```java\n    @Test\n    void setTaskFormData(){\n        String taskId = \"bff75f55-4b9a-11ed-9709-c03c59ad2248\";\n        taskService.setVariable(taskId,\"days1\",5);\n        taskService.setVariable(taskId,\"reason1\",\"个人原因\");\n    }\n```\n\n然后可以看到表单的信息\n\n![image-20221014165040994](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165040994.png)\n\n\n\n![image-20221014165131403](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165131403.png)\n\n审批完成到下一个节点\n\n![image-20221014165620888](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165620888.png)\n\n这时我们再查询下看能不能找到对应的表单信息\n\n![image-20221014165737958](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165737958.png)\n\n\n\n好了这个是我们讲的直接在流程中内嵌表单的应用\n\n\n\n## 外置表单\n\n我们还可以自己定义一个 HTML+JS 的动态表单，然后在审批相关节点的时候渲染展示。\n\n### 定义一个表单\n\n我们先定义一个简单的表单\n\n![image-20221015134123018](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134123018.png)\n\n### 流程绑定\n\n然后在流程设计的时候绑定对应的表单\n\n![image-20221015134202377](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134202377.png)\n\n部署流程后启动\n\n![image-20221015134234163](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134234163.png)\n\n![image-20221015134256088](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134256088.png)\n\n在跳转后的地址中有taskId和回调的接口地址","slug":"camunda进阶篇","published":1,"updated":"2022-11-05T14:16:59.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersh0003dk8fc21v3skr","content":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"ProcessEngine\"><a href=\"#ProcessEngine\" class=\"headerlink\" title=\"ProcessEngine\"></a>ProcessEngine</h1><p>ProcessEngine是Camunda流程引擎的核心。我们在流程中的很多具体的处理比如<code>流程部署</code>、<code>流程部署</code>、<code>流程审批</code>等操作都是通过<code>XXXService</code>来处理的。而相关的<code>XXXService</code>都是通过<code>ProcessEngine</code>来管理的。所以对于<code>ProcessEngine</code>的创建方式还是很有必要掌握的。</p>\n<h2 id=\"通过xml配置方式\"><a href=\"#通过xml配置方式\" class=\"headerlink\" title=\"通过xml配置方式\"></a>通过xml配置方式</h2><p>配置你的流程引擎的最简单的方法是通过一个叫做<code>camunda.cfg.xml</code>的XML文件。使用这个文件，你可以简单这样做:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们定义如下的<code>camunda.cfg.xml</code>文件。注意<code>camunda.cfg.xml</code>必须包含一个id为<code>processEngineConfiguration</code>的bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;processEngineConfiguration&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:h2:mem:camunda;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcDriver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUsername&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sa&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcPassword&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseSchemaUpdate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jobExecutorActivate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mailServerHost&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;mail.my-corp.com&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mailServerPort&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;5025&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果没有找到<code>camunda.cfg.xml</code>资源，默认引擎将搜索<code>activiti.cfg.xml</code>文件作为备用。如果两者都缺失，引擎就会停止运行，并打印出关于缺失配置资源的错误信息。</p>\n<p>请注意，配置XML实际上是一个Spring配置。这并不意味着Camunda引擎只能在Spring环境中使用。我们只是在内部利用Spring的解析和依赖注入功能来建立引擎。</p>\n<p>ProcessEngineConfiguration对象也可以使用配置文件以编程方式创建。也可以使用不同的bean id。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"JavaAPI方式\"><a href=\"#JavaAPI方式\" class=\"headerlink\" title=\"JavaAPI方式\"></a>JavaAPI方式</h2><p>我们也可以通过创建正确的ProcessEngineConfiguration对象或使用一些预定义的对象，以编程方式配置流程引擎。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration</code><br>流程引擎是以独立的方式使用的。引擎本身将负责处理事务。默认情况下，只有在引擎启动时才会检查数据库（如果没有数据库模式或模式版本不正确，会抛出一个异常）。</li>\n<li><code>org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</code><br>这是一个用于单元测试的工具类。引擎本身将负责处理事务。默认使用H2内存数据库。该数据库将在引擎启动和关闭时被创建和删除。当使用这个时，可能不需要额外的配置（除了，当使用Job执行器（job executor）或邮件功能时）。</li>\n<li><code>org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration</code><br>当流程引擎被用于Spring环境时使用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngineConfigurationImpl</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">             .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/camunda1?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">             .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">             .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">             .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">             .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class=\"line\">             .setHistory(<span class=\"string\">&quot;full&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">     cfg.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/camunda2?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">             .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">             .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">             .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">             .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class=\"line\">             .setHistory(<span class=\"string\">&quot;full&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SpringBoot项目\"><a href=\"#SpringBoot项目\" class=\"headerlink\" title=\"SpringBoot项目\"></a>SpringBoot项目</h2><p>在SpringBoot项目会根据我们导入的依赖完成自动装配，从而完成ProcessEngine的自动注入。我们可以来分析下源码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234908597.png\"\n                      alt=\"image-20220911234908597\"\n                ></p>\n<p>我们需要注意对于Camunda的相关配置。我们可以在application.yml 中配置。原因是 CamundaBpmProperties的处理。然后就是 @Import(CamundaBpmConfiguration.class) 。 在CamundaBpmConfiguration会完成相关的 ProcessEngineConfiguration 的相关注入。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234945653.png\"\n                      alt=\"image-20220911234945653\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911235223373.png\"\n                      alt=\"image-20220911235223373\"\n                ></p>\n<p>这块感兴趣的小伙伴可以仔细阅读下。</p>\n<h2 id=\"Service-API\"><a href=\"#Service-API\" class=\"headerlink\" title=\"Service API\"></a>Service API</h2><p>Java API是与引擎互动的最常见方式。中心起点是<code>ProcessEngine</code>，它可以通过几种方式创建，如配置部分所述。从ProcessEngine中，你可以获得包含工作流&#x2F;BPM方法的各种服务。<code>ProcessEngine</code>和<code>服务对象</code>是<code>线程安全</code>的。所以你可以为整个服务器保留对其中一个对象的引用.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/api.services.png\"\n                      alt=\"img\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\"><span class=\"type\">FormService</span> <span class=\"variable\">formService</span> <span class=\"operator\">=</span> processEngine.getFormService();</span><br><span class=\"line\"><span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\"><span class=\"type\">ManagementService</span> <span class=\"variable\">managementService</span> <span class=\"operator\">=</span> processEngine.getManagementService();</span><br><span class=\"line\"><span class=\"type\">FilterService</span> <span class=\"variable\">filterService</span> <span class=\"operator\">=</span> processEngine.getFilterService();</span><br><span class=\"line\"><span class=\"type\">ExternalTaskService</span> <span class=\"variable\">externalTaskService</span> <span class=\"operator\">=</span> processEngine.getExternalTaskService();</span><br><span class=\"line\"><span class=\"type\">CaseService</span> <span class=\"variable\">caseService</span> <span class=\"operator\">=</span> processEngine.getCaseService();</span><br><span class=\"line\"><span class=\"type\">DecisionService</span> <span class=\"variable\">decisionService</span> <span class=\"operator\">=</span> processEngine.getDecisionService();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：所有的服务都是<code>无状态的</code>。这意味着你可以很容易地在一个集群的多个节点上运行Camunda平台，每个节点都去同一个数据库，而不必担心哪个机器实际执行了以前的调用。对任何服务的任何调用都是无状态的，无论它在哪里执行。</p>\n<p>每个服务的简单介绍</p>\n<table>\n<thead>\n<tr>\n<th>服务名称</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>仓库服务<strong>RepositoryService</strong></td>\n<td>提供了管理和操纵部署和流程定义的操作</td>\n</tr>\n<tr>\n<td>运行时服务-<strong>RuntimeService</strong></td>\n<td>首先可以通过一个流程定义启动多个流程实例。也能用于处理检索和存储流程变量的服务</td>\n</tr>\n<tr>\n<td>任务服务-<strong>TaskService</strong></td>\n<td>围绕用户审批操作的一切都会被归纳到TaskService。比如：查询分配给用户或组的任务，创建新的独立任务。这些是与流程实例无关的任务，操纵一个任务被分配给哪个用户，或者哪个用户以某种方式参与到任务中，声称并完成一项任务。声称意味着有人决定成为该任务的受让人，意味着这个用户将完成该任务。完成意味着 “完成任务的工作”等</td>\n</tr>\n<tr>\n<td>身份服务-<strong>IdentityService</strong></td>\n<td>是非常简单的。它允许对组和用户进行管理（创建、更新、删除、查询…）。重要的是要理解，核心引擎实际上在运行时并不对用户进行任何检查</td>\n</tr>\n<tr>\n<td>表单服务-<strong>FormService</strong></td>\n<td>一个可选的服务。提供了表单功能</td>\n</tr>\n<tr>\n<td>历史服务-<strong>HistoryService</strong></td>\n<td>暴露了引擎收集的所有历史数据。当执行流程时，引擎可以保留很多数据（这是可配置的），如流程实例的开始时间、谁做了哪些任务、完成任务花了多长时间、每个流程实例遵循的路径等。该服务主要暴露了访问这些数据的查询功能。</td>\n</tr>\n<tr>\n<td>管理服务-<strong>ManagementService</strong></td>\n<td>它允许检索关于数据库表和表元数据的信息。此外，它暴露了查询功能和Job的管理操作。Job在引擎中被用于各种事情，如定时器、异步延续、延迟暂停&#x2F;激活等。</td>\n</tr>\n<tr>\n<td>过滤器服务-<strong>FilterService</strong></td>\n<td>允许创建和管理过滤器。过滤器是像任务查询一样的存储查询。例如，过滤器被任务列表用来过滤用户任务</td>\n</tr>\n<tr>\n<td>外部任务服务-<strong>ExternalTaskService</strong></td>\n<td>提供对外部任务实例的访问。外部任务代表在外部处理的工作项目，独立于流程引擎。</td>\n</tr>\n<tr>\n<td>案例服务-<strong>CaseService</strong></td>\n<td>与运行时服务（<strong>RuntimeService</strong>）类似，但用于案例实例。它处理启动案例定义的新案例实例并管理案例执行的生命周期。该服务也被用来检索和更新案例实例的流程变量。</td>\n</tr>\n<tr>\n<td>决策服务-<strong>DecisionService</strong></td>\n<td>允许评估部署在引擎中的决策。它是评估独立于流程定义的业务规则任务中的决策的一种选择。</td>\n</tr>\n</tbody></table>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><h2 id=\"固定分配\"><a href=\"#固定分配\" class=\"headerlink\" title=\"固定分配\"></a>固定分配</h2><p>在指派<code>用户任务</code>的审批人时。我们是直接指派的固定账号。但是为了保证流程设计审批的灵活性。我们需要各种不同的分配方式，所以这节我们就详细的来介绍先在Camunda中我们可以使用的相关的分配方式</p>\n<p>固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003431387.png\"\n                      alt=\"image-20220912003431387\"\n                ></p>\n<p>这种方式就非常简单。不再过多赘述。</p>\n<h2 id=\"值表达式\"><a href=\"#值表达式\" class=\"headerlink\" title=\"值表达式\"></a>值表达式</h2><p><strong>值表达式 Value expression</strong>: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar&#125;</span><br><span class=\"line\">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003628341.png\"\n                      alt=\"image-20220912003628341\"\n                ></p>\n<p>然后可以演示下这个案例，先部署该流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请假流程&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/1-01-任务分配.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动流程实例。启动流程实例后会进入到<code>人事审批</code>这个节点，有<code>值表达式</code>的存在，我们需要在启动的过程中就给其赋值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004447956.png\"\n                      alt=\"image-20220912004447956\"\n                ></p>\n<p>绑定流程变量的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0uiy3j1:1:712d273a-31f0-11ed-9e27-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个Map集合，存储相关的流程变量信息</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 通过 RuntimeService 启动一个流程实例，同时绑定了对应的流程变量信息</span></span><br><span class=\"line\">    runtimeService.startProcessInstanceById(processInstanceId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过后台查看数据我们可以发现<code>act_ru_task</code>中有了一条<code>人事审批</code>的任务，而且对于的审批人就是<code>demo</code>也就是我们给对应的流程变量的赋值</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004819089.png\"\n                      alt=\"image-20220912004819089\"\n                ></p>\n<p>而对应的流程变量信息存储在<code>act_ru_variable</code>中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004949936.png\"\n                      alt=\"image-20220912004949936\"\n                ></p>\n<h2 id=\"方法表达式\"><a href=\"#方法表达式\" class=\"headerlink\" title=\"方法表达式\"></a>方法表达式</h2><p><strong>方法表达式 Method expression</strong>: 调用一个方法，可以带或不带参数。<strong>当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。</strong>传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如： boge3306</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;printer.print()&#125;</span><br><span class=\"line\">$&#123;myBean.getAssignee()&#125;</span><br><span class=\"line\">$&#123;myBean.addNewOrder(<span class=\"string\">&#x27;orderName&#x27;</span>)&#125;</span><br><span class=\"line\">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>myBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法.我们通过案例来演示下。我们先定义对应的Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAssignee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;getAssignee 方法执行了....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;demo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在对应的流程图中来定义。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912005546442.png\"\n                      alt=\"image-20220912005546442\"\n                ></p>\n<p>然后通过部署启动操作来看看。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010330601.png\"\n                      alt=\"image-20220912010330601\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010405626.png\"\n                      alt=\"image-20220912010405626\"\n                ></p>\n<p>通过这块的演示，我们就可以基于我们的外部条件来结合我们的逻辑实现动态的来指定对应的处理人。</p>\n<h2 id=\"监听器配置\"><a href=\"#监听器配置\" class=\"headerlink\" title=\"监听器配置\"></a>监听器配置</h2><p>可以使用监听器来完成很多Camunda的流程业务。我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee。创建自定义监听器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的一个 Task 监听器</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们需要在监听器中完成 处理人的动态指派</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFirstTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFirstTaskListener --- &gt; 执行了&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 针对 是创建Task节点的事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(EVENTNAME_CREATE.equals(delegateTask.getEventName()))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 指派对应的处理人</span></span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在流程图中绑定对应的监听器</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011453664.png\"\n                      alt=\"image-20220912011453664\"\n                ></p>\n<p>然后我们部署和启动流程后，可以看到对应的触发效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011644311.png\"\n                      alt=\"image-20220912011644311\"\n                ></p>\n<p>表结构中也可以看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011735815.png\"\n                      alt=\"image-20220912011735815\"\n                ></p>\n<p>说明这块的处理是完全可行的。</p>\n<h1 id=\"流程变量\"><a href=\"#流程变量\" class=\"headerlink\" title=\"流程变量\"></a>流程变量</h1><p>流程变量可以用将数据添加到流程的运行时状态中，或者更具体地说，变量作用域中。改变实体的各种API可以用来更新这些附加的变量。一般来说，一个变量由一个名称和一个值组成。名称用于在整个流程中识别变量。例如，如果一个活动（activity）设置了一个名为 <em>var</em> 的变量，那么后续活动中可以通过使用这个名称来访问它。变量的值是一个 Java 对象。</p>\n<h2 id=\"运行时变量\"><a href=\"#运行时变量\" class=\"headerlink\" title=\"运行时变量\"></a>运行时变量</h2><p>流程实例运行时的变量，存入act_ru_variable表中。在流程实例运行结束时，此实例的变量在表中删除。在流程实例创建及启动时，可设置流程变量。所有的<code>startProcessInstanceXXX</code>方法都有一个可选参数用于设置变量。例如，<code>RuntimeService</code>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessInstance <span class=\"title function_\">startProcessInstanceById</span><span class=\"params\">(String processDefinitionId, Map&lt;String, Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在流程执行中加入变量。例如，(<em>RuntimeService</em>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariable</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariablesLocal</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>读取变量方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariables</span><span class=\"params\">(String executionId)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariablesLocal</span><span class=\"params\">(String executionId)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariables</span><span class=\"params\">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariablesLocal</span><span class=\"params\">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class=\"line\">Object <span class=\"title function_\">getVariable</span><span class=\"params\">(String executionId, String variableName)</span>;</span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getVariable</span><span class=\"params\">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：由于流程实例结束时，对应在运行时表的数据跟着被删除。所以查询一个已经完结流程实例的变量，只能在历史变量表中查找。</p>\n<p>当然运行时变量我们也可以根据对应的作用域把他分为<code>全局变量</code>和<code>局部变量</code>.</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量</p>\n<p>注意：如：    Global变量：userId（变量名）、zhangsan（变量值）</p>\n<p>global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。</p>\n<p>案例：</p>\n<p>定义监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MySecondListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有的流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; variables = delegateTask.getVariables();</span><br><span class=\"line\">        Set&lt;String&gt; keys = variables.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> variables.get(key);</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">&quot; = &quot;</span> + obj);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span>  String)&#123;</span><br><span class=\"line\">              <span class=\"comment\">// 修改 流程变量的信息</span></span><br><span class=\"line\">              <span class=\"comment\">// variables.put(key,obj + &quot;:boge3306&quot;); 直接修改Map中的数据 达不到修改流程变量的效果</span></span><br><span class=\"line\">              delegateTask.setVariable(key,obj + <span class=\"string\">&quot;:boge3306&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设计流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913011512486.png\"\n                      alt=\"image-20220913011512486\"\n                ></p>\n<p>案例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = Application.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AssigneeTaskTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请假流程-监听器&quot;</span>)</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;flow/04-任务分配-监听器分配.bpmn&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_08kf7mp:1:d154c0f5-326d-11ed-841a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例，绑定对应的流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlowVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1t425hs:1:539f152d-326a-11ed-ab57-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个 Map 集合</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，同时绑定对应的流程变量信息</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId,map);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流程审批</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        taskService.complete(<span class=\"string\">&quot;29a0614c-3267-11ed-a030-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流程审批</span></span><br><span class=\"line\"><span class=\"comment\">     *    同样需要绑定对应的流程变量的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTaskVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个 Map 集合</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        taskService.complete(<span class=\"string\">&quot;dd013840-326a-11ed-b589-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。</p>\n<p>Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 </p>\n<p>我们通过RuntimeService 设置的Local变量绑定的是 executionId。在该流程中有效</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913120555429.png\"\n                      alt=\"image-20220913120555429\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置Local流程变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">executionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;368f9fdc-3317-11ed-871d-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.setVariableLocal(executionId,<span class=\"string\">&quot;orderId&quot;</span>,<span class=\"string\">&quot;10006&quot;</span>);</span><br><span class=\"line\">    runtimeService.setVariableLocal(executionId,<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;波波烤鸭1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们通过TaskService设置的Local变量的作用域是和TaskId绑定的，作用域就在这一个Task生命周期中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskLocalVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    taskService.setVariableLocal(<span class=\"string\">&quot;7eb1b34b-3318-11ed-b9e6-c03c59ad2248&quot;</span>,<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;波哥66666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"历史变量\"><a href=\"#历史变量\" class=\"headerlink\" title=\"历史变量\"></a>历史变量</h2><p>历史变量，存入<code>act_hi_varinst</code>表中。在流程启动时，流程变量会同时存入历史变量表中；在流程结束时，历史表中的变量仍然存在。可理解为“永久代”的流程变量。</p>\n<p>获取已完成的、id为’XXX’的流程实例中，所有的<code>HistoricVariableInstances</code>（历史变量实例），并以变量名排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">historyService.createHistoricVariableInstanceQuery()</span><br><span class=\"line\">    .processInstanceId(<span class=\"string\">&quot;XXX&quot;</span>)</span><br><span class=\"line\">    .orderByVariableName.desc()</span><br><span class=\"line\">    .list();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"身份服务\"><a href=\"#身份服务\" class=\"headerlink\" title=\"身份服务\"></a>身份服务</h1><p>在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。</p>\n<p>身份服务是对各种用户&#x2F;组库的API抽象。其基本实体是：</p>\n<ul>\n<li>User: 使用不同ID区分的不同用户</li>\n<li>Group: 使用不同ID区分的不同组</li>\n<li>Membership: 组与用户之间的关系</li>\n<li>Tenant: 使用不同ID区分的不同租户</li>\n<li>Tenant Membership: 租户与 用户&#x2F;组 之间的关系</li>\n</ul>\n<h2 id=\"候选人\"><a href=\"#候选人\" class=\"headerlink\" title=\"候选人\"></a>候选人</h2><h3 id=\"绘制流程图\"><a href=\"#绘制流程图\" class=\"headerlink\" title=\"绘制流程图\"></a>绘制流程图</h3><p>首先绘制一个如下的基本流程图。然后我们分别来指派处理人。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917101906123.png\"\n                      alt=\"image-20220917101906123\"\n                ></p>\n<p>人事审批这块我们可以直接来指定多个候选人来处理。<code>demo,zhang,lisi</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102115513.png\"\n                      alt=\"image-20220917102115513\"\n                ></p>\n<p>在总经理审批的位置我们在设计的时候不太清楚会是谁来审批，所以通过值表达式来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102211814.png\"\n                      alt=\"image-20220917102211814\"\n                ></p>\n<p>设计完成后对应的xml中的数据为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102259478.png\"\n                      alt=\"image-20220917102259478\"\n                ></p>\n<h3 id=\"部署和启动流程\"><a href=\"#部署和启动流程\" class=\"headerlink\" title=\"部署和启动流程\"></a>部署和启动流程</h3><p>创建了流程图后我们就可以直接来部署该流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;候选人案例&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/候选人案例.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着就可以直接来启动该流程了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic:1:cca1e181-362e-11ed-b8fc-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(processInstanceId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动完成流程后我们进入到<code>act_ru_task</code>中可以发现我们创建的流程任务信息，但是<code>处理人</code>字段还是空的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102625541.png\"\n                      alt=\"image-20220917102625541\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102655865.png\"\n                      alt=\"image-20220917102655865\"\n                ></p>\n<p>注意：相关的候选人的信息存储在了<code>act_ru_identitylink</code>表中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917104657296.png\"\n                      alt=\"image-20220917104657296\"\n                ></p>\n<p>对应的查询操作如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;IdentityLink&gt; identityLinksForTask = taskService.getIdentityLinksForTask(<span class=\"string\">&quot;023f0279-362f-11ed-8d8a-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IdentityLink identityLink : identityLinksForTask) &#123;</span><br><span class=\"line\">        System.out.println(identityLink.getTaskId());</span><br><span class=\"line\">        System.out.println(identityLink.getProcessDefId());</span><br><span class=\"line\">        System.out.println(identityLink.getUserId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的拾取\"><a href=\"#任务的拾取\" class=\"headerlink\" title=\"任务的拾取\"></a>任务的拾取</h3><p>候选要操作我们需要通过<code>拾取</code>的行为把<code>候选人</code>转换为<code>处理人</code>.那么候选人登录后需要能查询出来他可以<code>拾取</code>的任务。在camunda的web应用中我们可以看到这样的操作。<code>demo</code>账号登录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103124214.png\"\n                      alt=\"image-20220917103124214\"\n                ></p>\n<p>在代码上的实现，先来看查询操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskCandidateUser(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询当前任务所有的候选人</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;52b2642a-36fa-11ed-bde4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    List&lt;IdentityLink&gt; linksForTask = taskService.getIdentityLinksForTask(taskId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(linksForTask != <span class=\"literal\">null</span> &amp;&amp; linksForTask.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IdentityLink identityLink : linksForTask) &#123;</span><br><span class=\"line\">            System.out.println(identityLink.getUserId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们就可以在上面的基础上来做<code>拾取</code>的操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskCandidateUser(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        taskService.claim(task.getId(),<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入到表结构中你会发现这条Task记录的处理人被指派为了<code>demo</code>,而且在Web端可以看到可以审批了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103743685.png\"\n                      alt=\"image-20220917103743685\"\n                ></p>\n<p>注意：这时<code>demo</code>拾取了任务之后其他的用户就不能再拾取了，查询的时候也查询不到了。</p>\n<h3 id=\"任务的归还\"><a href=\"#任务的归还\" class=\"headerlink\" title=\"任务的归还\"></a>任务的归还</h3><p>拾取任务后如果不想操作那么可以归还任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 退还任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\"> *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unclaimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 归还相关的任务  置空即可</span></span><br><span class=\"line\">        taskService.setAssignee(task.getId(),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归还拾取成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务的交接\"><a href=\"#任务的交接\" class=\"headerlink\" title=\"任务的交接\"></a>任务的交接</h3><p>拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务交接</span></span><br><span class=\"line\">        taskService.setAssignee(task.getId(),<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务交接给了zhang&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务完成\"><a href=\"#任务完成\" class=\"headerlink\" title=\"任务完成\"></a>任务完成</h3><p>正常的任务处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;023f0279-362f-11ed-8d8a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 但是下一个节点的 处理人是值表达式 我们需要赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user3&quot;</span>,<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">    taskService.complete(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们通过值表达式来处理的候选人操作。在<code>act_ru_identitylink</code>表中同样有相关记录，我们需要结合流程变量表来处理了。但是处理的API和上面是一样的。</p>\n<h2 id=\"候选人组\"><a href=\"#候选人组\" class=\"headerlink\" title=\"候选人组\"></a>候选人组</h2><p>当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。</p>\n<h3 id=\"管理用户和组\"><a href=\"#管理用户和组\" class=\"headerlink\" title=\"管理用户和组\"></a>管理用户和组</h3><h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>我们需要先单独维护用户信息。后台对应的表结构是<code>ACT_ID_USER</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护用户</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.newUser(<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">    user.setFirstName(<span class=\"string\">&quot;张&quot;</span>);</span><br><span class=\"line\">    user.setLastName(<span class=\"string\">&quot;三&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    identityService.saveUser(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要更新或者删除用户的话。通过相关API即可完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.createUserQuery().userId(<span class=\"string\">&quot;zhang&quot;</span>).singleResult();</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">    identityService.saveUser(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    identityService.deleteUser(<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Group管理\"><a href=\"#Group管理\" class=\"headerlink\" title=\"Group管理\"></a>Group管理</h4><p>维护对应的Group信息，后台对应的表结构是<code>ACT_ID_GROUP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建用户组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对象并指定相关的信息</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.newGroup(<span class=\"string\">&quot;group1&quot;</span>);</span><br><span class=\"line\">    group.setName(<span class=\"string\">&quot;开发部&quot;</span>);</span><br><span class=\"line\">    group.setType(<span class=\"string\">&quot;type1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对应的表结构数据</span></span><br><span class=\"line\">    identityService.saveGroup(group);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新和删除参考上面的<code>用户管理</code></p>\n<h4 id=\"用户分配组\"><a href=\"#用户分配组\" class=\"headerlink\" title=\"用户分配组\"></a>用户分配组</h4><p>用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是<code>ACT_ID_MEMBERSHIP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将用户分配给对应的Group</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">userGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据组的编号找到对应的Group对象</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">    <span class=\"comment\">// 创建 MemberShip 建立用户和组的关系</span></span><br><span class=\"line\">    identityService.createMembership(<span class=\"string\">&quot;zhang&quot;</span>,group.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"候选人组应用\"><a href=\"#候选人组应用\" class=\"headerlink\" title=\"候选人组应用\"></a>候选人组应用</h3><p>搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了</p>\n<h4 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h4><p>创建一个简单的请假流程，处理人通过候选人组的方式来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201151251.png\"\n                      alt=\"image-20220917201151251\"\n                ></p>\n<h4 id=\"流程的部署运行\"><a href=\"#流程的部署运行\" class=\"headerlink\" title=\"流程的部署运行\"></a>流程的部署运行</h4><p>然后我们把流程部署和运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">               .name(<span class=\"string\">&quot;候选人组案例&quot;</span>)</span><br><span class=\"line\">               .addClasspathResource(<span class=\"string\">&quot;flow/候选人组.bpmn&quot;</span>)</span><br><span class=\"line\">               .deploy();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1gvo8so:1:3e253edb-3682-11ed-a1ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">       runtimeService.startProcessInstanceById(processInstanceId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署成功后我们可以在<code>act_ru_identitylink</code>中看到对应的记录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201747129.png\"\n                      alt=\"image-20220917201747129\"\n                ></p>\n<h4 id=\"任务的拾取和完成\"><a href=\"#任务的拾取和完成\" class=\"headerlink\" title=\"任务的拾取和完成\"></a>任务的拾取和完成</h4><p>然后完成任务的查询拾取和处理操作。逻辑是根据当前的登录<code>用户</code>找到对应的<code>组</code>，然后根据<code>组</code>找到对应的任务信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidateGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">     <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;zhang&quot;</span>).singleResult();</span><br><span class=\"line\">     List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">             .processInstanceId(<span class=\"string\">&quot;711d5726-3682-11ed-8b9b-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">             .taskCandidateGroup(group.getId())</span><br><span class=\"line\">             .list();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">  *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">  *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhang&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">     <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(userId).singleResult();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             .processInstanceId(<span class=\"string\">&quot;711d5726-3682-11ed-8b9b-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">             .taskCandidateGroup(group.getId())</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 任务拾取</span></span><br><span class=\"line\">         taskService.claim(task.getId(),userId);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>拾取后的操作和前面是一样的，就没必要赘述。当然我们在定义流程的时候也可以通过值表达式来处理，我们需要注意赋值即可。</p>\n<h2 id=\"租户\"><a href=\"#租户\" class=\"headerlink\" title=\"租户\"></a>租户</h2><p><em>多租户</em> 是指一个单一的Camunda应用需要为多个的租户服务的情况。对于每个租户来说，应该有某些隔离的保证。例如，一个租户的流程实例不应干扰另一个租户的流程实例。</p>\n<p>多租户可以通过两种不同的方式实现。一种是使用每个租户一个流程引擎。另一种方式是只使用一个流程引擎，并将数据与租户标识符相关联。这两种方式在数据隔离程度、维护工作和可扩展性方面各有不同。两种方式的组合也是可能的。</p>\n<p>多租户可以使用租户标识符（即tenant-ids）的流程引擎来实现。所有租户的数据都存储在一个表中（同一数据库和表结构）。通过存储在列中的租户标识符来提供隔离。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917203832905.png\"\n                      alt=\"image-20220917203832905\"\n                ></p>\n<h3 id=\"租户管理\"><a href=\"#租户管理\" class=\"headerlink\" title=\"租户管理\"></a>租户管理</h3><p>租户对应于<code>act_id.tenant</code>表结构中的数据。我们可以先来维护租户的相关信息。创建<code>长沙分公司</code>的租户信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建租户</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTenant</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Tenant</span> <span class=\"variable\">tenant</span> <span class=\"operator\">=</span> identityService.newTenant(<span class=\"string\">&quot;cs&quot;</span>);</span><br><span class=\"line\">    tenant.setName(<span class=\"string\">&quot;长沙分公司&quot;</span>);</span><br><span class=\"line\">    identityService.saveTenant(tenant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220534584.png\"\n                      alt=\"image-20220918220534584\"\n                ></p>\n<p>当然参考前面的删除和更新操作也可以非常轻松的完成<code>租户</code>相关信息的处理。然后我们来看下租户和用户和组的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 建立 租户 和 组的关系</span></span><br><span class=\"line\"><span class=\"comment\"> * 当然也可以建立 租户和用户的关系。只是这种比较少用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTenantAndGroupShip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    identityService.createTenantGroupMembership(<span class=\"string\">&quot;cs&quot;</span>,<span class=\"string\">&quot;group1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220924950.png\"\n                      alt=\"image-20220918220924950\"\n                ></p>\n<h3 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h3><p>我们在部署流程的时候可以指定对应的租户编号。如果不指定租户编号，说明该流程是属于所有租户的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;候选人案例-租户&quot;</span>)</span><br><span class=\"line\">            .tenantId(<span class=\"string\">&quot;tenant1&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/候选人案例.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"查看部署流程\"><a href=\"#查看部署流程\" class=\"headerlink\" title=\"查看部署流程\"></a>查看部署流程</h3><p>设置了租户编号后，我们要做相关的查询，可以通过如下的API来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基于租户 查询相关的部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getByTenantId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">            .tenantIdIn(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Deployment deployment : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过调用<code>withoutTenantId()</code>来查询不属于任何租户的部署。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getByWithoutTenantId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">                .withoutTenantId() <span class=\"comment\">// 查询出所有不属于任何tenantId的记录</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Deployment deployment : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以通过调用<code>includeDeploymentsWithoutTenantId()</code>来查询属于特定租户或不属于租户的部署。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void getByIncludTenantId()&#123;</span><br><span class=\"line\">    List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">            .tenantIdIn(&quot;cs&quot;)</span><br><span class=\"line\">            .includeDeploymentsWithoutTenantId() // 查询出 tenant1 和 不属于 租户的记录</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    for (Deployment deployment : list) &#123;</span><br><span class=\"line\">        System.out.println(&quot;deployment.getId() = &quot; + deployment.getId());</span><br><span class=\"line\">        System.out.println(&quot;deployment.getName() = &quot; + deployment.getName());</span><br><span class=\"line\">        System.out.println(&quot;------------&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与 “部署查询” 类似，定义查询允许通过一个或多个租户和不属于任何租户的定义进行过滤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;ProcessDefinition&gt; processDefinitions = repositoryService</span><br><span class=\"line\">  .createProcessDefinitionQuery()</span><br><span class=\"line\">  .tenantIdIn(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">  .includeProcessDefinitionsWithoutTenantId();</span><br><span class=\"line\">  .list();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程实例\"><a href=\"#启动流程实例\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h3><p>通过key创建一个为多租户部署的流程定义的实例，必须在<code>ProcessInstantiationBuilder</code> 中传递租户标识符 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 租户 启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .createProcessInstanceByKey(processKey)</span><br><span class=\"line\">            .processDefinitionTenantId(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic:1:a6b23794-3767-11ed-a4df-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .createProcessInstanceById(processId)</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后流程后，在创建的Task记录中我们可以看到对应的<code>租户</code>信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234504559.png\"\n                      alt=\"image-20220918234504559\"\n                ></p>\n<p>因为我们在流程设计的时候就指定了第一个节点的候选人是<code>group1</code>,所以在<code>act_ru_identitylink</code>表中可以看到相关的记录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234618891.png\"\n                      alt=\"image-20220918234618891\"\n                ></p>\n<h3 id=\"任务拾取\"><a href=\"#任务拾取\" class=\"headerlink\" title=\"任务拾取\"></a>任务拾取</h3><p>接下来就可以对任务做<code>拾取</code>的操作了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据当前登录用户 查询到需要拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 根据登录用户查询到对应的Group</span></span><br><span class=\"line\">     List&lt;Group&gt; groups = identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;demo&quot;</span>).list();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(groups != <span class=\"literal\">null</span> &amp;&amp; groups.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (Group group : groups) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 根据 group 找到对应的 租户</span></span><br><span class=\"line\">             List&lt;Tenant&gt; tenants = identityService.createTenantQuery().groupMember(group.getId()).list();</span><br><span class=\"line\">             List&lt;String&gt; tenantStrings = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(tenants != <span class=\"literal\">null</span> &amp;&amp; tenants.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                 tenantStrings = tenants.stream().map((item)-&gt;&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> item.getId();</span><br><span class=\"line\">                 &#125;).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">                 String[] ss = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[tenantStrings.size()];</span><br><span class=\"line\">                 tenantStrings.toArray(ss);</span><br><span class=\"line\">                 List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                         .tenantIdIn(ss)</span><br><span class=\"line\">                         .list();</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">                         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以查询到对应的拾取就比较简单了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据登录用户查询到对应的Group</span></span><br><span class=\"line\">    List&lt;Group&gt; groups = identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;demo&quot;</span>).list();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(groups != <span class=\"literal\">null</span> &amp;&amp; groups.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Group group : groups) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据 group 找到对应的 租户</span></span><br><span class=\"line\">            List&lt;Tenant&gt; tenants = identityService.createTenantQuery().groupMember(group.getId()).list();</span><br><span class=\"line\">            List&lt;String&gt; tenantStrings = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tenants != <span class=\"literal\">null</span> &amp;&amp; tenants.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                tenantStrings = tenants.stream().map((item)-&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item.getId();</span><br><span class=\"line\">                &#125;).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">                String[] ss = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[tenantStrings.size()];</span><br><span class=\"line\">                tenantStrings.toArray(ss);</span><br><span class=\"line\">                List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                        .tenantIdIn(ss)</span><br><span class=\"line\">                        .list();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">                        taskService.claim(task.getId(),<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220919003450202.png\"\n                      alt=\"image-20220919003450202\"\n                ></p>\n<p>能够拾取成功，那么后面的操作就是任务的审批。接下来的操作就和前面是一样的了。不再赘述~</p>\n<h1 id=\"网关篇\"><a href=\"#网关篇\" class=\"headerlink\" title=\"网关篇\"></a>网关篇</h1><p>网关用来控制流程的流向</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p><code>排他网关</code>（exclusive gateway）（也叫<em>异或网关 XOR gateway</em>，或者更专业的，<em>基于数据的排他网关 exclusive data-based gateway</em>），用于对流程中的<strong>决策</strong>建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为<em>true</em>）继续流程。</p>\n<p>绘制流程图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922002931276.png\"\n                      alt=\"image-20220922002931276\"\n                ></p>\n<p>对应的XML文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003022802.png\"\n                      alt=\"image-20220922003022802\"\n                ></p>\n<p>流程演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;排他网关&quot;</span>)</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;flow/排他网关.bpmn&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过流程定义Id 启动</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0eykic0:1:efadfc92-39c9-11ed-8f13-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">     <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processId);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     map.put(<span class=\"string\">&quot;day&quot;</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">     taskService.complete(<span class=\"string\">&quot;21a323ee-39ca-11ed-8b49-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>传递的是<code>day=4</code>会走中间的路线。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003119262.png\"\n                      alt=\"image-20220922003119262\"\n                ></p>\n<h2 id=\"并行网关\"><a href=\"#并行网关\" class=\"headerlink\" title=\"并行网关\"></a>并行网关</h2><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。</p>\n</li>\n<li><p>join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。</p>\n</li>\n</ul>\n<p>注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。</p>\n<p><strong>与其他网关的主要区别是，并行网关不会解析条件。</strong> <strong>即使顺序流中定义了条件，也会被忽略。</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003323785.png\"\n                      alt=\"image-20220922003323785\"\n                ></p>\n<h2 id=\"包含网关\"><a href=\"#包含网关\" class=\"headerlink\" title=\"包含网关\"></a>包含网关</h2><p>包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。</p>\n<p>包含网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。</p>\n</li>\n<li><p>汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005111023.png\"\n                      alt=\"image-20220922005111023\"\n                ></p>\n<p>当输入<code>day=4</code>时，走了第二和第三条路线</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005536912.png\"\n                      alt=\"image-20220922005536912\"\n                ></p>\n<h1 id=\"事件篇\"><a href=\"#事件篇\" class=\"headerlink\" title=\"事件篇\"></a>事件篇</h1><p><code>事件</code>（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：<em>捕获（catching）</em>与<em>抛出（throwing）</em>事件。</p>\n<ul>\n<li><strong>捕获:</strong> 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。</li>\n<li><strong>抛出:</strong> 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。</li>\n</ul>\n<h2 id=\"定时器事件\"><a href=\"#定时器事件\" class=\"headerlink\" title=\"定时器事件\"></a>定时器事件</h2><p>定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件</p>\n<h3 id=\"定时器启动事件\"><a href=\"#定时器启动事件\" class=\"headerlink\" title=\"定时器启动事件\"></a>定时器启动事件</h3><p>定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。</p>\n<p><em><strong>请注意</strong>：</em>子流程不能有定时器启动事件。</p>\n<p><em><strong>请注意</strong>：</em>定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。</p>\n<p><em><strong>请注意</strong>：</em>当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。</p>\n<p>定时器启动事件，用其中有一个钟表图标的圆圈来表示。我们通过具体案例来介绍</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104055183.png\"\n                      alt=\"image-20220926104055183\"\n                ></p>\n<p>部署流程后等待到具体的时间，我们查看任务即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104152240.png\"\n                      alt=\"image-20220926104152240\"\n                ></p>\n<p>时间定义这块使用的是  <a class=\"link\"   href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\" >https://en.wikipedia.org/wiki/ISO_8601#Dates<i class=\"fas fa-external-link-alt\"></i></a>  ISO 8601 格式</p>\n<p>上面我们是通过指定固定时间来启动的，我们也可以通过<code>duraction</code>间隔时间来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926105514506.png\"\n                      alt=\"image-20220926105514506\"\n                ></p>\n<p>通过间隔的方式来启动。</p>\n<p>timeCycle：指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式</p>\n<ul>\n<li>第一种是按照<a class=\"link\"   href=\"http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\" >ISO 8601<i class=\"fas fa-external-link-alt\"></i></a>标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3&#x2F;PT10H</li>\n<li>也可以使用<em>timeCycle</em>的可选属性<em>endDate</em>，或者像这样直接写在时间表达式的结尾：<code>R3/PT10H/$&#123;EndDate&#125;</code>。 当到达endDate时，应用会停止，并为该任务创建其他作业</li>\n<li>也可以通过cron表达式来处理</li>\n</ul>\n<p>案例：重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyJavaDelegate:执行了。。。&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110231335.png\"\n                      alt=\"image-20220926110231335\"\n                ></p>\n<p>在控制台可以看到对应的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110317226.png\"\n                      alt=\"image-20220926110317226\"\n                ></p>\n<p>也可以指定结束时间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">timeCycle</span>&gt;</span>R3/PT30S/2022-03-28T21:46:11+00:00<span class=\"tag\">&lt;/<span class=\"name\">timeCycle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>此外还可以通过cron表达式来处理：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0/5 * * * ?</span><br></pre></td></tr></table></figure>\n\n<p>每隔5秒启动</p>\n<h3 id=\"定时器中间事件\"><a href=\"#定时器中间事件\" class=\"headerlink\" title=\"定时器中间事件\"></a>定时器中间事件</h3><p>在我们具体的流程处理中，A节点处理完成后，定时触发B节点的处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927002456358.png\"\n                      alt=\"image-20220927002456358\"\n                ></p>\n<h3 id=\"定时器边界事件\"><a href=\"#定时器边界事件\" class=\"headerlink\" title=\"定时器边界事件\"></a>定时器边界事件</h3><p>人工任务1如果在定义的<code>2022-09-27T23:36:14</code>这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927003701033.png\"\n                      alt=\"image-20220927003701033\"\n                ></p>\n<h2 id=\"消息事件\"><a href=\"#消息事件\" class=\"headerlink\" title=\"消息事件\"></a>消息事件</h2><h3 id=\"启动事件\"><a href=\"#启动事件\" class=\"headerlink\" title=\"启动事件\"></a>启动事件</h3><p>消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927004852502.png\"\n                      alt=\"image-20220927004852502\"\n                ></p>\n<p>启动流程实例可以通过普通的方式来触发，当然也可以通过对应的API来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消息启动事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startMessageFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.startProcessInstanceByMessage(<span class=\"string\">&quot;firstMessage&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"中间事件\"><a href=\"#中间事件\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h3><p>消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，<code>自动流程1</code>处理完成后，需要接收特定的消息之后才能进入到<code>自动流程2</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927005944099.png\"\n                      alt=\"image-20220927005944099\"\n                ></p>\n<p>正常的流程部署，启动和审批后，我们需要发送对应的消息来触发这个中间事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;secondMessage&quot;</span>,<span class=\"string\">&quot;da2028e9-3dbc-11ed-adb0-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"边界事件\"><a href=\"#边界事件\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>消息边界事件，如果在消息触发前还没有，案例演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927010931908.png\"\n                      alt=\"image-20220927010931908\"\n                ></p>\n<p>然后正常的部署，启动流程，如果在发布对应的消息之前还没有审批<code>用户任务1</code>,那当我们发送对应的消息后就会触发对应的消息边界事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;thirdMessage&quot;</span>,<span class=\"string\">&quot;0d2a30e2-3dbf-11ed-9e28-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"错误事件\"><a href=\"#错误事件\" class=\"headerlink\" title=\"错误事件\"></a>错误事件</h2><h3 id=\"开始事件\"><a href=\"#开始事件\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。<strong>错误启动事件不能用于启动流程实例</strong>。</p>\n<p>错误启动事件总是中断。我们通过案例来介绍。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113303497.png\"\n                      alt=\"image-20220927113303497\"\n                ></p>\n<p>绘制事件子流程要注意：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113345613.png\"\n                      alt=\"image-20220927113345613\"\n                ></p>\n<p>选择错误启动事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113423993.png\"\n                      alt=\"image-20220927113423993\"\n                ></p>\n<p>然后配置流程节点信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113506045.png\"\n                      alt=\"image-20220927113506045\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113528120.png\"\n                      alt=\"image-20220927113528120\"\n                ></p>\n<p>然后在JavaDelegate中抛出对应的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;FirstJavaDelegate:执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 抛出的信息必须对应于error的Code信息</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;errorCode01&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后正常部署，启动流程。然后我们就可以看到对应的流转了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113652951.png\"\n                      alt=\"image-20220927113652951\"\n                ></p>\n<h3 id=\"边界事件-1\"><a href=\"#边界事件-1\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>当子流程执行中对外抛出了相关的异常，那么我们设置的错误边界事件就能对应的捕获到相关的事件，然后做对应的处理，相关案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114818638.png\"\n                      alt=\"image-20220927114818638\"\n                ></p>\n<p>绘制错误边界流程图的时候需要先绘制中间事件的图标，然后拖拽到子流程的边界，然后修改对应的类型即可，错误边界事件绑定抛出对应的errorCode</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114939647.png\"\n                      alt=\"image-20220927114939647\"\n                ></p>\n<p>然后对应的抛出的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SecondJavaDelegate:执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 抛出的信息必须对应于error的Code信息</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;errorCode02&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后部署启动流程即可看到对应的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927115037027.png\"\n                      alt=\"image-20220927115037027\"\n                ></p>\n<h2 id=\"信号事件\"><a href=\"#信号事件\" class=\"headerlink\" title=\"信号事件\"></a>信号事件</h2><h3 id=\"开始事件-1\"><a href=\"#开始事件-1\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>通过信号来启动流程实例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232328300.png\"\n                      alt=\"image-20220928232328300\"\n                ></p>\n<p>部署流程和发送信号来启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;事件-信号开始事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/23-事件-信号事件-开始事件.bpmn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号来触发启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;signal01&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232951167.png\"\n                      alt=\"image-20220928232951167\"\n                ></p>\n<h3 id=\"中间捕获事件\"><a href=\"#中间捕获事件\" class=\"headerlink\" title=\"中间捕获事件\"></a>中间捕获事件</h3><p>案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233200534.png\"\n                      alt=\"image-20220928233200534\"\n                ></p>\n<p>在这个案例中我们需要部署流程，启动流程，然后<code>用户任务1</code>审批后，我们发布相关的信号，然后会进入到<code>用户任务2</code>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;事件-信号中间捕获事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;flow/24-事件-信号事件-中间捕获事件.bpmn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_002gvxw:1:cfcc56ac-3f42-11ed-a689-c03c59ad2248&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     runtimeService.signalEventReceived(<span class=\"string\">&quot;signal02&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233556274.png\"\n                      alt=\"image-20220928233556274\"\n                ></p>\n<h3 id=\"中间抛出事件\"><a href=\"#中间抛出事件\" class=\"headerlink\" title=\"中间抛出事件\"></a>中间抛出事件</h3><p>信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928234118517.png\"\n                      alt=\"image-20220928234118517\"\n                ></p>\n<p>正常的部署流程，然后做流程的审批，注意<code>用户任务4</code>需要先审批，然后处于信号捕获的状态，然后我们<code>用户任务2</code>的审批，抛出信号事件，那么对应的捕获事件才能触发，这儿有先后顺序。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235157519.png\"\n                      alt=\"image-20220928235157519\"\n                ></p>\n<h3 id=\"边界事件-2\"><a href=\"#边界事件-2\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>最后来看看信号边界事件，案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235443496.png\"\n                      alt=\"image-20220928235443496\"\n                ></p>\n<p>部署启动流程，如果<code>用户任务1</code>审批了，就会进入到<code>用户任务2</code>审批，如果<code>用户任务1</code>还没审批，然后发送的相关的信号，会被信号边界事件捕获，从而进入到<code>用户任务3</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;signal04&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235841363.png\"\n                      alt=\"image-20220928235841363\"\n                ></p>\n<h2 id=\"结束事件\"><a href=\"#结束事件\" class=\"headerlink\" title=\"结束事件\"></a>结束事件</h2><h3 id=\"错误结束事件\"><a href=\"#错误结束事件\" class=\"headerlink\" title=\"错误结束事件\"></a>错误结束事件</h3><p>当流程执行到达<strong>错误结束事件（error end event）</strong>时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002020963.png\"\n                      alt=\"image-20220929002020963\"\n                ></p>\n<p>部署流程，然后启动流程，<code>用户任务1</code>审批</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002528362.png\"\n                      alt=\"image-20220929002528362\"\n                ></p>\n<p>设置流程变量<code>flag==1</code>然后会走<code>错误结束事件</code>。会触发对应的边界事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002622297.png\"\n                      alt=\"image-20220929002622297\"\n                ></p>\n<h3 id=\"中断结束事件\"><a href=\"#中断结束事件\" class=\"headerlink\" title=\"中断结束事件\"></a>中断结束事件</h3><p>中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：</p>\n<h4 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h4><p>介绍没有子流程的情况下终止流程的场景：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929003541120.png\"\n                      alt=\"image-20220929003541120\"\n                ></p>\n<h4 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h4><p>案例二我们来看看有子流程的场景下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929004654376.png\"\n                      alt=\"image-20220929004654376\"\n                ></p>\n<h3 id=\"取消结束事件\"><a href=\"#取消结束事件\" class=\"headerlink\" title=\"取消结束事件\"></a>取消结束事件</h3><p>取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。</p>\n<p>具体通过案例来讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010451477.png\"\n                      alt=\"image-20220929010451477\"\n                ></p>\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010913632.png\"\n                      alt=\"image-20220929010913632\"\n                ></p>\n<h3 id=\"补偿事件\"><a href=\"#补偿事件\" class=\"headerlink\" title=\"补偿事件\"></a>补偿事件</h3><p>通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012202047.png\"\n                      alt=\"image-20220929012202047\"\n                ></p>\n<p>案例效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012149315.png\"\n                      alt=\"image-20220929012149315\"\n                ></p>\n<h1 id=\"多人会签\"><a href=\"#多人会签\" class=\"headerlink\" title=\"多人会签\"></a>多人会签</h1><p>Multiple Instance</p>\n<h2 id=\"会签说明\"><a href=\"#会签说明\" class=\"headerlink\" title=\"会签说明\"></a>会签说明</h2><p>多实例活动是为业务流程中的某个步骤定义重复的一种方式。在编程概念中，多实例与 <code>for each</code> 结构相匹配：它允许对给定集合中的每个项目按顺序或并行地执行某个步骤或甚至一个完整的子流程。</p>\n<p>多实例是一个有额外属性（所谓的 “多实例特性”）的常规活动，它将导致该活动在运行时被多次执行。以下活动可以成为多实例活动。</p>\n<ul>\n<li>Service Task 服务任务</li>\n<li>Send Task 发送任务</li>\n<li>User Task 用户任务</li>\n<li>Business Rule Task 业务规则任务</li>\n<li>Script Task 脚本任务</li>\n<li>Receive Task 接收任务</li>\n<li>Manual Task 手动任务</li>\n<li>(Embedded) Sub-Process （嵌入）子流程</li>\n<li>Call Activity 发起活动</li>\n<li>Transaction Subprocess 事务子流程</li>\n</ul>\n<p>网关或事件不能成为多实例。</p>\n<p>如果一个活动是多实例的，这将由活动底部的三条短线表示。三条垂直线表示实例将以<strong>并行</strong>方式执行，而三条水平线表示<strong>顺序</strong>执行。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221001234837327.png\"\n                      alt=\"image-20221001234837327\"\n                ></p>\n<p>按照规范的要求，每个实例所创建的执行的每个父执行将有以下变量：</p>\n<ul>\n<li><strong>nrOfInstances</strong>: 实例的总数量</li>\n<li><strong>nrOfActiveInstances</strong>: 当前活动的，即尚未完成的实例的数量。对于一个连续的多实例，这将永远是1。</li>\n<li><strong>nrOfCompletedInstances</strong>: 已经完成的实例的数量。</li>\n</ul>\n<p>这些值可以通过调用 “execution.getVariable(x) “方法检索。</p>\n<p>此外，每个创建的执行将有一个执行本地变量（即对其他执行不可见，也不存储在流程实例级别）。</p>\n<ul>\n<li><strong>loopCounter</strong>: 表示该特定实例的<code>for each</code>循环中的索引</li>\n</ul>\n<p>为了使一个活动成为多实例，活动xml元素必须有一个<code>multiInstanceLoopCharacteristics</code>子元素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">multiInstanceLoopCharacteristics</span> <span class=\"attr\">isSequential</span>=<span class=\"string\">&quot;false|true&quot;</span>&gt;</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">multiInstanceLoopCharacteristics</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isSequential</code>属性表示该活动的实例是按顺序执行还是并行执行。</p>\n<h2 id=\"并行会签\"><a href=\"#并行会签\" class=\"headerlink\" title=\"并行会签\"></a>并行会签</h2><h3 id=\"绘制流程图-1\"><a href=\"#绘制流程图-1\" class=\"headerlink\" title=\"绘制流程图\"></a>绘制流程图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000056981.png\"\n                      alt=\"image-20221002000056981\"\n                ></p>\n<blockquote>\n<p>loop cardinality：循环基数。可选项。可以直接填整数，表示会签的人数。<br>Collection：集合。可选项。会签人数的集合，通常为list，和loop cardinality二选一。<br>Element variable：元素变量。选择Collection时必选，为collection集合每次遍历的元素。<br>Completion condition：完成条件。可选。比如设置一个人完成后会签结束，那么其他人的代办任务都会消失。</p>\n</blockquote>\n<p>在用户任务节点绑定了一个监听器，监听<code>create</code>行为，该监听器我们是通过UEL表达式来实现的，<code>mulitiInstanceTaskListener</code>是我们注入到Spring容器中的对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000233782.png\"\n                      alt=\"image-20221002000233782\"\n                ></p>\n<p>监听器的内容为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceTaskListener&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeListener</span><span class=\"params\">(DelegateExecution execution)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务：&quot;</span>+execution.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;persons:&quot;</span> + execution.getVariable(<span class=\"string\">&quot;persons&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person&quot;</span> + execution.getVariable(<span class=\"string\">&quot;person&quot;</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后对应的<code>Completion condition</code>我们可以在Java代码中处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceCompleteTask&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceCompleteTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务是需要触发的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> execution</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     *     false 表示会签任务还没有结束</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">     *     true 表示会签任务结束了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">completeTask</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot;当前获取的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfActiveInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot; - &quot;</span> + <span class=\"string\">&quot;已经完成的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfCompletedInstances&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//有一个人同意就通过</span></span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (Boolean) execution.getVariable(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前意见：&quot;</span>+flag);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的三个变量是Flowable中自带的可用变量</p>\n<ol>\n<li><p>nrOfInstances:该会签环节中总共有多少个实例</p>\n</li>\n<li><p>nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。</p>\n</li>\n<li><p>nrOfCompletedInstances:已经完成的实例的数量</p>\n</li>\n</ol>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>普通的部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;多实例&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/diagram_1.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(“张三”,”李四”,”王五”,”赵六”)，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动后我们就可以在数据库中看到产生了3个Task</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000640899.png\"\n                      alt=\"image-20221002000640899\"\n                ></p>\n<h3 id=\"处理任务\"><a href=\"#处理任务\" class=\"headerlink\" title=\"处理任务\"></a>处理任务</h3><p>启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;71337501-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000853424.png\"\n                      alt=\"image-20221002000853424\"\n                ></p>\n<p>同时Task表中的记录还有两条</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000931060.png\"\n                      alt=\"image-20221002000931060\"\n                ></p>\n<p>然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">true</span>); <span class=\"comment\">// 设置为true 结束多人会签</span></span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;713570d4-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时任务节点就结束了~</p>\n<h2 id=\"串行会签\"><a href=\"#串行会签\" class=\"headerlink\" title=\"串行会签\"></a>串行会签</h2><p>串行会签指的是在多实例中，处理人按照对应的顺序来一个个的处理任务。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002001501320.png\"\n                      alt=\"image-20221002001501320\"\n                ></p>\n<p>上面定义的是一个<code>串行会签</code>的流程图。循环3次，集合数据在<code>persons</code>中，每次循环的数据存储在循环变量<code>person</code>中，同时<code>person</code>也是对应的处理人的流程变量。</p>\n<h3 id=\"部署和启动流程-1\"><a href=\"#部署和启动流程-1\" class=\"headerlink\" title=\"部署和启动流程\"></a>部署和启动流程</h3><p>部署就是正常的部署了，不再赘述，启动流程的时候我们需要对集合做赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据 串行会按照集合的循序来处理</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0ltwc4j:1:bd87ed49-41a3-11ed-9ec4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后会创建一个Task，处理人是<code>张三</code>。然后处理完成后会创建下一个task，处理人是<code>李四</code>按循序来处理了。</p>\n<h1 id=\"任务回退\"><a href=\"#任务回退\" class=\"headerlink\" title=\"任务回退\"></a>任务回退</h1><p>任务回退驳回撤销相关的操作在实际的开发中还是会经常遇到的，我们来看看Camunda中针对这些情况是如何处理的。</p>\n<h2 id=\"串行的回退\"><a href=\"#串行的回退\" class=\"headerlink\" title=\"串行的回退\"></a>串行的回退</h2><p>我们先从最简单的串行流程来分析，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155134800.png\"\n                      alt=\"image-20221005155134800\"\n                ></p>\n<p>上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是<code>user1</code>,<code>user2</code>,<code>user3</code>,<code>user4</code>.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;回退&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/串行回退.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过流程定义Id 启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1up6ocm:1:d924ab29-43f9-11ed-b4f1-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processId);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;45bf40bf-43fa-11ed-8abe-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221004233745178.png\"\n                      alt=\"image-20221004233745178\"\n                ></p>\n<p>然后我们来完成回退到<code>user3</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务回退</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cb7b11bf-4486-11ed-bbb6-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_17ubvwq&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                   <span class=\"comment\">// .cancelActivityInstance(processInstanceId) // 整个任务会取消</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0jyi1pp&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">    <span class=\"comment\">/*String processDefinitionId = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    runtimeService.createModification(&quot;&quot;);*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155543672.png\"\n                      alt=\"image-20221005155543672\"\n                ></p>\n<p>然后在历史表中可以看到对应的走向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155709087.png\"\n                      alt=\"image-20221005155709087\"\n                ></p>\n<p>具体过程为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155909565.png\"\n                      alt=\"image-20221005155909565\"\n                ></p>\n<p>然后我们可以从<code>user3</code>回退到<code>user1</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160133670.png\"\n                      alt=\"image-20221005160133670\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160200316.png\"\n                      alt=\"image-20221005160200316\"\n                ></p>\n<p>要取消当前的任务直接调用<code>cancelActivityInstance(processInstanceId)</code>方法即可。</p>\n<p>相关方法说明：</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>在活动前启动</td>\n<td>回退到这个节点</td>\n</tr>\n<tr>\n<td></td>\n<td>startBeforeActivity(String activityId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startBeforeActivity(String activityId, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>在活动后启动</td>\n<td>通过 <code>startAfterActivity</code> 在一个活动之后运行，意味着将从活动的下一节点开始执行</td>\n</tr>\n<tr>\n<td></td>\n<td>startAfterActivity(String activityId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startAfterActivity(String activityId, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>启动一个过渡</td>\n<td>通过 <code>startTransition</code> 启动一个过渡，就意味着在一个给定的序列流上开始执行。当有多个流出的序列流时，这可以与 <code>startAfterActivity</code> 一起使用。如果成功，该指令从序列流开始执行流程模型，直到达到等待状态。</td>\n</tr>\n<tr>\n<td></td>\n<td>startTransition(String transitionId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startTransition(String transition, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个活动实例</td>\n<td>通过<code>cancelActivityInstance</code>取消一个特定的活动实例。既可以是一个活动实例，如用户任务的实例，也可以是层次结构中更高范围的实例，如子流程的实例</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelActivityInstance(String activityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个过渡实例</td>\n<td>过渡实例表示即将以异步延续的形式进入&#x2F;离开一个活动的执行流。一个已经创建但尚未执行的异步延续Job被表示为一个过渡实例。这些实例可以通过<code>cancelTransitionInstance</code>来取消</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelTransitionInstance(String activityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个活动的所有活动实例</td>\n<td>通过指令 <code>cancelAllForActivity</code> 来取消一个特定活动的所有活动和过渡实例。</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelAllForActivity(String activityId)</td>\n</tr>\n</tbody></table>\n<h2 id=\"并行的回退\"><a href=\"#并行的回退\" class=\"headerlink\" title=\"并行的回退\"></a>并行的回退</h2><p>接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193633031.png\"\n                      alt=\"image-20221005193633031\"\n                ></p>\n<p>部署后，启动流程实例。运行到如下的节点，然后回退到<code>用户审批1</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193931957.png\"\n                      alt=\"image-20221005193931957\"\n                ></p>\n<p>然后我们来做回退操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a1d40268-44a2-11ed-9b63-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_0n0ddnj&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                   <span class=\"comment\">// .cancelActivityInstance(processInstanceId) // 整个任务会取消</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_184rpuo&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_08w6j91&quot;</span>)</span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">    <span class=\"comment\">/*String processDefinitionId = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    runtimeService.createModification(&quot;&quot;);*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面我们根据流程<code>实例回退</code>同时需要取消掉之前的两个节点。在历史表中也可以看到这个流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194635852.png\"\n                      alt=\"image-20221005194635852\"\n                ></p>\n<p>在上面例子的基础上我们来实现如下的流程回退操作。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194807783.png\"\n                      alt=\"image-20221005194807783\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194904013.png\"\n                      alt=\"image-20221005194904013\"\n                ></p>\n<p>具体的回退代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a1d40268-44a2-11ed-9b63-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_184rpuo&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_08w6j91&quot;</span>)</span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0ma3n4p&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后查看历史任务同样可以看到具体的实现</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005195142559.png\"\n                      alt=\"image-20221005195142559\"\n                ></p>\n<h2 id=\"排他网关回退\"><a href=\"#排他网关回退\" class=\"headerlink\" title=\"排他网关回退\"></a>排他网关回退</h2><p>然后我们来看看在有排他网关的情况下，如果我们要调整流程的走向应该要怎么来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200528761.png\"\n                      alt=\"image-20221005200528761\"\n                ></p>\n<p>也就是实际的场景中可能先走到了<code>用户2</code>审批，后面发现不合理，就需要回退到<code>用户1</code>后面然后再调整流程变量，流转到<code>用户3</code>处。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200901486.png\"\n                      alt=\"image-20221005200901486\"\n                ></p>\n<p>然后我们来看看具体的回退操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;6a70a33b-44a6-11ed-8557-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Gateway_0ah4coh&quot;</span>) <span class=\"comment\">// 回退到排他网关之前</span></span><br><span class=\"line\">                    .setVariable(<span class=\"string\">&quot;num&quot;</span>,-<span class=\"number\">1</span>) <span class=\"comment\">// 设置流程变量</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0x9stxl&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>回退到<code>排他网关</code>节点，然后设置流程变量<code>num=-1</code>然后会走<code>用户3</code>的审批。同时取消原来节点的审批</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005201429581.png\"\n                      alt=\"image-20221005201429581\"\n                ></p>\n<p>然后我们来看看有子流程的场景下的回退处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005204950474.png\"\n                      alt=\"image-20221005204950474\"\n                ></p>\n<p>我们来看看从子流程回退到主流程的操作。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205324729.png\"\n                      alt=\"image-20221005205324729\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a3311551-44ac-11ed-97c0-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_00kwccq&quot;</span>) <span class=\"comment\">// 回退到排他网关之前</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_01835pn&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在历史表中查看记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205659817.png\"\n                      alt=\"image-20221005205659817\"\n                ></p>\n<h2 id=\"重启-x2F-恢复实例\"><a href=\"#重启-x2F-恢复实例\" class=\"headerlink\" title=\"重启&#x2F;恢复实例\"></a>重启&#x2F;恢复实例</h2><p>在流程实例终止后，其历史数据仍然存在，并且可以被访问以重启流程实例，前提是历史级别被设置为FULL。 例如，当流程没有以期望的方式终止时，重启流程实例是有用的。这个API的使用的其他可能情况有：</p>\n<ul>\n<li>恢复被错误地取消的流程实例的到最后状态</li>\n<li>由于错误路由导致流程实例终止后，重启流程实例</li>\n</ul>\n<p>为了执行这样的操作，流程引擎提供了 <em>流程实例重启API</em> <code>RuntimeService.restartProcessInstances(..)</code> 。该API允许通过使用流式构建器在一次调用中指定多个实例化指令。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005210910364.png\"\n                      alt=\"image-20221005210910364\"\n                ></p>\n<p>部署启动流程实例后进入并行网关。然后流程实例被中断了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteProcessId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cfd58b31-44ae-11ed-92f5-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.deleteProcessInstance(processId,<span class=\"string\">&quot;测试删除&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005211329315.png\"\n                      alt=\"image-20221005211329315\"\n                ></p>\n<p>之后，我们决定恢复该流程实例到最后状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recoveryProcessInstancess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService</span><br><span class=\"line\">            .restartProcessInstances(<span class=\"string\">&quot;Process_08wyw1g:1:ad8f483f-44ae-11ed-aee8-c03c59ad2248&quot;</span>) <span class=\"comment\">// 流程定义ID</span></span><br><span class=\"line\">            .startBeforeActivity(<span class=\"string\">&quot;Activity_03vnv63&quot;</span>)</span><br><span class=\"line\">            .startBeforeActivity(<span class=\"string\">&quot;Activity_0b7mtmx&quot;</span>)</span><br><span class=\"line\">            .processInstanceIds(<span class=\"string\">&quot;cfd58b31-44ae-11ed-92f5-c03c59ad2248&quot;</span>) <span class=\"comment\">// 流程实例ID</span></span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流程实例已经用最后一组变量重启了。然而，在重启的流程实例中，只有全局变量被恢复了。 本地变量还需要调用 <code>RuntimeService.setVariableLocal(..)</code> 手动设置。</p>\n<blockquote>\n<p>从技术上讲，创建的是一个新的流程实例。</p>\n<p><strong>请注意:</strong> 历史流程和重启的流程实例的id是不同的。</p>\n</blockquote>\n<h1 id=\"动态表单\"><a href=\"#动态表单\" class=\"headerlink\" title=\"动态表单\"></a>动态表单</h1><p>接下来我们看看动态表单的应用，在Camunda中表单分为内置表单和动态表单。</p>\n<h2 id=\"内置表单\"><a href=\"#内置表单\" class=\"headerlink\" title=\"内置表单\"></a>内置表单</h2><p>内置表单就是在绘制流程图的时候同时绘制表单。这种方式其实就是绑定了对应的流程变量，不是太灵活。但还是来讲解下。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160336988.png\"\n                      alt=\"image-20221014160336988\"\n                ></p>\n<h3 id=\"启动流程绑定\"><a href=\"#启动流程绑定\" class=\"headerlink\" title=\"启动流程绑定\"></a>启动流程绑定</h3><p>我们先来看下在启动流程的时候就设置相关的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160501005.png\"\n                      alt=\"image-20221014160501005\"\n                ></p>\n<p>对应的流程图</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bpmn:definitions</span> <span class=\"attr\">xmlns:bpmn</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:dc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:camunda</span>=<span class=\"string\">&quot;http://camunda.org/schema/1.0/bpmn&quot;</span> <span class=\"attr\">xmlns:di</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://camunda.org/schema/modeler/1.0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Definitions_1pnd5o3&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://bpmn.io/schema/bpmn&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Camunda Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;4.12.0&quot;</span> <span class=\"attr\">modeler:executionPlatform</span>=<span class=\"string\">&quot;Camunda Platform&quot;</span> <span class=\"attr\">modeler:executionPlatformVersion</span>=<span class=\"string\">&quot;7.15.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmn:process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Process_13abncz&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">camunda:formData</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">camunda:formField</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;days&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;请假天数&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;long&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">camunda:formField</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;reason&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;请假原因&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;string&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">camunda:formData</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmn:extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_09xirvq<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_09xirvq&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1i0viip&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_1asp8i3<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1asp8i3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务1&quot;</span> <span class=\"attr\">camunda:assignee</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_09xirvq<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_1i0viip<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务2&quot;</span> <span class=\"attr\">camunda:assignee</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_1i0viip<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_1asp8i3<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:userTask</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmn:process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_1&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Process_13abncz&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_09xirvq_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_09xirvq&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;188&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1i0viip_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_1i0viip&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;340&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1asp8i3_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_1asp8i3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;_BPMNShape_StartEvent_2&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;152&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;36&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;36&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Event_1mj58zz_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;36&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;36&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_09e81f3_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;77&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_0ot1277_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;77&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bpmn:definitions</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的xml中就配置了表单的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160601636.png\"\n                      alt=\"image-20221014160601636\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;表单01&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/表单-01.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署完流程后我们可以通过对应的API查看流程对应的表单信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getStartFromData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据流程定义找到对应的 表单数据。</span></span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> formService</span><br><span class=\"line\">        .getStartFormData(processDefId);</span><br><span class=\"line\">    <span class=\"comment\">// 找到对应的表单域的集合</span></span><br><span class=\"line\">    List&lt;FormField&gt; formFields = startFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014161737726.png\"\n                      alt=\"image-20221014161737726\"\n                ></p>\n<p>启动流程：两种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;想休息下&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 正常启动的时候可以通过流程变量来给表单设置数据，也可以不设置</span></span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(processDefId,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过FormService来启动一个表单流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormServiceFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> formService.submitStartForm(processDefId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动流程后走到了<code>用户任务1</code>这个节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162003762.png\"\n                      alt=\"image-20221014162003762\"\n                ></p>\n<p>想要查看对应的表单数据。通过如下方法可以实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据Task编号来查看表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;426b11e6-4b85-11ed-b15a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据流程定义找到对应的 表单数据。</span></span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> formService.getStartFormData(processDefId);</span><br><span class=\"line\">    List&lt;FormField&gt; formFields = startFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">        <span class=\"comment\">// 根据taskId 找到对应的流程变量的值 也就是 表单的数据</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; = &quot;</span> + taskService.getVariable(taskId, formField.getId()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162117179.png\"\n                      alt=\"image-20221014162117179\"\n                ></p>\n<h3 id=\"任务节点绑定\"><a href=\"#任务节点绑定\" class=\"headerlink\" title=\"任务节点绑定\"></a>任务节点绑定</h3><p>上的方式绑定的表单数据在整个流程实例运作中都可以使用，还有一种方式我们是在具体的任务节点上绑定表单数据。我们来看看。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162658765.png\"\n                      alt=\"image-20221014162658765\"\n                ></p>\n<p>流程图中是在 <code>用户任务01</code> 这个节点绑定的表单数据了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162905992.png\"\n                      alt=\"image-20221014162905992\"\n                ></p>\n<p>部署流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;表单01&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/表单-02.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动一个流程实例：普通流程启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1xf3zgp:1:11da0157-4b9a-11ed-8750-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后现在流程执行到了<code>用户任务01</code>出。我们绑定的有流程表单。我们可以查询看看。先来查询Task对应的表单信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165547832.png\"\n                      alt=\"image-20221014165547832\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bff75f55-4b9a-11ed-9709-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">TaskFormData</span> <span class=\"variable\">taskFormData</span> <span class=\"operator\">=</span> formService.getTaskFormData(taskId);</span><br><span class=\"line\">    List&lt;FormField&gt; formFields = taskFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014163939776.png\"\n                      alt=\"image-20221014163939776\"\n                ></p>\n<p>然后可以给表单的相关信息赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bff75f55-4b9a-11ed-9709-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    taskService.setVariable(taskId,<span class=\"string\">&quot;days1&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    taskService.setVariable(taskId,<span class=\"string\">&quot;reason1&quot;</span>,<span class=\"string\">&quot;个人原因&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以看到表单的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165040994.png\"\n                      alt=\"image-20221014165040994\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165131403.png\"\n                      alt=\"image-20221014165131403\"\n                ></p>\n<p>审批完成到下一个节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165620888.png\"\n                      alt=\"image-20221014165620888\"\n                ></p>\n<p>这时我们再查询下看能不能找到对应的表单信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165737958.png\"\n                      alt=\"image-20221014165737958\"\n                ></p>\n<p>好了这个是我们讲的直接在流程中内嵌表单的应用</p>\n<h2 id=\"外置表单\"><a href=\"#外置表单\" class=\"headerlink\" title=\"外置表单\"></a>外置表单</h2><p>我们还可以自己定义一个 HTML+JS 的动态表单，然后在审批相关节点的时候渲染展示。</p>\n<h3 id=\"定义一个表单\"><a href=\"#定义一个表单\" class=\"headerlink\" title=\"定义一个表单\"></a>定义一个表单</h3><p>我们先定义一个简单的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134123018.png\"\n                      alt=\"image-20221015134123018\"\n                ></p>\n<h3 id=\"流程绑定\"><a href=\"#流程绑定\" class=\"headerlink\" title=\"流程绑定\"></a>流程绑定</h3><p>然后在流程设计的时候绑定对应的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134202377.png\"\n                      alt=\"image-20221015134202377\"\n                ></p>\n<p>部署流程后启动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134234163.png\"\n                      alt=\"image-20221015134234163\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134256088.png\"\n                      alt=\"image-20221015134256088\"\n                ></p>\n<p>在跳转后的地址中有taskId和回调的接口地址</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"ProcessEngine\"><a href=\"#ProcessEngine\" class=\"headerlink\" title=\"ProcessEngine\"></a>ProcessEngine</h1><p>ProcessEngine是Camunda流程引擎的核心。我们在流程中的很多具体的处理比如<code>流程部署</code>、<code>流程部署</code>、<code>流程审批</code>等操作都是通过<code>XXXService</code>来处理的。而相关的<code>XXXService</code>都是通过<code>ProcessEngine</code>来管理的。所以对于<code>ProcessEngine</code>的创建方式还是很有必要掌握的。</p>\n<h2 id=\"通过xml配置方式\"><a href=\"#通过xml配置方式\" class=\"headerlink\" title=\"通过xml配置方式\"></a>通过xml配置方式</h2><p>配置你的流程引擎的最简单的方法是通过一个叫做<code>camunda.cfg.xml</code>的XML文件。使用这个文件，你可以简单这样做:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们定义如下的<code>camunda.cfg.xml</code>文件。注意<code>camunda.cfg.xml</code>必须包含一个id为<code>processEngineConfiguration</code>的bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;processEngineConfiguration&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:h2:mem:camunda;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcDriver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUsername&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sa&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcPassword&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseSchemaUpdate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jobExecutorActivate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mailServerHost&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;mail.my-corp.com&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mailServerPort&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;5025&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果没有找到<code>camunda.cfg.xml</code>资源，默认引擎将搜索<code>activiti.cfg.xml</code>文件作为备用。如果两者都缺失，引擎就会停止运行，并打印出关于缺失配置资源的错误信息。</p>\n<p>请注意，配置XML实际上是一个Spring配置。这并不意味着Camunda引擎只能在Spring环境中使用。我们只是在内部利用Spring的解析和依赖注入功能来建立引擎。</p>\n<p>ProcessEngineConfiguration对象也可以使用配置文件以编程方式创建。也可以使用不同的bean id。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);</span><br><span class=\"line\">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"JavaAPI方式\"><a href=\"#JavaAPI方式\" class=\"headerlink\" title=\"JavaAPI方式\"></a>JavaAPI方式</h2><p>我们也可以通过创建正确的ProcessEngineConfiguration对象或使用一些预定义的对象，以编程方式配置流程引擎。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration</code><br>流程引擎是以独立的方式使用的。引擎本身将负责处理事务。默认情况下，只有在引擎启动时才会检查数据库（如果没有数据库模式或模式版本不正确，会抛出一个异常）。</li>\n<li><code>org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</code><br>这是一个用于单元测试的工具类。引擎本身将负责处理事务。默认使用H2内存数据库。该数据库将在引擎启动和关闭时被创建和删除。当使用这个时，可能不需要额外的配置（除了，当使用Job执行器（job executor）或邮件功能时）。</li>\n<li><code>org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration</code><br>当流程引擎被用于Spring环境时使用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngineConfigurationImpl</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">             .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/camunda1?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">             .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">             .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">             .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">             .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class=\"line\">             .setHistory(<span class=\"string\">&quot;full&quot;</span>);</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processEngine2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class=\"line\">     cfg.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/camunda2?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">             .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">             .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">             .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">             .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class=\"line\">             .setHistory(<span class=\"string\">&quot;full&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SpringBoot项目\"><a href=\"#SpringBoot项目\" class=\"headerlink\" title=\"SpringBoot项目\"></a>SpringBoot项目</h2><p>在SpringBoot项目会根据我们导入的依赖完成自动装配，从而完成ProcessEngine的自动注入。我们可以来分析下源码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234908597.png\"\n                      alt=\"image-20220911234908597\"\n                ></p>\n<p>我们需要注意对于Camunda的相关配置。我们可以在application.yml 中配置。原因是 CamundaBpmProperties的处理。然后就是 @Import(CamundaBpmConfiguration.class) 。 在CamundaBpmConfiguration会完成相关的 ProcessEngineConfiguration 的相关注入。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911234945653.png\"\n                      alt=\"image-20220911234945653\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220911235223373.png\"\n                      alt=\"image-20220911235223373\"\n                ></p>\n<p>这块感兴趣的小伙伴可以仔细阅读下。</p>\n<h2 id=\"Service-API\"><a href=\"#Service-API\" class=\"headerlink\" title=\"Service API\"></a>Service API</h2><p>Java API是与引擎互动的最常见方式。中心起点是<code>ProcessEngine</code>，它可以通过几种方式创建，如配置部分所述。从ProcessEngine中，你可以获得包含工作流&#x2F;BPM方法的各种服务。<code>ProcessEngine</code>和<code>服务对象</code>是<code>线程安全</code>的。所以你可以为整个服务器保留对其中一个对象的引用.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/api.services.png\"\n                      alt=\"img\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\"><span class=\"type\">FormService</span> <span class=\"variable\">formService</span> <span class=\"operator\">=</span> processEngine.getFormService();</span><br><span class=\"line\"><span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\"><span class=\"type\">ManagementService</span> <span class=\"variable\">managementService</span> <span class=\"operator\">=</span> processEngine.getManagementService();</span><br><span class=\"line\"><span class=\"type\">FilterService</span> <span class=\"variable\">filterService</span> <span class=\"operator\">=</span> processEngine.getFilterService();</span><br><span class=\"line\"><span class=\"type\">ExternalTaskService</span> <span class=\"variable\">externalTaskService</span> <span class=\"operator\">=</span> processEngine.getExternalTaskService();</span><br><span class=\"line\"><span class=\"type\">CaseService</span> <span class=\"variable\">caseService</span> <span class=\"operator\">=</span> processEngine.getCaseService();</span><br><span class=\"line\"><span class=\"type\">DecisionService</span> <span class=\"variable\">decisionService</span> <span class=\"operator\">=</span> processEngine.getDecisionService();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：所有的服务都是<code>无状态的</code>。这意味着你可以很容易地在一个集群的多个节点上运行Camunda平台，每个节点都去同一个数据库，而不必担心哪个机器实际执行了以前的调用。对任何服务的任何调用都是无状态的，无论它在哪里执行。</p>\n<p>每个服务的简单介绍</p>\n<table>\n<thead>\n<tr>\n<th>服务名称</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>仓库服务<strong>RepositoryService</strong></td>\n<td>提供了管理和操纵部署和流程定义的操作</td>\n</tr>\n<tr>\n<td>运行时服务-<strong>RuntimeService</strong></td>\n<td>首先可以通过一个流程定义启动多个流程实例。也能用于处理检索和存储流程变量的服务</td>\n</tr>\n<tr>\n<td>任务服务-<strong>TaskService</strong></td>\n<td>围绕用户审批操作的一切都会被归纳到TaskService。比如：查询分配给用户或组的任务，创建新的独立任务。这些是与流程实例无关的任务，操纵一个任务被分配给哪个用户，或者哪个用户以某种方式参与到任务中，声称并完成一项任务。声称意味着有人决定成为该任务的受让人，意味着这个用户将完成该任务。完成意味着 “完成任务的工作”等</td>\n</tr>\n<tr>\n<td>身份服务-<strong>IdentityService</strong></td>\n<td>是非常简单的。它允许对组和用户进行管理（创建、更新、删除、查询…）。重要的是要理解，核心引擎实际上在运行时并不对用户进行任何检查</td>\n</tr>\n<tr>\n<td>表单服务-<strong>FormService</strong></td>\n<td>一个可选的服务。提供了表单功能</td>\n</tr>\n<tr>\n<td>历史服务-<strong>HistoryService</strong></td>\n<td>暴露了引擎收集的所有历史数据。当执行流程时，引擎可以保留很多数据（这是可配置的），如流程实例的开始时间、谁做了哪些任务、完成任务花了多长时间、每个流程实例遵循的路径等。该服务主要暴露了访问这些数据的查询功能。</td>\n</tr>\n<tr>\n<td>管理服务-<strong>ManagementService</strong></td>\n<td>它允许检索关于数据库表和表元数据的信息。此外，它暴露了查询功能和Job的管理操作。Job在引擎中被用于各种事情，如定时器、异步延续、延迟暂停&#x2F;激活等。</td>\n</tr>\n<tr>\n<td>过滤器服务-<strong>FilterService</strong></td>\n<td>允许创建和管理过滤器。过滤器是像任务查询一样的存储查询。例如，过滤器被任务列表用来过滤用户任务</td>\n</tr>\n<tr>\n<td>外部任务服务-<strong>ExternalTaskService</strong></td>\n<td>提供对外部任务实例的访问。外部任务代表在外部处理的工作项目，独立于流程引擎。</td>\n</tr>\n<tr>\n<td>案例服务-<strong>CaseService</strong></td>\n<td>与运行时服务（<strong>RuntimeService</strong>）类似，但用于案例实例。它处理启动案例定义的新案例实例并管理案例执行的生命周期。该服务也被用来检索和更新案例实例的流程变量。</td>\n</tr>\n<tr>\n<td>决策服务-<strong>DecisionService</strong></td>\n<td>允许评估部署在引擎中的决策。它是评估独立于流程定义的业务规则任务中的决策的一种选择。</td>\n</tr>\n</tbody></table>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><h2 id=\"固定分配\"><a href=\"#固定分配\" class=\"headerlink\" title=\"固定分配\"></a>固定分配</h2><p>在指派<code>用户任务</code>的审批人时。我们是直接指派的固定账号。但是为了保证流程设计审批的灵活性。我们需要各种不同的分配方式，所以这节我们就详细的来介绍先在Camunda中我们可以使用的相关的分配方式</p>\n<p>固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003431387.png\"\n                      alt=\"image-20220912003431387\"\n                ></p>\n<p>这种方式就非常简单。不再过多赘述。</p>\n<h2 id=\"值表达式\"><a href=\"#值表达式\" class=\"headerlink\" title=\"值表达式\"></a>值表达式</h2><p><strong>值表达式 Value expression</strong>: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar&#125;</span><br><span class=\"line\">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912003628341.png\"\n                      alt=\"image-20220912003628341\"\n                ></p>\n<p>然后可以演示下这个案例，先部署该流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请假流程&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/1-01-任务分配.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动流程实例。启动流程实例后会进入到<code>人事审批</code>这个节点，有<code>值表达式</code>的存在，我们需要在启动的过程中就给其赋值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004447956.png\"\n                      alt=\"image-20220912004447956\"\n                ></p>\n<p>绑定流程变量的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0uiy3j1:1:712d273a-31f0-11ed-9e27-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个Map集合，存储相关的流程变量信息</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 通过 RuntimeService 启动一个流程实例，同时绑定了对应的流程变量信息</span></span><br><span class=\"line\">    runtimeService.startProcessInstanceById(processInstanceId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过后台查看数据我们可以发现<code>act_ru_task</code>中有了一条<code>人事审批</code>的任务，而且对于的审批人就是<code>demo</code>也就是我们给对应的流程变量的赋值</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004819089.png\"\n                      alt=\"image-20220912004819089\"\n                ></p>\n<p>而对应的流程变量信息存储在<code>act_ru_variable</code>中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912004949936.png\"\n                      alt=\"image-20220912004949936\"\n                ></p>\n<h2 id=\"方法表达式\"><a href=\"#方法表达式\" class=\"headerlink\" title=\"方法表达式\"></a>方法表达式</h2><p><strong>方法表达式 Method expression</strong>: 调用一个方法，可以带或不带参数。<strong>当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。</strong>传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如： boge3306</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;printer.print()&#125;</span><br><span class=\"line\">$&#123;myBean.getAssignee()&#125;</span><br><span class=\"line\">$&#123;myBean.addNewOrder(<span class=\"string\">&#x27;orderName&#x27;</span>)&#125;</span><br><span class=\"line\">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>myBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法.我们通过案例来演示下。我们先定义对应的Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAssignee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;getAssignee 方法执行了....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;demo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在对应的流程图中来定义。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912005546442.png\"\n                      alt=\"image-20220912005546442\"\n                ></p>\n<p>然后通过部署启动操作来看看。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010330601.png\"\n                      alt=\"image-20220912010330601\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912010405626.png\"\n                      alt=\"image-20220912010405626\"\n                ></p>\n<p>通过这块的演示，我们就可以基于我们的外部条件来结合我们的逻辑实现动态的来指定对应的处理人。</p>\n<h2 id=\"监听器配置\"><a href=\"#监听器配置\" class=\"headerlink\" title=\"监听器配置\"></a>监听器配置</h2><p>可以使用监听器来完成很多Camunda的流程业务。我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee。创建自定义监听器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的一个 Task 监听器</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们需要在监听器中完成 处理人的动态指派</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFirstTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyFirstTaskListener --- &gt; 执行了&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 针对 是创建Task节点的事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(EVENTNAME_CREATE.equals(delegateTask.getEventName()))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 指派对应的处理人</span></span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在流程图中绑定对应的监听器</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011453664.png\"\n                      alt=\"image-20220912011453664\"\n                ></p>\n<p>然后我们部署和启动流程后，可以看到对应的触发效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011644311.png\"\n                      alt=\"image-20220912011644311\"\n                ></p>\n<p>表结构中也可以看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220912011735815.png\"\n                      alt=\"image-20220912011735815\"\n                ></p>\n<p>说明这块的处理是完全可行的。</p>\n<h1 id=\"流程变量\"><a href=\"#流程变量\" class=\"headerlink\" title=\"流程变量\"></a>流程变量</h1><p>流程变量可以用将数据添加到流程的运行时状态中，或者更具体地说，变量作用域中。改变实体的各种API可以用来更新这些附加的变量。一般来说，一个变量由一个名称和一个值组成。名称用于在整个流程中识别变量。例如，如果一个活动（activity）设置了一个名为 <em>var</em> 的变量，那么后续活动中可以通过使用这个名称来访问它。变量的值是一个 Java 对象。</p>\n<h2 id=\"运行时变量\"><a href=\"#运行时变量\" class=\"headerlink\" title=\"运行时变量\"></a>运行时变量</h2><p>流程实例运行时的变量，存入act_ru_variable表中。在流程实例运行结束时，此实例的变量在表中删除。在流程实例创建及启动时，可设置流程变量。所有的<code>startProcessInstanceXXX</code>方法都有一个可选参数用于设置变量。例如，<code>RuntimeService</code>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessInstance <span class=\"title function_\">startProcessInstanceById</span><span class=\"params\">(String processDefinitionId, Map&lt;String, Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在流程执行中加入变量。例如，(<em>RuntimeService</em>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariable</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariablesLocal</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>读取变量方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariables</span><span class=\"params\">(String executionId)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariablesLocal</span><span class=\"params\">(String executionId)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariables</span><span class=\"params\">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getVariablesLocal</span><span class=\"params\">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class=\"line\">Object <span class=\"title function_\">getVariable</span><span class=\"params\">(String executionId, String variableName)</span>;</span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getVariable</span><span class=\"params\">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：由于流程实例结束时，对应在运行时表的数据跟着被删除。所以查询一个已经完结流程实例的变量，只能在历史变量表中查找。</p>\n<p>当然运行时变量我们也可以根据对应的作用域把他分为<code>全局变量</code>和<code>局部变量</code>.</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量</p>\n<p>注意：如：    Global变量：userId（变量名）、zhangsan（变量值）</p>\n<p>global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。</p>\n<p>案例：</p>\n<p>定义监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MySecondListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有的流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; variables = delegateTask.getVariables();</span><br><span class=\"line\">        Set&lt;String&gt; keys = variables.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> variables.get(key);</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">&quot; = &quot;</span> + obj);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj <span class=\"keyword\">instanceof</span>  String)&#123;</span><br><span class=\"line\">              <span class=\"comment\">// 修改 流程变量的信息</span></span><br><span class=\"line\">              <span class=\"comment\">// variables.put(key,obj + &quot;:boge3306&quot;); 直接修改Map中的数据 达不到修改流程变量的效果</span></span><br><span class=\"line\">              delegateTask.setVariable(key,obj + <span class=\"string\">&quot;:boge3306&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设计流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913011512486.png\"\n                      alt=\"image-20220913011512486\"\n                ></p>\n<p>案例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = Application.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AssigneeTaskTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请假流程-监听器&quot;</span>)</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;flow/04-任务分配-监听器分配.bpmn&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_08kf7mp:1:d154c0f5-326d-11ed-841a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例，绑定对应的流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlowVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1t425hs:1:539f152d-326a-11ed-ab57-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个 Map 集合</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，同时绑定对应的流程变量信息</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId,map);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流程审批</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        taskService.complete(<span class=\"string\">&quot;29a0614c-3267-11ed-a030-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流程审批</span></span><br><span class=\"line\"><span class=\"comment\">     *    同样需要绑定对应的流程变量的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTaskVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个 Map 集合</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">        taskService.complete(<span class=\"string\">&quot;dd013840-326a-11ed-b589-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。</p>\n<p>Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 </p>\n<p>我们通过RuntimeService 设置的Local变量绑定的是 executionId。在该流程中有效</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220913120555429.png\"\n                      alt=\"image-20220913120555429\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置Local流程变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">executionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;368f9fdc-3317-11ed-871d-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.setVariableLocal(executionId,<span class=\"string\">&quot;orderId&quot;</span>,<span class=\"string\">&quot;10006&quot;</span>);</span><br><span class=\"line\">    runtimeService.setVariableLocal(executionId,<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;波波烤鸭1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们通过TaskService设置的Local变量的作用域是和TaskId绑定的，作用域就在这一个Task生命周期中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskLocalVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    taskService.setVariableLocal(<span class=\"string\">&quot;7eb1b34b-3318-11ed-b9e6-c03c59ad2248&quot;</span>,<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;波哥66666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"历史变量\"><a href=\"#历史变量\" class=\"headerlink\" title=\"历史变量\"></a>历史变量</h2><p>历史变量，存入<code>act_hi_varinst</code>表中。在流程启动时，流程变量会同时存入历史变量表中；在流程结束时，历史表中的变量仍然存在。可理解为“永久代”的流程变量。</p>\n<p>获取已完成的、id为’XXX’的流程实例中，所有的<code>HistoricVariableInstances</code>（历史变量实例），并以变量名排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">historyService.createHistoricVariableInstanceQuery()</span><br><span class=\"line\">    .processInstanceId(<span class=\"string\">&quot;XXX&quot;</span>)</span><br><span class=\"line\">    .orderByVariableName.desc()</span><br><span class=\"line\">    .list();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"身份服务\"><a href=\"#身份服务\" class=\"headerlink\" title=\"身份服务\"></a>身份服务</h1><p>在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。</p>\n<p>身份服务是对各种用户&#x2F;组库的API抽象。其基本实体是：</p>\n<ul>\n<li>User: 使用不同ID区分的不同用户</li>\n<li>Group: 使用不同ID区分的不同组</li>\n<li>Membership: 组与用户之间的关系</li>\n<li>Tenant: 使用不同ID区分的不同租户</li>\n<li>Tenant Membership: 租户与 用户&#x2F;组 之间的关系</li>\n</ul>\n<h2 id=\"候选人\"><a href=\"#候选人\" class=\"headerlink\" title=\"候选人\"></a>候选人</h2><h3 id=\"绘制流程图\"><a href=\"#绘制流程图\" class=\"headerlink\" title=\"绘制流程图\"></a>绘制流程图</h3><p>首先绘制一个如下的基本流程图。然后我们分别来指派处理人。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917101906123.png\"\n                      alt=\"image-20220917101906123\"\n                ></p>\n<p>人事审批这块我们可以直接来指定多个候选人来处理。<code>demo,zhang,lisi</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102115513.png\"\n                      alt=\"image-20220917102115513\"\n                ></p>\n<p>在总经理审批的位置我们在设计的时候不太清楚会是谁来审批，所以通过值表达式来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102211814.png\"\n                      alt=\"image-20220917102211814\"\n                ></p>\n<p>设计完成后对应的xml中的数据为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102259478.png\"\n                      alt=\"image-20220917102259478\"\n                ></p>\n<h3 id=\"部署和启动流程\"><a href=\"#部署和启动流程\" class=\"headerlink\" title=\"部署和启动流程\"></a>部署和启动流程</h3><p>创建了流程图后我们就可以直接来部署该流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;候选人案例&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/候选人案例.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着就可以直接来启动该流程了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic:1:cca1e181-362e-11ed-b8fc-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(processInstanceId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动完成流程后我们进入到<code>act_ru_task</code>中可以发现我们创建的流程任务信息，但是<code>处理人</code>字段还是空的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102625541.png\"\n                      alt=\"image-20220917102625541\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917102655865.png\"\n                      alt=\"image-20220917102655865\"\n                ></p>\n<p>注意：相关的候选人的信息存储在了<code>act_ru_identitylink</code>表中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917104657296.png\"\n                      alt=\"image-20220917104657296\"\n                ></p>\n<p>对应的查询操作如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;IdentityLink&gt; identityLinksForTask = taskService.getIdentityLinksForTask(<span class=\"string\">&quot;023f0279-362f-11ed-8d8a-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (IdentityLink identityLink : identityLinksForTask) &#123;</span><br><span class=\"line\">        System.out.println(identityLink.getTaskId());</span><br><span class=\"line\">        System.out.println(identityLink.getProcessDefId());</span><br><span class=\"line\">        System.out.println(identityLink.getUserId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的拾取\"><a href=\"#任务的拾取\" class=\"headerlink\" title=\"任务的拾取\"></a>任务的拾取</h3><p>候选要操作我们需要通过<code>拾取</code>的行为把<code>候选人</code>转换为<code>处理人</code>.那么候选人登录后需要能查询出来他可以<code>拾取</code>的任务。在camunda的web应用中我们可以看到这样的操作。<code>demo</code>账号登录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103124214.png\"\n                      alt=\"image-20220917103124214\"\n                ></p>\n<p>在代码上的实现，先来看查询操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskCandidateUser(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询当前任务所有的候选人</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;52b2642a-36fa-11ed-bde4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    List&lt;IdentityLink&gt; linksForTask = taskService.getIdentityLinksForTask(taskId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(linksForTask != <span class=\"literal\">null</span> &amp;&amp; linksForTask.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IdentityLink identityLink : linksForTask) &#123;</span><br><span class=\"line\">            System.out.println(identityLink.getUserId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们就可以在上面的基础上来做<code>拾取</code>的操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskCandidateUser(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        taskService.claim(task.getId(),<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入到表结构中你会发现这条Task记录的处理人被指派为了<code>demo</code>,而且在Web端可以看到可以审批了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917103743685.png\"\n                      alt=\"image-20220917103743685\"\n                ></p>\n<p>注意：这时<code>demo</code>拾取了任务之后其他的用户就不能再拾取了，查询的时候也查询不到了。</p>\n<h3 id=\"任务的归还\"><a href=\"#任务的归还\" class=\"headerlink\" title=\"任务的归还\"></a>任务的归还</h3><p>拾取任务后如果不想操作那么可以归还任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 退还任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\"> *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unclaimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 归还相关的任务  置空即可</span></span><br><span class=\"line\">        taskService.setAssignee(task.getId(),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归还拾取成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务的交接\"><a href=\"#任务的交接\" class=\"headerlink\" title=\"任务的交接\"></a>任务的交接</h3><p>拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;023da2e6-362f-11ed-8d8a-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 任务交接</span></span><br><span class=\"line\">        taskService.setAssignee(task.getId(),<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务交接给了zhang&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务完成\"><a href=\"#任务完成\" class=\"headerlink\" title=\"任务完成\"></a>任务完成</h3><p>正常的任务处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;023f0279-362f-11ed-8d8a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 但是下一个节点的 处理人是值表达式 我们需要赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user1&quot;</span>,<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user2&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;user3&quot;</span>,<span class=\"string\">&quot;wangwu&quot;</span>);</span><br><span class=\"line\">    taskService.complete(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们通过值表达式来处理的候选人操作。在<code>act_ru_identitylink</code>表中同样有相关记录，我们需要结合流程变量表来处理了。但是处理的API和上面是一样的。</p>\n<h2 id=\"候选人组\"><a href=\"#候选人组\" class=\"headerlink\" title=\"候选人组\"></a>候选人组</h2><p>当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。</p>\n<h3 id=\"管理用户和组\"><a href=\"#管理用户和组\" class=\"headerlink\" title=\"管理用户和组\"></a>管理用户和组</h3><h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>我们需要先单独维护用户信息。后台对应的表结构是<code>ACT_ID_USER</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护用户</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.newUser(<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">    user.setFirstName(<span class=\"string\">&quot;张&quot;</span>);</span><br><span class=\"line\">    user.setLastName(<span class=\"string\">&quot;三&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    identityService.saveUser(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要更新或者删除用户的话。通过相关API即可完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.createUserQuery().userId(<span class=\"string\">&quot;zhang&quot;</span>).singleResult();</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">    identityService.saveUser(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    identityService.deleteUser(<span class=\"string\">&quot;zhang&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Group管理\"><a href=\"#Group管理\" class=\"headerlink\" title=\"Group管理\"></a>Group管理</h4><p>维护对应的Group信息，后台对应的表结构是<code>ACT_ID_GROUP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建用户组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对象并指定相关的信息</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.newGroup(<span class=\"string\">&quot;group1&quot;</span>);</span><br><span class=\"line\">    group.setName(<span class=\"string\">&quot;开发部&quot;</span>);</span><br><span class=\"line\">    group.setType(<span class=\"string\">&quot;type1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对应的表结构数据</span></span><br><span class=\"line\">    identityService.saveGroup(group);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新和删除参考上面的<code>用户管理</code></p>\n<h4 id=\"用户分配组\"><a href=\"#用户分配组\" class=\"headerlink\" title=\"用户分配组\"></a>用户分配组</h4><p>用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是<code>ACT_ID_MEMBERSHIP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将用户分配给对应的Group</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">userGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据组的编号找到对应的Group对象</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">    <span class=\"comment\">// 创建 MemberShip 建立用户和组的关系</span></span><br><span class=\"line\">    identityService.createMembership(<span class=\"string\">&quot;zhang&quot;</span>,group.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"候选人组应用\"><a href=\"#候选人组应用\" class=\"headerlink\" title=\"候选人组应用\"></a>候选人组应用</h3><p>搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了</p>\n<h4 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h4><p>创建一个简单的请假流程，处理人通过候选人组的方式来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201151251.png\"\n                      alt=\"image-20220917201151251\"\n                ></p>\n<h4 id=\"流程的部署运行\"><a href=\"#流程的部署运行\" class=\"headerlink\" title=\"流程的部署运行\"></a>流程的部署运行</h4><p>然后我们把流程部署和运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">               .name(<span class=\"string\">&quot;候选人组案例&quot;</span>)</span><br><span class=\"line\">               .addClasspathResource(<span class=\"string\">&quot;flow/候选人组.bpmn&quot;</span>)</span><br><span class=\"line\">               .deploy();</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1gvo8so:1:3e253edb-3682-11ed-a1ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">       runtimeService.startProcessInstanceById(processInstanceId);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署成功后我们可以在<code>act_ru_identitylink</code>中看到对应的记录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917201747129.png\"\n                      alt=\"image-20220917201747129\"\n                ></p>\n<h4 id=\"任务的拾取和完成\"><a href=\"#任务的拾取和完成\" class=\"headerlink\" title=\"任务的拾取和完成\"></a>任务的拾取和完成</h4><p>然后完成任务的查询拾取和处理操作。逻辑是根据当前的登录<code>用户</code>找到对应的<code>组</code>，然后根据<code>组</code>找到对应的任务信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidateGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">     <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;zhang&quot;</span>).singleResult();</span><br><span class=\"line\">     List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">             .processInstanceId(<span class=\"string\">&quot;711d5726-3682-11ed-8b9b-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">             .taskCandidateGroup(group.getId())</span><br><span class=\"line\">             .list();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">  *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">  *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhang&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">     <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(userId).singleResult();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             .processInstanceId(<span class=\"string\">&quot;711d5726-3682-11ed-8b9b-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">             .taskCandidateGroup(group.getId())</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 任务拾取</span></span><br><span class=\"line\">         taskService.claim(task.getId(),userId);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>拾取后的操作和前面是一样的，就没必要赘述。当然我们在定义流程的时候也可以通过值表达式来处理，我们需要注意赋值即可。</p>\n<h2 id=\"租户\"><a href=\"#租户\" class=\"headerlink\" title=\"租户\"></a>租户</h2><p><em>多租户</em> 是指一个单一的Camunda应用需要为多个的租户服务的情况。对于每个租户来说，应该有某些隔离的保证。例如，一个租户的流程实例不应干扰另一个租户的流程实例。</p>\n<p>多租户可以通过两种不同的方式实现。一种是使用每个租户一个流程引擎。另一种方式是只使用一个流程引擎，并将数据与租户标识符相关联。这两种方式在数据隔离程度、维护工作和可扩展性方面各有不同。两种方式的组合也是可能的。</p>\n<p>多租户可以使用租户标识符（即tenant-ids）的流程引擎来实现。所有租户的数据都存储在一个表中（同一数据库和表结构）。通过存储在列中的租户标识符来提供隔离。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220917203832905.png\"\n                      alt=\"image-20220917203832905\"\n                ></p>\n<h3 id=\"租户管理\"><a href=\"#租户管理\" class=\"headerlink\" title=\"租户管理\"></a>租户管理</h3><p>租户对应于<code>act_id.tenant</code>表结构中的数据。我们可以先来维护租户的相关信息。创建<code>长沙分公司</code>的租户信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建租户</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTenant</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Tenant</span> <span class=\"variable\">tenant</span> <span class=\"operator\">=</span> identityService.newTenant(<span class=\"string\">&quot;cs&quot;</span>);</span><br><span class=\"line\">    tenant.setName(<span class=\"string\">&quot;长沙分公司&quot;</span>);</span><br><span class=\"line\">    identityService.saveTenant(tenant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220534584.png\"\n                      alt=\"image-20220918220534584\"\n                ></p>\n<p>当然参考前面的删除和更新操作也可以非常轻松的完成<code>租户</code>相关信息的处理。然后我们来看下租户和用户和组的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 建立 租户 和 组的关系</span></span><br><span class=\"line\"><span class=\"comment\"> * 当然也可以建立 租户和用户的关系。只是这种比较少用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTenantAndGroupShip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    identityService.createTenantGroupMembership(<span class=\"string\">&quot;cs&quot;</span>,<span class=\"string\">&quot;group1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918220924950.png\"\n                      alt=\"image-20220918220924950\"\n                ></p>\n<h3 id=\"部署操作\"><a href=\"#部署操作\" class=\"headerlink\" title=\"部署操作\"></a>部署操作</h3><p>我们在部署流程的时候可以指定对应的租户编号。如果不指定租户编号，说明该流程是属于所有租户的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;候选人案例-租户&quot;</span>)</span><br><span class=\"line\">            .tenantId(<span class=\"string\">&quot;tenant1&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/候选人案例.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"查看部署流程\"><a href=\"#查看部署流程\" class=\"headerlink\" title=\"查看部署流程\"></a>查看部署流程</h3><p>设置了租户编号后，我们要做相关的查询，可以通过如下的API来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基于租户 查询相关的部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getByTenantId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">            .tenantIdIn(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Deployment deployment : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过调用<code>withoutTenantId()</code>来查询不属于任何租户的部署。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getByWithoutTenantId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">                .withoutTenantId() <span class=\"comment\">// 查询出所有不属于任何tenantId的记录</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Deployment deployment : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以通过调用<code>includeDeploymentsWithoutTenantId()</code>来查询属于特定租户或不属于租户的部署。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void getByIncludTenantId()&#123;</span><br><span class=\"line\">    List&lt;Deployment&gt; list = repositoryService.createDeploymentQuery()</span><br><span class=\"line\">            .tenantIdIn(&quot;cs&quot;)</span><br><span class=\"line\">            .includeDeploymentsWithoutTenantId() // 查询出 tenant1 和 不属于 租户的记录</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    for (Deployment deployment : list) &#123;</span><br><span class=\"line\">        System.out.println(&quot;deployment.getId() = &quot; + deployment.getId());</span><br><span class=\"line\">        System.out.println(&quot;deployment.getName() = &quot; + deployment.getName());</span><br><span class=\"line\">        System.out.println(&quot;------------&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与 “部署查询” 类似，定义查询允许通过一个或多个租户和不属于任何租户的定义进行过滤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;ProcessDefinition&gt; processDefinitions = repositoryService</span><br><span class=\"line\">  .createProcessDefinitionQuery()</span><br><span class=\"line\">  .tenantIdIn(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">  .includeProcessDefinitionsWithoutTenantId();</span><br><span class=\"line\">  .list();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程实例\"><a href=\"#启动流程实例\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h3><p>通过key创建一个为多租户部署的流程定义的实例，必须在<code>ProcessInstantiationBuilder</code> 中传递租户标识符 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 租户 启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .createProcessInstanceByKey(processKey)</span><br><span class=\"line\">            .processDefinitionTenantId(<span class=\"string\">&quot;cs&quot;</span>)</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_05vjqic:1:a6b23794-3767-11ed-a4df-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .createProcessInstanceById(processId)</span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后流程后，在创建的Task记录中我们可以看到对应的<code>租户</code>信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234504559.png\"\n                      alt=\"image-20220918234504559\"\n                ></p>\n<p>因为我们在流程设计的时候就指定了第一个节点的候选人是<code>group1</code>,所以在<code>act_ru_identitylink</code>表中可以看到相关的记录。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220918234618891.png\"\n                      alt=\"image-20220918234618891\"\n                ></p>\n<h3 id=\"任务拾取\"><a href=\"#任务拾取\" class=\"headerlink\" title=\"任务拾取\"></a>任务拾取</h3><p>接下来就可以对任务做<code>拾取</code>的操作了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据当前登录用户 查询到需要拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 根据登录用户查询到对应的Group</span></span><br><span class=\"line\">     List&lt;Group&gt; groups = identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;demo&quot;</span>).list();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(groups != <span class=\"literal\">null</span> &amp;&amp; groups.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (Group group : groups) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 根据 group 找到对应的 租户</span></span><br><span class=\"line\">             List&lt;Tenant&gt; tenants = identityService.createTenantQuery().groupMember(group.getId()).list();</span><br><span class=\"line\">             List&lt;String&gt; tenantStrings = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(tenants != <span class=\"literal\">null</span> &amp;&amp; tenants.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                 tenantStrings = tenants.stream().map((item)-&gt;&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> item.getId();</span><br><span class=\"line\">                 &#125;).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">                 String[] ss = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[tenantStrings.size()];</span><br><span class=\"line\">                 tenantStrings.toArray(ss);</span><br><span class=\"line\">                 List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                         .tenantIdIn(ss)</span><br><span class=\"line\">                         .list();</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">                         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以查询到对应的拾取就比较简单了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据登录用户查询到对应的Group</span></span><br><span class=\"line\">    List&lt;Group&gt; groups = identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;demo&quot;</span>).list();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(groups != <span class=\"literal\">null</span> &amp;&amp; groups.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Group group : groups) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据 group 找到对应的 租户</span></span><br><span class=\"line\">            List&lt;Tenant&gt; tenants = identityService.createTenantQuery().groupMember(group.getId()).list();</span><br><span class=\"line\">            List&lt;String&gt; tenantStrings = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tenants != <span class=\"literal\">null</span> &amp;&amp; tenants.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                tenantStrings = tenants.stream().map((item)-&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item.getId();</span><br><span class=\"line\">                &#125;).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">                String[] ss = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[tenantStrings.size()];</span><br><span class=\"line\">                tenantStrings.toArray(ss);</span><br><span class=\"line\">                List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                        .tenantIdIn(ss)</span><br><span class=\"line\">                        .list();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">                        taskService.claim(task.getId(),<span class=\"string\">&quot;demo&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220919003450202.png\"\n                      alt=\"image-20220919003450202\"\n                ></p>\n<p>能够拾取成功，那么后面的操作就是任务的审批。接下来的操作就和前面是一样的了。不再赘述~</p>\n<h1 id=\"网关篇\"><a href=\"#网关篇\" class=\"headerlink\" title=\"网关篇\"></a>网关篇</h1><p>网关用来控制流程的流向</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p><code>排他网关</code>（exclusive gateway）（也叫<em>异或网关 XOR gateway</em>，或者更专业的，<em>基于数据的排他网关 exclusive data-based gateway</em>），用于对流程中的<strong>决策</strong>建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为<em>true</em>）继续流程。</p>\n<p>绘制流程图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922002931276.png\"\n                      alt=\"image-20220922002931276\"\n                ></p>\n<p>对应的XML文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003022802.png\"\n                      alt=\"image-20220922003022802\"\n                ></p>\n<p>流程演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;排他网关&quot;</span>)</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;flow/排他网关.bpmn&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过流程定义Id 启动</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0eykic0:1:efadfc92-39c9-11ed-8f13-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">     <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processId);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     map.put(<span class=\"string\">&quot;day&quot;</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">     taskService.complete(<span class=\"string\">&quot;21a323ee-39ca-11ed-8b49-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>传递的是<code>day=4</code>会走中间的路线。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003119262.png\"\n                      alt=\"image-20220922003119262\"\n                ></p>\n<h2 id=\"并行网关\"><a href=\"#并行网关\" class=\"headerlink\" title=\"并行网关\"></a>并行网关</h2><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。</p>\n</li>\n<li><p>join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。</p>\n</li>\n</ul>\n<p>注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。</p>\n<p><strong>与其他网关的主要区别是，并行网关不会解析条件。</strong> <strong>即使顺序流中定义了条件，也会被忽略。</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922003323785.png\"\n                      alt=\"image-20220922003323785\"\n                ></p>\n<h2 id=\"包含网关\"><a href=\"#包含网关\" class=\"headerlink\" title=\"包含网关\"></a>包含网关</h2><p>包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。</p>\n<p>包含网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。</p>\n</li>\n<li><p>汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005111023.png\"\n                      alt=\"image-20220922005111023\"\n                ></p>\n<p>当输入<code>day=4</code>时，走了第二和第三条路线</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220922005536912.png\"\n                      alt=\"image-20220922005536912\"\n                ></p>\n<h1 id=\"事件篇\"><a href=\"#事件篇\" class=\"headerlink\" title=\"事件篇\"></a>事件篇</h1><p><code>事件</code>（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：<em>捕获（catching）</em>与<em>抛出（throwing）</em>事件。</p>\n<ul>\n<li><strong>捕获:</strong> 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。</li>\n<li><strong>抛出:</strong> 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。</li>\n</ul>\n<h2 id=\"定时器事件\"><a href=\"#定时器事件\" class=\"headerlink\" title=\"定时器事件\"></a>定时器事件</h2><p>定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件</p>\n<h3 id=\"定时器启动事件\"><a href=\"#定时器启动事件\" class=\"headerlink\" title=\"定时器启动事件\"></a>定时器启动事件</h3><p>定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。</p>\n<p><em><strong>请注意</strong>：</em>子流程不能有定时器启动事件。</p>\n<p><em><strong>请注意</strong>：</em>定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。</p>\n<p><em><strong>请注意</strong>：</em>当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。</p>\n<p>定时器启动事件，用其中有一个钟表图标的圆圈来表示。我们通过具体案例来介绍</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104055183.png\"\n                      alt=\"image-20220926104055183\"\n                ></p>\n<p>部署流程后等待到具体的时间，我们查看任务即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926104152240.png\"\n                      alt=\"image-20220926104152240\"\n                ></p>\n<p>时间定义这块使用的是  <a class=\"link\"   href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\" >https://en.wikipedia.org/wiki/ISO_8601#Dates<i class=\"fas fa-external-link-alt\"></i></a>  ISO 8601 格式</p>\n<p>上面我们是通过指定固定时间来启动的，我们也可以通过<code>duraction</code>间隔时间来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926105514506.png\"\n                      alt=\"image-20220926105514506\"\n                ></p>\n<p>通过间隔的方式来启动。</p>\n<p>timeCycle：指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式</p>\n<ul>\n<li>第一种是按照<a class=\"link\"   href=\"http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\" >ISO 8601<i class=\"fas fa-external-link-alt\"></i></a>标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3&#x2F;PT10H</li>\n<li>也可以使用<em>timeCycle</em>的可选属性<em>endDate</em>，或者像这样直接写在时间表达式的结尾：<code>R3/PT10H/$&#123;EndDate&#125;</code>。 当到达endDate时，应用会停止，并为该任务创建其他作业</li>\n<li>也可以通过cron表达式来处理</li>\n</ul>\n<p>案例：重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyJavaDelegate:执行了。。。&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110231335.png\"\n                      alt=\"image-20220926110231335\"\n                ></p>\n<p>在控制台可以看到对应的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220926110317226.png\"\n                      alt=\"image-20220926110317226\"\n                ></p>\n<p>也可以指定结束时间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">timeCycle</span>&gt;</span>R3/PT30S/2022-03-28T21:46:11+00:00<span class=\"tag\">&lt;/<span class=\"name\">timeCycle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>此外还可以通过cron表达式来处理：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0/5 * * * ?</span><br></pre></td></tr></table></figure>\n\n<p>每隔5秒启动</p>\n<h3 id=\"定时器中间事件\"><a href=\"#定时器中间事件\" class=\"headerlink\" title=\"定时器中间事件\"></a>定时器中间事件</h3><p>在我们具体的流程处理中，A节点处理完成后，定时触发B节点的处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927002456358.png\"\n                      alt=\"image-20220927002456358\"\n                ></p>\n<h3 id=\"定时器边界事件\"><a href=\"#定时器边界事件\" class=\"headerlink\" title=\"定时器边界事件\"></a>定时器边界事件</h3><p>人工任务1如果在定义的<code>2022-09-27T23:36:14</code>这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927003701033.png\"\n                      alt=\"image-20220927003701033\"\n                ></p>\n<h2 id=\"消息事件\"><a href=\"#消息事件\" class=\"headerlink\" title=\"消息事件\"></a>消息事件</h2><h3 id=\"启动事件\"><a href=\"#启动事件\" class=\"headerlink\" title=\"启动事件\"></a>启动事件</h3><p>消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927004852502.png\"\n                      alt=\"image-20220927004852502\"\n                ></p>\n<p>启动流程实例可以通过普通的方式来触发，当然也可以通过对应的API来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消息启动事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startMessageFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.startProcessInstanceByMessage(<span class=\"string\">&quot;firstMessage&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"中间事件\"><a href=\"#中间事件\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h3><p>消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，<code>自动流程1</code>处理完成后，需要接收特定的消息之后才能进入到<code>自动流程2</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927005944099.png\"\n                      alt=\"image-20220927005944099\"\n                ></p>\n<p>正常的流程部署，启动和审批后，我们需要发送对应的消息来触发这个中间事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;secondMessage&quot;</span>,<span class=\"string\">&quot;da2028e9-3dbc-11ed-adb0-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"边界事件\"><a href=\"#边界事件\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>消息边界事件，如果在消息触发前还没有，案例演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927010931908.png\"\n                      alt=\"image-20220927010931908\"\n                ></p>\n<p>然后正常的部署，启动流程，如果在发布对应的消息之前还没有审批<code>用户任务1</code>,那当我们发送对应的消息后就会触发对应的消息边界事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;thirdMessage&quot;</span>,<span class=\"string\">&quot;0d2a30e2-3dbf-11ed-9e28-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"错误事件\"><a href=\"#错误事件\" class=\"headerlink\" title=\"错误事件\"></a>错误事件</h2><h3 id=\"开始事件\"><a href=\"#开始事件\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。<strong>错误启动事件不能用于启动流程实例</strong>。</p>\n<p>错误启动事件总是中断。我们通过案例来介绍。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113303497.png\"\n                      alt=\"image-20220927113303497\"\n                ></p>\n<p>绘制事件子流程要注意：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113345613.png\"\n                      alt=\"image-20220927113345613\"\n                ></p>\n<p>选择错误启动事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113423993.png\"\n                      alt=\"image-20220927113423993\"\n                ></p>\n<p>然后配置流程节点信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113506045.png\"\n                      alt=\"image-20220927113506045\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113528120.png\"\n                      alt=\"image-20220927113528120\"\n                ></p>\n<p>然后在JavaDelegate中抛出对应的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;FirstJavaDelegate:执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 抛出的信息必须对应于error的Code信息</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;errorCode01&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后正常部署，启动流程。然后我们就可以看到对应的流转了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927113652951.png\"\n                      alt=\"image-20220927113652951\"\n                ></p>\n<h3 id=\"边界事件-1\"><a href=\"#边界事件-1\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>当子流程执行中对外抛出了相关的异常，那么我们设置的错误边界事件就能对应的捕获到相关的事件，然后做对应的处理，相关案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114818638.png\"\n                      alt=\"image-20220927114818638\"\n                ></p>\n<p>绘制错误边界流程图的时候需要先绘制中间事件的图标，然后拖拽到子流程的边界，然后修改对应的类型即可，错误边界事件绑定抛出对应的errorCode</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927114939647.png\"\n                      alt=\"image-20220927114939647\"\n                ></p>\n<p>然后对应的抛出的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondJavaDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SecondJavaDelegate:执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 抛出的信息必须对应于error的Code信息</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;errorCode02&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后部署启动流程即可看到对应的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220927115037027.png\"\n                      alt=\"image-20220927115037027\"\n                ></p>\n<h2 id=\"信号事件\"><a href=\"#信号事件\" class=\"headerlink\" title=\"信号事件\"></a>信号事件</h2><h3 id=\"开始事件-1\"><a href=\"#开始事件-1\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>通过信号来启动流程实例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232328300.png\"\n                      alt=\"image-20220928232328300\"\n                ></p>\n<p>部署流程和发送信号来启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;事件-信号开始事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/23-事件-信号事件-开始事件.bpmn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号来触发启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;signal01&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928232951167.png\"\n                      alt=\"image-20220928232951167\"\n                ></p>\n<h3 id=\"中间捕获事件\"><a href=\"#中间捕获事件\" class=\"headerlink\" title=\"中间捕获事件\"></a>中间捕获事件</h3><p>案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233200534.png\"\n                      alt=\"image-20220928233200534\"\n                ></p>\n<p>在这个案例中我们需要部署流程，启动流程，然后<code>用户任务1</code>审批后，我们发布相关的信号，然后会进入到<code>用户任务2</code>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;事件-信号中间捕获事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;flow/24-事件-信号事件-中间捕获事件.bpmn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_002gvxw:1:cfcc56ac-3f42-11ed-a689-c03c59ad2248&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     runtimeService.signalEventReceived(<span class=\"string\">&quot;signal02&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928233556274.png\"\n                      alt=\"image-20220928233556274\"\n                ></p>\n<h3 id=\"中间抛出事件\"><a href=\"#中间抛出事件\" class=\"headerlink\" title=\"中间抛出事件\"></a>中间抛出事件</h3><p>信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928234118517.png\"\n                      alt=\"image-20220928234118517\"\n                ></p>\n<p>正常的部署流程，然后做流程的审批，注意<code>用户任务4</code>需要先审批，然后处于信号捕获的状态，然后我们<code>用户任务2</code>的审批，抛出信号事件，那么对应的捕获事件才能触发，这儿有先后顺序。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235157519.png\"\n                      alt=\"image-20220928235157519\"\n                ></p>\n<h3 id=\"边界事件-2\"><a href=\"#边界事件-2\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>最后来看看信号边界事件，案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235443496.png\"\n                      alt=\"image-20220928235443496\"\n                ></p>\n<p>部署启动流程，如果<code>用户任务1</code>审批了，就会进入到<code>用户任务2</code>审批，如果<code>用户任务1</code>还没审批，然后发送的相关的信号，会被信号边界事件捕获，从而进入到<code>用户任务3</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalRecevied</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;signal04&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220928235841363.png\"\n                      alt=\"image-20220928235841363\"\n                ></p>\n<h2 id=\"结束事件\"><a href=\"#结束事件\" class=\"headerlink\" title=\"结束事件\"></a>结束事件</h2><h3 id=\"错误结束事件\"><a href=\"#错误结束事件\" class=\"headerlink\" title=\"错误结束事件\"></a>错误结束事件</h3><p>当流程执行到达<strong>错误结束事件（error end event）</strong>时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002020963.png\"\n                      alt=\"image-20220929002020963\"\n                ></p>\n<p>部署流程，然后启动流程，<code>用户任务1</code>审批</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002528362.png\"\n                      alt=\"image-20220929002528362\"\n                ></p>\n<p>设置流程变量<code>flag==1</code>然后会走<code>错误结束事件</code>。会触发对应的边界事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929002622297.png\"\n                      alt=\"image-20220929002622297\"\n                ></p>\n<h3 id=\"中断结束事件\"><a href=\"#中断结束事件\" class=\"headerlink\" title=\"中断结束事件\"></a>中断结束事件</h3><p>中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：</p>\n<h4 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h4><p>介绍没有子流程的情况下终止流程的场景：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929003541120.png\"\n                      alt=\"image-20220929003541120\"\n                ></p>\n<h4 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h4><p>案例二我们来看看有子流程的场景下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929004654376.png\"\n                      alt=\"image-20220929004654376\"\n                ></p>\n<h3 id=\"取消结束事件\"><a href=\"#取消结束事件\" class=\"headerlink\" title=\"取消结束事件\"></a>取消结束事件</h3><p>取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。</p>\n<p>具体通过案例来讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010451477.png\"\n                      alt=\"image-20220929010451477\"\n                ></p>\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929010913632.png\"\n                      alt=\"image-20220929010913632\"\n                ></p>\n<h3 id=\"补偿事件\"><a href=\"#补偿事件\" class=\"headerlink\" title=\"补偿事件\"></a>补偿事件</h3><p>通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012202047.png\"\n                      alt=\"image-20220929012202047\"\n                ></p>\n<p>案例效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220929012149315.png\"\n                      alt=\"image-20220929012149315\"\n                ></p>\n<h1 id=\"多人会签\"><a href=\"#多人会签\" class=\"headerlink\" title=\"多人会签\"></a>多人会签</h1><p>Multiple Instance</p>\n<h2 id=\"会签说明\"><a href=\"#会签说明\" class=\"headerlink\" title=\"会签说明\"></a>会签说明</h2><p>多实例活动是为业务流程中的某个步骤定义重复的一种方式。在编程概念中，多实例与 <code>for each</code> 结构相匹配：它允许对给定集合中的每个项目按顺序或并行地执行某个步骤或甚至一个完整的子流程。</p>\n<p>多实例是一个有额外属性（所谓的 “多实例特性”）的常规活动，它将导致该活动在运行时被多次执行。以下活动可以成为多实例活动。</p>\n<ul>\n<li>Service Task 服务任务</li>\n<li>Send Task 发送任务</li>\n<li>User Task 用户任务</li>\n<li>Business Rule Task 业务规则任务</li>\n<li>Script Task 脚本任务</li>\n<li>Receive Task 接收任务</li>\n<li>Manual Task 手动任务</li>\n<li>(Embedded) Sub-Process （嵌入）子流程</li>\n<li>Call Activity 发起活动</li>\n<li>Transaction Subprocess 事务子流程</li>\n</ul>\n<p>网关或事件不能成为多实例。</p>\n<p>如果一个活动是多实例的，这将由活动底部的三条短线表示。三条垂直线表示实例将以<strong>并行</strong>方式执行，而三条水平线表示<strong>顺序</strong>执行。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221001234837327.png\"\n                      alt=\"image-20221001234837327\"\n                ></p>\n<p>按照规范的要求，每个实例所创建的执行的每个父执行将有以下变量：</p>\n<ul>\n<li><strong>nrOfInstances</strong>: 实例的总数量</li>\n<li><strong>nrOfActiveInstances</strong>: 当前活动的，即尚未完成的实例的数量。对于一个连续的多实例，这将永远是1。</li>\n<li><strong>nrOfCompletedInstances</strong>: 已经完成的实例的数量。</li>\n</ul>\n<p>这些值可以通过调用 “execution.getVariable(x) “方法检索。</p>\n<p>此外，每个创建的执行将有一个执行本地变量（即对其他执行不可见，也不存储在流程实例级别）。</p>\n<ul>\n<li><strong>loopCounter</strong>: 表示该特定实例的<code>for each</code>循环中的索引</li>\n</ul>\n<p>为了使一个活动成为多实例，活动xml元素必须有一个<code>multiInstanceLoopCharacteristics</code>子元素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">multiInstanceLoopCharacteristics</span> <span class=\"attr\">isSequential</span>=<span class=\"string\">&quot;false|true&quot;</span>&gt;</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">multiInstanceLoopCharacteristics</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isSequential</code>属性表示该活动的实例是按顺序执行还是并行执行。</p>\n<h2 id=\"并行会签\"><a href=\"#并行会签\" class=\"headerlink\" title=\"并行会签\"></a>并行会签</h2><h3 id=\"绘制流程图-1\"><a href=\"#绘制流程图-1\" class=\"headerlink\" title=\"绘制流程图\"></a>绘制流程图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000056981.png\"\n                      alt=\"image-20221002000056981\"\n                ></p>\n<blockquote>\n<p>loop cardinality：循环基数。可选项。可以直接填整数，表示会签的人数。<br>Collection：集合。可选项。会签人数的集合，通常为list，和loop cardinality二选一。<br>Element variable：元素变量。选择Collection时必选，为collection集合每次遍历的元素。<br>Completion condition：完成条件。可选。比如设置一个人完成后会签结束，那么其他人的代办任务都会消失。</p>\n</blockquote>\n<p>在用户任务节点绑定了一个监听器，监听<code>create</code>行为，该监听器我们是通过UEL表达式来实现的，<code>mulitiInstanceTaskListener</code>是我们注入到Spring容器中的对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000233782.png\"\n                      alt=\"image-20221002000233782\"\n                ></p>\n<p>监听器的内容为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceTaskListener&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeListener</span><span class=\"params\">(DelegateExecution execution)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务：&quot;</span>+execution.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;persons:&quot;</span> + execution.getVariable(<span class=\"string\">&quot;persons&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person&quot;</span> + execution.getVariable(<span class=\"string\">&quot;person&quot;</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后对应的<code>Completion condition</code>我们可以在Java代码中处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceCompleteTask&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceCompleteTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务是需要触发的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> execution</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     *     false 表示会签任务还没有结束</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">     *     true 表示会签任务结束了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">completeTask</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot;当前获取的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfActiveInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot; - &quot;</span> + <span class=\"string\">&quot;已经完成的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfCompletedInstances&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//有一个人同意就通过</span></span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (Boolean) execution.getVariable(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前意见：&quot;</span>+flag);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的三个变量是Flowable中自带的可用变量</p>\n<ol>\n<li><p>nrOfInstances:该会签环节中总共有多少个实例</p>\n</li>\n<li><p>nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。</p>\n</li>\n<li><p>nrOfCompletedInstances:已经完成的实例的数量</p>\n</li>\n</ol>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>普通的部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;多实例&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/diagram_1.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(“张三”,”李四”,”王五”,”赵六”)，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动后我们就可以在数据库中看到产生了3个Task</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000640899.png\"\n                      alt=\"image-20221002000640899\"\n                ></p>\n<h3 id=\"处理任务\"><a href=\"#处理任务\" class=\"headerlink\" title=\"处理任务\"></a>处理任务</h3><p>启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;71337501-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000853424.png\"\n                      alt=\"image-20221002000853424\"\n                ></p>\n<p>同时Task表中的记录还有两条</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002000931060.png\"\n                      alt=\"image-20221002000931060\"\n                ></p>\n<p>然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">true</span>); <span class=\"comment\">// 设置为true 结束多人会签</span></span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;713570d4-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时任务节点就结束了~</p>\n<h2 id=\"串行会签\"><a href=\"#串行会签\" class=\"headerlink\" title=\"串行会签\"></a>串行会签</h2><p>串行会签指的是在多实例中，处理人按照对应的顺序来一个个的处理任务。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221002001501320.png\"\n                      alt=\"image-20221002001501320\"\n                ></p>\n<p>上面定义的是一个<code>串行会签</code>的流程图。循环3次，集合数据在<code>persons</code>中，每次循环的数据存储在循环变量<code>person</code>中，同时<code>person</code>也是对应的处理人的流程变量。</p>\n<h3 id=\"部署和启动流程-1\"><a href=\"#部署和启动流程-1\" class=\"headerlink\" title=\"部署和启动流程\"></a>部署和启动流程</h3><p>部署就是正常的部署了，不再赘述，启动流程的时候我们需要对集合做赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据 串行会按照集合的循序来处理</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_0ltwc4j:1:bd87ed49-41a3-11ed-9ec4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后会创建一个Task，处理人是<code>张三</code>。然后处理完成后会创建下一个task，处理人是<code>李四</code>按循序来处理了。</p>\n<h1 id=\"任务回退\"><a href=\"#任务回退\" class=\"headerlink\" title=\"任务回退\"></a>任务回退</h1><p>任务回退驳回撤销相关的操作在实际的开发中还是会经常遇到的，我们来看看Camunda中针对这些情况是如何处理的。</p>\n<h2 id=\"串行的回退\"><a href=\"#串行的回退\" class=\"headerlink\" title=\"串行的回退\"></a>串行的回退</h2><p>我们先从最简单的串行流程来分析，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155134800.png\"\n                      alt=\"image-20221005155134800\"\n                ></p>\n<p>上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是<code>user1</code>,<code>user2</code>,<code>user3</code>,<code>user4</code>.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;回退&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/串行回退.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过流程定义Id 启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1up6ocm:1:d924ab29-43f9-11ed-b4f1-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processId);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;45bf40bf-43fa-11ed-8abe-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221004233745178.png\"\n                      alt=\"image-20221004233745178\"\n                ></p>\n<p>然后我们来完成回退到<code>user3</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务回退</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cb7b11bf-4486-11ed-bbb6-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_17ubvwq&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                   <span class=\"comment\">// .cancelActivityInstance(processInstanceId) // 整个任务会取消</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0jyi1pp&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">    <span class=\"comment\">/*String processDefinitionId = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    runtimeService.createModification(&quot;&quot;);*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155543672.png\"\n                      alt=\"image-20221005155543672\"\n                ></p>\n<p>然后在历史表中可以看到对应的走向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155709087.png\"\n                      alt=\"image-20221005155709087\"\n                ></p>\n<p>具体过程为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005155909565.png\"\n                      alt=\"image-20221005155909565\"\n                ></p>\n<p>然后我们可以从<code>user3</code>回退到<code>user1</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160133670.png\"\n                      alt=\"image-20221005160133670\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005160200316.png\"\n                      alt=\"image-20221005160200316\"\n                ></p>\n<p>要取消当前的任务直接调用<code>cancelActivityInstance(processInstanceId)</code>方法即可。</p>\n<p>相关方法说明：</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>在活动前启动</td>\n<td>回退到这个节点</td>\n</tr>\n<tr>\n<td></td>\n<td>startBeforeActivity(String activityId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startBeforeActivity(String activityId, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>在活动后启动</td>\n<td>通过 <code>startAfterActivity</code> 在一个活动之后运行，意味着将从活动的下一节点开始执行</td>\n</tr>\n<tr>\n<td></td>\n<td>startAfterActivity(String activityId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startAfterActivity(String activityId, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>启动一个过渡</td>\n<td>通过 <code>startTransition</code> 启动一个过渡，就意味着在一个给定的序列流上开始执行。当有多个流出的序列流时，这可以与 <code>startAfterActivity</code> 一起使用。如果成功，该指令从序列流开始执行流程模型，直到达到等待状态。</td>\n</tr>\n<tr>\n<td></td>\n<td>startTransition(String transitionId)</td>\n</tr>\n<tr>\n<td></td>\n<td>startTransition(String transition, String ancestorActivityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个活动实例</td>\n<td>通过<code>cancelActivityInstance</code>取消一个特定的活动实例。既可以是一个活动实例，如用户任务的实例，也可以是层次结构中更高范围的实例，如子流程的实例</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelActivityInstance(String activityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个过渡实例</td>\n<td>过渡实例表示即将以异步延续的形式进入&#x2F;离开一个活动的执行流。一个已经创建但尚未执行的异步延续Job被表示为一个过渡实例。这些实例可以通过<code>cancelTransitionInstance</code>来取消</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelTransitionInstance(String activityInstanceId)</td>\n</tr>\n<tr>\n<td>取消一个活动的所有活动实例</td>\n<td>通过指令 <code>cancelAllForActivity</code> 来取消一个特定活动的所有活动和过渡实例。</td>\n</tr>\n<tr>\n<td></td>\n<td>cancelAllForActivity(String activityId)</td>\n</tr>\n</tbody></table>\n<h2 id=\"并行的回退\"><a href=\"#并行的回退\" class=\"headerlink\" title=\"并行的回退\"></a>并行的回退</h2><p>接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193633031.png\"\n                      alt=\"image-20221005193633031\"\n                ></p>\n<p>部署后，启动流程实例。运行到如下的节点，然后回退到<code>用户审批1</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005193931957.png\"\n                      alt=\"image-20221005193931957\"\n                ></p>\n<p>然后我们来做回退操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a1d40268-44a2-11ed-9b63-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_0n0ddnj&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                   <span class=\"comment\">// .cancelActivityInstance(processInstanceId) // 整个任务会取消</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_184rpuo&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_08w6j91&quot;</span>)</span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">    <span class=\"comment\">/*String processDefinitionId = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    runtimeService.createModification(&quot;&quot;);*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面我们根据流程<code>实例回退</code>同时需要取消掉之前的两个节点。在历史表中也可以看到这个流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194635852.png\"\n                      alt=\"image-20221005194635852\"\n                ></p>\n<p>在上面例子的基础上我们来实现如下的流程回退操作。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194807783.png\"\n                      alt=\"image-20221005194807783\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005194904013.png\"\n                      alt=\"image-20221005194904013\"\n                ></p>\n<p>具体的回退代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a1d40268-44a2-11ed-9b63-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_184rpuo&quot;</span>) <span class=\"comment\">// 回退到对应的节点前  通过 节点的key 来实现</span></span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_08w6j91&quot;</span>)</span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0ma3n4p&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后查看历史任务同样可以看到具体的实现</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005195142559.png\"\n                      alt=\"image-20221005195142559\"\n                ></p>\n<h2 id=\"排他网关回退\"><a href=\"#排他网关回退\" class=\"headerlink\" title=\"排他网关回退\"></a>排他网关回退</h2><p>然后我们来看看在有排他网关的情况下，如果我们要调整流程的走向应该要怎么来处理。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200528761.png\"\n                      alt=\"image-20221005200528761\"\n                ></p>\n<p>也就是实际的场景中可能先走到了<code>用户2</code>审批，后面发现不合理，就需要回退到<code>用户1</code>后面然后再调整流程变量，流转到<code>用户3</code>处。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005200901486.png\"\n                      alt=\"image-20221005200901486\"\n                ></p>\n<p>然后我们来看看具体的回退操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;6a70a33b-44a6-11ed-8557-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Gateway_0ah4coh&quot;</span>) <span class=\"comment\">// 回退到排他网关之前</span></span><br><span class=\"line\">                    .setVariable(<span class=\"string\">&quot;num&quot;</span>,-<span class=\"number\">1</span>) <span class=\"comment\">// 设置流程变量</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_0x9stxl&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>回退到<code>排他网关</code>节点，然后设置流程变量<code>num=-1</code>然后会走<code>用户3</code>的审批。同时取消原来节点的审批</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005201429581.png\"\n                      alt=\"image-20221005201429581\"\n                ></p>\n<p>然后我们来看看有子流程的场景下的回退处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005204950474.png\"\n                      alt=\"image-20221005204950474\"\n                ></p>\n<p>我们来看看从子流程回退到主流程的操作。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205324729.png\"\n                      alt=\"image-20221005205324729\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processInstanceId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a3311551-44ac-11ed-97c0-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.createProcessInstanceModification(processInstanceId)</span><br><span class=\"line\">                    .startBeforeActivity(<span class=\"string\">&quot;Activity_00kwccq&quot;</span>) <span class=\"comment\">// 回退到排他网关之前</span></span><br><span class=\"line\">                    .cancelAllForActivity(<span class=\"string\">&quot;Activity_01835pn&quot;</span>) <span class=\"comment\">// 取消原来的节点</span></span><br><span class=\"line\">                    .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在历史表中查看记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005205659817.png\"\n                      alt=\"image-20221005205659817\"\n                ></p>\n<h2 id=\"重启-x2F-恢复实例\"><a href=\"#重启-x2F-恢复实例\" class=\"headerlink\" title=\"重启&#x2F;恢复实例\"></a>重启&#x2F;恢复实例</h2><p>在流程实例终止后，其历史数据仍然存在，并且可以被访问以重启流程实例，前提是历史级别被设置为FULL。 例如，当流程没有以期望的方式终止时，重启流程实例是有用的。这个API的使用的其他可能情况有：</p>\n<ul>\n<li>恢复被错误地取消的流程实例的到最后状态</li>\n<li>由于错误路由导致流程实例终止后，重启流程实例</li>\n</ul>\n<p>为了执行这样的操作，流程引擎提供了 <em>流程实例重启API</em> <code>RuntimeService.restartProcessInstances(..)</code> 。该API允许通过使用流式构建器在一次调用中指定多个实例化指令。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005210910364.png\"\n                      alt=\"image-20221005210910364\"\n                ></p>\n<p>部署启动流程实例后进入并行网关。然后流程实例被中断了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteProcessId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cfd58b31-44ae-11ed-92f5-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    runtimeService.deleteProcessInstance(processId,<span class=\"string\">&quot;测试删除&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221005211329315.png\"\n                      alt=\"image-20221005211329315\"\n                ></p>\n<p>之后，我们决定恢复该流程实例到最后状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recoveryProcessInstancess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    runtimeService</span><br><span class=\"line\">            .restartProcessInstances(<span class=\"string\">&quot;Process_08wyw1g:1:ad8f483f-44ae-11ed-aee8-c03c59ad2248&quot;</span>) <span class=\"comment\">// 流程定义ID</span></span><br><span class=\"line\">            .startBeforeActivity(<span class=\"string\">&quot;Activity_03vnv63&quot;</span>)</span><br><span class=\"line\">            .startBeforeActivity(<span class=\"string\">&quot;Activity_0b7mtmx&quot;</span>)</span><br><span class=\"line\">            .processInstanceIds(<span class=\"string\">&quot;cfd58b31-44ae-11ed-92f5-c03c59ad2248&quot;</span>) <span class=\"comment\">// 流程实例ID</span></span><br><span class=\"line\">            .execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流程实例已经用最后一组变量重启了。然而，在重启的流程实例中，只有全局变量被恢复了。 本地变量还需要调用 <code>RuntimeService.setVariableLocal(..)</code> 手动设置。</p>\n<blockquote>\n<p>从技术上讲，创建的是一个新的流程实例。</p>\n<p><strong>请注意:</strong> 历史流程和重启的流程实例的id是不同的。</p>\n</blockquote>\n<h1 id=\"动态表单\"><a href=\"#动态表单\" class=\"headerlink\" title=\"动态表单\"></a>动态表单</h1><p>接下来我们看看动态表单的应用，在Camunda中表单分为内置表单和动态表单。</p>\n<h2 id=\"内置表单\"><a href=\"#内置表单\" class=\"headerlink\" title=\"内置表单\"></a>内置表单</h2><p>内置表单就是在绘制流程图的时候同时绘制表单。这种方式其实就是绑定了对应的流程变量，不是太灵活。但还是来讲解下。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160336988.png\"\n                      alt=\"image-20221014160336988\"\n                ></p>\n<h3 id=\"启动流程绑定\"><a href=\"#启动流程绑定\" class=\"headerlink\" title=\"启动流程绑定\"></a>启动流程绑定</h3><p>我们先来看下在启动流程的时候就设置相关的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160501005.png\"\n                      alt=\"image-20221014160501005\"\n                ></p>\n<p>对应的流程图</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bpmn:definitions</span> <span class=\"attr\">xmlns:bpmn</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:dc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:camunda</span>=<span class=\"string\">&quot;http://camunda.org/schema/1.0/bpmn&quot;</span> <span class=\"attr\">xmlns:di</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://camunda.org/schema/modeler/1.0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Definitions_1pnd5o3&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://bpmn.io/schema/bpmn&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Camunda Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;4.12.0&quot;</span> <span class=\"attr\">modeler:executionPlatform</span>=<span class=\"string\">&quot;Camunda Platform&quot;</span> <span class=\"attr\">modeler:executionPlatformVersion</span>=<span class=\"string\">&quot;7.15.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmn:process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Process_13abncz&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">camunda:formData</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">camunda:formField</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;days&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;请假天数&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;long&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">camunda:formField</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;reason&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;请假原因&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;string&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">camunda:formData</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmn:extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_09xirvq<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_09xirvq&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1i0viip&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_1asp8i3<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1asp8i3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务1&quot;</span> <span class=\"attr\">camunda:assignee</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_09xirvq<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_1i0viip<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmn:userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务2&quot;</span> <span class=\"attr\">camunda:assignee</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:incoming</span>&gt;</span>Flow_1i0viip<span class=\"tag\">&lt;/<span class=\"name\">bpmn:incoming</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmn:outgoing</span>&gt;</span>Flow_1asp8i3<span class=\"tag\">&lt;/<span class=\"name\">bpmn:outgoing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmn:userTask</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmn:process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_1&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Process_13abncz&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_09xirvq_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_09xirvq&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;188&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1i0viip_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_1i0viip&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;340&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Flow_1asp8i3_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Flow_1asp8i3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">di:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;117&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;_BPMNShape_StartEvent_2&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;StartEvent_1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;152&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;36&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;36&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Event_1mj58zz_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Event_1mj58zz&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;99&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;36&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;36&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_09e81f3_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Activity_0a81mdi&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;77&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Activity_0ot1277_di&quot;</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;Activity_01qg6se&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dc:Bounds</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;77&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bpmn:definitions</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的xml中就配置了表单的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014160601636.png\"\n                      alt=\"image-20221014160601636\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;表单01&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/表单-01.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署完流程后我们可以通过对应的API查看流程对应的表单信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getStartFromData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据流程定义找到对应的 表单数据。</span></span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> formService</span><br><span class=\"line\">        .getStartFormData(processDefId);</span><br><span class=\"line\">    <span class=\"comment\">// 找到对应的表单域的集合</span></span><br><span class=\"line\">    List&lt;FormField&gt; formFields = startFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014161737726.png\"\n                      alt=\"image-20221014161737726\"\n                ></p>\n<p>启动流程：两种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;想休息下&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 正常启动的时候可以通过流程变量来给表单设置数据，也可以不设置</span></span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(processDefId,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过FormService来启动一个表单流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormServiceFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> formService.submitStartForm(processDefId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动流程后走到了<code>用户任务1</code>这个节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162003762.png\"\n                      alt=\"image-20221014162003762\"\n                ></p>\n<p>想要查看对应的表单数据。通过如下方法可以实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据Task编号来查看表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;426b11e6-4b85-11ed-b15a-c03c59ad2248&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_13abncz:1:5d39867a-4b6e-11ed-9748-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据流程定义找到对应的 表单数据。</span></span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> formService.getStartFormData(processDefId);</span><br><span class=\"line\">    List&lt;FormField&gt; formFields = startFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">        <span class=\"comment\">// 根据taskId 找到对应的流程变量的值 也就是 表单的数据</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; = &quot;</span> + taskService.getVariable(taskId, formField.getId()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162117179.png\"\n                      alt=\"image-20221014162117179\"\n                ></p>\n<h3 id=\"任务节点绑定\"><a href=\"#任务节点绑定\" class=\"headerlink\" title=\"任务节点绑定\"></a>任务节点绑定</h3><p>上的方式绑定的表单数据在整个流程实例运作中都可以使用，还有一种方式我们是在具体的任务节点上绑定表单数据。我们来看看。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162658765.png\"\n                      alt=\"image-20221014162658765\"\n                ></p>\n<p>流程图中是在 <code>用户任务01</code> 这个节点绑定的表单数据了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014162905992.png\"\n                      alt=\"image-20221014162905992\"\n                ></p>\n<p>部署流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成流程的部署操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;表单01&quot;</span>)</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;flow/表单-02.bpmn&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动一个流程实例：普通流程启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processDefId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Process_1xf3zgp:1:11da0157-4b9a-11ed-8750-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(processDefId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后现在流程执行到了<code>用户任务01</code>出。我们绑定的有流程表单。我们可以查询看看。先来查询Task对应的表单信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165547832.png\"\n                      alt=\"image-20221014165547832\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bff75f55-4b9a-11ed-9709-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">TaskFormData</span> <span class=\"variable\">taskFormData</span> <span class=\"operator\">=</span> formService.getTaskFormData(taskId);</span><br><span class=\"line\">    List&lt;FormField&gt; formFields = taskFormData.getFormFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormField formField : formFields) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个具体的表单域</span></span><br><span class=\"line\">        System.out.println(formField.getId() + <span class=\"string\">&quot; &quot;</span> + formField.getLabel() + <span class=\"string\">&quot; &quot;</span> + formField.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014163939776.png\"\n                      alt=\"image-20221014163939776\"\n                ></p>\n<p>然后可以给表单的相关信息赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;bff75f55-4b9a-11ed-9709-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    taskService.setVariable(taskId,<span class=\"string\">&quot;days1&quot;</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    taskService.setVariable(taskId,<span class=\"string\">&quot;reason1&quot;</span>,<span class=\"string\">&quot;个人原因&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以看到表单的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165040994.png\"\n                      alt=\"image-20221014165040994\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165131403.png\"\n                      alt=\"image-20221014165131403\"\n                ></p>\n<p>审批完成到下一个节点</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165620888.png\"\n                      alt=\"image-20221014165620888\"\n                ></p>\n<p>这时我们再查询下看能不能找到对应的表单信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221014165737958.png\"\n                      alt=\"image-20221014165737958\"\n                ></p>\n<p>好了这个是我们讲的直接在流程中内嵌表单的应用</p>\n<h2 id=\"外置表单\"><a href=\"#外置表单\" class=\"headerlink\" title=\"外置表单\"></a>外置表单</h2><p>我们还可以自己定义一个 HTML+JS 的动态表单，然后在审批相关节点的时候渲染展示。</p>\n<h3 id=\"定义一个表单\"><a href=\"#定义一个表单\" class=\"headerlink\" title=\"定义一个表单\"></a>定义一个表单</h3><p>我们先定义一个简单的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134123018.png\"\n                      alt=\"image-20221015134123018\"\n                ></p>\n<h3 id=\"流程绑定\"><a href=\"#流程绑定\" class=\"headerlink\" title=\"流程绑定\"></a>流程绑定</h3><p>然后在流程设计的时候绑定对应的表单</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134202377.png\"\n                      alt=\"image-20221015134202377\"\n                ></p>\n<p>部署流程后启动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134234163.png\"\n                      alt=\"image-20221015134234163\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20221015134256088.png\"\n                      alt=\"image-20221015134256088\"\n                ></p>\n<p>在跳转后的地址中有taskId和回调的接口地址</p>\n"},{"title":"camunda高级篇","date":"2022-10-20T08:38:55.000Z","_content":"# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# IDEA引入流程设计器\n\n在工作流引擎中流程设计器是一个非常重要的组件，而`InterlliJ IDEA`是Java程序员用到的最多的编程工具了。前面在基础篇的介绍中我们都在通过Camunda提供的流程设计器绘制好流程图，然后需要单独的拷贝到项目中，要是调整修改不是很方便，这时我们可以在IDEA中和流程设计器绑定起来。这样会更加的灵活。\n\n## 下载Camunda Model\n\n第一步肯定是需要下载`Camunda Model` 这个流程设计器，我们前面有介绍。就是之前解压好的目录了。\n\n![image-20220907002253021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002253021.png)\n\n\n\n## IDEA中配置\n\n我们先进入`settings`中然后找到`tools`,继续找到`External Tool`.\n\n![image-20220907002432482](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002432482.png)\n\n![image-20220907002649744](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002649744.png)\n\n最终效果\n\n![image-20220907002735603](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002735603.png)\n\n\n\n## 编辑bpmn文件\n\n找到您想打开的bpmn文件, 点击右键, 找到External Tools 运行camunda modler即可进行文件编写.\n\n![image-20220907002851738](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002851738.png)\n\n搞定~\n\n\n\n# SpringBoot整合Camunda\n\n## 官方案例说明\n\n接下来我们看看怎么在我们的实际项目中来使用Camunda了。方式有多种，首先我们可以参考官网提供的整合案例。\n\n![image-20220907003810268](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003810268.png)\n\n但是这里有个比较头疼的问题就是Camunda和SpringBoot版本的兼容性问题，虽然官方也给出了兼容版本的对照表。\n\n![image-20220907003929928](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003929928.png)\n\n\n\n但是如果不小心还是会出现各种问题，比如：\n\n![image-20220907004050862](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004050862.png)\n\n上面就是典型的版本不兼容的问题了。\n\n\n\n## 官方Demo\n\n为了能让我们的案例快速搞定，我们可以通过Camunda官方提供的网站来创建我们的案例程序。地址：https://start.camunda.com/\n\n![image-20220907004531764](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004531764.png)\n\n生成代码后，解压后我们通过idea打开项目，项目结构\n\n![image-20220907010229047](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010229047.png)\n\n相关的pom.xml中的依赖\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.boge.workflow</groupId>\n  <artifactId>camunda-project-demo</artifactId>\n  <version>1.0.0-SNAPSHOT</version>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-dependencies</artifactId>\n        <version>2.4.3</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.camunda.bpm</groupId>\n        <artifactId>camunda-bom</artifactId>\n        <version>7.15.0</version>\n        <scope>import</scope>\n        <type>pom</type>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n      <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.bpm</groupId>\n      <artifactId>camunda-engine-plugin-spin</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.spin</groupId>\n      <artifactId>camunda-spin-dataformat-all</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <version>2.4.3</version>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n```\n\n属性文件的配置信息\n\n```yaml\nspring.datasource.url: jdbc:h2:file:./camunda-h2-database\n\ncamunda.bpm.admin-user:\n  id: demo\n  password: demo\n```\n\n然后通过启动类启动程序\n\n![image-20220907010434493](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010434493.png)\n\n访问服务：http://localhost:8080/\n\n![image-20220907010523901](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010523901.png)\n\n\n\n\n\n## MySQL数据库\n\n上面的例子我们数据存储在了H2这个内存型数据库，我们可以切换到`MySQL`数据库。首先我们需要导入相关的SQL脚本。位置就在我们之前下载的`Camunda Web`服务中。\n\n![image-20220907010729453](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010729453.png)\n\n执行创建所有必需的表和默认索引的SQL DDL脚本。上面两个脚本都要执行。\n\n![image-20220907011030798](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011030798.png)\n\n生成的相关表结构比较多，因为本身就是基于Activiti演变而来，所以有Activiti基础的小伙伴会非常轻松了。简单介绍下相关表结构的作用。\n\n* **ACT_RE** ：'RE'表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。\n* **ACT_RU**：'RU'表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。\n* **ACT_HI**：'HI'表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。\n* **ACT_GE**： GE 表示 general。 通用数据， 用于不同场景下 \n* **ACT_ID:**   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。\n\n具体的表结构的含义:\n\n| **表分类**   | **表名**              | **解释**                                           |\n| ------------ | --------------------- | -------------------------------------------------- |\n| 一般数据     |                       |                                                    |\n|              | [ACT_GE_BYTEARRAY]    | 通用的流程定义和流程资源                           |\n|              | [ACT_GE_PROPERTY]     | 系统相关属性                                       |\n| 流程历史记录 |                       |                                                    |\n|              | [ACT_HI_ACTINST]      | 历史的流程实例                                     |\n|              | [ACT_HI_ATTACHMENT]   | 历史的流程附件                                     |\n|              | [ACT_HI_COMMENT]      | 历史的说明性信息                                   |\n|              | [ACT_HI_DETAIL]       | 历史的流程运行中的细节信息                         |\n|              | [ACT_HI_IDENTITYLINK] | 历史的流程运行过程中用户关系                       |\n|              | [ACT_HI_PROCINST]     | 历史的流程实例                                     |\n|              | [ACT_HI_TASKINST]     | 历史的任务实例                                     |\n|              | [ACT_HI_VARINST]      | 历史的流程运行中的变量信息                         |\n| 流程定义表   |                       |                                                    |\n|              | [ACT_RE_DEPLOYMENT]   | 部署单元信息                                       |\n|              | [ACT_RE_MODEL]        | 模型信息                                           |\n|              | [ACT_RE_PROCDEF]      | 已部署的流程定义                                   |\n| 运行实例表   |                       |                                                    |\n|              | [ACT_RU_EVENT_SUBSCR] | 运行时事件                                         |\n|              | [ACT_RU_EXECUTION]    | 运行时流程执行实例                                 |\n|              | [ACT_RU_IDENTITYLINK] | 运行时用户关系信息，存储任务节点与参与者的相关信息 |\n|              | [ACT_RU_JOB]          | 运行时作业                                         |\n|              | [ACT_RU_TASK]         | 运行时任务                                         |\n|              | [ACT_RU_VARIABLE]     | 运行时变量表                                       |\n| 用户用户组表 |                       |                                                    |\n|              | [ACT_ID_BYTEARRAY]    | 二进制数据表                                       |\n|              | [ACT_ID_GROUP]        | 用户组信息表                                       |\n|              | [ACT_ID_INFO]         | 用户信息详情表                                     |\n|              | [ACT_ID_MEMBERSHIP]   | 人与组关系表                                       |\n|              | [ACT_ID_PRIV]         | 权限表                                             |\n|              | [ACT_ID_PRIV_MAPPING] | 用户或组权限关系表                                 |\n|              | [ACT_ID_PROPERTY]     | 属性表                                             |\n|              | [ACT_ID_TOKEN]        | 记录用户的token信息                                |\n|              | [ACT_ID_USER]         | 用户表                                             |\n\n \n\n然后我们在SpringBoot项目中导入`MySql`的依赖，然后修改对应的配置信息\n\n```xml\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n```\n\n修改`application.yaml`。添加数据源的相关信息。\n\n```yaml\n# spring.datasource.url: jdbc:h2:file:./camunda-h2-database\n\ncamunda.bpm.admin-user:\n  id: demo\n  password: demo\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/camunda1?serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\ncamunda:\n  bpm:\n    database:\n      type: mysql\n      schema-update: true\n    auto-deployment-enabled: false # 自动部署 resources 下的 bpmn文件\n```\n\n然后启动项目，发现数据库中有了相关记录，说明操作成功\n\n![image-20220907011831014](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011831014.png)\n\n\n\n\n\n# Camunda专题讲解\n\n用了整合的基础我们就可以来完成一个流程审批的案例了\n\n## 部署流程\n\n```java\n@RestController\n@RequestMapping(\"/flow\")\npublic class FlowController {\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n    @GetMapping(\"/deploy\")\n    public String deplopy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"部署的第一个流程\") // 定义部署文件的名称\n                .addClasspathResource(\"process.bpmn\") // 绑定需要部署的流程文件\n                .deploy();// 部署流程\n        return deploy.getId() + \":\" + deploy.getName();\n    }\n}\n```\n\n启动后访问接口即可\n\n## 启动流程\n\n启动流程我们通过单元测试来操作\n\n```java\npackage com.boge.workflow;\n\n\nimport org.camunda.bpm.engine.RepositoryService;\nimport org.camunda.bpm.engine.RuntimeService;\nimport org.camunda.bpm.engine.TaskService;\nimport org.camunda.bpm.engine.runtime.ProcessInstance;\nimport org.camunda.bpm.engine.task.Task;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\n\n@SpringBootTest(classes = Application.class)\npublic class ApplicationTest {\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n    @Autowired\n    private RuntimeService runtimeService;\n\n    @Autowired\n    private TaskService taskService;\n\n    /**\n     * 启动流程的案例\n     */\n    @Test\n    public void startFlow(){\n        // 部署流程\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"1a880f27-2e57-11ed-80d9-c03c59ad2248\");\n        // 部署的流程实例的相关信息\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n        System.out.println(\"processInstance.getProcessDefinitionId() = \" + processInstance.getProcessDefinitionId());\n    }\n\n\n}\n\n```\n\n\n\n## 查询待办\n\n查询待办也就是查看当前需要审批的任务，通过TaskService来处理\n\n```java\n    /**\n     * 查询任务\n     *    待办\n     *\n     *  流程定义ID:processDefinition : 我们部署流程的时候会，每一个流程都会产生一个流程定义ID\n     *  流程实例ID:processInstance ：我们启动流程实例的时候，会产生一个流程实例ID\n     */\n    @Test\n    public void queryTask(){\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"eff78817-2e58-11ed-aa3f-c03c59ad2248\")\n                .taskAssignee(\"demo1\")\n                .list();\n        if(list != null && list.size() > 0){\n            for (Task task : list) {\n                System.out.println(\"task.getId() = \" + task.getId());\n                System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            }\n        }\n    }\n```\n\n\n\n## 完成任务\n\n```java\n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        // 根据用户找到关联的Task\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"eff78817-2e58-11ed-aa3f-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null ){\n            taskService.complete(task.getId());\n            System.out.println(\"任务审批完成...\");\n        }\n    }\n```\n\n\n\n\n\n\n\n\n\n\n\n好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java/boge3306)\n\n![image-20220904115333970](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png)\n\n","source":"_posts/2022/10/camunda高级篇.md","raw":"---\ntitle: camunda高级篇\ndate: 2022-10-20 16:38:55\ntags: [BPMN,camunda]\ncategories: [笔记]\n---\n# Camunda-热门工作流引擎框架\n> Lecture：波哥\n\n![image-20220902232358815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png)\n\n# IDEA引入流程设计器\n\n在工作流引擎中流程设计器是一个非常重要的组件，而`InterlliJ IDEA`是Java程序员用到的最多的编程工具了。前面在基础篇的介绍中我们都在通过Camunda提供的流程设计器绘制好流程图，然后需要单独的拷贝到项目中，要是调整修改不是很方便，这时我们可以在IDEA中和流程设计器绑定起来。这样会更加的灵活。\n\n## 下载Camunda Model\n\n第一步肯定是需要下载`Camunda Model` 这个流程设计器，我们前面有介绍。就是之前解压好的目录了。\n\n![image-20220907002253021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002253021.png)\n\n\n\n## IDEA中配置\n\n我们先进入`settings`中然后找到`tools`,继续找到`External Tool`.\n\n![image-20220907002432482](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002432482.png)\n\n![image-20220907002649744](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002649744.png)\n\n最终效果\n\n![image-20220907002735603](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002735603.png)\n\n\n\n## 编辑bpmn文件\n\n找到您想打开的bpmn文件, 点击右键, 找到External Tools 运行camunda modler即可进行文件编写.\n\n![image-20220907002851738](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002851738.png)\n\n搞定~\n\n\n\n# SpringBoot整合Camunda\n\n## 官方案例说明\n\n接下来我们看看怎么在我们的实际项目中来使用Camunda了。方式有多种，首先我们可以参考官网提供的整合案例。\n\n![image-20220907003810268](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003810268.png)\n\n但是这里有个比较头疼的问题就是Camunda和SpringBoot版本的兼容性问题，虽然官方也给出了兼容版本的对照表。\n\n![image-20220907003929928](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003929928.png)\n\n\n\n但是如果不小心还是会出现各种问题，比如：\n\n![image-20220907004050862](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004050862.png)\n\n上面就是典型的版本不兼容的问题了。\n\n\n\n## 官方Demo\n\n为了能让我们的案例快速搞定，我们可以通过Camunda官方提供的网站来创建我们的案例程序。地址：https://start.camunda.com/\n\n![image-20220907004531764](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004531764.png)\n\n生成代码后，解压后我们通过idea打开项目，项目结构\n\n![image-20220907010229047](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010229047.png)\n\n相关的pom.xml中的依赖\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.boge.workflow</groupId>\n  <artifactId>camunda-project-demo</artifactId>\n  <version>1.0.0-SNAPSHOT</version>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-dependencies</artifactId>\n        <version>2.4.3</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.camunda.bpm</groupId>\n        <artifactId>camunda-bom</artifactId>\n        <version>7.15.0</version>\n        <scope>import</scope>\n        <type>pom</type>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n      <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.bpm</groupId>\n      <artifactId>camunda-engine-plugin-spin</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.camunda.spin</groupId>\n      <artifactId>camunda-spin-dataformat-all</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <version>2.4.3</version>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n```\n\n属性文件的配置信息\n\n```yaml\nspring.datasource.url: jdbc:h2:file:./camunda-h2-database\n\ncamunda.bpm.admin-user:\n  id: demo\n  password: demo\n```\n\n然后通过启动类启动程序\n\n![image-20220907010434493](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010434493.png)\n\n访问服务：http://localhost:8080/\n\n![image-20220907010523901](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010523901.png)\n\n\n\n\n\n## MySQL数据库\n\n上面的例子我们数据存储在了H2这个内存型数据库，我们可以切换到`MySQL`数据库。首先我们需要导入相关的SQL脚本。位置就在我们之前下载的`Camunda Web`服务中。\n\n![image-20220907010729453](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010729453.png)\n\n执行创建所有必需的表和默认索引的SQL DDL脚本。上面两个脚本都要执行。\n\n![image-20220907011030798](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011030798.png)\n\n生成的相关表结构比较多，因为本身就是基于Activiti演变而来，所以有Activiti基础的小伙伴会非常轻松了。简单介绍下相关表结构的作用。\n\n* **ACT_RE** ：'RE'表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。\n* **ACT_RU**：'RU'表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。\n* **ACT_HI**：'HI'表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。\n* **ACT_GE**： GE 表示 general。 通用数据， 用于不同场景下 \n* **ACT_ID:**   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。\n\n具体的表结构的含义:\n\n| **表分类**   | **表名**              | **解释**                                           |\n| ------------ | --------------------- | -------------------------------------------------- |\n| 一般数据     |                       |                                                    |\n|              | [ACT_GE_BYTEARRAY]    | 通用的流程定义和流程资源                           |\n|              | [ACT_GE_PROPERTY]     | 系统相关属性                                       |\n| 流程历史记录 |                       |                                                    |\n|              | [ACT_HI_ACTINST]      | 历史的流程实例                                     |\n|              | [ACT_HI_ATTACHMENT]   | 历史的流程附件                                     |\n|              | [ACT_HI_COMMENT]      | 历史的说明性信息                                   |\n|              | [ACT_HI_DETAIL]       | 历史的流程运行中的细节信息                         |\n|              | [ACT_HI_IDENTITYLINK] | 历史的流程运行过程中用户关系                       |\n|              | [ACT_HI_PROCINST]     | 历史的流程实例                                     |\n|              | [ACT_HI_TASKINST]     | 历史的任务实例                                     |\n|              | [ACT_HI_VARINST]      | 历史的流程运行中的变量信息                         |\n| 流程定义表   |                       |                                                    |\n|              | [ACT_RE_DEPLOYMENT]   | 部署单元信息                                       |\n|              | [ACT_RE_MODEL]        | 模型信息                                           |\n|              | [ACT_RE_PROCDEF]      | 已部署的流程定义                                   |\n| 运行实例表   |                       |                                                    |\n|              | [ACT_RU_EVENT_SUBSCR] | 运行时事件                                         |\n|              | [ACT_RU_EXECUTION]    | 运行时流程执行实例                                 |\n|              | [ACT_RU_IDENTITYLINK] | 运行时用户关系信息，存储任务节点与参与者的相关信息 |\n|              | [ACT_RU_JOB]          | 运行时作业                                         |\n|              | [ACT_RU_TASK]         | 运行时任务                                         |\n|              | [ACT_RU_VARIABLE]     | 运行时变量表                                       |\n| 用户用户组表 |                       |                                                    |\n|              | [ACT_ID_BYTEARRAY]    | 二进制数据表                                       |\n|              | [ACT_ID_GROUP]        | 用户组信息表                                       |\n|              | [ACT_ID_INFO]         | 用户信息详情表                                     |\n|              | [ACT_ID_MEMBERSHIP]   | 人与组关系表                                       |\n|              | [ACT_ID_PRIV]         | 权限表                                             |\n|              | [ACT_ID_PRIV_MAPPING] | 用户或组权限关系表                                 |\n|              | [ACT_ID_PROPERTY]     | 属性表                                             |\n|              | [ACT_ID_TOKEN]        | 记录用户的token信息                                |\n|              | [ACT_ID_USER]         | 用户表                                             |\n\n \n\n然后我们在SpringBoot项目中导入`MySql`的依赖，然后修改对应的配置信息\n\n```xml\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n```\n\n修改`application.yaml`。添加数据源的相关信息。\n\n```yaml\n# spring.datasource.url: jdbc:h2:file:./camunda-h2-database\n\ncamunda.bpm.admin-user:\n  id: demo\n  password: demo\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/camunda1?serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\ncamunda:\n  bpm:\n    database:\n      type: mysql\n      schema-update: true\n    auto-deployment-enabled: false # 自动部署 resources 下的 bpmn文件\n```\n\n然后启动项目，发现数据库中有了相关记录，说明操作成功\n\n![image-20220907011831014](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011831014.png)\n\n\n\n\n\n# Camunda专题讲解\n\n用了整合的基础我们就可以来完成一个流程审批的案例了\n\n## 部署流程\n\n```java\n@RestController\n@RequestMapping(\"/flow\")\npublic class FlowController {\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n    @GetMapping(\"/deploy\")\n    public String deplopy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .name(\"部署的第一个流程\") // 定义部署文件的名称\n                .addClasspathResource(\"process.bpmn\") // 绑定需要部署的流程文件\n                .deploy();// 部署流程\n        return deploy.getId() + \":\" + deploy.getName();\n    }\n}\n```\n\n启动后访问接口即可\n\n## 启动流程\n\n启动流程我们通过单元测试来操作\n\n```java\npackage com.boge.workflow;\n\n\nimport org.camunda.bpm.engine.RepositoryService;\nimport org.camunda.bpm.engine.RuntimeService;\nimport org.camunda.bpm.engine.TaskService;\nimport org.camunda.bpm.engine.runtime.ProcessInstance;\nimport org.camunda.bpm.engine.task.Task;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\n\n@SpringBootTest(classes = Application.class)\npublic class ApplicationTest {\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n    @Autowired\n    private RuntimeService runtimeService;\n\n    @Autowired\n    private TaskService taskService;\n\n    /**\n     * 启动流程的案例\n     */\n    @Test\n    public void startFlow(){\n        // 部署流程\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"1a880f27-2e57-11ed-80d9-c03c59ad2248\");\n        // 部署的流程实例的相关信息\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n        System.out.println(\"processInstance.getProcessDefinitionId() = \" + processInstance.getProcessDefinitionId());\n    }\n\n\n}\n\n```\n\n\n\n## 查询待办\n\n查询待办也就是查看当前需要审批的任务，通过TaskService来处理\n\n```java\n    /**\n     * 查询任务\n     *    待办\n     *\n     *  流程定义ID:processDefinition : 我们部署流程的时候会，每一个流程都会产生一个流程定义ID\n     *  流程实例ID:processInstance ：我们启动流程实例的时候，会产生一个流程实例ID\n     */\n    @Test\n    public void queryTask(){\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"eff78817-2e58-11ed-aa3f-c03c59ad2248\")\n                .taskAssignee(\"demo1\")\n                .list();\n        if(list != null && list.size() > 0){\n            for (Task task : list) {\n                System.out.println(\"task.getId() = \" + task.getId());\n                System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            }\n        }\n    }\n```\n\n\n\n## 完成任务\n\n```java\n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        // 根据用户找到关联的Task\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"eff78817-2e58-11ed-aa3f-c03c59ad2248\")\n                .taskAssignee(\"demo\")\n                .singleResult();\n        if(task != null ){\n            taskService.complete(task.getId());\n            System.out.println(\"任务审批完成...\");\n        }\n    }\n```\n\n\n\n\n\n\n\n\n\n\n\n好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java/boge3306)\n\n![image-20220904115333970](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png)\n\n","slug":"camunda高级篇","published":1,"updated":"2022-11-05T14:16:59.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersl0007dk8f75x38ipw","content":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"IDEA引入流程设计器\"><a href=\"#IDEA引入流程设计器\" class=\"headerlink\" title=\"IDEA引入流程设计器\"></a>IDEA引入流程设计器</h1><p>在工作流引擎中流程设计器是一个非常重要的组件，而<code>InterlliJ IDEA</code>是Java程序员用到的最多的编程工具了。前面在基础篇的介绍中我们都在通过Camunda提供的流程设计器绘制好流程图，然后需要单独的拷贝到项目中，要是调整修改不是很方便，这时我们可以在IDEA中和流程设计器绑定起来。这样会更加的灵活。</p>\n<h2 id=\"下载Camunda-Model\"><a href=\"#下载Camunda-Model\" class=\"headerlink\" title=\"下载Camunda Model\"></a>下载Camunda Model</h2><p>第一步肯定是需要下载<code>Camunda Model</code> 这个流程设计器，我们前面有介绍。就是之前解压好的目录了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002253021.png\"\n                      alt=\"image-20220907002253021\"\n                ></p>\n<h2 id=\"IDEA中配置\"><a href=\"#IDEA中配置\" class=\"headerlink\" title=\"IDEA中配置\"></a>IDEA中配置</h2><p>我们先进入<code>settings</code>中然后找到<code>tools</code>,继续找到<code>External Tool</code>.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002432482.png\"\n                      alt=\"image-20220907002432482\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002649744.png\"\n                      alt=\"image-20220907002649744\"\n                ></p>\n<p>最终效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002735603.png\"\n                      alt=\"image-20220907002735603\"\n                ></p>\n<h2 id=\"编辑bpmn文件\"><a href=\"#编辑bpmn文件\" class=\"headerlink\" title=\"编辑bpmn文件\"></a>编辑bpmn文件</h2><p>找到您想打开的bpmn文件, 点击右键, 找到External Tools 运行camunda modler即可进行文件编写.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002851738.png\"\n                      alt=\"image-20220907002851738\"\n                ></p>\n<p>搞定~</p>\n<h1 id=\"SpringBoot整合Camunda\"><a href=\"#SpringBoot整合Camunda\" class=\"headerlink\" title=\"SpringBoot整合Camunda\"></a>SpringBoot整合Camunda</h1><h2 id=\"官方案例说明\"><a href=\"#官方案例说明\" class=\"headerlink\" title=\"官方案例说明\"></a>官方案例说明</h2><p>接下来我们看看怎么在我们的实际项目中来使用Camunda了。方式有多种，首先我们可以参考官网提供的整合案例。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003810268.png\"\n                      alt=\"image-20220907003810268\"\n                ></p>\n<p>但是这里有个比较头疼的问题就是Camunda和SpringBoot版本的兼容性问题，虽然官方也给出了兼容版本的对照表。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003929928.png\"\n                      alt=\"image-20220907003929928\"\n                ></p>\n<p>但是如果不小心还是会出现各种问题，比如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004050862.png\"\n                      alt=\"image-20220907004050862\"\n                ></p>\n<p>上面就是典型的版本不兼容的问题了。</p>\n<h2 id=\"官方Demo\"><a href=\"#官方Demo\" class=\"headerlink\" title=\"官方Demo\"></a>官方Demo</h2><p>为了能让我们的案例快速搞定，我们可以通过Camunda官方提供的网站来创建我们的案例程序。地址：<a class=\"link\"   href=\"https://start.camunda.com/\" >https://start.camunda.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004531764.png\"\n                      alt=\"image-20220907004531764\"\n                ></p>\n<p>生成代码后，解压后我们通过idea打开项目，项目结构</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010229047.png\"\n                      alt=\"image-20220907010229047\"\n                ></p>\n<p>相关的pom.xml中的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.boge.workflow<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-project-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-engine-plugin-spin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.spin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-spin-dataformat-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性文件的配置信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.url:</span> <span class=\"string\">jdbc:h2:file:./camunda-h2-database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">camunda.bpm.admin-user:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">demo</span></span><br></pre></td></tr></table></figure>\n\n<p>然后通过启动类启动程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010434493.png\"\n                      alt=\"image-20220907010434493\"\n                ></p>\n<p>访问服务：<a class=\"link\"   href=\"http://localhost:8080/\" >http://localhost:8080/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010523901.png\"\n                      alt=\"image-20220907010523901\"\n                ></p>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><p>上面的例子我们数据存储在了H2这个内存型数据库，我们可以切换到<code>MySQL</code>数据库。首先我们需要导入相关的SQL脚本。位置就在我们之前下载的<code>Camunda Web</code>服务中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010729453.png\"\n                      alt=\"image-20220907010729453\"\n                ></p>\n<p>执行创建所有必需的表和默认索引的SQL DDL脚本。上面两个脚本都要执行。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011030798.png\"\n                      alt=\"image-20220907011030798\"\n                ></p>\n<p>生成的相关表结构比较多，因为本身就是基于Activiti演变而来，所以有Activiti基础的小伙伴会非常轻松了。简单介绍下相关表结构的作用。</p>\n<ul>\n<li><strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li>\n<li><strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li>\n<li><strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li>\n<li><strong>ACT_GE</strong>： GE 表示 general。 通用数据， 用于不同场景下 </li>\n<li><strong>ACT_ID:</strong>   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</li>\n</ul>\n<p>具体的表结构的含义:</p>\n<table>\n<thead>\n<tr>\n<th><strong>表分类</strong></th>\n<th><strong>表名</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一般数据</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_BYTEARRAY]</td>\n<td>通用的流程定义和流程资源</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_PROPERTY]</td>\n<td>系统相关属性</td>\n</tr>\n<tr>\n<td>流程历史记录</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ACTINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ATTACHMENT]</td>\n<td>历史的流程附件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_COMMENT]</td>\n<td>历史的说明性信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_DETAIL]</td>\n<td>历史的流程运行中的细节信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_IDENTITYLINK]</td>\n<td>历史的流程运行过程中用户关系</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_PROCINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_TASKINST]</td>\n<td>历史的任务实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_VARINST]</td>\n<td>历史的流程运行中的变量信息</td>\n</tr>\n<tr>\n<td>流程定义表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_DEPLOYMENT]</td>\n<td>部署单元信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_MODEL]</td>\n<td>模型信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_PROCDEF]</td>\n<td>已部署的流程定义</td>\n</tr>\n<tr>\n<td>运行实例表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EVENT_SUBSCR]</td>\n<td>运行时事件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EXECUTION]</td>\n<td>运行时流程执行实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_IDENTITYLINK]</td>\n<td>运行时用户关系信息，存储任务节点与参与者的相关信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_JOB]</td>\n<td>运行时作业</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_TASK]</td>\n<td>运行时任务</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_VARIABLE]</td>\n<td>运行时变量表</td>\n</tr>\n<tr>\n<td>用户用户组表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_BYTEARRAY]</td>\n<td>二进制数据表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_GROUP]</td>\n<td>用户组信息表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_INFO]</td>\n<td>用户信息详情表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_MEMBERSHIP]</td>\n<td>人与组关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV]</td>\n<td>权限表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV_MAPPING]</td>\n<td>用户或组权限关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PROPERTY]</td>\n<td>属性表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_TOKEN]</td>\n<td>记录用户的token信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_USER]</td>\n<td>用户表</td>\n</tr>\n</tbody></table>\n<p>然后我们在SpringBoot项目中导入<code>MySql</code>的依赖，然后修改对应的配置信息</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改<code>application.yaml</code>。添加数据源的相关信息。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># spring.datasource.url: jdbc:h2:file:./camunda-h2-database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">camunda.bpm.admin-user:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/camunda1?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"attr\">camunda:</span></span><br><span class=\"line\">  <span class=\"attr\">bpm:</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">schema-update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">auto-deployment-enabled:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 自动部署 resources 下的 bpmn文件</span></span><br></pre></td></tr></table></figure>\n\n<p>然后启动项目，发现数据库中有了相关记录，说明操作成功</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011831014.png\"\n                      alt=\"image-20220907011831014\"\n                ></p>\n<h1 id=\"Camunda专题讲解\"><a href=\"#Camunda专题讲解\" class=\"headerlink\" title=\"Camunda专题讲解\"></a>Camunda专题讲解</h1><p>用了整合的基础我们就可以来完成一个流程审批的案例了</p>\n<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/flow&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">deplopy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;部署的第一个流程&quot;</span>) <span class=\"comment\">// 定义部署文件的名称</span></span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;process.bpmn&quot;</span>) <span class=\"comment\">// 绑定需要部署的流程文件</span></span><br><span class=\"line\">                .deploy();<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deploy.getId() + <span class=\"string\">&quot;:&quot;</span> + deploy.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后访问接口即可</p>\n<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2><p>启动流程我们通过单元测试来操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.boge.workflow;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.RepositoryService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.RuntimeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.TaskService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.runtime.ProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.task.Task;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = Application.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程的案例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;1a880f27-2e57-11ed-80d9-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 部署的流程实例的相关信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getProcessDefinitionId() = &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查询待办\"><a href=\"#查询待办\" class=\"headerlink\" title=\"查询待办\"></a>查询待办</h2><p>查询待办也就是查看当前需要审批的任务，通过TaskService来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    待办</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  流程定义ID:processDefinition : 我们部署流程的时候会，每一个流程都会产生一个流程定义ID</span></span><br><span class=\"line\"><span class=\"comment\"> *  流程实例ID:processInstance ：我们启动流程实例的时候，会产生一个流程实例ID</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            <span class=\"comment\">//.processInstanceId(&quot;eff78817-2e58-11ed-aa3f-c03c59ad2248&quot;)</span></span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo1&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 根据用户找到关联的Task</span></span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;eff78817-2e58-11ed-aa3f-c03c59ad2248&quot;)</span></span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务审批完成...&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<p>好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java&#x2F;boge3306)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png\"\n                      alt=\"image-20220904115333970\"\n                ></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Camunda-热门工作流引擎框架\"><a href=\"#Camunda-热门工作流引擎框架\" class=\"headerlink\" title=\"Camunda-热门工作流引擎框架\"></a>Camunda-热门工作流引擎框架</h1><blockquote>\n<p>Lecture：波哥</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220902232358815.png\"\n                      alt=\"image-20220902232358815\"\n                ></p>\n<h1 id=\"IDEA引入流程设计器\"><a href=\"#IDEA引入流程设计器\" class=\"headerlink\" title=\"IDEA引入流程设计器\"></a>IDEA引入流程设计器</h1><p>在工作流引擎中流程设计器是一个非常重要的组件，而<code>InterlliJ IDEA</code>是Java程序员用到的最多的编程工具了。前面在基础篇的介绍中我们都在通过Camunda提供的流程设计器绘制好流程图，然后需要单独的拷贝到项目中，要是调整修改不是很方便，这时我们可以在IDEA中和流程设计器绑定起来。这样会更加的灵活。</p>\n<h2 id=\"下载Camunda-Model\"><a href=\"#下载Camunda-Model\" class=\"headerlink\" title=\"下载Camunda Model\"></a>下载Camunda Model</h2><p>第一步肯定是需要下载<code>Camunda Model</code> 这个流程设计器，我们前面有介绍。就是之前解压好的目录了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002253021.png\"\n                      alt=\"image-20220907002253021\"\n                ></p>\n<h2 id=\"IDEA中配置\"><a href=\"#IDEA中配置\" class=\"headerlink\" title=\"IDEA中配置\"></a>IDEA中配置</h2><p>我们先进入<code>settings</code>中然后找到<code>tools</code>,继续找到<code>External Tool</code>.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002432482.png\"\n                      alt=\"image-20220907002432482\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002649744.png\"\n                      alt=\"image-20220907002649744\"\n                ></p>\n<p>最终效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002735603.png\"\n                      alt=\"image-20220907002735603\"\n                ></p>\n<h2 id=\"编辑bpmn文件\"><a href=\"#编辑bpmn文件\" class=\"headerlink\" title=\"编辑bpmn文件\"></a>编辑bpmn文件</h2><p>找到您想打开的bpmn文件, 点击右键, 找到External Tools 运行camunda modler即可进行文件编写.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907002851738.png\"\n                      alt=\"image-20220907002851738\"\n                ></p>\n<p>搞定~</p>\n<h1 id=\"SpringBoot整合Camunda\"><a href=\"#SpringBoot整合Camunda\" class=\"headerlink\" title=\"SpringBoot整合Camunda\"></a>SpringBoot整合Camunda</h1><h2 id=\"官方案例说明\"><a href=\"#官方案例说明\" class=\"headerlink\" title=\"官方案例说明\"></a>官方案例说明</h2><p>接下来我们看看怎么在我们的实际项目中来使用Camunda了。方式有多种，首先我们可以参考官网提供的整合案例。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003810268.png\"\n                      alt=\"image-20220907003810268\"\n                ></p>\n<p>但是这里有个比较头疼的问题就是Camunda和SpringBoot版本的兼容性问题，虽然官方也给出了兼容版本的对照表。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907003929928.png\"\n                      alt=\"image-20220907003929928\"\n                ></p>\n<p>但是如果不小心还是会出现各种问题，比如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004050862.png\"\n                      alt=\"image-20220907004050862\"\n                ></p>\n<p>上面就是典型的版本不兼容的问题了。</p>\n<h2 id=\"官方Demo\"><a href=\"#官方Demo\" class=\"headerlink\" title=\"官方Demo\"></a>官方Demo</h2><p>为了能让我们的案例快速搞定，我们可以通过Camunda官方提供的网站来创建我们的案例程序。地址：<a class=\"link\"   href=\"https://start.camunda.com/\" >https://start.camunda.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907004531764.png\"\n                      alt=\"image-20220907004531764\"\n                ></p>\n<p>生成代码后，解压后我们通过idea打开项目，项目结构</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010229047.png\"\n                      alt=\"image-20220907010229047\"\n                ></p>\n<p>相关的pom.xml中的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.boge.workflow<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-project-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-engine-plugin-spin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.spin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-spin-dataformat-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性文件的配置信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.url:</span> <span class=\"string\">jdbc:h2:file:./camunda-h2-database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">camunda.bpm.admin-user:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">demo</span></span><br></pre></td></tr></table></figure>\n\n<p>然后通过启动类启动程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010434493.png\"\n                      alt=\"image-20220907010434493\"\n                ></p>\n<p>访问服务：<a class=\"link\"   href=\"http://localhost:8080/\" >http://localhost:8080/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010523901.png\"\n                      alt=\"image-20220907010523901\"\n                ></p>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><p>上面的例子我们数据存储在了H2这个内存型数据库，我们可以切换到<code>MySQL</code>数据库。首先我们需要导入相关的SQL脚本。位置就在我们之前下载的<code>Camunda Web</code>服务中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907010729453.png\"\n                      alt=\"image-20220907010729453\"\n                ></p>\n<p>执行创建所有必需的表和默认索引的SQL DDL脚本。上面两个脚本都要执行。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011030798.png\"\n                      alt=\"image-20220907011030798\"\n                ></p>\n<p>生成的相关表结构比较多，因为本身就是基于Activiti演变而来，所以有Activiti基础的小伙伴会非常轻松了。简单介绍下相关表结构的作用。</p>\n<ul>\n<li><strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li>\n<li><strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li>\n<li><strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li>\n<li><strong>ACT_GE</strong>： GE 表示 general。 通用数据， 用于不同场景下 </li>\n<li><strong>ACT_ID:</strong>   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</li>\n</ul>\n<p>具体的表结构的含义:</p>\n<table>\n<thead>\n<tr>\n<th><strong>表分类</strong></th>\n<th><strong>表名</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一般数据</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_BYTEARRAY]</td>\n<td>通用的流程定义和流程资源</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_PROPERTY]</td>\n<td>系统相关属性</td>\n</tr>\n<tr>\n<td>流程历史记录</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ACTINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ATTACHMENT]</td>\n<td>历史的流程附件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_COMMENT]</td>\n<td>历史的说明性信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_DETAIL]</td>\n<td>历史的流程运行中的细节信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_IDENTITYLINK]</td>\n<td>历史的流程运行过程中用户关系</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_PROCINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_TASKINST]</td>\n<td>历史的任务实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_VARINST]</td>\n<td>历史的流程运行中的变量信息</td>\n</tr>\n<tr>\n<td>流程定义表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_DEPLOYMENT]</td>\n<td>部署单元信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_MODEL]</td>\n<td>模型信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_PROCDEF]</td>\n<td>已部署的流程定义</td>\n</tr>\n<tr>\n<td>运行实例表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EVENT_SUBSCR]</td>\n<td>运行时事件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EXECUTION]</td>\n<td>运行时流程执行实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_IDENTITYLINK]</td>\n<td>运行时用户关系信息，存储任务节点与参与者的相关信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_JOB]</td>\n<td>运行时作业</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_TASK]</td>\n<td>运行时任务</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_VARIABLE]</td>\n<td>运行时变量表</td>\n</tr>\n<tr>\n<td>用户用户组表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_BYTEARRAY]</td>\n<td>二进制数据表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_GROUP]</td>\n<td>用户组信息表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_INFO]</td>\n<td>用户信息详情表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_MEMBERSHIP]</td>\n<td>人与组关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV]</td>\n<td>权限表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV_MAPPING]</td>\n<td>用户或组权限关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PROPERTY]</td>\n<td>属性表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_TOKEN]</td>\n<td>记录用户的token信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_USER]</td>\n<td>用户表</td>\n</tr>\n</tbody></table>\n<p>然后我们在SpringBoot项目中导入<code>MySql</code>的依赖，然后修改对应的配置信息</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改<code>application.yaml</code>。添加数据源的相关信息。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># spring.datasource.url: jdbc:h2:file:./camunda-h2-database</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">camunda.bpm.admin-user:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">demo</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">demo</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/camunda1?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"><span class=\"attr\">camunda:</span></span><br><span class=\"line\">  <span class=\"attr\">bpm:</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">schema-update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">auto-deployment-enabled:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 自动部署 resources 下的 bpmn文件</span></span><br></pre></td></tr></table></figure>\n\n<p>然后启动项目，发现数据库中有了相关记录，说明操作成功</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220907011831014.png\"\n                      alt=\"image-20220907011831014\"\n                ></p>\n<h1 id=\"Camunda专题讲解\"><a href=\"#Camunda专题讲解\" class=\"headerlink\" title=\"Camunda专题讲解\"></a>Camunda专题讲解</h1><p>用了整合的基础我们就可以来完成一个流程审批的案例了</p>\n<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/flow&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">deplopy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;部署的第一个流程&quot;</span>) <span class=\"comment\">// 定义部署文件的名称</span></span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;process.bpmn&quot;</span>) <span class=\"comment\">// 绑定需要部署的流程文件</span></span><br><span class=\"line\">                .deploy();<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> deploy.getId() + <span class=\"string\">&quot;:&quot;</span> + deploy.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动后访问接口即可</p>\n<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2><p>启动流程我们通过单元测试来操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.boge.workflow;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.RepositoryService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.RuntimeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.TaskService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.runtime.ProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.camunda.bpm.engine.task.Task;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = Application.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程的案例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;1a880f27-2e57-11ed-80d9-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 部署的流程实例的相关信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processInstance.getProcessDefinitionId() = &quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查询待办\"><a href=\"#查询待办\" class=\"headerlink\" title=\"查询待办\"></a>查询待办</h2><p>查询待办也就是查看当前需要审批的任务，通过TaskService来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    待办</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  流程定义ID:processDefinition : 我们部署流程的时候会，每一个流程都会产生一个流程定义ID</span></span><br><span class=\"line\"><span class=\"comment\"> *  流程实例ID:processInstance ：我们启动流程实例的时候，会产生一个流程实例ID</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            <span class=\"comment\">//.processInstanceId(&quot;eff78817-2e58-11ed-aa3f-c03c59ad2248&quot;)</span></span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;demo1&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list != <span class=\"literal\">null</span> &amp;&amp; list.size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 根据用户找到关联的Task</span></span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;eff78817-2e58-11ed-aa3f-c03c59ad2248&quot;)</span></span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;demo&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span> )&#123;</span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务审批完成...&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<p>好了~到此Camunda的基础入门案例我们就讲解到这里，需要获取更多Camunda相关课程视频的可以继续关注波哥的B账号，或者添加波哥微信(boge_java&#x2F;boge3306)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220904115333970.png\"\n                      alt=\"image-20220904115333970\"\n                ></p>\n"},{"title":"goodjob","date":"2022-10-09T15:25:42.000Z","sticky":888,"_content":"# [强化学习](https://hrl.boyuai.com/chapter/intro)\n# [JAVA全栈](https://pdai.tech/)\n","source":"_posts/2022/10/goodjob.md","raw":"---\ntitle: goodjob\ndate: 2022-10-09 23:25:42\ntags:\ncategories:\nsticky: 888\n---\n# [强化学习](https://hrl.boyuai.com/chapter/intro)\n# [JAVA全栈](https://pdai.tech/)\n","slug":"goodjob","published":1,"updated":"2022-11-19T14:56:14.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersm0009dk8fcqju05iq","content":"<h1 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a><a class=\"link\"   href=\"https://hrl.boyuai.com/chapter/intro\" >强化学习<i class=\"fas fa-external-link-alt\"></i></a></h1><h1 id=\"JAVA全栈\"><a href=\"#JAVA全栈\" class=\"headerlink\" title=\"JAVA全栈\"></a><a class=\"link\"   href=\"https://pdai.tech/\" >JAVA全栈<i class=\"fas fa-external-link-alt\"></i></a></h1>","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a><a class=\"link\"   href=\"https://hrl.boyuai.com/chapter/intro\" >强化学习<i class=\"fas fa-external-link-alt\"></i></a></h1><h1 id=\"JAVA全栈\"><a href=\"#JAVA全栈\" class=\"headerlink\" title=\"JAVA全栈\"></a><a class=\"link\"   href=\"https://pdai.tech/\" >JAVA全栈<i class=\"fas fa-external-link-alt\"></i></a></h1>"},{"title":"flowable实战篇","date":"2022-10-19T15:41:48.000Z","_content":"# Flowable实战篇\n> lecture：波波老师\n\n# Flowable整合SpringBoot\n\n## 添加相关依赖\n\n```xml\n<dependency>\n            <groupId>org.flowable</groupId>\n            <artifactId>flowable-spring-boot-starter</artifactId>\n            <version>6.6.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.14</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.21</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n```\n\n\n\n## 添加对应的配置\n\n```yml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/flowable1?serverTimezone=UTC&nullCatalogMeansCurrent=true\n    username: root\n    password: 123456\n    hikari:\n      minimum-idle: 5\n      idle-timeout: 600000\n      maximum-pool-size: 10\n      auto-commit: true\n      pool-name: MyHikariCP\n      max-lifetime: 1800000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1\nflowable:\n  async-executor-activate: false #关闭定时任务JOB\n  #  将databaseSchemaUpdate设置为true。当Flowable发现库与数据库表结构不一致时，会自动将数据库表结构升级至新版本。\n  database-schema-update: true\nserver:\n  port: 8082\n```\n\n系统启动的时候检查如果数据库对应的表结构没有创建，会帮助我们先创建对应的表结构\n\n\n\n## 案例应用\n\n### 流程部署\n\n- *processes*目录下的任何BPMN 2.0流程定义都会被自动部署。创建*processes*目录，并在其中创建示例流程定义（命名为*one-task-process.bpmn20.xml*）。\n- *cases*目录下的任何CMMN 1.1事例都会被自动部署。\n- *forms*目录下的任何Form定义都会被自动部署。\n\n![image-20220328110737387](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328110737387.png)\n\n\n\n通过手动方式来部署\n\n```java\n@SpringBootTest\nclass FlowableSpringBoot28ApplicationTests {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n\n    @Autowired\n    private TaskService taskService;\n\n\n    @Autowired\n    private RuntimeService runtimeService;\n\n\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程.bpmn20.xml\")\n                .name(\"holiday\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n\n}\n\n```\n\n\n\n\n\n### 启动流程\n\n启动流程和前面介绍的就没什么差异了，通过RuntimeService来实现\n\n```java\n    /**\n     * start process\n     */\n    @Test\n    void startFlow(){\n        Map<String,Object> map = new HashMap();\n        map.put(\"assignee0\",\"zhangsan\");\n        map.put(\"assignee1\",\"zhangsan\");\n        runtimeService.startProcessInstanceById(\"holiday28:2:3653a34e-ae45-11ec-969d-c03c59ad2248\",map);\n    }\n```\n\n\n\n### 处理流程\n\n处理流程和前面介绍的也一样，通过TaskService来处理\n\n```java\n    /**\n     * complete Task\n     */\n    @Test\n    void completeTask(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"fb166cd8-ae45-11ec-92c4-c03c59ad2248\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        if(task != null){\n            taskService.complete(task.getId());\n            System.out.println(\"complete ....\");\n        }\n    }\n```\n\n","source":"_posts/2022/10/flowable实战篇.md","raw":"---\ntitle: flowable实战篇\ndate: 2022-10-19 23:41:48\ntags: [BPMN,Flowable]\ncategories: [笔记]\n---\n# Flowable实战篇\n> lecture：波波老师\n\n# Flowable整合SpringBoot\n\n## 添加相关依赖\n\n```xml\n<dependency>\n            <groupId>org.flowable</groupId>\n            <artifactId>flowable-spring-boot-starter</artifactId>\n            <version>6.6.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.14</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.21</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n```\n\n\n\n## 添加对应的配置\n\n```yml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/flowable1?serverTimezone=UTC&nullCatalogMeansCurrent=true\n    username: root\n    password: 123456\n    hikari:\n      minimum-idle: 5\n      idle-timeout: 600000\n      maximum-pool-size: 10\n      auto-commit: true\n      pool-name: MyHikariCP\n      max-lifetime: 1800000\n      connection-timeout: 30000\n      connection-test-query: SELECT 1\nflowable:\n  async-executor-activate: false #关闭定时任务JOB\n  #  将databaseSchemaUpdate设置为true。当Flowable发现库与数据库表结构不一致时，会自动将数据库表结构升级至新版本。\n  database-schema-update: true\nserver:\n  port: 8082\n```\n\n系统启动的时候检查如果数据库对应的表结构没有创建，会帮助我们先创建对应的表结构\n\n\n\n## 案例应用\n\n### 流程部署\n\n- *processes*目录下的任何BPMN 2.0流程定义都会被自动部署。创建*processes*目录，并在其中创建示例流程定义（命名为*one-task-process.bpmn20.xml*）。\n- *cases*目录下的任何CMMN 1.1事例都会被自动部署。\n- *forms*目录下的任何Form定义都会被自动部署。\n\n![image-20220328110737387](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328110737387.png)\n\n\n\n通过手动方式来部署\n\n```java\n@SpringBootTest\nclass FlowableSpringBoot28ApplicationTests {\n\n    @Autowired\n    private ProcessEngine processEngine;\n\n    @Autowired\n    private RepositoryService repositoryService;\n\n\n    @Autowired\n    private TaskService taskService;\n\n\n    @Autowired\n    private RuntimeService runtimeService;\n\n\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程.bpmn20.xml\")\n                .name(\"holiday\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n\n}\n\n```\n\n\n\n\n\n### 启动流程\n\n启动流程和前面介绍的就没什么差异了，通过RuntimeService来实现\n\n```java\n    /**\n     * start process\n     */\n    @Test\n    void startFlow(){\n        Map<String,Object> map = new HashMap();\n        map.put(\"assignee0\",\"zhangsan\");\n        map.put(\"assignee1\",\"zhangsan\");\n        runtimeService.startProcessInstanceById(\"holiday28:2:3653a34e-ae45-11ec-969d-c03c59ad2248\",map);\n    }\n```\n\n\n\n### 处理流程\n\n处理流程和前面介绍的也一样，通过TaskService来处理\n\n```java\n    /**\n     * complete Task\n     */\n    @Test\n    void completeTask(){\n        Task task = taskService.createTaskQuery()\n                .processInstanceId(\"fb166cd8-ae45-11ec-92c4-c03c59ad2248\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        if(task != null){\n            taskService.complete(task.getId());\n            System.out.println(\"complete ....\");\n        }\n    }\n```\n\n","slug":"flowable实战篇","published":1,"updated":"2022-11-05T14:16:59.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersn000bdk8fbm23dnlq","content":"<h1 id=\"Flowable实战篇\"><a href=\"#Flowable实战篇\" class=\"headerlink\" title=\"Flowable实战篇\"></a>Flowable实战篇</h1><blockquote>\n<p>lecture：波波老师</p>\n</blockquote>\n<h1 id=\"Flowable整合SpringBoot\"><a href=\"#Flowable整合SpringBoot\" class=\"headerlink\" title=\"Flowable整合SpringBoot\"></a>Flowable整合SpringBoot</h1><h2 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.13.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加对应的配置\"><a href=\"#添加对应的配置\" class=\"headerlink\" title=\"添加对应的配置\"></a>添加对应的配置</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/flowable1?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">hikari:</span></span><br><span class=\"line\">      <span class=\"attr\">minimum-idle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">idle-timeout:</span> <span class=\"number\">600000</span></span><br><span class=\"line\">      <span class=\"attr\">maximum-pool-size:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">auto-commit:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">pool-name:</span> <span class=\"string\">MyHikariCP</span></span><br><span class=\"line\">      <span class=\"attr\">max-lifetime:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">      <span class=\"attr\">connection-timeout:</span> <span class=\"number\">30000</span></span><br><span class=\"line\">      <span class=\"attr\">connection-test-query:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">flowable:</span></span><br><span class=\"line\">  <span class=\"attr\">async-executor-activate:</span> <span class=\"literal\">false</span> <span class=\"comment\">#关闭定时任务JOB</span></span><br><span class=\"line\">  <span class=\"comment\">#  将databaseSchemaUpdate设置为true。当Flowable发现库与数据库表结构不一致时，会自动将数据库表结构升级至新版本。</span></span><br><span class=\"line\">  <span class=\"attr\">database-schema-update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br></pre></td></tr></table></figure>\n\n<p>系统启动的时候检查如果数据库对应的表结构没有创建，会帮助我们先创建对应的表结构</p>\n<h2 id=\"案例应用\"><a href=\"#案例应用\" class=\"headerlink\" title=\"案例应用\"></a>案例应用</h2><h3 id=\"流程部署\"><a href=\"#流程部署\" class=\"headerlink\" title=\"流程部署\"></a>流程部署</h3><ul>\n<li><em>processes</em>目录下的任何BPMN 2.0流程定义都会被自动部署。创建<em>processes</em>目录，并在其中创建示例流程定义（命名为<em>one-task-process.bpmn20.xml</em>）。</li>\n<li><em>cases</em>目录下的任何CMMN 1.1事例都会被自动部署。</li>\n<li><em>forms</em>目录下的任何Form定义都会被自动部署。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328110737387.png\"\n                      alt=\"image-20220328110737387\"\n                ></p>\n<p>通过手动方式来部署</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FlowableSpringBoot28ApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;请假流程.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;holiday&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>启动流程和前面介绍的就没什么差异了，通过RuntimeService来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * start process</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday28:2:3653a34e-ae45-11ec-969d-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h3><p>处理流程和前面介绍的也一样，通过TaskService来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * complete Task</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;fb166cd8-ae45-11ec-92c4-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        taskService.complete(task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Flowable实战篇\"><a href=\"#Flowable实战篇\" class=\"headerlink\" title=\"Flowable实战篇\"></a>Flowable实战篇</h1><blockquote>\n<p>lecture：波波老师</p>\n</blockquote>\n<h1 id=\"Flowable整合SpringBoot\"><a href=\"#Flowable整合SpringBoot\" class=\"headerlink\" title=\"Flowable整合SpringBoot\"></a>Flowable整合SpringBoot</h1><h2 id=\"添加相关依赖\"><a href=\"#添加相关依赖\" class=\"headerlink\" title=\"添加相关依赖\"></a>添加相关依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.13.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加对应的配置\"><a href=\"#添加对应的配置\" class=\"headerlink\" title=\"添加对应的配置\"></a>添加对应的配置</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/flowable1?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">hikari:</span></span><br><span class=\"line\">      <span class=\"attr\">minimum-idle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">idle-timeout:</span> <span class=\"number\">600000</span></span><br><span class=\"line\">      <span class=\"attr\">maximum-pool-size:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">auto-commit:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">pool-name:</span> <span class=\"string\">MyHikariCP</span></span><br><span class=\"line\">      <span class=\"attr\">max-lifetime:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">      <span class=\"attr\">connection-timeout:</span> <span class=\"number\">30000</span></span><br><span class=\"line\">      <span class=\"attr\">connection-test-query:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">flowable:</span></span><br><span class=\"line\">  <span class=\"attr\">async-executor-activate:</span> <span class=\"literal\">false</span> <span class=\"comment\">#关闭定时任务JOB</span></span><br><span class=\"line\">  <span class=\"comment\">#  将databaseSchemaUpdate设置为true。当Flowable发现库与数据库表结构不一致时，会自动将数据库表结构升级至新版本。</span></span><br><span class=\"line\">  <span class=\"attr\">database-schema-update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br></pre></td></tr></table></figure>\n\n<p>系统启动的时候检查如果数据库对应的表结构没有创建，会帮助我们先创建对应的表结构</p>\n<h2 id=\"案例应用\"><a href=\"#案例应用\" class=\"headerlink\" title=\"案例应用\"></a>案例应用</h2><h3 id=\"流程部署\"><a href=\"#流程部署\" class=\"headerlink\" title=\"流程部署\"></a>流程部署</h3><ul>\n<li><em>processes</em>目录下的任何BPMN 2.0流程定义都会被自动部署。创建<em>processes</em>目录，并在其中创建示例流程定义（命名为<em>one-task-process.bpmn20.xml</em>）。</li>\n<li><em>cases</em>目录下的任何CMMN 1.1事例都会被自动部署。</li>\n<li><em>forms</em>目录下的任何Form定义都会被自动部署。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328110737387.png\"\n                      alt=\"image-20220328110737387\"\n                ></p>\n<p>通过手动方式来部署</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FlowableSpringBoot28ApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RepositoryService repositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TaskService taskService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RuntimeService runtimeService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;请假流程.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;holiday&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>启动流程和前面介绍的就没什么差异了，通过RuntimeService来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * start process</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday28:2:3653a34e-ae45-11ec-969d-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h3><p>处理流程和前面介绍的也一样，通过TaskService来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * complete Task</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;fb166cd8-ae45-11ec-92c4-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        taskService.complete(task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"flowable基础篇","date":"2022-10-19T15:50:41.000Z","_content":"# flowable基础篇\n> Lecture：波波老师\n\n\n# Flowable介绍\n\nFlowable是BPMN的一个基于java的软件实现，不过Flowable不仅仅包括BPMN，还有DMN决策表和CMMN Case管理引擎，并且有自己的用户管理、微服务API等一系列功能，是一个服务平台。\n\n![image-20220317101115398](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn\\image-20220317101115398.png)\n\n\n\n\n\n# Flowable基础\n\n官方手册：https://tkjohn.github.io/flowable-userguide/#_introduction\n\n## 创建ProcessEngine\n\n创建一个基本的maven工程，可以是Eclipse也可以是其他IDEA。然后添加两个依赖\n\n* Flowable流程引擎。使我们可以创建一个ProcessEngine流程引擎对象，并访问Flowable API。\n* 一个是MySQL的数据库驱动\n\n在*pom.xml*文件中添加下列行：\n\n```xml\n<dependency>\n    <groupId>org.flowable</groupId>\n    <artifactId>flowable-engine</artifactId>\n    <version>6.3.0</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.21</version>\n</dependency>\n```\n\n然后创建一个普通的Java类，添加对应的main方法，首先要做的是初始化**ProcessEngine**流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 *ProcessEngine*由**ProcessEngineConfiguration**实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置XML文件创建*ProcessEngineConfiguration*，但是（像在这里做的一样）也可以编程方式创建它。 *ProcessEngineConfiguration*所需的最小配置，是数据库JDBC连接：\n\n```java\npublic static void main(String[] args) {\n    ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n        .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC\")\n        .setJdbcUsername(\"root\")\n        .setJdbcPassword(\"123456\")\n        .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n        .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n    ProcessEngine processEngine = cfg.buildProcessEngine();\n}\n```\n\n注意在mysql8.0中执行可能出现如下的错误\n\n![image-20220316093416477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093416477.png)\n\n出现这种情况只需要在mysql的连接字符串中添加上nullCatalogMeansCurrent=true，设置为只查当前连接的schema库即可。\n\n```java\n    public static void main(String[] args) {\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn1?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n    }\n```\n\n然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable使用[SLF4J](http://www.slf4j.org/)作为内部日志框架。在这个例子中，我们使用log4j作为SLF4J的实现。因此在pom.xml文件中添加下列依赖：\n\n```xml\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.21</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.21</version>\n</dependency>\n```\n\nLog4j需要一个配置文件。在*src/main/resources*文件夹下添加*log4j.properties*文件，并写入下列内容：\n\n```properties\nlog4j.rootLogger=DEBUG, CA\n\nlog4j.appender.CA=org.apache.log4j.ConsoleAppender\nlog4j.appender.CA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CA.layout.ConversionPattern= %d{hh:mm:ss,SSS} [%t] %-5p %c %x - %m%n\n```\n\n重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：\n\n![image-20220316093922199](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093922199.png)\n\n同时可以看到创建了相关的表结构在数据库中\n\n![image-20220316093957662](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093957662.png)\n\n这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！\n\n\n\n## 部署流程定义\n\n接下来我们构建一个非常简单的请假流程，Flowable引擎需要流程定义为BPMN 2.0格式，这是一个业界广泛接受的XML标准。 在Flowable术语中，我们将其称为一个**流程定义(process definition)**。一个*流程定义*可以启动多个**流程实例(process instance)**。*流程定义*可以看做是重复执行流程的蓝图。 在这个例子中，*流程定义*定义了请假的各个步骤，而一个*流程实例*对应某个雇员提出的一个请假申请。\n\nBPMN 2.0存储为XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样BPMN 2.0标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。\n\n我们要使用的流程定义为：\n\n![getting.started.bpmn.process](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/getting.started.bpmn.process.png)\n\n\n\n流程定义说明：\n\n* 我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。\n* 左侧的圆圈叫做**启动事件(start event)**。这是一个流程实例的起点。\n* 第一个矩形是一个**用户任务(user task)**。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请\n* 取决于经理的决定，**排他网关(exclusive gateway)** (带叉的菱形)会将流程实例路由至批准或驳回路径\n* 如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。\n* 如果驳回，则为雇员发送一封邮件通知他。\n\n\n\n一般来说，这样的*流程定义*使用可视化建模工具建立，如Flowable Designer(Eclipse)或Flowable Web Modeler(Web应用)。但在这里我们直接撰写XML，以熟悉BPMN 2.0及其概念。\n\n与上面展示的流程图对应的BPMN 2.0 XML在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的XML文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在XML的*BPMNDiagram*标签中，作为*definitions*标签的子元素）。\n\n将下面的XML保存在*src/main/resources*文件夹下名为*holiday-request.bpmn20.xml*的文件中。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\"\n             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\"\n             xmlns:flowable=\"http://flowable.org/bpmn\"\n             typeLanguage=\"http://www.w3.org/2001/XMLSchema\"\n             expressionLanguage=\"http://www.w3.org/1999/XPath\"\n             targetNamespace=\"http://www.flowable.org/processdef\">\n\n    <process id=\"holidayRequest\" name=\"Holiday Request\" isExecutable=\"true\">\n\n        <startEvent id=\"startEvent\"/>\n        <sequenceFlow sourceRef=\"startEvent\" targetRef=\"approveTask\"/>\n\n        <userTask id=\"approveTask\" name=\"Approve or reject request\"/>\n        <sequenceFlow sourceRef=\"approveTask\" targetRef=\"decision\"/>\n\n        <exclusiveGateway id=\"decision\"/>\n        <sequenceFlow sourceRef=\"decision\" targetRef=\"externalSystemCall\">\n            <conditionExpression xsi:type=\"tFormalExpression\">\n                <![CDATA[\n          ${approved}\n        ]]>\n            </conditionExpression>\n        </sequenceFlow>\n        <sequenceFlow  sourceRef=\"decision\" targetRef=\"sendRejectionMail\">\n            <conditionExpression xsi:type=\"tFormalExpression\">\n                <![CDATA[\n          ${!approved}\n        ]]>\n            </conditionExpression>\n        </sequenceFlow>\n\n        <serviceTask id=\"externalSystemCall\" name=\"Enter holidays in external system\"\n                     flowable:class=\"org.flowable.CallExternalSystemDelegate\"/>\n        <sequenceFlow sourceRef=\"externalSystemCall\" targetRef=\"holidayApprovedTask\"/>\n\n        <userTask id=\"holidayApprovedTask\" name=\"Holiday approved\"/>\n        <sequenceFlow sourceRef=\"holidayApprovedTask\" targetRef=\"approveEnd\"/>\n\n        <serviceTask id=\"sendRejectionMail\" name=\"Send out rejection email\"\n                     flowable:class=\"org.flowable.SendRejectionMail\"/>\n        <sequenceFlow sourceRef=\"sendRejectionMail\" targetRef=\"rejectEnd\"/>\n\n        <endEvent id=\"approveEnd\"/>\n\n        <endEvent id=\"rejectEnd\"/>\n    </process>\n\n</definitions>\n```\n\n现在我们已经有了流程BPMN 2.0 XML文件，下来需要将它***部署(deploy)\\***到引擎中。*部署*一个流程定义意味着：\n\n* 流程引擎会将XML文件存储在数据库中，这样可以在需要的时候获取它\n* 流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动*流程实例*。\n\n\n\n![image-20220317110902636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317110902636.png)\n\n\n\n将流程定义*部署*至Flowable引擎，需要使用*RepositoryService*，其可以从*ProcessEngine*对象获取。使用*RepositoryService*，可以通过XML文件的路径创建一个新的*部署(Deployment)*，并调用*deploy()*方法实际执行：\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void testDeploy(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 部署流程 获取RepositoryService对象\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deployment = repositoryService.createDeployment()// 创建Deployment对象\n                .addClasspathResource(\"holiday-request.bpmn20.xml\") // 添加流程部署文件\n                .name(\"请求流程\") // 设置部署流程的名称\n                .deploy(); // 执行部署操作\n        System.out.println(\"deployment.getId() = \" + deployment.getId());\n        System.out.println(\"deployment.getName() = \" + deployment.getName());\n\n    }\n```\n\n然后执行该方法日志操作成功：\n\n![image-20220316100439048](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100439048.png)\n\n在后台表结构也可以看到相关的信息\n\nact_re_deployment: 流程定义部署表，每部署一次就增加一条记录\n\n![image-20220316100532725](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100532725.png)\n\n\n\nact_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录\n\n![image-20220316100611004](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100611004.png)\n\n\n\nact_ge_bytearray ：流程资源表，流程部署的 bpmn文件和png图片会保存在该表中\n\n![image-20220316100648362](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100648362.png)\n\n\n\n\n\n我们现在可以通过API查询验证流程定义已经部署在引擎中（并学习一些API）。通过*RepositoryService*创建的*ProcessDefinitionQuery*对象实现。\n\n```java\n/**\n     * 查看流程定义\n     */\n    @Test\n    public void testDeployQuery(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 部署流程 获取RepositoryService对象\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        // 获取流程定义对象\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .deploymentId(\"2501\")\n                .singleResult();\n        System.out.println(\"processDefinition.getId() = \" + processDefinition.getId());\n        System.out.println(\"processDefinition.getName() = \" + processDefinition.getName());\n        System.out.println(\"processDefinition.getDeploymentId() = \" + processDefinition.getDeploymentId());\n        System.out.println(\"processDefinition.getDescription() = \" + processDefinition.getDescription());\n\n    }\n```\n\n输出结果为：\n\n```txt\nprocessDefinition.getId() = holidayRequest:2:2503\nprocessDefinition.getName() = Holiday Request\nprocessDefinition.getDeploymentId() = 2501\nprocessDefinition.getDescription() = null\n```\n\n\n\n## 启动流程实例\n\n现在已经在流程引擎中*部署*了流程定义，因此可以使用这个*流程定义*作为“模板”启动*流程实例*。\n\n![image-20220316102638015](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316102638015.png)\n\n要启动流程实例，需要提供一些初始化*流程变量*。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用*RuntimeService*启动一个*流程实例*。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 构建流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"employee\",\"张三\") ;// 谁申请请假\n        variables.put(\"nrOfHolidays\",3); // 请几天假\n        variables.put(\"description\",\"工作累了，想出去玩玩\"); // 请假的原因\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceByKey(\"holidayRequest\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n启动成功，输出结果如下：\n\n```txt\n流程定义的ID：holidayRequest:2:2503\n流程实例的ID：5001\n当前活动的ID：null\n```\n\n对应的流程实例ID为：5001\n\n启动流程实例涉及到的表结构：\n\n* act_hi_actinst 流程实例执行历史\n* act_hi_identitylink 流程的参与用户的历史信息\n* act_hi_procinst 流程实例历史信息\n* act_hi_taskinst 流程任务历史信息\n* act_ru_execution 流程执行信息\n* act_ru_identitylink 流程的参与用户信息\n* act_ru_task 任务信息\n\n\n\n## 查看任务\n\n上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个\n\n![image-20220316110406801](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316110406801.png)\n\n\n\n然后我们来查看下lisi的任务\n\n```java\n    /**\n     * 查看任务\n     */\n    @Test\n    public void testQueryTask(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                .processDefinitionKey(\"holidayRequestNew\")\n                .taskAssignee(\"lisi\")\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getProcessDefinitionId() = \" + task.getProcessDefinitionId());\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n```\n\n输出结果为：\n\n```txt\ntask.getProcessDefinitionId() = holidayRequestNew:1:10003\ntask.getId() = 12508\ntask.getAssignee() = lisi\ntask.getName() = Approve or reject request\n```\n\n\n\n## 完成任务\n\n现在李四这个角色可以来完成当前的任务了\n\n![image-20220316111124019](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111124019.png)\n\n\n\n在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到JavaDelegate来触发。\n\n![image-20220316111253702](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111253702.png)\n\n\n\n我们定义这样一个Java类\n\n```java\npublic class SendRejectionMail implements JavaDelegate {\n    /**\n     * 触发发送邮件的操作\n     * @param delegateExecution\n     */\n    @Override\n    public void execute(DelegateExecution delegateExecution) {\n        System.out.println(\"请假被拒绝,,,安心工作吧\");\n    }\n}\n```\n\n然后来完成任务\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void testCompleteTask(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionKey(\"holidayRequestNew\")\n                .taskAssignee(\"lisi\")\n                .singleResult();\n        // 添加流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"approved\",false); // 拒绝请假\n        // 完成任务\n        taskService.complete(task.getId(),variables);\n    }\n```\n\n然后可以看到JavaDelegate触发了\n\n![image-20220316111913933](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111913933.png)\n\n\n\n\n\n## 流程的删除\n\n有些流程已经没有用了，我们需要删除掉，其实也非常简单\n\n```java\n    /**\n     * 删除流程\n     */\n    @Test\n    public void testDeleteProcess(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        // 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错\n        // repositoryService.deleteDeployment(\"1\");\n        // 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。\n        repositoryService.deleteDeployment(\"2501\",true);\n\n    }\n```\n\n## 查看历史信息\n\n选择使用Flowable这样的流程引擎的原因之一，是它可以自动存储所有流程实例的**审计数据**或**历史数据**。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。\n\n例如，如果希望显示流程实例已经执行的时间，就可以从*ProcessEngine*获取*HistoryService*，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：\n\n- 只选择一个特定流程实例的活动\n- 只选择已完成的活动\n\n结果按照结束时间排序，代表其执行顺序。\n\n```java\n/**\n     * 查看历史\n     */\n    @Test\n    public void testQueryHistory(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        HistoryService historyService = processEngine.getHistoryService();\n        List<HistoricActivityInstance> list = historyService.createHistoricActivityInstanceQuery()\n                .processDefinitionId(\"holidayRequestNew:1:10003\")\n                .finished()\n                .orderByHistoricActivityInstanceEndTime().asc()\n                .list();\n        for (HistoricActivityInstance historicActivityInstance : list) {\n            System.out.println(historicActivityInstance.getActivityId() + \" took \"\n                    + historicActivityInstance.getDurationInMillis() + \" milliseconds\");\n        }\n\n    }\n```\n\n输出结果\n\n```txt\nstartEvent took 1 milliseconds\napproveTask took 837735 milliseconds\ndecision took 13 milliseconds\nsendRejectionMail took 2 milliseconds\nrejectEnd took 1 milliseconds\n```\n\n好了~flowable的基本应用我们就先介绍到这里了。\n\n\n\n\n\n# Flowable流程设计器\n\n## Eclipse Designer\n\nFlowable提供了名为Flowable Eclipse Designer的Eclipse插件，可以用于图形化地建模、测试与部署BPMN 2.0流程。\n\n### 下载安装Eclipse\n\n去Eclipse官网下载即可：https://www.eclipse.org/downloads/packages/release 注意2020-09后的版本不再支持jdk8\n\n![image-20220316202904261](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316202904261.png)\n\n解压缩就可以了，然后进入解压缩的目录\n\n![image-20220316203036602](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203036602.png)\n\n直接启动即可\n\n![image-20220316203111301](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203111301.png)\n\n\n\n\n\n![image-20220316203237316](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203237316.png)\n\n\n\n### 安装Flowable插件\n\n然后我们再安装下Flowable的插件，选择**Help → Install New Software**。在下图面板中，点击*Add*按钮，并填写下列字段\n\n- **Name:** Flowable BPMN 2.0 designer\n- **Location:** http://www.flowable.org/designer/update/\n\n\n\n![image-20220316203454281](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203454281.png)\n\n\n\n这种在线更新的方式已经被官网移除了，操作不了\n\n![image-20220316211319931](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211319931.png)\n\n\n\n这时我们就只能通过离线安装的方式来实现了，下载对应的离线文件\n\n![image-20220316211405001](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211405001.png)\n\n安装步骤来操作，\n\n![image-20220316211518520](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211518520.png)\n\n\n\n然后继续：选择**Help → Install New Software**\n\n![image-20220316211622115](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211622115.png)\n\n\n\n![image-20220316211651195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211651195.png)\n\n下一步\n\n![image-20220316211729581](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211729581.png)\n\n\n\n再下一步\n\n![image-20220316211802548](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211802548.png)\n\n然后finish。弹出如下窗口\n\n![image-20220316212008477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212008477.png)\n\n重启即可\n\n\n\n### 创建项目\n\n然后我们就可以创建一个Flowable Project了\n\n![image-20220316212418899](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212418899.png)\n\n然后我们可以在src/mian/resources/ 的目录下创建对应的流程图了\n\n![image-20220316212605146](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212605146.png)\n\n\n\n看到如下的界面说明插件安装成功了\n\n![image-20220316212720767](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212720767.png)\n\n\n\n\n\n### 创建流程图\n\n使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的面板，最终的效果\n\n![image-20220316214339678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214339678.png)\n\n指定流程的主键\n\n![image-20220316214430644](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214430644.png)\n\n\n\n指定任务的负责人\n\n在Properties视图中指定每个任务节点的负责人\n\n![image-20220316214700887](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214700887.png)\n\n创建请假单：zhangsan\n\n审批请假单：lisi\n\n当我们设置完成后保存文件，会同时生成png图片\n\n![image-20220316214808400](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214808400.png)\n\n注意：生成图片需要如下配置\n\n![image-20220316214256235](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214256235.png)\n\n\n\n### 部署流程\n\n首先在Eclipse中生成bar文件，选中项目然后鼠标右击\n\n![image-20220316215805503](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215805503.png)\n\n然后会发现在项目的根目录下多了一个deployment文件夹，里面多了一个MyProcess.bar文件\n\n![image-20220316215900052](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215900052.png)\n\n然后我们就可以把这个bar文件拷贝到IDEA中，继续部署的流程\n\n![image-20220316215945236](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215945236.png)\n\n\n\n而部署的代码和前面没啥区别\n\n```java\n    @Test\n    public void testDeploy(){\n        // 1.获取 ProcessEngine 对象\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        // 2.获取RepositoryService\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"MyHoliday.bar\");\n        ZipInputStream zipInputStream = new ZipInputStream(in);\n        // 3.完成流程的部署操作 ZIP 或者 Bar文件\n        Deployment deploy = repositoryService.createDeployment()\n               // .addClasspathResource(\"MyHoliday.bar\")// 关联要部署的流程文件\n                .addZipInputStream(zipInputStream)\n                .name(\"XXX公司请求流程\")\n                .deploy() ;// 部署流程\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n```\n\n执行后查看表结构，相关的信息就进去了\n\n![image-20220316220121734](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316220121734.png)\n\n\n\n\n\n\n\n完整的案例代码：\n\n```java\npackage com.bobo.flowable.test;\n\nimport org.flowable.engine.*;\nimport org.flowable.engine.history.HistoricActivityInstance;\nimport org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;\nimport org.flowable.engine.repository.Deployment;\nimport org.flowable.engine.runtime.ProcessInstance;\nimport org.flowable.task.api.Task;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.zip.ZipInputStream;\n\npublic class Test02 {\n\n    ProcessEngineConfiguration configuration = null;\n    @Before\n    public void before(){\n        // 获取  ProcessEngineConfiguration 对象\n        configuration = new StandaloneProcessEngineConfiguration();\n        // 配置 相关的数据库的连接信息\n        configuration.setJdbcDriver(\"com.mysql.cj.jdbc.Driver\");\n        configuration.setJdbcUsername(\"root\");\n        configuration.setJdbcPassword(\"123456\");\n        configuration.setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&nullCatalogMeansCurrent=true\");\n        // 如果数据库中的表结构不存在就新建\n        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n    }\n\n    /**\n     * 部署流程\n     *\n     */\n    @Test\n    public void testDeploy(){\n        // 1.获取 ProcessEngine 对象\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        // 2.获取RepositoryService\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"MyHoliday.bar\");\n        ZipInputStream zipInputStream = new ZipInputStream(in);\n        // 3.完成流程的部署操作 ZIP 或者 Bar文件\n        Deployment deploy = repositoryService.createDeployment()\n               // .addClasspathResource(\"MyHoliday.bar\")// 关联要部署的流程文件\n                .addZipInputStream(zipInputStream)\n                .name(\"XXX公司请求流程\")\n                .deploy() ;// 部署流程\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n\n        // 我们需要通过RuntimeService来启动流程实例\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n\n        // 启动流程实例\n        ProcessInstance holidayRequest = runtimeService.startProcessInstanceById(\"myProcess:1:25004\");\n        System.out.println(\"holidayRequest.getProcessDefinitionId() = \" + holidayRequest.getProcessDefinitionId());\n        System.out.println(\"holidayRequest.getActivityId() = \" + holidayRequest.getActivityId());\n        System.out.println(\"holidayRequest.getId() = \" + holidayRequest.getId());\n    }\n\n    /**\n     * 测试任务查询\n     */\n    @Test\n    public void testQueryTask(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                .processDefinitionKey(\"myProcess\") // 指定查询的流程编程\n                .taskAssignee(\"zhangsan\") // 查询这个任务的处理人\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getProcessDefinitionId() = \" + task.getProcessDefinitionId());\n            System.out.println(\"task.getName() = \" + task.getName());\n            System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            System.out.println(\"task.getDescription() = \" + task.getDescription());\n            System.out.println(\"task.getId() = \" + task.getId());\n        }\n    }\n\n    /**\n     * 完成当前任务\n     */\n    @Test\n    public void testCompleteTask(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionKey(\"myProcess\")\n                .taskAssignee(\"lisi\")\n                .singleResult();\n        // 创建流程变量\n\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n        }\n\n\n    }\n\n    /**\n     * 获取流程任务的历史数据\n     */\n    @Test\n    public void testHistory(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        HistoryService historyService = processEngine.getHistoryService();\n        List<HistoricActivityInstance> list = historyService.createHistoricActivityInstanceQuery()\n                .processDefinitionId(\"myProcess:1:25004\")\n                .finished() // 查询的历史记录的状态是已经完成\n                .orderByHistoricActivityInstanceEndTime().asc() // 指定排序的字段和顺序\n                .list();\n        for (HistoricActivityInstance history : list) {\n            System.out.println(history.getActivityName()+\":\"+history.getAssignee()+\"--\"\n                    +history.getActivityId()+\":\" + history.getDurationInMillis()+\"毫秒\");\n        }\n\n    }\n}\n\n```\n\n\n\n## Flowable UI应用\n\nFlowable提供了几个web应用，用于演示及介绍Flowable项目提供的功能：\n\n- Flowable IDM: 身份管理应用。为所有Flowable UI应用提供单点登录认证功能，并且为拥有IDM管理员权限的用户提供了管理用户、组与权限的功能。\n- Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。\n- Flowable Task: 运行时任务应用。提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。\n- Flowable Admin: 管理应用。让具有管理员权限的用户可以查询BPMN、DMN、Form及Content引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过REST API连接至引擎，并与Flowable Task应用及Flowable REST应用一同部署。\n\n所有其他的应用都需要Flowable IDM提供认证。每个应用的WAR文件可以部署在相同的servlet容器（如Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的cookie进行认证，因此应用需要运行在相同的域名下。\n\n\n\n### 安装部署\n\n下载Tomcat：https://tomcat.apache.org/download-80.cgi 官网下载后解压缩到非中文目录即可，然后是下载FlowableUI的文件，在Flowable6.6之后把FlowableUI中提供的四个功能合并到了一起。\n\n![image-20220318102128672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102128672.png)\n\n然后把解压缩后的两个war包拷贝到Tomcat的解压缩的webapps目录下\n\n![image-20220318102224330](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102224330.png)\n\nTomcat目录：\n\n![image-20220318102255188](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102255188.png)\n\n\n\n### 启动服务\n\n启动Tomcat服务，执行startup.bat文件\n\n![image-20220318102325924](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102325924.png)\n\n如果启动中出现乱码修改Tomcat的conf目录下的 logging.properties 文件中的编码\n\n![image-20220318102446699](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102446699.png)\n\n\n\n如果一闪而过则检查jdk的环境变量配置。启动成功后，在浏览器中访问 http://localhost:8080/flowable-ui, 默认的账号密码是 admin/test\n\n![image-20220318102609807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102609807.png)\n\n\n\n### 用户管理\n\n我们先在 `身份管理应用程序` 中创建用户并授权\n\n![image-20220318102707368](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102707368.png)\n\n创建用户\n\n![image-20220318102734238](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102734238.png)\n\n\n\n\n\n填写详细信息\n\n![image-20220318102817782](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102817782.png)\n\n\n\n授权管理\n\n![image-20220318102859814](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102859814.png)\n\n\n\n\n\n### 绘制流程\n\n\n\n创建新的流程\n\n![image-20220318101239742](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101239742.png)\n\n流程图界面\n\n![image-20220318101346692](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101346692.png)\n\n\n\n\n\n创建流程，分配处理人\n\n![image-20220318101639424](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101639424.png)\n\n\n\n\n\n![image-20220318101611564](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101611564.png)\n\n继续完成流程图的创建\n\n![image-20220318101810272](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101810272.png)\n\n\n\n\n\n### 部署流程\n\n绘制好的流程图，我们只需要一键导出即可\n\n![image-20220318103413285](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103413285.png)\n\n下载下来后拷贝到项目的resource目录下即可\n\n![image-20220318103518807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103518807.png)\n\n\n\n\n\n然后就是正常的操作流程了\n\n\n\n\n\n### FlowableUI 演示\n\n#### 部署流程\n\n在FlowableUI中提供了演示程序\n\n![image-20220318104517967](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104517967.png)\n\n创建一个新的应用程序，并指定相关的信息\n\n![image-20220318104614784](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104614784.png)\n\n创建应用后需要指定对应的流程图\n\n![image-20220318104703306](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104703306.png)\n\n\n\n![image-20220318104735714](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104735714.png)\n\n\n\n\n\n![image-20220318104811812](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104811812.png)\n\n\n\n发布应用程序\n\n![image-20220318105045345](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105045345.png)\n\n\n\n\n\n\n\n#### 启动流程\n\n发布了应用程序后我们就可以来启动流程了\n\n![image-20220318105258331](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105258331.png)\n\n\n\n![image-20220318105315908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105315908.png)\n\n\n\n\n\n![image-20220318105336107](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105336107.png)\n\n\n\n![image-20220318105420011](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105420011.png)\n\n点击显示图：\n\n![image-20220318105444672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105444672.png)\n\n也就是可以看到当前是user1来处理，user1登录后可以看到要处理的流程，user2登录是看不到的。\n\n![image-20220318105646273](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105646273.png)\n\n\n\n点击完成后流程就向下一步流转了\n\n![image-20220318105727192](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105727192.png)\n\n\n\n这时再通过user2登录，就可以看到对应的代办的信息\n\n![image-20220318105808830](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105808830.png)\n\n\n\n![image-20220318105848185](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105848185.png)\n\n然后点击完成，那么整个流程就介绍了\n\n\n\n\n\n\n\n# Flowable基础表结构\n\n## 表结构讲解\n\n工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚Flowable的实现原理和细节，我们有必要先弄清楚Flowable的相关表结构及其作用。在Flowable中的表结构在初始化的时候会创建五类表结构，具体如下：\n\n* **ACT_RE** ：'RE'表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。\n* **ACT_RU**：'RU'表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。\n* **ACT_HI**：'HI'表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。\n* **ACT_GE**： GE 表示 general。 通用数据， 用于不同场景下 \n* **ACT_ID:**   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。\n\n\n\n具体的表结构的含义:\n\n| **表分类**   | **表名**              | **解释**                                           |\n| ------------ | --------------------- | -------------------------------------------------- |\n| 一般数据     |                       |                                                    |\n|              | [ACT_GE_BYTEARRAY]    | 通用的流程定义和流程资源                           |\n|              | [ACT_GE_PROPERTY]     | 系统相关属性                                       |\n| 流程历史记录 |                       |                                                    |\n|              | [ACT_HI_ACTINST]      | 历史的流程实例                                     |\n|              | [ACT_HI_ATTACHMENT]   | 历史的流程附件                                     |\n|              | [ACT_HI_COMMENT]      | 历史的说明性信息                                   |\n|              | [ACT_HI_DETAIL]       | 历史的流程运行中的细节信息                         |\n|              | [ACT_HI_IDENTITYLINK] | 历史的流程运行过程中用户关系                       |\n|              | [ACT_HI_PROCINST]     | 历史的流程实例                                     |\n|              | [ACT_HI_TASKINST]     | 历史的任务实例                                     |\n|              | [ACT_HI_VARINST]      | 历史的流程运行中的变量信息                         |\n| 流程定义表   |                       |                                                    |\n|              | [ACT_RE_DEPLOYMENT]   | 部署单元信息                                       |\n|              | [ACT_RE_MODEL]        | 模型信息                                           |\n|              | [ACT_RE_PROCDEF]      | 已部署的流程定义                                   |\n| 运行实例表   |                       |                                                    |\n|              | [ACT_RU_EVENT_SUBSCR] | 运行时事件                                         |\n|              | [ACT_RU_EXECUTION]    | 运行时流程执行实例                                 |\n|              | [ACT_RU_IDENTITYLINK] | 运行时用户关系信息，存储任务节点与参与者的相关信息 |\n|              | [ACT_RU_JOB]          | 运行时作业                                         |\n|              | [ACT_RU_TASK]         | 运行时任务                                         |\n|              | [ACT_RU_VARIABLE]     | 运行时变量表                                       |\n| 用户用户组表 |                       |                                                    |\n|              | [ACT_ID_BYTEARRAY]    | 二进制数据表                                       |\n|              | [ACT_ID_GROUP]        | 用户组信息表                                       |\n|              | [ACT_ID_INFO]         | 用户信息详情表                                     |\n|              | [ACT_ID_MEMBERSHIP]   | 人与组关系表                                       |\n|              | [ACT_ID_PRIV]         | 权限表                                             |\n|              | [ACT_ID_PRIV_MAPPING] | 用户或组权限关系表                                 |\n|              | [ACT_ID_PROPERTY]     | 属性表                                             |\n|              | [ACT_ID_TOKEN]        | 记录用户的token信息                                |\n|              | [ACT_ID_USER]         | 用户表                                             |\n\n \n\n\n\n## ProcessEngine讲解\n\n### 硬编码的方式\n\n我们前面讲解案例的时候是通过ProcessEngineConfiguration这个配置类来加载的。\n\n```java\n// 配置数据库相关信息 获取 ProcessEngineConfiguration\nProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n    .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n    .setJdbcUsername(\"root\")\n    .setJdbcPassword(\"123456\")\n    .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n// 获取流程引擎对象\nProcessEngine processEngine = cfg.buildProcessEngine();\n```\n\n这种方式会调用buildProcessEngine()方法，里面的核心代码为：\n\n![image-20220319113106848](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113106848.png)\n\n\n\n![image-20220319113139646](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113139646.png)\n\n\n\n\n\n### 配置文件\n\n除了上面的硬编码的方式外，我们还可以在resources目录下创建一个`flowable.cfg.xml`文件，注意这个名称是固定的哦。内容如下：\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"processEngineConfiguration\"\n          class=\"org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n        <property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/flow1?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true\" /><property name=\"jdbcDriver\" value=\"com.mysql.cj.jdbc.Driver\" />\n        <property name=\"jdbcUsername\" value=\"root\" />\n        <property name=\"jdbcPassword\" value=\"123456\" />\n        <property name=\"databaseSchemaUpdate\" value=\"true\" />\n        <property name=\"asyncExecutorActivate\" value=\"false\" />\n    </bean>\n</beans>\n```\n\n在上面的配置文件中配置相关的信息。我们在Java代码中就可以简化为：\n\n```java\n    @Test\n    public void test01(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n可以看下getDefaultProcessEngine的源码，在里面最终还是执行了和硬编码一样的代码\n\n```java\n    public static ProcessEngine getProcessEngine(String processEngineName) {\n        if (!isInitialized()) {\n            init(); // 完成初始化操作\n        }\n        return processEngines.get(processEngineName);\n    }\n```\n\n进入init方法\n\n```java\n    public static synchronized void init() {\n        if (!isInitialized()) {\n            if (processEngines == null) {\n                // Create new map to store process-engines if current map is null\n                processEngines = new HashMap<>();\n            }\n            ClassLoader classLoader = ReflectUtil.getClassLoader();\n            Enumeration<URL> resources = null;\n            try {\n                resources = classLoader.getResources(\"flowable.cfg.xml\"); // 加载flowable.cfg.xml配置文件\n            } catch (IOException e) {\n                throw new FlowableIllegalArgumentException(\"problem retrieving flowable.cfg.xml resources on the classpath: \" + System.getProperty(\"java.class.path\"), e);\n            }\n\n            // Remove duplicated configuration URL's using set. Some\n            // classloaders may return identical URL's twice, causing duplicate\n            // startups\n            Set<URL> configUrls = new HashSet<>();\n            while (resources.hasMoreElements()) {\n                configUrls.add(resources.nextElement());\n            }\n            for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {\n                URL resource = iterator.next();\n                LOGGER.info(\"Initializing process engine using configuration '{}'\", resource.toString());\n                initProcessEngineFromResource(resource); // 初始化ProcessEngine\n            }\n\n            try {\n                resources = classLoader.getResources(\"flowable-context.xml\"); // 在整合Spring的情况下加载该文件\n            } catch (IOException e) {\n                throw new FlowableIllegalArgumentException(\"problem retrieving flowable-context.xml resources on the classpath: \" + System.getProperty(\"java.class.path\"), e);\n            }\n            while (resources.hasMoreElements()) {\n                URL resource = resources.nextElement();\n                LOGGER.info(\"Initializing process engine using Spring configuration '{}'\", resource.toString());\n                initProcessEngineFromSpringResource(resource); // 从Spring的资源文件中完成ProcessEngine的初始化\n            }\n\n            setInitialized(true);\n        } else {\n            LOGGER.info(\"Process engines already initialized\");\n        }\n    }\n```\n\n在源码中提供了单独使用好整合Spring的配置加载方式。再进入到initProcessEngineFromResource(resource)方法中：\n\n![image-20220319114011806](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114011806.png)\n\n\n\n![image-20220319114053252](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114053252.png)\n\n\n\n![image-20220319114210012](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114210012.png)\n\n\n\n而且我们也可以看到ProcessEngine最终的实现是 ProcessEngineImpl对象。\n\n\n\n### 自定义配置文件\n\n最后我们如果要加载自定义名称的配置文件可以通过ProcessEngineConfiguration中的对应构造方法来实现\n\n```java\n    @Test\n    public void test2() throws Exception{\n        ProcessEngineConfiguration configuration = ProcessEngineConfiguration\n                .createProcessEngineConfigurationFromResource(\"flowable.cfg.xml\");\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n\n\n\n\n## Servcie服务接口\n\nService是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表\n\n\n\n![image-20220319223019186](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319223019186.png)\n\n\n\n### Service创建方式\n\n通过ProcessEngine创建Service\n\n方式如下：\n\n ```java\nRuntimeService runtimeService = processEngine.getRuntimeService();\nRepositoryService repositoryService = processEngine.getRepositoryService();\nTaskService taskService = processEngine.getTaskService();\n// ...\n ```\n\n### Service总览\n\n| service名称       | service作用              |\n| ----------------- | ------------------------ |\n| RepositoryService | Flowable的资源管理类     |\n| RuntimeService    | Flowable的流程运行管理类 |\n| TaskService       | Flowable的任务管理类     |\n| HistoryService    | Flowable的历史管理类     |\n| ManagerService    | Flowable的引擎管理类     |\n\n 简单介绍：\n\n**RepositoryService**\n\n是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。\n\n除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。\n\n暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。\n\n获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。\n\n**RuntimeService**\n\nActiviti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息\n\n**TaskService**\n\nActiviti的任务管理类。可以从这个类中获取任务的信息。\n\n**HistoryService**\n\nFlowable的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。\n\n**ManagementService**\n\nActiviti的引擎管理类，提供了对Flowable 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Flowable 系统的日常维护。\n\n\n\n\n\n## 图标介绍\n\nBPMN 2.0是业务流程建模符号2.0的缩写。它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些**符号**来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。接下来我们先来了解在流程设计中常见的 符号。\n\nBPMN2.0的**基本符合**主要包含：\n\n### 事件图标\n\n在Flowable中的事件图标启动事件，边界事件,中间事件和结束事件.\n\n![image-20220320103803308](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103803308.png)\n\n\n\n### 活动(任务)图标\n\n活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下:\n\n![image-20220320103929543](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103929543.png)\n\n### 结构图标\n\n结构图标可以看做是整个流程活动的结构，一个流程中可以包括子流程。常见的结构有：\n\n![image-20220320104025737](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220320104025737.png)\n\n\n\n### 网关图标\n\n网关用来处理决策，有几种常用网关需要了解：\n\n![image-20220320104157816](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320104157816.png)\n\n\n\n\n\n\n\n\n\n## 流程部署详解\n\n### 部署实现\n\n我们先来看下流程部署的具体过程。代码实现\n\n```java\n/**\n     * 部署流程\n     */\n    @Test\n    public void test3(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"holiday-request-new.bpmn20.xml\")\n                .name(\"请假流程...\")\n                .category(\"请假\") // 分类\n                .tenantId(\"dpb\") // 租户id\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"deploy.getCategory() = \" + deploy.getCategory());\n    }\n```\n\n### 部署涉及表结构\n\n涉及到的三张表：\n\n部署资源表：act_ge_bytearray\n\n| 字段           | 名称               | 备注                                                         |\n| -------------- | ------------------ | ------------------------------------------------------------ |\n| ID_            | 主键               |                                                              |\n| REV_           | 版本号             |                                                              |\n| NAME_          | 名称               | 部署的文件名称，如：holiday-request-new.bpmn20.xml、holiday-request-new.bpmn20.png |\n| DEPLOYMENT_ID_ | 部署ID             |                                                              |\n| BYTES_         | 字节（二进制数据） |                                                              |\n| GENERATED_     | 是否系统生成       | 0为用户上传，<br/>1为系统自动生成， 比如系统会 自动根据xml生 成png |\n\n\n\n部署ID表：act_re_deployment\n\n\n\n| 字段               | 名称           | 备注 |\n| ------------------ | -------------- | ---- |\n| ID_                | 主键           |      |\n| NAME_              | 名称           |      |\n| CATEGORY_          | 分类           |      |\n| TENANT_ID_         | 租户ID         |      |\n| DEPLOY_TIME_       | 部署时间       |      |\n| DERIVED_FROM_      | 来源于         |      |\n| DERIVED_FROM_ROOT_ | 来源于         |      |\n| ENGINE_VERSION_    | 流程引擎的版本 |      |\n\n流程表：act_re_procdef\n\n| 字段                    | 名称             | 备注                              |\n| ----------------------- | ---------------- | --------------------------------- |\n| ID_                     | 主键             |                                   |\n| REV_                    | 版本号           |                                   |\n| CATEGORY_               | 分类             | 流程定义的Namespace就是类别       |\n| NAME_                   | 名称             |                                   |\n| KEY_                    | 标识             |                                   |\n| VERSION_                | 版本             |                                   |\n| DEPLOYMENT_ID_          | 部署ID           |                                   |\n| RESOURCE_NAME_          | 资源名称         | 流程bpmn文件名称                  |\n| DGRM_RESOURCE_NAME_     | 图片资源名称     |                                   |\n| DESCRIPTION_            | 描述             |                                   |\n| HAS_START_FORM_KEY_     | 拥有开始表单标识 | start节点是否存在formKey  0否 1是 |\n| HAS_GRAPHICAL_NOTATION_ | 拥有图形信息     |                                   |\n| SUSPENSION_STATE_       | 挂起状态         | 暂停状态 1激活 2暂停              |\n| TENANT_ID_              | 租户ID           |                                   |\n|                         |                  |                                   |\n\n注意：\n\n业务流程定义数据表。此表和ACT_RE_DEPLOYMENT是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在ACT_REPROCDEF表内，每个流程定义的数据，都会对于ACT_GE_BYTEARRAY表内的一个资源文件和PNG图片文件。和ACT_GE_BYTEARRAY的关联是通过程序用ACT_GE_BYTEARRAY.NAME与ACT_RE_PROCDEF.NAME_完成的\n\n\n\n### 挂起和激活\n\n部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。\n\n流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。\n\n```java\n/**\n     * 挂起流程\n     */\n    @Test\n    public void test05(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .processDefinitionId(\"holiday:1:4\")\n                .singleResult();\n        // 获取流程定义的状态\n        boolean suspended = processDefinition.isSuspended();\n        System.out.println(\"suspended = \" + suspended);\n        if(suspended){\n            // 表示被挂起\n            System.out.println(\"激活流程定义\");\n            repositoryService.activateProcessDefinitionById(\"holiday:1:4\",true,null);\n        }else{\n            // 表示激活状态\n            System.out.println(\"挂起流程\");\n            repositoryService.suspendProcessDefinitionById(\"holiday:1:4\",true,null);\n        }\n    }\n```\n\n具体的实现其实就是更新了流程定义表中的字段\n\n![image-20220321210010518](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321210010518.png)\n\n而且通过REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误\n\n![image-20220321211858122](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321211858122.png)\n\n\n\n\n\n## 启动流程实例\n\n然后我们来看看启动流程实例的过程。实现代码如下：\n\n```java\n/**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 构建流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"employee\",\"张三\") ;// 谁申请请假\n        variables.put(\"nrOfHolidays\",3); // 请几天假\n        variables.put(\"description\",\"工作累了，想出去玩玩\"); // 请假的原因\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"holiday:1:4\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n当我们启动了一个流程实例后，会在ACT_RU_*对应的表结构中操作,运行时实例涉及的表结构共10张：\n\n* ACT_RU_DEADLETTER_JOB  正在运行的任务表 \n* ACT_RU_EVENT_SUBSCR 运行时事件 \n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_HISTORY_JOB  历史作业表 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_JOB 运行时作业表 \n* ACT_RU_SUSPENDED_JOB 暂停作业表 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_TIMER_JOB 定时作业表 \n* ACT_RU_VARIABLE  运行时变量表\n\n\n\n启动一个流程实例的时候涉及到的表有\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\n\n\nACT_RU_EXECUTION表结构\n\n| 字段                  | 名称                 | 备注 |\n| --------------------- | -------------------- | ---- |\n| ID_                   | 主键                 |      |\n| REV_                  | 版本号               |      |\n| PROC_INST_ID_         | 流程实例ID           |      |\n| BUSINESS_KEY_         | 业务主键ID           |      |\n| PARENT_ID_            | 父执行流的ID         |      |\n| PROC_DEF_ID_          | 流程定义的数据ID     |      |\n| SUPER_EXEC_           |                      |      |\n| ROOT_PROC_INST_ID_    | 流程实例的root流程id |      |\n| ACT_ID_               | 节点实例ID           |      |\n| IS_ACTIVE_            | 是否存活             |      |\n| IS_CONCURRENT_        | 执行流是否正在并行   |      |\n| IS_SCOPE_             |                      |      |\n| IS_EVENT_SCOPE_       |                      |      |\n| IS_MI_ROOT_           |                      |      |\n| SUSPENSION_STATE_     | 流程终端状态         |      |\n| CACHED_ENT_STATE_     |                      |      |\n| TENANT_ID_            | 租户编号             |      |\n| NAME_                 |                      |      |\n| START_TIME_           | 开始时间             |      |\n| START_USER_ID_        | 开始的用户编号       |      |\n| LOCK_TIME_            | 锁定时间             |      |\n| IS_COUNT_ENABLED_     |                      |      |\n| EVT_SUBSCR_COUNT_     |                      |      |\n| TASK_COUNT_           |                      |      |\n| JOB_COUNT_            |                      |      |\n| TIMER_JOB_COUNT_      |                      |      |\n| SUSP_JOB_COUNT_       |                      |      |\n| DEADLETTER_JOB_COUNT_ |                      |      |\n| VAR_COUNT_            |                      |      |\n| ID_LINK_COUNT_        |                      |      |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133108405](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133108405.png)\n\n![image-20220322133219534](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133219534.png)\n\n\n\nACT_RU_TASK  运行时任务表\n\n| 字段              | 名称                 | 备注                |\n| ----------------- | -------------------- | ------------------- |\n| ID_               | 主键                 |                     |\n| REV_              | 版本号               |                     |\n| EXECUTION_ID_     | 任务所在的执行流ID   |                     |\n| PROC_INST_ID_     | 流程实例ID           |                     |\n| PROC_DEF_ID_      | 流程定义数据ID       |                     |\n| NAME_             | 任务名称             |                     |\n| PARENT_TASK_ID_   | 父任务ID             |                     |\n| DESCRIPTION_      | 说明                 |                     |\n| TASK_DEF_KEY_     | 任务定义的ID值       |                     |\n| OWNER_            | 任务拥有人           |                     |\n| ASSIGNEE_         | 被指派执行该任务的人 |                     |\n| DELEGATION_       | 委托人               |                     |\n| PRIORITY_         | 优先级               |                     |\n| CREATE_TIME_      | 创建时间             |                     |\n| DUE_DATE_         | 耗时                 |                     |\n| CATEGORY_         | 类别                 |                     |\n| SUSPENSION_STATE_ | 是否挂起             | 1代表激活 2代表挂起 |\n| TENANT_ID_        | 租户编号             |                     |\n| FORM_KEY_         |                      |                     |\n| CLAIM_TIME_       | 拾取时间             |                     |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133307195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133307195.png)\n\n![image-20220322133335326](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133335326.png)\n\n\n\nACT_RU_VARIABLE  运行时变量表\n\n| 字段          | 名称                           | 备注                                 |\n| ------------- | ------------------------------ | ------------------------------------ |\n| ID_           | 主键                           |                                      |\n| REV_          | 版本号                         |                                      |\n| TYPE_         | 参数类型                       | 可以是基本的类型，也可以用户自行扩展 |\n| NAME_         | 参数名称                       |                                      |\n| EXECUTION_ID_ | 参数执行ID                     |                                      |\n| PROC_INST_ID_ | 流程实例ID                     |                                      |\n| TASK_ID_      | 任务ID                         |                                      |\n| BYTEARRAY_ID_ | 资源ID                         |                                      |\n| DOUBLE_       | 参数为double，则保存在该字段中 |                                      |\n| LONG_         | 参数为long，则保存在该字段中   |                                      |\n| TEXT_         | 用户保存文本类型的参数值       |                                      |\n| TEXT2_        | 用户保存文本类型的参数值       |                                      |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133406398](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133406398.png)\n\n![image-20220322133439827](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133439827.png)\n\n\n\nACT_RU_IDENTITYLINK 运行时用户关系信息 \n\n| 字段          | 名称         | 备注                                                         |\n| ------------- | ------------ | ------------------------------------------------------------ |\n| ID_           | 主键         |                                                              |\n| REV_          | 版本号       |                                                              |\n| GROUP_ID_     | 用户组ID     |                                                              |\n| TYPE_         | 关系数据类型 | assignee支配人(组)、candidate候选人(组)、owner拥有人,participant参与者 |\n| USER_ID_      | 用户ID       |                                                              |\n| TASK_ID_      | 任务ID       |                                                              |\n| PROC_INST_ID_ | 流程定义ID   |                                                              |\n| PROC_DEF_ID_  | 属性ID       |                                                              |\n\n创建流程实例后对应的表结构的数据:\n\n![image-20220322133501720](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133501720.png)\n\n\n\n\n\n## 处理流程\n\n上面的流程已经流转到了zhangsan这个用户这里，然后可以开始审批了\n\n```java\n// 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"holiday:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        // 添加流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"approved\",false); // 拒绝请假\n        // 完成任务\n        taskService.complete(task.getId(),variables);\n```\n\n在正常处理流程中涉及到的表结构\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\nACT_RU_TASK  运行时任务表 :会新生成一条记录\n\n![image-20220322135040119](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135040119.png)\n\n![image-20220322135125703](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135125703.png)\n\nACT_RU_VARIABLE  运行时变量表:会记录新的流程变量\n\n![image-20220322135204021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135204021.png)\n\n\n\n当然流程实例也可以挂起\n\n```java\n// 1.获取ProcessEngine对象\nProcessEngine engine = ProcessEngines.getDefaultProcessEngine();\n// 2.获取RuntimeService\nRuntimeService runtimeService = engine.getRuntimeService();\n// 3.获取流程实例对象\nProcessInstance processInstance = runtimeService.createProcessInstanceQuery()\n    .processInstanceId(\"25001\")\n    .singleResult();\n// 4.获取相关的状态操作\nboolean suspended = processInstance.isSuspended();\nString id = processInstance.getId();\nif(suspended){\n    // 挂起--》激活\n    runtimeService.activateProcessInstanceById(id);\n    System.out.println(\"流程定义：\" + id + \"，已激活\");\n}else{\n    // 激活--》挂起\n    runtimeService.suspendProcessInstanceById(id);\n    System.out.println(\"流程定义：\" + id + \"，已挂起\");\n}\n```\n\n\n\n启动第二个流程实例后再查看相关的表结构时，对他们的关系理解会更加的清楚一些\n\n启动一个新的流程实例对应的就会产生两条记录\n\n![image-20220322135605252](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135605252.png)\n\n\n\nIDENTITYLINK中会记录每次流程操作的信息\n\n![image-20220322135636841](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135636841.png)\n\n\n\n![image-20220322135659671](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135659671.png)\n\n\n\n流程变量数据，及时key 相同，但是属于不同的流程实例相互间也是隔离的\n\n![image-20220322135719104](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135719104.png)\n\n## 完成一个流程\n\n然后我们把第一个流程处理完成\n\n```java\nProcessEngine processEngine = cfg.buildProcessEngine();\nTaskService taskService = processEngine.getTaskService();\nTask task = taskService.createTaskQuery()\n    .processDefinitionId(\"holiday:1:4\")\n    .taskAssignee(\"lisi\")\n    .singleResult();\n// 添加流程变量\nMap<String,Object> variables = new HashMap<>();\nvariables.put(\"approved\",false); // 拒绝请假\n// 完成任务\ntaskService.complete(task.getId(),variables);\n```\n\n处理完了一个工作流程后，我们来看看相关的表结构信息\n\n首先我们会发现\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\n这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息\n\n* ACT_HI_ACTINST  历史的流程实例\n\n* ACT_HI_ATTACHMENT 历史的流程附件\n* ACT_HI_COMMENT  历史的说明性信息\n* ACT_HI_DETAIL 历史的流程运行中的细节信息\n* ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系\n* ACT_HI_PROCINST  历史的流程实例\n* ACT_HI_TASKINST  历史的任务实例\n* ACT_HI_VARINST  历史的流程运行中的变量信息\n\n在我们上面的处理流程的过程中设计到的历史表有\n\nACT_HI_ACTINST  历史的流程实例\n\n| 字段               | 名称                 | 备注 |\n| ------------------ | -------------------- | ---- |\n| ID_                | 主键                 |      |\n| PROC_DEF_ID_       | 流程定义ID           |      |\n| PROC_INST_ID_      | 流程实例ID           |      |\n| EXECUTION_ID_      | 执行ID               |      |\n| ACT_ID_            | 节点实例ID           |      |\n| TASK_ID_           | 任务ID               |      |\n| CALL_PROC_INST_ID_ | 调用外部的流程实例ID |      |\n| ACT_NAME_          | 节点名称             |      |\n| ACT_TYPE_          | 节点类型             |      |\n| ASSIGNEE_          | 处理人               |      |\n| START_TIME_        | 开始时间             |      |\n| END_TIME_          | 结束时间             |      |\n| DURATION_          | 耗时                 |      |\n| DELETE_REASON_     | 删除原因             |      |\n| TENANT_ID_         | 租户编号             |      |\n\n![image-20220322141800554](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141800554.png)\n\n![image-20220322141825065](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141825065.png)\n\n\n\nACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系\n\n| 字段                 | 名称         | 备注 |\n| -------------------- | ------------ | ---- |\n| ID_                  | 主键         |      |\n| GROUP_ID_            | 组编号       |      |\n| TYPE_                | 类型         |      |\n| USER_ID_             | 用户编号     |      |\n| TASK_ID_             | 任务编号     |      |\n| CREATE_TIME_         | 创建时间     |      |\n| PROC_INST_ID_        | 流程实例编号 |      |\n| SCOPE_ID_            |              |      |\n| SCOPE_TYPE_          |              |      |\n| SCOPE_DEFINITION_ID_ |              |      |\n|                      |              |      |\n\n\n\n![image-20220322141717826](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141717826.png)\n\nACT_HI_PROCINST  历史的流程实例\n\n| 字段                       | 名称         | 备注 |\n| -------------------------- | ------------ | ---- |\n| ID_                        | 主键         |      |\n| PROC_INST_ID_              | 流程实例ID   |      |\n| BUSINESS_KEY_              | 业务主键     |      |\n| PROC_DEF_ID_               | 属性ID       |      |\n| START_TIME_                | 开始时间     |      |\n| END_TIME_                  | 结束时间     |      |\n| DURATION_                  | 耗时         |      |\n| START_USER_ID_             | 起始人       |      |\n| START_ACT_ID_              | 起始节点     |      |\n| END_ACT_ID_                | 结束节点     |      |\n| SUPER_PROCESS_INSTANCE_ID_ | 父流程实例ID |      |\n| DELETE_REASON_             | 删除原因     |      |\n| TENANT_ID_                 | 租户编号     |      |\n| NAME_                      | 名称         |      |\n\n\n\n![image-20220322141855401](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141855401.png)\n\n\n\n![image-20220322141912602](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141912602.png)\n\n\n\nACT_HI_TASKINST  历史的任务实例\n\n| 字段            | 名称                    | 备注                                   |\n| --------------- | ----------------------- | -------------------------------------- |\n| ID_             | 主键                    |                                        |\n| PROC_DEF_ID_    | 流程定义ID              |                                        |\n| TASK_DEF_KEY_   | 任务定义的ID值          |                                        |\n| PROC_INST_ID_   | 流程实例ID              |                                        |\n| EXECUTION_ID_   | 执行ID                  |                                        |\n| PARENT_TASK_ID_ | 父任务ID                |                                        |\n| NAME_           | 名称                    |                                        |\n| DESCRIPTION_    | 说明                    |                                        |\n| OWNER_          | 实际签收人 任务的拥有者 | 签收人（默认为空，只有在委托时才有值） |\n| ASSIGNEE_       | 被指派执行该任务的人    |                                        |\n| START_TIME_     | 开始时间                |                                        |\n| CLAIM_TIME_     | 任务拾取时间            |                                        |\n| END_TIME_       | 结束时间                |                                        |\n| DURATION_       | 耗时                    |                                        |\n| DELETE_REASON_  | 删除原因                |                                        |\n| PRIORITY_       | 优先级别                |                                        |\n| DUE_DATE_       | 过期时间                |                                        |\n| FORM_KEY_       | 节点定义的formkey       |                                        |\n| CATEGORY_       | 类别                    |                                        |\n| TENANT_ID_      | 租户                    |                                        |\n\n![image-20220322142609163](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142609163.png)\n\n![image-20220322142650699](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142650699.png)\n\n\n\nACT_HI_VARINST  历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的\n\n| 字段          | 名称               | 备注 |\n| ------------- | ------------------ | ---- |\n| ID_           | 主键               |      |\n| PROC_INST_ID_ | 流程实例ID         |      |\n| EXECUTION_ID_ | 指定ID             |      |\n| TASK_ID_      | 任务ID             |      |\n| NAME_         | 名称               |      |\n| VAR_TYPE_     | 参数类型           |      |\n| REV_          | 数据版本           |      |\n| BYTEARRAY_ID_ | 字节表ID           |      |\n| DOUBLE_       | 存储double类型数据 |      |\n| LONG_         | 存储long类型数据   |      |\n| .....         |                    |      |\n\n\n\n![image-20220322142756867](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142756867.png)\n\n好了一个相对简单的流程处理涉及到的相关表结构内容就介绍完了\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2022/10/flowable基础篇.md","raw":"---\ntitle: flowable基础篇\ndate: 2022-10-19 23:50:41\ntags: [BPMN,Flowable]\ncategories: [笔记]\n---\n# flowable基础篇\n> Lecture：波波老师\n\n\n# Flowable介绍\n\nFlowable是BPMN的一个基于java的软件实现，不过Flowable不仅仅包括BPMN，还有DMN决策表和CMMN Case管理引擎，并且有自己的用户管理、微服务API等一系列功能，是一个服务平台。\n\n![image-20220317101115398](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn\\image-20220317101115398.png)\n\n\n\n\n\n# Flowable基础\n\n官方手册：https://tkjohn.github.io/flowable-userguide/#_introduction\n\n## 创建ProcessEngine\n\n创建一个基本的maven工程，可以是Eclipse也可以是其他IDEA。然后添加两个依赖\n\n* Flowable流程引擎。使我们可以创建一个ProcessEngine流程引擎对象，并访问Flowable API。\n* 一个是MySQL的数据库驱动\n\n在*pom.xml*文件中添加下列行：\n\n```xml\n<dependency>\n    <groupId>org.flowable</groupId>\n    <artifactId>flowable-engine</artifactId>\n    <version>6.3.0</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.21</version>\n</dependency>\n```\n\n然后创建一个普通的Java类，添加对应的main方法，首先要做的是初始化**ProcessEngine**流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 *ProcessEngine*由**ProcessEngineConfiguration**实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置XML文件创建*ProcessEngineConfiguration*，但是（像在这里做的一样）也可以编程方式创建它。 *ProcessEngineConfiguration*所需的最小配置，是数据库JDBC连接：\n\n```java\npublic static void main(String[] args) {\n    ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n        .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC\")\n        .setJdbcUsername(\"root\")\n        .setJdbcPassword(\"123456\")\n        .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n        .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n    ProcessEngine processEngine = cfg.buildProcessEngine();\n}\n```\n\n注意在mysql8.0中执行可能出现如下的错误\n\n![image-20220316093416477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093416477.png)\n\n出现这种情况只需要在mysql的连接字符串中添加上nullCatalogMeansCurrent=true，设置为只查当前连接的schema库即可。\n\n```java\n    public static void main(String[] args) {\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn1?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n    }\n```\n\n然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable使用[SLF4J](http://www.slf4j.org/)作为内部日志框架。在这个例子中，我们使用log4j作为SLF4J的实现。因此在pom.xml文件中添加下列依赖：\n\n```xml\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.21</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.21</version>\n</dependency>\n```\n\nLog4j需要一个配置文件。在*src/main/resources*文件夹下添加*log4j.properties*文件，并写入下列内容：\n\n```properties\nlog4j.rootLogger=DEBUG, CA\n\nlog4j.appender.CA=org.apache.log4j.ConsoleAppender\nlog4j.appender.CA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CA.layout.ConversionPattern= %d{hh:mm:ss,SSS} [%t] %-5p %c %x - %m%n\n```\n\n重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：\n\n![image-20220316093922199](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093922199.png)\n\n同时可以看到创建了相关的表结构在数据库中\n\n![image-20220316093957662](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093957662.png)\n\n这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！\n\n\n\n## 部署流程定义\n\n接下来我们构建一个非常简单的请假流程，Flowable引擎需要流程定义为BPMN 2.0格式，这是一个业界广泛接受的XML标准。 在Flowable术语中，我们将其称为一个**流程定义(process definition)**。一个*流程定义*可以启动多个**流程实例(process instance)**。*流程定义*可以看做是重复执行流程的蓝图。 在这个例子中，*流程定义*定义了请假的各个步骤，而一个*流程实例*对应某个雇员提出的一个请假申请。\n\nBPMN 2.0存储为XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样BPMN 2.0标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。\n\n我们要使用的流程定义为：\n\n![getting.started.bpmn.process](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/getting.started.bpmn.process.png)\n\n\n\n流程定义说明：\n\n* 我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。\n* 左侧的圆圈叫做**启动事件(start event)**。这是一个流程实例的起点。\n* 第一个矩形是一个**用户任务(user task)**。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请\n* 取决于经理的决定，**排他网关(exclusive gateway)** (带叉的菱形)会将流程实例路由至批准或驳回路径\n* 如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。\n* 如果驳回，则为雇员发送一封邮件通知他。\n\n\n\n一般来说，这样的*流程定义*使用可视化建模工具建立，如Flowable Designer(Eclipse)或Flowable Web Modeler(Web应用)。但在这里我们直接撰写XML，以熟悉BPMN 2.0及其概念。\n\n与上面展示的流程图对应的BPMN 2.0 XML在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的XML文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在XML的*BPMNDiagram*标签中，作为*definitions*标签的子元素）。\n\n将下面的XML保存在*src/main/resources*文件夹下名为*holiday-request.bpmn20.xml*的文件中。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\"\n             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\"\n             xmlns:flowable=\"http://flowable.org/bpmn\"\n             typeLanguage=\"http://www.w3.org/2001/XMLSchema\"\n             expressionLanguage=\"http://www.w3.org/1999/XPath\"\n             targetNamespace=\"http://www.flowable.org/processdef\">\n\n    <process id=\"holidayRequest\" name=\"Holiday Request\" isExecutable=\"true\">\n\n        <startEvent id=\"startEvent\"/>\n        <sequenceFlow sourceRef=\"startEvent\" targetRef=\"approveTask\"/>\n\n        <userTask id=\"approveTask\" name=\"Approve or reject request\"/>\n        <sequenceFlow sourceRef=\"approveTask\" targetRef=\"decision\"/>\n\n        <exclusiveGateway id=\"decision\"/>\n        <sequenceFlow sourceRef=\"decision\" targetRef=\"externalSystemCall\">\n            <conditionExpression xsi:type=\"tFormalExpression\">\n                <![CDATA[\n          ${approved}\n        ]]>\n            </conditionExpression>\n        </sequenceFlow>\n        <sequenceFlow  sourceRef=\"decision\" targetRef=\"sendRejectionMail\">\n            <conditionExpression xsi:type=\"tFormalExpression\">\n                <![CDATA[\n          ${!approved}\n        ]]>\n            </conditionExpression>\n        </sequenceFlow>\n\n        <serviceTask id=\"externalSystemCall\" name=\"Enter holidays in external system\"\n                     flowable:class=\"org.flowable.CallExternalSystemDelegate\"/>\n        <sequenceFlow sourceRef=\"externalSystemCall\" targetRef=\"holidayApprovedTask\"/>\n\n        <userTask id=\"holidayApprovedTask\" name=\"Holiday approved\"/>\n        <sequenceFlow sourceRef=\"holidayApprovedTask\" targetRef=\"approveEnd\"/>\n\n        <serviceTask id=\"sendRejectionMail\" name=\"Send out rejection email\"\n                     flowable:class=\"org.flowable.SendRejectionMail\"/>\n        <sequenceFlow sourceRef=\"sendRejectionMail\" targetRef=\"rejectEnd\"/>\n\n        <endEvent id=\"approveEnd\"/>\n\n        <endEvent id=\"rejectEnd\"/>\n    </process>\n\n</definitions>\n```\n\n现在我们已经有了流程BPMN 2.0 XML文件，下来需要将它***部署(deploy)\\***到引擎中。*部署*一个流程定义意味着：\n\n* 流程引擎会将XML文件存储在数据库中，这样可以在需要的时候获取它\n* 流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动*流程实例*。\n\n\n\n![image-20220317110902636](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317110902636.png)\n\n\n\n将流程定义*部署*至Flowable引擎，需要使用*RepositoryService*，其可以从*ProcessEngine*对象获取。使用*RepositoryService*，可以通过XML文件的路径创建一个新的*部署(Deployment)*，并调用*deploy()*方法实际执行：\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void testDeploy(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 部署流程 获取RepositoryService对象\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deployment = repositoryService.createDeployment()// 创建Deployment对象\n                .addClasspathResource(\"holiday-request.bpmn20.xml\") // 添加流程部署文件\n                .name(\"请求流程\") // 设置部署流程的名称\n                .deploy(); // 执行部署操作\n        System.out.println(\"deployment.getId() = \" + deployment.getId());\n        System.out.println(\"deployment.getName() = \" + deployment.getName());\n\n    }\n```\n\n然后执行该方法日志操作成功：\n\n![image-20220316100439048](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100439048.png)\n\n在后台表结构也可以看到相关的信息\n\nact_re_deployment: 流程定义部署表，每部署一次就增加一条记录\n\n![image-20220316100532725](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100532725.png)\n\n\n\nact_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录\n\n![image-20220316100611004](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100611004.png)\n\n\n\nact_ge_bytearray ：流程资源表，流程部署的 bpmn文件和png图片会保存在该表中\n\n![image-20220316100648362](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100648362.png)\n\n\n\n\n\n我们现在可以通过API查询验证流程定义已经部署在引擎中（并学习一些API）。通过*RepositoryService*创建的*ProcessDefinitionQuery*对象实现。\n\n```java\n/**\n     * 查看流程定义\n     */\n    @Test\n    public void testDeployQuery(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 部署流程 获取RepositoryService对象\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        // 获取流程定义对象\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .deploymentId(\"2501\")\n                .singleResult();\n        System.out.println(\"processDefinition.getId() = \" + processDefinition.getId());\n        System.out.println(\"processDefinition.getName() = \" + processDefinition.getName());\n        System.out.println(\"processDefinition.getDeploymentId() = \" + processDefinition.getDeploymentId());\n        System.out.println(\"processDefinition.getDescription() = \" + processDefinition.getDescription());\n\n    }\n```\n\n输出结果为：\n\n```txt\nprocessDefinition.getId() = holidayRequest:2:2503\nprocessDefinition.getName() = Holiday Request\nprocessDefinition.getDeploymentId() = 2501\nprocessDefinition.getDescription() = null\n```\n\n\n\n## 启动流程实例\n\n现在已经在流程引擎中*部署*了流程定义，因此可以使用这个*流程定义*作为“模板”启动*流程实例*。\n\n![image-20220316102638015](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316102638015.png)\n\n要启动流程实例，需要提供一些初始化*流程变量*。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用*RuntimeService*启动一个*流程实例*。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 构建流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"employee\",\"张三\") ;// 谁申请请假\n        variables.put(\"nrOfHolidays\",3); // 请几天假\n        variables.put(\"description\",\"工作累了，想出去玩玩\"); // 请假的原因\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceByKey(\"holidayRequest\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n启动成功，输出结果如下：\n\n```txt\n流程定义的ID：holidayRequest:2:2503\n流程实例的ID：5001\n当前活动的ID：null\n```\n\n对应的流程实例ID为：5001\n\n启动流程实例涉及到的表结构：\n\n* act_hi_actinst 流程实例执行历史\n* act_hi_identitylink 流程的参与用户的历史信息\n* act_hi_procinst 流程实例历史信息\n* act_hi_taskinst 流程任务历史信息\n* act_ru_execution 流程执行信息\n* act_ru_identitylink 流程的参与用户信息\n* act_ru_task 任务信息\n\n\n\n## 查看任务\n\n上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个\n\n![image-20220316110406801](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316110406801.png)\n\n\n\n然后我们来查看下lisi的任务\n\n```java\n    /**\n     * 查看任务\n     */\n    @Test\n    public void testQueryTask(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                .processDefinitionKey(\"holidayRequestNew\")\n                .taskAssignee(\"lisi\")\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getProcessDefinitionId() = \" + task.getProcessDefinitionId());\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n```\n\n输出结果为：\n\n```txt\ntask.getProcessDefinitionId() = holidayRequestNew:1:10003\ntask.getId() = 12508\ntask.getAssignee() = lisi\ntask.getName() = Approve or reject request\n```\n\n\n\n## 完成任务\n\n现在李四这个角色可以来完成当前的任务了\n\n![image-20220316111124019](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111124019.png)\n\n\n\n在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到JavaDelegate来触发。\n\n![image-20220316111253702](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111253702.png)\n\n\n\n我们定义这样一个Java类\n\n```java\npublic class SendRejectionMail implements JavaDelegate {\n    /**\n     * 触发发送邮件的操作\n     * @param delegateExecution\n     */\n    @Override\n    public void execute(DelegateExecution delegateExecution) {\n        System.out.println(\"请假被拒绝,,,安心工作吧\");\n    }\n}\n```\n\n然后来完成任务\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void testCompleteTask(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionKey(\"holidayRequestNew\")\n                .taskAssignee(\"lisi\")\n                .singleResult();\n        // 添加流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"approved\",false); // 拒绝请假\n        // 完成任务\n        taskService.complete(task.getId(),variables);\n    }\n```\n\n然后可以看到JavaDelegate触发了\n\n![image-20220316111913933](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111913933.png)\n\n\n\n\n\n## 流程的删除\n\n有些流程已经没有用了，我们需要删除掉，其实也非常简单\n\n```java\n    /**\n     * 删除流程\n     */\n    @Test\n    public void testDeleteProcess(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        // 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错\n        // repositoryService.deleteDeployment(\"1\");\n        // 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。\n        repositoryService.deleteDeployment(\"2501\",true);\n\n    }\n```\n\n## 查看历史信息\n\n选择使用Flowable这样的流程引擎的原因之一，是它可以自动存储所有流程实例的**审计数据**或**历史数据**。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。\n\n例如，如果希望显示流程实例已经执行的时间，就可以从*ProcessEngine*获取*HistoryService*，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：\n\n- 只选择一个特定流程实例的活动\n- 只选择已完成的活动\n\n结果按照结束时间排序，代表其执行顺序。\n\n```java\n/**\n     * 查看历史\n     */\n    @Test\n    public void testQueryHistory(){\n        // 配置数据库相关信息 获取 ProcessEngineConfiguration\n        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n                .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n                .setJdbcUsername(\"root\")\n                .setJdbcPassword(\"123456\")\n                .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n        // 获取流程引擎对象\n        ProcessEngine processEngine = cfg.buildProcessEngine();\n        HistoryService historyService = processEngine.getHistoryService();\n        List<HistoricActivityInstance> list = historyService.createHistoricActivityInstanceQuery()\n                .processDefinitionId(\"holidayRequestNew:1:10003\")\n                .finished()\n                .orderByHistoricActivityInstanceEndTime().asc()\n                .list();\n        for (HistoricActivityInstance historicActivityInstance : list) {\n            System.out.println(historicActivityInstance.getActivityId() + \" took \"\n                    + historicActivityInstance.getDurationInMillis() + \" milliseconds\");\n        }\n\n    }\n```\n\n输出结果\n\n```txt\nstartEvent took 1 milliseconds\napproveTask took 837735 milliseconds\ndecision took 13 milliseconds\nsendRejectionMail took 2 milliseconds\nrejectEnd took 1 milliseconds\n```\n\n好了~flowable的基本应用我们就先介绍到这里了。\n\n\n\n\n\n# Flowable流程设计器\n\n## Eclipse Designer\n\nFlowable提供了名为Flowable Eclipse Designer的Eclipse插件，可以用于图形化地建模、测试与部署BPMN 2.0流程。\n\n### 下载安装Eclipse\n\n去Eclipse官网下载即可：https://www.eclipse.org/downloads/packages/release 注意2020-09后的版本不再支持jdk8\n\n![image-20220316202904261](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316202904261.png)\n\n解压缩就可以了，然后进入解压缩的目录\n\n![image-20220316203036602](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203036602.png)\n\n直接启动即可\n\n![image-20220316203111301](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203111301.png)\n\n\n\n\n\n![image-20220316203237316](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203237316.png)\n\n\n\n### 安装Flowable插件\n\n然后我们再安装下Flowable的插件，选择**Help → Install New Software**。在下图面板中，点击*Add*按钮，并填写下列字段\n\n- **Name:** Flowable BPMN 2.0 designer\n- **Location:** http://www.flowable.org/designer/update/\n\n\n\n![image-20220316203454281](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203454281.png)\n\n\n\n这种在线更新的方式已经被官网移除了，操作不了\n\n![image-20220316211319931](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211319931.png)\n\n\n\n这时我们就只能通过离线安装的方式来实现了，下载对应的离线文件\n\n![image-20220316211405001](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211405001.png)\n\n安装步骤来操作，\n\n![image-20220316211518520](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211518520.png)\n\n\n\n然后继续：选择**Help → Install New Software**\n\n![image-20220316211622115](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211622115.png)\n\n\n\n![image-20220316211651195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211651195.png)\n\n下一步\n\n![image-20220316211729581](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211729581.png)\n\n\n\n再下一步\n\n![image-20220316211802548](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211802548.png)\n\n然后finish。弹出如下窗口\n\n![image-20220316212008477](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212008477.png)\n\n重启即可\n\n\n\n### 创建项目\n\n然后我们就可以创建一个Flowable Project了\n\n![image-20220316212418899](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212418899.png)\n\n然后我们可以在src/mian/resources/ 的目录下创建对应的流程图了\n\n![image-20220316212605146](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212605146.png)\n\n\n\n看到如下的界面说明插件安装成功了\n\n![image-20220316212720767](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212720767.png)\n\n\n\n\n\n### 创建流程图\n\n使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的面板，最终的效果\n\n![image-20220316214339678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214339678.png)\n\n指定流程的主键\n\n![image-20220316214430644](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214430644.png)\n\n\n\n指定任务的负责人\n\n在Properties视图中指定每个任务节点的负责人\n\n![image-20220316214700887](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214700887.png)\n\n创建请假单：zhangsan\n\n审批请假单：lisi\n\n当我们设置完成后保存文件，会同时生成png图片\n\n![image-20220316214808400](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214808400.png)\n\n注意：生成图片需要如下配置\n\n![image-20220316214256235](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214256235.png)\n\n\n\n### 部署流程\n\n首先在Eclipse中生成bar文件，选中项目然后鼠标右击\n\n![image-20220316215805503](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215805503.png)\n\n然后会发现在项目的根目录下多了一个deployment文件夹，里面多了一个MyProcess.bar文件\n\n![image-20220316215900052](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215900052.png)\n\n然后我们就可以把这个bar文件拷贝到IDEA中，继续部署的流程\n\n![image-20220316215945236](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215945236.png)\n\n\n\n而部署的代码和前面没啥区别\n\n```java\n    @Test\n    public void testDeploy(){\n        // 1.获取 ProcessEngine 对象\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        // 2.获取RepositoryService\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"MyHoliday.bar\");\n        ZipInputStream zipInputStream = new ZipInputStream(in);\n        // 3.完成流程的部署操作 ZIP 或者 Bar文件\n        Deployment deploy = repositoryService.createDeployment()\n               // .addClasspathResource(\"MyHoliday.bar\")// 关联要部署的流程文件\n                .addZipInputStream(zipInputStream)\n                .name(\"XXX公司请求流程\")\n                .deploy() ;// 部署流程\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n```\n\n执行后查看表结构，相关的信息就进去了\n\n![image-20220316220121734](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316220121734.png)\n\n\n\n\n\n\n\n完整的案例代码：\n\n```java\npackage com.bobo.flowable.test;\n\nimport org.flowable.engine.*;\nimport org.flowable.engine.history.HistoricActivityInstance;\nimport org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;\nimport org.flowable.engine.repository.Deployment;\nimport org.flowable.engine.runtime.ProcessInstance;\nimport org.flowable.task.api.Task;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.zip.ZipInputStream;\n\npublic class Test02 {\n\n    ProcessEngineConfiguration configuration = null;\n    @Before\n    public void before(){\n        // 获取  ProcessEngineConfiguration 对象\n        configuration = new StandaloneProcessEngineConfiguration();\n        // 配置 相关的数据库的连接信息\n        configuration.setJdbcDriver(\"com.mysql.cj.jdbc.Driver\");\n        configuration.setJdbcUsername(\"root\");\n        configuration.setJdbcPassword(\"123456\");\n        configuration.setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&nullCatalogMeansCurrent=true\");\n        // 如果数据库中的表结构不存在就新建\n        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n    }\n\n    /**\n     * 部署流程\n     *\n     */\n    @Test\n    public void testDeploy(){\n        // 1.获取 ProcessEngine 对象\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        // 2.获取RepositoryService\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"MyHoliday.bar\");\n        ZipInputStream zipInputStream = new ZipInputStream(in);\n        // 3.完成流程的部署操作 ZIP 或者 Bar文件\n        Deployment deploy = repositoryService.createDeployment()\n               // .addClasspathResource(\"MyHoliday.bar\")// 关联要部署的流程文件\n                .addZipInputStream(zipInputStream)\n                .name(\"XXX公司请求流程\")\n                .deploy() ;// 部署流程\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n\n        // 我们需要通过RuntimeService来启动流程实例\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n\n        // 启动流程实例\n        ProcessInstance holidayRequest = runtimeService.startProcessInstanceById(\"myProcess:1:25004\");\n        System.out.println(\"holidayRequest.getProcessDefinitionId() = \" + holidayRequest.getProcessDefinitionId());\n        System.out.println(\"holidayRequest.getActivityId() = \" + holidayRequest.getActivityId());\n        System.out.println(\"holidayRequest.getId() = \" + holidayRequest.getId());\n    }\n\n    /**\n     * 测试任务查询\n     */\n    @Test\n    public void testQueryTask(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                .processDefinitionKey(\"myProcess\") // 指定查询的流程编程\n                .taskAssignee(\"zhangsan\") // 查询这个任务的处理人\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getProcessDefinitionId() = \" + task.getProcessDefinitionId());\n            System.out.println(\"task.getName() = \" + task.getName());\n            System.out.println(\"task.getAssignee() = \" + task.getAssignee());\n            System.out.println(\"task.getDescription() = \" + task.getDescription());\n            System.out.println(\"task.getId() = \" + task.getId());\n        }\n    }\n\n    /**\n     * 完成当前任务\n     */\n    @Test\n    public void testCompleteTask(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionKey(\"myProcess\")\n                .taskAssignee(\"lisi\")\n                .singleResult();\n        // 创建流程变量\n\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n        }\n\n\n    }\n\n    /**\n     * 获取流程任务的历史数据\n     */\n    @Test\n    public void testHistory(){\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        HistoryService historyService = processEngine.getHistoryService();\n        List<HistoricActivityInstance> list = historyService.createHistoricActivityInstanceQuery()\n                .processDefinitionId(\"myProcess:1:25004\")\n                .finished() // 查询的历史记录的状态是已经完成\n                .orderByHistoricActivityInstanceEndTime().asc() // 指定排序的字段和顺序\n                .list();\n        for (HistoricActivityInstance history : list) {\n            System.out.println(history.getActivityName()+\":\"+history.getAssignee()+\"--\"\n                    +history.getActivityId()+\":\" + history.getDurationInMillis()+\"毫秒\");\n        }\n\n    }\n}\n\n```\n\n\n\n## Flowable UI应用\n\nFlowable提供了几个web应用，用于演示及介绍Flowable项目提供的功能：\n\n- Flowable IDM: 身份管理应用。为所有Flowable UI应用提供单点登录认证功能，并且为拥有IDM管理员权限的用户提供了管理用户、组与权限的功能。\n- Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。\n- Flowable Task: 运行时任务应用。提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。\n- Flowable Admin: 管理应用。让具有管理员权限的用户可以查询BPMN、DMN、Form及Content引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过REST API连接至引擎，并与Flowable Task应用及Flowable REST应用一同部署。\n\n所有其他的应用都需要Flowable IDM提供认证。每个应用的WAR文件可以部署在相同的servlet容器（如Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的cookie进行认证，因此应用需要运行在相同的域名下。\n\n\n\n### 安装部署\n\n下载Tomcat：https://tomcat.apache.org/download-80.cgi 官网下载后解压缩到非中文目录即可，然后是下载FlowableUI的文件，在Flowable6.6之后把FlowableUI中提供的四个功能合并到了一起。\n\n![image-20220318102128672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102128672.png)\n\n然后把解压缩后的两个war包拷贝到Tomcat的解压缩的webapps目录下\n\n![image-20220318102224330](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102224330.png)\n\nTomcat目录：\n\n![image-20220318102255188](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102255188.png)\n\n\n\n### 启动服务\n\n启动Tomcat服务，执行startup.bat文件\n\n![image-20220318102325924](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102325924.png)\n\n如果启动中出现乱码修改Tomcat的conf目录下的 logging.properties 文件中的编码\n\n![image-20220318102446699](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102446699.png)\n\n\n\n如果一闪而过则检查jdk的环境变量配置。启动成功后，在浏览器中访问 http://localhost:8080/flowable-ui, 默认的账号密码是 admin/test\n\n![image-20220318102609807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102609807.png)\n\n\n\n### 用户管理\n\n我们先在 `身份管理应用程序` 中创建用户并授权\n\n![image-20220318102707368](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102707368.png)\n\n创建用户\n\n![image-20220318102734238](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102734238.png)\n\n\n\n\n\n填写详细信息\n\n![image-20220318102817782](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102817782.png)\n\n\n\n授权管理\n\n![image-20220318102859814](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102859814.png)\n\n\n\n\n\n### 绘制流程\n\n\n\n创建新的流程\n\n![image-20220318101239742](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101239742.png)\n\n流程图界面\n\n![image-20220318101346692](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101346692.png)\n\n\n\n\n\n创建流程，分配处理人\n\n![image-20220318101639424](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101639424.png)\n\n\n\n\n\n![image-20220318101611564](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101611564.png)\n\n继续完成流程图的创建\n\n![image-20220318101810272](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101810272.png)\n\n\n\n\n\n### 部署流程\n\n绘制好的流程图，我们只需要一键导出即可\n\n![image-20220318103413285](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103413285.png)\n\n下载下来后拷贝到项目的resource目录下即可\n\n![image-20220318103518807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103518807.png)\n\n\n\n\n\n然后就是正常的操作流程了\n\n\n\n\n\n### FlowableUI 演示\n\n#### 部署流程\n\n在FlowableUI中提供了演示程序\n\n![image-20220318104517967](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104517967.png)\n\n创建一个新的应用程序，并指定相关的信息\n\n![image-20220318104614784](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104614784.png)\n\n创建应用后需要指定对应的流程图\n\n![image-20220318104703306](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104703306.png)\n\n\n\n![image-20220318104735714](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104735714.png)\n\n\n\n\n\n![image-20220318104811812](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104811812.png)\n\n\n\n发布应用程序\n\n![image-20220318105045345](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105045345.png)\n\n\n\n\n\n\n\n#### 启动流程\n\n发布了应用程序后我们就可以来启动流程了\n\n![image-20220318105258331](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105258331.png)\n\n\n\n![image-20220318105315908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105315908.png)\n\n\n\n\n\n![image-20220318105336107](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105336107.png)\n\n\n\n![image-20220318105420011](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105420011.png)\n\n点击显示图：\n\n![image-20220318105444672](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105444672.png)\n\n也就是可以看到当前是user1来处理，user1登录后可以看到要处理的流程，user2登录是看不到的。\n\n![image-20220318105646273](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105646273.png)\n\n\n\n点击完成后流程就向下一步流转了\n\n![image-20220318105727192](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105727192.png)\n\n\n\n这时再通过user2登录，就可以看到对应的代办的信息\n\n![image-20220318105808830](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105808830.png)\n\n\n\n![image-20220318105848185](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105848185.png)\n\n然后点击完成，那么整个流程就介绍了\n\n\n\n\n\n\n\n# Flowable基础表结构\n\n## 表结构讲解\n\n工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚Flowable的实现原理和细节，我们有必要先弄清楚Flowable的相关表结构及其作用。在Flowable中的表结构在初始化的时候会创建五类表结构，具体如下：\n\n* **ACT_RE** ：'RE'表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。\n* **ACT_RU**：'RU'表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。\n* **ACT_HI**：'HI'表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。\n* **ACT_GE**： GE 表示 general。 通用数据， 用于不同场景下 \n* **ACT_ID:**   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。\n\n\n\n具体的表结构的含义:\n\n| **表分类**   | **表名**              | **解释**                                           |\n| ------------ | --------------------- | -------------------------------------------------- |\n| 一般数据     |                       |                                                    |\n|              | [ACT_GE_BYTEARRAY]    | 通用的流程定义和流程资源                           |\n|              | [ACT_GE_PROPERTY]     | 系统相关属性                                       |\n| 流程历史记录 |                       |                                                    |\n|              | [ACT_HI_ACTINST]      | 历史的流程实例                                     |\n|              | [ACT_HI_ATTACHMENT]   | 历史的流程附件                                     |\n|              | [ACT_HI_COMMENT]      | 历史的说明性信息                                   |\n|              | [ACT_HI_DETAIL]       | 历史的流程运行中的细节信息                         |\n|              | [ACT_HI_IDENTITYLINK] | 历史的流程运行过程中用户关系                       |\n|              | [ACT_HI_PROCINST]     | 历史的流程实例                                     |\n|              | [ACT_HI_TASKINST]     | 历史的任务实例                                     |\n|              | [ACT_HI_VARINST]      | 历史的流程运行中的变量信息                         |\n| 流程定义表   |                       |                                                    |\n|              | [ACT_RE_DEPLOYMENT]   | 部署单元信息                                       |\n|              | [ACT_RE_MODEL]        | 模型信息                                           |\n|              | [ACT_RE_PROCDEF]      | 已部署的流程定义                                   |\n| 运行实例表   |                       |                                                    |\n|              | [ACT_RU_EVENT_SUBSCR] | 运行时事件                                         |\n|              | [ACT_RU_EXECUTION]    | 运行时流程执行实例                                 |\n|              | [ACT_RU_IDENTITYLINK] | 运行时用户关系信息，存储任务节点与参与者的相关信息 |\n|              | [ACT_RU_JOB]          | 运行时作业                                         |\n|              | [ACT_RU_TASK]         | 运行时任务                                         |\n|              | [ACT_RU_VARIABLE]     | 运行时变量表                                       |\n| 用户用户组表 |                       |                                                    |\n|              | [ACT_ID_BYTEARRAY]    | 二进制数据表                                       |\n|              | [ACT_ID_GROUP]        | 用户组信息表                                       |\n|              | [ACT_ID_INFO]         | 用户信息详情表                                     |\n|              | [ACT_ID_MEMBERSHIP]   | 人与组关系表                                       |\n|              | [ACT_ID_PRIV]         | 权限表                                             |\n|              | [ACT_ID_PRIV_MAPPING] | 用户或组权限关系表                                 |\n|              | [ACT_ID_PROPERTY]     | 属性表                                             |\n|              | [ACT_ID_TOKEN]        | 记录用户的token信息                                |\n|              | [ACT_ID_USER]         | 用户表                                             |\n\n \n\n\n\n## ProcessEngine讲解\n\n### 硬编码的方式\n\n我们前面讲解案例的时候是通过ProcessEngineConfiguration这个配置类来加载的。\n\n```java\n// 配置数据库相关信息 获取 ProcessEngineConfiguration\nProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()\n    .setJdbcUrl(\"jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&nullCatalogMeansCurrent=true\")\n    .setJdbcUsername(\"root\")\n    .setJdbcPassword(\"123456\")\n    .setJdbcDriver(\"com.mysql.cj.jdbc.Driver\")\n    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n// 获取流程引擎对象\nProcessEngine processEngine = cfg.buildProcessEngine();\n```\n\n这种方式会调用buildProcessEngine()方法，里面的核心代码为：\n\n![image-20220319113106848](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113106848.png)\n\n\n\n![image-20220319113139646](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113139646.png)\n\n\n\n\n\n### 配置文件\n\n除了上面的硬编码的方式外，我们还可以在resources目录下创建一个`flowable.cfg.xml`文件，注意这个名称是固定的哦。内容如下：\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"processEngineConfiguration\"\n          class=\"org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration\">\n        <property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/flow1?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true\" /><property name=\"jdbcDriver\" value=\"com.mysql.cj.jdbc.Driver\" />\n        <property name=\"jdbcUsername\" value=\"root\" />\n        <property name=\"jdbcPassword\" value=\"123456\" />\n        <property name=\"databaseSchemaUpdate\" value=\"true\" />\n        <property name=\"asyncExecutorActivate\" value=\"false\" />\n    </bean>\n</beans>\n```\n\n在上面的配置文件中配置相关的信息。我们在Java代码中就可以简化为：\n\n```java\n    @Test\n    public void test01(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n可以看下getDefaultProcessEngine的源码，在里面最终还是执行了和硬编码一样的代码\n\n```java\n    public static ProcessEngine getProcessEngine(String processEngineName) {\n        if (!isInitialized()) {\n            init(); // 完成初始化操作\n        }\n        return processEngines.get(processEngineName);\n    }\n```\n\n进入init方法\n\n```java\n    public static synchronized void init() {\n        if (!isInitialized()) {\n            if (processEngines == null) {\n                // Create new map to store process-engines if current map is null\n                processEngines = new HashMap<>();\n            }\n            ClassLoader classLoader = ReflectUtil.getClassLoader();\n            Enumeration<URL> resources = null;\n            try {\n                resources = classLoader.getResources(\"flowable.cfg.xml\"); // 加载flowable.cfg.xml配置文件\n            } catch (IOException e) {\n                throw new FlowableIllegalArgumentException(\"problem retrieving flowable.cfg.xml resources on the classpath: \" + System.getProperty(\"java.class.path\"), e);\n            }\n\n            // Remove duplicated configuration URL's using set. Some\n            // classloaders may return identical URL's twice, causing duplicate\n            // startups\n            Set<URL> configUrls = new HashSet<>();\n            while (resources.hasMoreElements()) {\n                configUrls.add(resources.nextElement());\n            }\n            for (Iterator<URL> iterator = configUrls.iterator(); iterator.hasNext();) {\n                URL resource = iterator.next();\n                LOGGER.info(\"Initializing process engine using configuration '{}'\", resource.toString());\n                initProcessEngineFromResource(resource); // 初始化ProcessEngine\n            }\n\n            try {\n                resources = classLoader.getResources(\"flowable-context.xml\"); // 在整合Spring的情况下加载该文件\n            } catch (IOException e) {\n                throw new FlowableIllegalArgumentException(\"problem retrieving flowable-context.xml resources on the classpath: \" + System.getProperty(\"java.class.path\"), e);\n            }\n            while (resources.hasMoreElements()) {\n                URL resource = resources.nextElement();\n                LOGGER.info(\"Initializing process engine using Spring configuration '{}'\", resource.toString());\n                initProcessEngineFromSpringResource(resource); // 从Spring的资源文件中完成ProcessEngine的初始化\n            }\n\n            setInitialized(true);\n        } else {\n            LOGGER.info(\"Process engines already initialized\");\n        }\n    }\n```\n\n在源码中提供了单独使用好整合Spring的配置加载方式。再进入到initProcessEngineFromResource(resource)方法中：\n\n![image-20220319114011806](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114011806.png)\n\n\n\n![image-20220319114053252](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114053252.png)\n\n\n\n![image-20220319114210012](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114210012.png)\n\n\n\n而且我们也可以看到ProcessEngine最终的实现是 ProcessEngineImpl对象。\n\n\n\n### 自定义配置文件\n\n最后我们如果要加载自定义名称的配置文件可以通过ProcessEngineConfiguration中的对应构造方法来实现\n\n```java\n    @Test\n    public void test2() throws Exception{\n        ProcessEngineConfiguration configuration = ProcessEngineConfiguration\n                .createProcessEngineConfigurationFromResource(\"flowable.cfg.xml\");\n        ProcessEngine processEngine = configuration.buildProcessEngine();\n        System.out.println(\"processEngine = \" + processEngine);\n    }\n```\n\n\n\n\n\n## Servcie服务接口\n\nService是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表\n\n\n\n![image-20220319223019186](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319223019186.png)\n\n\n\n### Service创建方式\n\n通过ProcessEngine创建Service\n\n方式如下：\n\n ```java\nRuntimeService runtimeService = processEngine.getRuntimeService();\nRepositoryService repositoryService = processEngine.getRepositoryService();\nTaskService taskService = processEngine.getTaskService();\n// ...\n ```\n\n### Service总览\n\n| service名称       | service作用              |\n| ----------------- | ------------------------ |\n| RepositoryService | Flowable的资源管理类     |\n| RuntimeService    | Flowable的流程运行管理类 |\n| TaskService       | Flowable的任务管理类     |\n| HistoryService    | Flowable的历史管理类     |\n| ManagerService    | Flowable的引擎管理类     |\n\n 简单介绍：\n\n**RepositoryService**\n\n是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。\n\n除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。\n\n暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。\n\n获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。\n\n**RuntimeService**\n\nActiviti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息\n\n**TaskService**\n\nActiviti的任务管理类。可以从这个类中获取任务的信息。\n\n**HistoryService**\n\nFlowable的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。\n\n**ManagementService**\n\nActiviti的引擎管理类，提供了对Flowable 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Flowable 系统的日常维护。\n\n\n\n\n\n## 图标介绍\n\nBPMN 2.0是业务流程建模符号2.0的缩写。它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些**符号**来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。接下来我们先来了解在流程设计中常见的 符号。\n\nBPMN2.0的**基本符合**主要包含：\n\n### 事件图标\n\n在Flowable中的事件图标启动事件，边界事件,中间事件和结束事件.\n\n![image-20220320103803308](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103803308.png)\n\n\n\n### 活动(任务)图标\n\n活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下:\n\n![image-20220320103929543](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103929543.png)\n\n### 结构图标\n\n结构图标可以看做是整个流程活动的结构，一个流程中可以包括子流程。常见的结构有：\n\n![image-20220320104025737](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220320104025737.png)\n\n\n\n### 网关图标\n\n网关用来处理决策，有几种常用网关需要了解：\n\n![image-20220320104157816](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320104157816.png)\n\n\n\n\n\n\n\n\n\n## 流程部署详解\n\n### 部署实现\n\n我们先来看下流程部署的具体过程。代码实现\n\n```java\n/**\n     * 部署流程\n     */\n    @Test\n    public void test3(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"holiday-request-new.bpmn20.xml\")\n                .name(\"请假流程...\")\n                .category(\"请假\") // 分类\n                .tenantId(\"dpb\") // 租户id\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"deploy.getCategory() = \" + deploy.getCategory());\n    }\n```\n\n### 部署涉及表结构\n\n涉及到的三张表：\n\n部署资源表：act_ge_bytearray\n\n| 字段           | 名称               | 备注                                                         |\n| -------------- | ------------------ | ------------------------------------------------------------ |\n| ID_            | 主键               |                                                              |\n| REV_           | 版本号             |                                                              |\n| NAME_          | 名称               | 部署的文件名称，如：holiday-request-new.bpmn20.xml、holiday-request-new.bpmn20.png |\n| DEPLOYMENT_ID_ | 部署ID             |                                                              |\n| BYTES_         | 字节（二进制数据） |                                                              |\n| GENERATED_     | 是否系统生成       | 0为用户上传，<br/>1为系统自动生成， 比如系统会 自动根据xml生 成png |\n\n\n\n部署ID表：act_re_deployment\n\n\n\n| 字段               | 名称           | 备注 |\n| ------------------ | -------------- | ---- |\n| ID_                | 主键           |      |\n| NAME_              | 名称           |      |\n| CATEGORY_          | 分类           |      |\n| TENANT_ID_         | 租户ID         |      |\n| DEPLOY_TIME_       | 部署时间       |      |\n| DERIVED_FROM_      | 来源于         |      |\n| DERIVED_FROM_ROOT_ | 来源于         |      |\n| ENGINE_VERSION_    | 流程引擎的版本 |      |\n\n流程表：act_re_procdef\n\n| 字段                    | 名称             | 备注                              |\n| ----------------------- | ---------------- | --------------------------------- |\n| ID_                     | 主键             |                                   |\n| REV_                    | 版本号           |                                   |\n| CATEGORY_               | 分类             | 流程定义的Namespace就是类别       |\n| NAME_                   | 名称             |                                   |\n| KEY_                    | 标识             |                                   |\n| VERSION_                | 版本             |                                   |\n| DEPLOYMENT_ID_          | 部署ID           |                                   |\n| RESOURCE_NAME_          | 资源名称         | 流程bpmn文件名称                  |\n| DGRM_RESOURCE_NAME_     | 图片资源名称     |                                   |\n| DESCRIPTION_            | 描述             |                                   |\n| HAS_START_FORM_KEY_     | 拥有开始表单标识 | start节点是否存在formKey  0否 1是 |\n| HAS_GRAPHICAL_NOTATION_ | 拥有图形信息     |                                   |\n| SUSPENSION_STATE_       | 挂起状态         | 暂停状态 1激活 2暂停              |\n| TENANT_ID_              | 租户ID           |                                   |\n|                         |                  |                                   |\n\n注意：\n\n业务流程定义数据表。此表和ACT_RE_DEPLOYMENT是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在ACT_REPROCDEF表内，每个流程定义的数据，都会对于ACT_GE_BYTEARRAY表内的一个资源文件和PNG图片文件。和ACT_GE_BYTEARRAY的关联是通过程序用ACT_GE_BYTEARRAY.NAME与ACT_RE_PROCDEF.NAME_完成的\n\n\n\n### 挂起和激活\n\n部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。\n\n流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。\n\n```java\n/**\n     * 挂起流程\n     */\n    @Test\n    public void test05(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .processDefinitionId(\"holiday:1:4\")\n                .singleResult();\n        // 获取流程定义的状态\n        boolean suspended = processDefinition.isSuspended();\n        System.out.println(\"suspended = \" + suspended);\n        if(suspended){\n            // 表示被挂起\n            System.out.println(\"激活流程定义\");\n            repositoryService.activateProcessDefinitionById(\"holiday:1:4\",true,null);\n        }else{\n            // 表示激活状态\n            System.out.println(\"挂起流程\");\n            repositoryService.suspendProcessDefinitionById(\"holiday:1:4\",true,null);\n        }\n    }\n```\n\n具体的实现其实就是更新了流程定义表中的字段\n\n![image-20220321210010518](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321210010518.png)\n\n而且通过REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误\n\n![image-20220321211858122](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321211858122.png)\n\n\n\n\n\n## 启动流程实例\n\n然后我们来看看启动流程实例的过程。实现代码如下：\n\n```java\n/**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 构建流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"employee\",\"张三\") ;// 谁申请请假\n        variables.put(\"nrOfHolidays\",3); // 请几天假\n        variables.put(\"description\",\"工作累了，想出去玩玩\"); // 请假的原因\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"holiday:1:4\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n当我们启动了一个流程实例后，会在ACT_RU_*对应的表结构中操作,运行时实例涉及的表结构共10张：\n\n* ACT_RU_DEADLETTER_JOB  正在运行的任务表 \n* ACT_RU_EVENT_SUBSCR 运行时事件 \n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_HISTORY_JOB  历史作业表 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_JOB 运行时作业表 \n* ACT_RU_SUSPENDED_JOB 暂停作业表 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_TIMER_JOB 定时作业表 \n* ACT_RU_VARIABLE  运行时变量表\n\n\n\n启动一个流程实例的时候涉及到的表有\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\n\n\nACT_RU_EXECUTION表结构\n\n| 字段                  | 名称                 | 备注 |\n| --------------------- | -------------------- | ---- |\n| ID_                   | 主键                 |      |\n| REV_                  | 版本号               |      |\n| PROC_INST_ID_         | 流程实例ID           |      |\n| BUSINESS_KEY_         | 业务主键ID           |      |\n| PARENT_ID_            | 父执行流的ID         |      |\n| PROC_DEF_ID_          | 流程定义的数据ID     |      |\n| SUPER_EXEC_           |                      |      |\n| ROOT_PROC_INST_ID_    | 流程实例的root流程id |      |\n| ACT_ID_               | 节点实例ID           |      |\n| IS_ACTIVE_            | 是否存活             |      |\n| IS_CONCURRENT_        | 执行流是否正在并行   |      |\n| IS_SCOPE_             |                      |      |\n| IS_EVENT_SCOPE_       |                      |      |\n| IS_MI_ROOT_           |                      |      |\n| SUSPENSION_STATE_     | 流程终端状态         |      |\n| CACHED_ENT_STATE_     |                      |      |\n| TENANT_ID_            | 租户编号             |      |\n| NAME_                 |                      |      |\n| START_TIME_           | 开始时间             |      |\n| START_USER_ID_        | 开始的用户编号       |      |\n| LOCK_TIME_            | 锁定时间             |      |\n| IS_COUNT_ENABLED_     |                      |      |\n| EVT_SUBSCR_COUNT_     |                      |      |\n| TASK_COUNT_           |                      |      |\n| JOB_COUNT_            |                      |      |\n| TIMER_JOB_COUNT_      |                      |      |\n| SUSP_JOB_COUNT_       |                      |      |\n| DEADLETTER_JOB_COUNT_ |                      |      |\n| VAR_COUNT_            |                      |      |\n| ID_LINK_COUNT_        |                      |      |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133108405](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133108405.png)\n\n![image-20220322133219534](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133219534.png)\n\n\n\nACT_RU_TASK  运行时任务表\n\n| 字段              | 名称                 | 备注                |\n| ----------------- | -------------------- | ------------------- |\n| ID_               | 主键                 |                     |\n| REV_              | 版本号               |                     |\n| EXECUTION_ID_     | 任务所在的执行流ID   |                     |\n| PROC_INST_ID_     | 流程实例ID           |                     |\n| PROC_DEF_ID_      | 流程定义数据ID       |                     |\n| NAME_             | 任务名称             |                     |\n| PARENT_TASK_ID_   | 父任务ID             |                     |\n| DESCRIPTION_      | 说明                 |                     |\n| TASK_DEF_KEY_     | 任务定义的ID值       |                     |\n| OWNER_            | 任务拥有人           |                     |\n| ASSIGNEE_         | 被指派执行该任务的人 |                     |\n| DELEGATION_       | 委托人               |                     |\n| PRIORITY_         | 优先级               |                     |\n| CREATE_TIME_      | 创建时间             |                     |\n| DUE_DATE_         | 耗时                 |                     |\n| CATEGORY_         | 类别                 |                     |\n| SUSPENSION_STATE_ | 是否挂起             | 1代表激活 2代表挂起 |\n| TENANT_ID_        | 租户编号             |                     |\n| FORM_KEY_         |                      |                     |\n| CLAIM_TIME_       | 拾取时间             |                     |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133307195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133307195.png)\n\n![image-20220322133335326](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133335326.png)\n\n\n\nACT_RU_VARIABLE  运行时变量表\n\n| 字段          | 名称                           | 备注                                 |\n| ------------- | ------------------------------ | ------------------------------------ |\n| ID_           | 主键                           |                                      |\n| REV_          | 版本号                         |                                      |\n| TYPE_         | 参数类型                       | 可以是基本的类型，也可以用户自行扩展 |\n| NAME_         | 参数名称                       |                                      |\n| EXECUTION_ID_ | 参数执行ID                     |                                      |\n| PROC_INST_ID_ | 流程实例ID                     |                                      |\n| TASK_ID_      | 任务ID                         |                                      |\n| BYTEARRAY_ID_ | 资源ID                         |                                      |\n| DOUBLE_       | 参数为double，则保存在该字段中 |                                      |\n| LONG_         | 参数为long，则保存在该字段中   |                                      |\n| TEXT_         | 用户保存文本类型的参数值       |                                      |\n| TEXT2_        | 用户保存文本类型的参数值       |                                      |\n\n创建流程实例后对应的表结构的数据\n\n![image-20220322133406398](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133406398.png)\n\n![image-20220322133439827](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133439827.png)\n\n\n\nACT_RU_IDENTITYLINK 运行时用户关系信息 \n\n| 字段          | 名称         | 备注                                                         |\n| ------------- | ------------ | ------------------------------------------------------------ |\n| ID_           | 主键         |                                                              |\n| REV_          | 版本号       |                                                              |\n| GROUP_ID_     | 用户组ID     |                                                              |\n| TYPE_         | 关系数据类型 | assignee支配人(组)、candidate候选人(组)、owner拥有人,participant参与者 |\n| USER_ID_      | 用户ID       |                                                              |\n| TASK_ID_      | 任务ID       |                                                              |\n| PROC_INST_ID_ | 流程定义ID   |                                                              |\n| PROC_DEF_ID_  | 属性ID       |                                                              |\n\n创建流程实例后对应的表结构的数据:\n\n![image-20220322133501720](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133501720.png)\n\n\n\n\n\n## 处理流程\n\n上面的流程已经流转到了zhangsan这个用户这里，然后可以开始审批了\n\n```java\n// 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"holiday:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        // 添加流程变量\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"approved\",false); // 拒绝请假\n        // 完成任务\n        taskService.complete(task.getId(),variables);\n```\n\n在正常处理流程中涉及到的表结构\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\nACT_RU_TASK  运行时任务表 :会新生成一条记录\n\n![image-20220322135040119](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135040119.png)\n\n![image-20220322135125703](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135125703.png)\n\nACT_RU_VARIABLE  运行时变量表:会记录新的流程变量\n\n![image-20220322135204021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135204021.png)\n\n\n\n当然流程实例也可以挂起\n\n```java\n// 1.获取ProcessEngine对象\nProcessEngine engine = ProcessEngines.getDefaultProcessEngine();\n// 2.获取RuntimeService\nRuntimeService runtimeService = engine.getRuntimeService();\n// 3.获取流程实例对象\nProcessInstance processInstance = runtimeService.createProcessInstanceQuery()\n    .processInstanceId(\"25001\")\n    .singleResult();\n// 4.获取相关的状态操作\nboolean suspended = processInstance.isSuspended();\nString id = processInstance.getId();\nif(suspended){\n    // 挂起--》激活\n    runtimeService.activateProcessInstanceById(id);\n    System.out.println(\"流程定义：\" + id + \"，已激活\");\n}else{\n    // 激活--》挂起\n    runtimeService.suspendProcessInstanceById(id);\n    System.out.println(\"流程定义：\" + id + \"，已挂起\");\n}\n```\n\n\n\n启动第二个流程实例后再查看相关的表结构时，对他们的关系理解会更加的清楚一些\n\n启动一个新的流程实例对应的就会产生两条记录\n\n![image-20220322135605252](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135605252.png)\n\n\n\nIDENTITYLINK中会记录每次流程操作的信息\n\n![image-20220322135636841](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135636841.png)\n\n\n\n![image-20220322135659671](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135659671.png)\n\n\n\n流程变量数据，及时key 相同，但是属于不同的流程实例相互间也是隔离的\n\n![image-20220322135719104](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135719104.png)\n\n## 完成一个流程\n\n然后我们把第一个流程处理完成\n\n```java\nProcessEngine processEngine = cfg.buildProcessEngine();\nTaskService taskService = processEngine.getTaskService();\nTask task = taskService.createTaskQuery()\n    .processDefinitionId(\"holiday:1:4\")\n    .taskAssignee(\"lisi\")\n    .singleResult();\n// 添加流程变量\nMap<String,Object> variables = new HashMap<>();\nvariables.put(\"approved\",false); // 拒绝请假\n// 完成任务\ntaskService.complete(task.getId(),variables);\n```\n\n处理完了一个工作流程后，我们来看看相关的表结构信息\n\n首先我们会发现\n\n* ACT_RU_EXECUTION 运行时流程执行实例 \n* ACT_RU_IDENTITYLINK 运行时用户关系信息 \n* ACT_RU_TASK  运行时任务表 \n* ACT_RU_VARIABLE  运行时变量表\n\n这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息\n\n* ACT_HI_ACTINST  历史的流程实例\n\n* ACT_HI_ATTACHMENT 历史的流程附件\n* ACT_HI_COMMENT  历史的说明性信息\n* ACT_HI_DETAIL 历史的流程运行中的细节信息\n* ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系\n* ACT_HI_PROCINST  历史的流程实例\n* ACT_HI_TASKINST  历史的任务实例\n* ACT_HI_VARINST  历史的流程运行中的变量信息\n\n在我们上面的处理流程的过程中设计到的历史表有\n\nACT_HI_ACTINST  历史的流程实例\n\n| 字段               | 名称                 | 备注 |\n| ------------------ | -------------------- | ---- |\n| ID_                | 主键                 |      |\n| PROC_DEF_ID_       | 流程定义ID           |      |\n| PROC_INST_ID_      | 流程实例ID           |      |\n| EXECUTION_ID_      | 执行ID               |      |\n| ACT_ID_            | 节点实例ID           |      |\n| TASK_ID_           | 任务ID               |      |\n| CALL_PROC_INST_ID_ | 调用外部的流程实例ID |      |\n| ACT_NAME_          | 节点名称             |      |\n| ACT_TYPE_          | 节点类型             |      |\n| ASSIGNEE_          | 处理人               |      |\n| START_TIME_        | 开始时间             |      |\n| END_TIME_          | 结束时间             |      |\n| DURATION_          | 耗时                 |      |\n| DELETE_REASON_     | 删除原因             |      |\n| TENANT_ID_         | 租户编号             |      |\n\n![image-20220322141800554](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141800554.png)\n\n![image-20220322141825065](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141825065.png)\n\n\n\nACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系\n\n| 字段                 | 名称         | 备注 |\n| -------------------- | ------------ | ---- |\n| ID_                  | 主键         |      |\n| GROUP_ID_            | 组编号       |      |\n| TYPE_                | 类型         |      |\n| USER_ID_             | 用户编号     |      |\n| TASK_ID_             | 任务编号     |      |\n| CREATE_TIME_         | 创建时间     |      |\n| PROC_INST_ID_        | 流程实例编号 |      |\n| SCOPE_ID_            |              |      |\n| SCOPE_TYPE_          |              |      |\n| SCOPE_DEFINITION_ID_ |              |      |\n|                      |              |      |\n\n\n\n![image-20220322141717826](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141717826.png)\n\nACT_HI_PROCINST  历史的流程实例\n\n| 字段                       | 名称         | 备注 |\n| -------------------------- | ------------ | ---- |\n| ID_                        | 主键         |      |\n| PROC_INST_ID_              | 流程实例ID   |      |\n| BUSINESS_KEY_              | 业务主键     |      |\n| PROC_DEF_ID_               | 属性ID       |      |\n| START_TIME_                | 开始时间     |      |\n| END_TIME_                  | 结束时间     |      |\n| DURATION_                  | 耗时         |      |\n| START_USER_ID_             | 起始人       |      |\n| START_ACT_ID_              | 起始节点     |      |\n| END_ACT_ID_                | 结束节点     |      |\n| SUPER_PROCESS_INSTANCE_ID_ | 父流程实例ID |      |\n| DELETE_REASON_             | 删除原因     |      |\n| TENANT_ID_                 | 租户编号     |      |\n| NAME_                      | 名称         |      |\n\n\n\n![image-20220322141855401](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141855401.png)\n\n\n\n![image-20220322141912602](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141912602.png)\n\n\n\nACT_HI_TASKINST  历史的任务实例\n\n| 字段            | 名称                    | 备注                                   |\n| --------------- | ----------------------- | -------------------------------------- |\n| ID_             | 主键                    |                                        |\n| PROC_DEF_ID_    | 流程定义ID              |                                        |\n| TASK_DEF_KEY_   | 任务定义的ID值          |                                        |\n| PROC_INST_ID_   | 流程实例ID              |                                        |\n| EXECUTION_ID_   | 执行ID                  |                                        |\n| PARENT_TASK_ID_ | 父任务ID                |                                        |\n| NAME_           | 名称                    |                                        |\n| DESCRIPTION_    | 说明                    |                                        |\n| OWNER_          | 实际签收人 任务的拥有者 | 签收人（默认为空，只有在委托时才有值） |\n| ASSIGNEE_       | 被指派执行该任务的人    |                                        |\n| START_TIME_     | 开始时间                |                                        |\n| CLAIM_TIME_     | 任务拾取时间            |                                        |\n| END_TIME_       | 结束时间                |                                        |\n| DURATION_       | 耗时                    |                                        |\n| DELETE_REASON_  | 删除原因                |                                        |\n| PRIORITY_       | 优先级别                |                                        |\n| DUE_DATE_       | 过期时间                |                                        |\n| FORM_KEY_       | 节点定义的formkey       |                                        |\n| CATEGORY_       | 类别                    |                                        |\n| TENANT_ID_      | 租户                    |                                        |\n\n![image-20220322142609163](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142609163.png)\n\n![image-20220322142650699](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142650699.png)\n\n\n\nACT_HI_VARINST  历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的\n\n| 字段          | 名称               | 备注 |\n| ------------- | ------------------ | ---- |\n| ID_           | 主键               |      |\n| PROC_INST_ID_ | 流程实例ID         |      |\n| EXECUTION_ID_ | 指定ID             |      |\n| TASK_ID_      | 任务ID             |      |\n| NAME_         | 名称               |      |\n| VAR_TYPE_     | 参数类型           |      |\n| REV_          | 数据版本           |      |\n| BYTEARRAY_ID_ | 字节表ID           |      |\n| DOUBLE_       | 存储double类型数据 |      |\n| LONG_         | 存储long类型数据   |      |\n| .....         |                    |      |\n\n\n\n![image-20220322142756867](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142756867.png)\n\n好了一个相对简单的流程处理涉及到的相关表结构内容就介绍完了\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"flowable基础篇","published":1,"updated":"2022-11-05T14:16:59.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersq000fdk8f3n0gcqrp","content":"<h1 id=\"flowable基础篇\"><a href=\"#flowable基础篇\" class=\"headerlink\" title=\"flowable基础篇\"></a>flowable基础篇</h1><blockquote>\n<p>Lecture：波波老师</p>\n</blockquote>\n<h1 id=\"Flowable介绍\"><a href=\"#Flowable介绍\" class=\"headerlink\" title=\"Flowable介绍\"></a>Flowable介绍</h1><p>Flowable是BPMN的一个基于java的软件实现，不过Flowable不仅仅包括BPMN，还有DMN决策表和CMMN Case管理引擎，并且有自己的用户管理、微服务API等一系列功能，是一个服务平台。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317101115398.png\"\n                      alt=\"image-20220317101115398\"\n                ></p>\n<h1 id=\"Flowable基础\"><a href=\"#Flowable基础\" class=\"headerlink\" title=\"Flowable基础\"></a>Flowable基础</h1><p>官方手册：<a class=\"link\"   href=\"https://tkjohn.github.io/flowable-userguide/#_introduction\" >https://tkjohn.github.io/flowable-userguide/#_introduction<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"创建ProcessEngine\"><a href=\"#创建ProcessEngine\" class=\"headerlink\" title=\"创建ProcessEngine\"></a>创建ProcessEngine</h2><p>创建一个基本的maven工程，可以是Eclipse也可以是其他IDEA。然后添加两个依赖</p>\n<ul>\n<li>Flowable流程引擎。使我们可以创建一个ProcessEngine流程引擎对象，并访问Flowable API。</li>\n<li>一个是MySQL的数据库驱动</li>\n</ul>\n<p>在<em>pom.xml</em>文件中添加下列行：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建一个普通的Java类，添加对应的main方法，首先要做的是初始化<strong>ProcessEngine</strong>流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 <em>ProcessEngine</em>由<strong>ProcessEngineConfiguration</strong>实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置XML文件创建<em>ProcessEngineConfiguration</em>，但是（像在这里做的一样）也可以编程方式创建它。 <em>ProcessEngineConfiguration</em>所需的最小配置，是数据库JDBC连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">        .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">        .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">        .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">        .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">        .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意在mysql8.0中执行可能出现如下的错误</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093416477.png\"\n                      alt=\"image-20220316093416477\"\n                ></p>\n<p>出现这种情况只需要在mysql的连接字符串中添加上nullCatalogMeansCurrent&#x3D;true，设置为只查当前连接的schema库即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn1?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable使用<a class=\"link\"   href=\"http://www.slf4j.org/\" >SLF4J<i class=\"fas fa-external-link-alt\"></i></a>作为内部日志框架。在这个例子中，我们使用log4j作为SLF4J的实现。因此在pom.xml文件中添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Log4j需要一个配置文件。在<em>src&#x2F;main&#x2F;resources</em>文件夹下添加<em>log4j.properties</em>文件，并写入下列内容：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log4j.rootLogger</span>=<span class=\"string\">DEBUG, CA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA.layout.ConversionPattern</span>= <span class=\"string\">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>\n\n<p>重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093922199.png\"\n                      alt=\"image-20220316093922199\"\n                ></p>\n<p>同时可以看到创建了相关的表结构在数据库中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093957662.png\"\n                      alt=\"image-20220316093957662\"\n                ></p>\n<p>这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！</p>\n<h2 id=\"部署流程定义\"><a href=\"#部署流程定义\" class=\"headerlink\" title=\"部署流程定义\"></a>部署流程定义</h2><p>接下来我们构建一个非常简单的请假流程，Flowable引擎需要流程定义为BPMN 2.0格式，这是一个业界广泛接受的XML标准。 在Flowable术语中，我们将其称为一个*<em>流程定义(process definition)<strong>。一个<em>流程定义</em>可以启动多个</strong>流程实例(process instance)*<em>。</em>流程定义*可以看做是重复执行流程的蓝图。 在这个例子中，</em>流程定义<em>定义了请假的各个步骤，而一个</em>流程实例*对应某个雇员提出的一个请假申请。</p>\n<p>BPMN 2.0存储为XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样BPMN 2.0标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。</p>\n<p>我们要使用的流程定义为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/getting.started.bpmn.process.png\"\n                      alt=\"getting.started.bpmn.process\"\n                ></p>\n<p>流程定义说明：</p>\n<ul>\n<li>我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。</li>\n<li>左侧的圆圈叫做**启动事件(start event)**。这是一个流程实例的起点。</li>\n<li>第一个矩形是一个**用户任务(user task)**。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请</li>\n<li>取决于经理的决定，<strong>排他网关(exclusive gateway)</strong> (带叉的菱形)会将流程实例路由至批准或驳回路径</li>\n<li>如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。</li>\n<li>如果驳回，则为雇员发送一封邮件通知他。</li>\n</ul>\n<p>一般来说，这样的<em>流程定义</em>使用可视化建模工具建立，如Flowable Designer(Eclipse)或Flowable Web Modeler(Web应用)。但在这里我们直接撰写XML，以熟悉BPMN 2.0及其概念。</p>\n<p>与上面展示的流程图对应的BPMN 2.0 XML在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的XML文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在XML的<em>BPMNDiagram</em>标签中，作为<em>definitions</em>标签的子元素）。</p>\n<p>将下面的XML保存在<em>src&#x2F;main&#x2F;resources</em>文件夹下名为<em>holiday-request.bpmn20.xml</em>的文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayRequest&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday Request&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startEvent&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Approve or reject request&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span>  <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;!approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Enter holidays in external system&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Send out rejection email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经有了流程BPMN 2.0 XML文件，下来需要将它***部署(deploy)**<em>到引擎中。</em>部署*一个流程定义意味着：</p>\n<ul>\n<li>流程引擎会将XML文件存储在数据库中，这样可以在需要的时候获取它</li>\n<li>流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动<em>流程实例</em>。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317110902636.png\"\n                      alt=\"image-20220317110902636\"\n                ></p>\n<p>将流程定义<em>部署</em>至Flowable引擎，需要使用<em>RepositoryService</em>，其可以从<em>ProcessEngine</em>对象获取。使用<em>RepositoryService</em>，可以通过XML文件的路径创建一个新的*部署(Deployment)<em>，并调用</em>deploy()*方法实际执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> repositoryService.createDeployment()<span class=\"comment\">// 创建Deployment对象</span></span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;holiday-request.bpmn20.xml&quot;</span>) <span class=\"comment\">// 添加流程部署文件</span></span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请求流程&quot;</span>) <span class=\"comment\">// 设置部署流程的名称</span></span><br><span class=\"line\">            .deploy(); <span class=\"comment\">// 执行部署操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行该方法日志操作成功：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100439048.png\"\n                      alt=\"image-20220316100439048\"\n                ></p>\n<p>在后台表结构也可以看到相关的信息</p>\n<p>act_re_deployment: 流程定义部署表，每部署一次就增加一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100532725.png\"\n                      alt=\"image-20220316100532725\"\n                ></p>\n<p>act_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100611004.png\"\n                      alt=\"image-20220316100611004\"\n                ></p>\n<p>act_ge_bytearray ：流程资源表，流程部署的 bpmn文件和png图片会保存在该表中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100648362.png\"\n                      alt=\"image-20220316100648362\"\n                ></p>\n<p>我们现在可以通过API查询验证流程定义已经部署在引擎中（并学习一些API）。通过<em>RepositoryService</em>创建的<em>ProcessDefinitionQuery</em>对象实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看流程定义</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeployQuery</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程定义对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">                .deploymentId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getId() = &quot;</span> + processDefinition.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getName() = &quot;</span> + processDefinition.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDeploymentId() = &quot;</span> + processDefinition.getDeploymentId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDescription() = &quot;</span> + processDefinition.getDescription());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDefinition.getId() = holidayRequest:2:2503</span><br><span class=\"line\">processDefinition.getName() = Holiday Request</span><br><span class=\"line\">processDefinition.getDeploymentId() = 2501</span><br><span class=\"line\">processDefinition.getDescription() = null</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动流程实例\"><a href=\"#启动流程实例\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h2><p>现在已经在流程引擎中<em>部署</em>了流程定义，因此可以使用这个<em>流程定义</em>作为“模板”启动<em>流程实例</em>。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316102638015.png\"\n                      alt=\"image-20220316102638015\"\n                ></p>\n<p>要启动流程实例，需要提供一些初始化<em>流程变量</em>。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用<em>RuntimeService</em>启动一个<em>流程实例</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 构建流程变量</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;employee&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;<span class=\"comment\">// 谁申请请假</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;nrOfHolidays&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 请几天假</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;description&quot;</span>,<span class=\"string\">&quot;工作累了，想出去玩玩&quot;</span>); <span class=\"comment\">// 请假的原因</span></span><br><span class=\"line\">    <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceByKey(<span class=\"string\">&quot;holidayRequest&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动成功，输出结果如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流程定义的ID：holidayRequest:2:2503</span><br><span class=\"line\">流程实例的ID：5001</span><br><span class=\"line\">当前活动的ID：null</span><br></pre></td></tr></table></figure>\n\n<p>对应的流程实例ID为：5001</p>\n<p>启动流程实例涉及到的表结构：</p>\n<ul>\n<li>act_hi_actinst 流程实例执行历史</li>\n<li>act_hi_identitylink 流程的参与用户的历史信息</li>\n<li>act_hi_procinst 流程实例历史信息</li>\n<li>act_hi_taskinst 流程任务历史信息</li>\n<li>act_ru_execution 流程执行信息</li>\n<li>act_ru_identitylink 流程的参与用户信息</li>\n<li>act_ru_task 任务信息</li>\n</ul>\n<h2 id=\"查看任务\"><a href=\"#查看任务\" class=\"headerlink\" title=\"查看任务\"></a>查看任务</h2><p>上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316110406801.png\"\n                      alt=\"image-20220316110406801\"\n                ></p>\n<p>然后我们来查看下lisi的任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getProcessDefinitionId() = &quot;</span> + task.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.getProcessDefinitionId() = holidayRequestNew:1:10003</span><br><span class=\"line\">task.getId() = 12508</span><br><span class=\"line\">task.getAssignee() = lisi</span><br><span class=\"line\">task.getName() = Approve or reject request</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h2><p>现在李四这个角色可以来完成当前的任务了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111124019.png\"\n                      alt=\"image-20220316111124019\"\n                ></p>\n<p>在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到JavaDelegate来触发。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111253702.png\"\n                      alt=\"image-20220316111253702\"\n                ></p>\n<p>我们定义这样一个Java类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendRejectionMail</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 触发发送邮件的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delegateExecution</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution delegateExecution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请假被拒绝,,,安心工作吧&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来完成任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCompleteTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\">    <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">    taskService.complete(task.getId(),variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以看到JavaDelegate触发了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111913933.png\"\n                      alt=\"image-20220316111913933\"\n                ></p>\n<h2 id=\"流程的删除\"><a href=\"#流程的删除\" class=\"headerlink\" title=\"流程的删除\"></a>流程的删除</h2><p>有些流程已经没有用了，我们需要删除掉，其实也非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"comment\">// 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错</span></span><br><span class=\"line\">    <span class=\"comment\">// repositoryService.deleteDeployment(&quot;1&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。</span></span><br><span class=\"line\">    repositoryService.deleteDeployment(<span class=\"string\">&quot;2501&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看历史信息\"><a href=\"#查看历史信息\" class=\"headerlink\" title=\"查看历史信息\"></a>查看历史信息</h2><p>选择使用Flowable这样的流程引擎的原因之一，是它可以自动存储所有流程实例的<strong>审计数据</strong>或<strong>历史数据</strong>。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。</p>\n<p>例如，如果希望显示流程实例已经执行的时间，就可以从<em>ProcessEngine</em>获取<em>HistoryService</em>，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：</p>\n<ul>\n<li>只选择一个特定流程实例的活动</li>\n<li>只选择已完成的活动</li>\n</ul>\n<p>结果按照结束时间排序，代表其执行顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看历史</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryHistory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\">        List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holidayRequestNew:1:10003&quot;</span>)</span><br><span class=\"line\">                .finished()</span><br><span class=\"line\">                .orderByHistoricActivityInstanceEndTime().asc()</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HistoricActivityInstance historicActivityInstance : list) &#123;</span><br><span class=\"line\">            System.out.println(historicActivityInstance.getActivityId() + <span class=\"string\">&quot; took &quot;</span></span><br><span class=\"line\">                    + historicActivityInstance.getDurationInMillis() + <span class=\"string\">&quot; milliseconds&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startEvent took 1 milliseconds</span><br><span class=\"line\">approveTask took 837735 milliseconds</span><br><span class=\"line\">decision took 13 milliseconds</span><br><span class=\"line\">sendRejectionMail took 2 milliseconds</span><br><span class=\"line\">rejectEnd took 1 milliseconds</span><br></pre></td></tr></table></figure>\n\n<p>好了~flowable的基本应用我们就先介绍到这里了。</p>\n<h1 id=\"Flowable流程设计器\"><a href=\"#Flowable流程设计器\" class=\"headerlink\" title=\"Flowable流程设计器\"></a>Flowable流程设计器</h1><h2 id=\"Eclipse-Designer\"><a href=\"#Eclipse-Designer\" class=\"headerlink\" title=\"Eclipse Designer\"></a>Eclipse Designer</h2><p>Flowable提供了名为Flowable Eclipse Designer的Eclipse插件，可以用于图形化地建模、测试与部署BPMN 2.0流程。</p>\n<h3 id=\"下载安装Eclipse\"><a href=\"#下载安装Eclipse\" class=\"headerlink\" title=\"下载安装Eclipse\"></a>下载安装Eclipse</h3><p>去Eclipse官网下载即可：<a class=\"link\"   href=\"https://www.eclipse.org/downloads/packages/release\" >https://www.eclipse.org/downloads/packages/release<i class=\"fas fa-external-link-alt\"></i></a> 注意2020-09后的版本不再支持jdk8</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316202904261.png\"\n                      alt=\"image-20220316202904261\"\n                ></p>\n<p>解压缩就可以了，然后进入解压缩的目录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203036602.png\"\n                      alt=\"image-20220316203036602\"\n                ></p>\n<p>直接启动即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203111301.png\"\n                      alt=\"image-20220316203111301\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203237316.png\"\n                      alt=\"image-20220316203237316\"\n                ></p>\n<h3 id=\"安装Flowable插件\"><a href=\"#安装Flowable插件\" class=\"headerlink\" title=\"安装Flowable插件\"></a>安装Flowable插件</h3><p>然后我们再安装下Flowable的插件，选择<strong>Help → Install New Software</strong>。在下图面板中，点击<em>Add</em>按钮，并填写下列字段</p>\n<ul>\n<li><strong>Name:</strong> Flowable BPMN 2.0 designer</li>\n<li><strong>Location:</strong> <a class=\"link\"   href=\"http://www.flowable.org/designer/update/\" >http://www.flowable.org/designer/update/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203454281.png\"\n                      alt=\"image-20220316203454281\"\n                ></p>\n<p>这种在线更新的方式已经被官网移除了，操作不了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211319931.png\"\n                      alt=\"image-20220316211319931\"\n                ></p>\n<p>这时我们就只能通过离线安装的方式来实现了，下载对应的离线文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211405001.png\"\n                      alt=\"image-20220316211405001\"\n                ></p>\n<p>安装步骤来操作，</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211518520.png\"\n                      alt=\"image-20220316211518520\"\n                ></p>\n<p>然后继续：选择<strong>Help → Install New Software</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211622115.png\"\n                      alt=\"image-20220316211622115\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211651195.png\"\n                      alt=\"image-20220316211651195\"\n                ></p>\n<p>下一步</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211729581.png\"\n                      alt=\"image-20220316211729581\"\n                ></p>\n<p>再下一步</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211802548.png\"\n                      alt=\"image-20220316211802548\"\n                ></p>\n<p>然后finish。弹出如下窗口</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212008477.png\"\n                      alt=\"image-20220316212008477\"\n                ></p>\n<p>重启即可</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>然后我们就可以创建一个Flowable Project了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212418899.png\"\n                      alt=\"image-20220316212418899\"\n                ></p>\n<p>然后我们可以在src&#x2F;mian&#x2F;resources&#x2F; 的目录下创建对应的流程图了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212605146.png\"\n                      alt=\"image-20220316212605146\"\n                ></p>\n<p>看到如下的界面说明插件安装成功了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212720767.png\"\n                      alt=\"image-20220316212720767\"\n                ></p>\n<h3 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h3><p>使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的面板，最终的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214339678.png\"\n                      alt=\"image-20220316214339678\"\n                ></p>\n<p>指定流程的主键</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214430644.png\"\n                      alt=\"image-20220316214430644\"\n                ></p>\n<p>指定任务的负责人</p>\n<p>在Properties视图中指定每个任务节点的负责人</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214700887.png\"\n                      alt=\"image-20220316214700887\"\n                ></p>\n<p>创建请假单：zhangsan</p>\n<p>审批请假单：lisi</p>\n<p>当我们设置完成后保存文件，会同时生成png图片</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214808400.png\"\n                      alt=\"image-20220316214808400\"\n                ></p>\n<p>注意：生成图片需要如下配置</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214256235.png\"\n                      alt=\"image-20220316214256235\"\n                ></p>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>首先在Eclipse中生成bar文件，选中项目然后鼠标右击</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215805503.png\"\n                      alt=\"image-20220316215805503\"\n                ></p>\n<p>然后会发现在项目的根目录下多了一个deployment文件夹，里面多了一个MyProcess.bar文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215900052.png\"\n                      alt=\"image-20220316215900052\"\n                ></p>\n<p>然后我们就可以把这个bar文件拷贝到IDEA中，继续部署的流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215945236.png\"\n                      alt=\"image-20220316215945236\"\n                ></p>\n<p>而部署的代码和前面没啥区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取 ProcessEngine 对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 2.获取RepositoryService</span></span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;MyHoliday.bar&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">zipInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(in);</span><br><span class=\"line\">    <span class=\"comment\">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">           <span class=\"comment\">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span></span><br><span class=\"line\">            .addZipInputStream(zipInputStream)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;XXX公司请求流程&quot;</span>)</span><br><span class=\"line\">            .deploy() ;<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行后查看表结构，相关的信息就进去了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316220121734.png\"\n                      alt=\"image-20220316220121734\"\n                ></p>\n<p>完整的案例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bobo.flowable.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.history.HistoricActivityInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.repository.Deployment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.runtime.ProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.task.api.Task;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipInputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取  ProcessEngineConfiguration 对象</span></span><br><span class=\"line\">        configuration = <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 配置 相关的数据库的连接信息</span></span><br><span class=\"line\">        configuration.setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果数据库中的表结构不存在就新建</span></span><br><span class=\"line\">        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取 ProcessEngine 对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 2.获取RepositoryService</span></span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;MyHoliday.bar&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ZipInputStream</span> <span class=\"variable\">zipInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(in);</span><br><span class=\"line\">        <span class=\"comment\">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">               <span class=\"comment\">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span></span><br><span class=\"line\">                .addZipInputStream(zipInputStream)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;XXX公司请求流程&quot;</span>)</span><br><span class=\"line\">                .deploy() ;<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 我们需要通过RuntimeService来启动流程实例</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">holidayRequest</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:25004&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getProcessDefinitionId() = &quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getActivityId() = &quot;</span> + holidayRequest.getActivityId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getId() = &quot;</span> + holidayRequest.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试任务查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;myProcess&quot;</span>) <span class=\"comment\">// 指定查询的流程编程</span></span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>) <span class=\"comment\">// 查询这个任务的处理人</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getProcessDefinitionId() = &quot;</span> + task.getProcessDefinitionId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getDescription() = &quot;</span> + task.getDescription());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成当前任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCompleteTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;myProcess&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 创建流程变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">            taskService.complete(task.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取流程任务的历史数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHistory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\">        List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;myProcess:1:25004&quot;</span>)</span><br><span class=\"line\">                .finished() <span class=\"comment\">// 查询的历史记录的状态是已经完成</span></span><br><span class=\"line\">                .orderByHistoricActivityInstanceEndTime().asc() <span class=\"comment\">// 指定排序的字段和顺序</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HistoricActivityInstance history : list) &#123;</span><br><span class=\"line\">            System.out.println(history.getActivityName()+<span class=\"string\">&quot;:&quot;</span>+history.getAssignee()+<span class=\"string\">&quot;--&quot;</span></span><br><span class=\"line\">                    +history.getActivityId()+<span class=\"string\">&quot;:&quot;</span> + history.getDurationInMillis()+<span class=\"string\">&quot;毫秒&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Flowable-UI应用\"><a href=\"#Flowable-UI应用\" class=\"headerlink\" title=\"Flowable UI应用\"></a>Flowable UI应用</h2><p>Flowable提供了几个web应用，用于演示及介绍Flowable项目提供的功能：</p>\n<ul>\n<li>Flowable IDM: 身份管理应用。为所有Flowable UI应用提供单点登录认证功能，并且为拥有IDM管理员权限的用户提供了管理用户、组与权限的功能。</li>\n<li>Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。</li>\n<li>Flowable Task: 运行时任务应用。提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。</li>\n<li>Flowable Admin: 管理应用。让具有管理员权限的用户可以查询BPMN、DMN、Form及Content引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过REST API连接至引擎，并与Flowable Task应用及Flowable REST应用一同部署。</li>\n</ul>\n<p>所有其他的应用都需要Flowable IDM提供认证。每个应用的WAR文件可以部署在相同的servlet容器（如Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的cookie进行认证，因此应用需要运行在相同的域名下。</p>\n<h3 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h3><p>下载Tomcat：<a class=\"link\"   href=\"https://tomcat.apache.org/download-80.cgi\" >https://tomcat.apache.org/download-80.cgi<i class=\"fas fa-external-link-alt\"></i></a> 官网下载后解压缩到非中文目录即可，然后是下载FlowableUI的文件，在Flowable6.6之后把FlowableUI中提供的四个功能合并到了一起。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102128672.png\"\n                      alt=\"image-20220318102128672\"\n                ></p>\n<p>然后把解压缩后的两个war包拷贝到Tomcat的解压缩的webapps目录下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102224330.png\"\n                      alt=\"image-20220318102224330\"\n                ></p>\n<p>Tomcat目录：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102255188.png\"\n                      alt=\"image-20220318102255188\"\n                ></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>启动Tomcat服务，执行startup.bat文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102325924.png\"\n                      alt=\"image-20220318102325924\"\n                ></p>\n<p>如果启动中出现乱码修改Tomcat的conf目录下的 logging.properties 文件中的编码</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102446699.png\"\n                      alt=\"image-20220318102446699\"\n                ></p>\n<p>如果一闪而过则检查jdk的环境变量配置。启动成功后，在浏览器中访问 <a class=\"link\"   href=\"http://localhost:8080/flowable-ui\" >http://localhost:8080/flowable-ui<i class=\"fas fa-external-link-alt\"></i></a>, 默认的账号密码是 admin&#x2F;test</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102609807.png\"\n                      alt=\"image-20220318102609807\"\n                ></p>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><p>我们先在 <code>身份管理应用程序</code> 中创建用户并授权</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102707368.png\"\n                      alt=\"image-20220318102707368\"\n                ></p>\n<p>创建用户</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102734238.png\"\n                      alt=\"image-20220318102734238\"\n                ></p>\n<p>填写详细信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102817782.png\"\n                      alt=\"image-20220318102817782\"\n                ></p>\n<p>授权管理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102859814.png\"\n                      alt=\"image-20220318102859814\"\n                ></p>\n<h3 id=\"绘制流程\"><a href=\"#绘制流程\" class=\"headerlink\" title=\"绘制流程\"></a>绘制流程</h3><p>创建新的流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101239742.png\"\n                      alt=\"image-20220318101239742\"\n                ></p>\n<p>流程图界面</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101346692.png\"\n                      alt=\"image-20220318101346692\"\n                ></p>\n<p>创建流程，分配处理人</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101639424.png\"\n                      alt=\"image-20220318101639424\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101611564.png\"\n                      alt=\"image-20220318101611564\"\n                ></p>\n<p>继续完成流程图的创建</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101810272.png\"\n                      alt=\"image-20220318101810272\"\n                ></p>\n<h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>绘制好的流程图，我们只需要一键导出即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103413285.png\"\n                      alt=\"image-20220318103413285\"\n                ></p>\n<p>下载下来后拷贝到项目的resource目录下即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103518807.png\"\n                      alt=\"image-20220318103518807\"\n                ></p>\n<p>然后就是正常的操作流程了</p>\n<h3 id=\"FlowableUI-演示\"><a href=\"#FlowableUI-演示\" class=\"headerlink\" title=\"FlowableUI 演示\"></a>FlowableUI 演示</h3><h4 id=\"部署流程-2\"><a href=\"#部署流程-2\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h4><p>在FlowableUI中提供了演示程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104517967.png\"\n                      alt=\"image-20220318104517967\"\n                ></p>\n<p>创建一个新的应用程序，并指定相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104614784.png\"\n                      alt=\"image-20220318104614784\"\n                ></p>\n<p>创建应用后需要指定对应的流程图</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104703306.png\"\n                      alt=\"image-20220318104703306\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104735714.png\"\n                      alt=\"image-20220318104735714\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104811812.png\"\n                      alt=\"image-20220318104811812\"\n                ></p>\n<p>发布应用程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105045345.png\"\n                      alt=\"image-20220318105045345\"\n                ></p>\n<h4 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h4><p>发布了应用程序后我们就可以来启动流程了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105258331.png\"\n                      alt=\"image-20220318105258331\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105315908.png\"\n                      alt=\"image-20220318105315908\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105336107.png\"\n                      alt=\"image-20220318105336107\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105420011.png\"\n                      alt=\"image-20220318105420011\"\n                ></p>\n<p>点击显示图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105444672.png\"\n                      alt=\"image-20220318105444672\"\n                ></p>\n<p>也就是可以看到当前是user1来处理，user1登录后可以看到要处理的流程，user2登录是看不到的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105646273.png\"\n                      alt=\"image-20220318105646273\"\n                ></p>\n<p>点击完成后流程就向下一步流转了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105727192.png\"\n                      alt=\"image-20220318105727192\"\n                ></p>\n<p>这时再通过user2登录，就可以看到对应的代办的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105808830.png\"\n                      alt=\"image-20220318105808830\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105848185.png\"\n                      alt=\"image-20220318105848185\"\n                ></p>\n<p>然后点击完成，那么整个流程就介绍了</p>\n<h1 id=\"Flowable基础表结构\"><a href=\"#Flowable基础表结构\" class=\"headerlink\" title=\"Flowable基础表结构\"></a>Flowable基础表结构</h1><h2 id=\"表结构讲解\"><a href=\"#表结构讲解\" class=\"headerlink\" title=\"表结构讲解\"></a>表结构讲解</h2><p>工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚Flowable的实现原理和细节，我们有必要先弄清楚Flowable的相关表结构及其作用。在Flowable中的表结构在初始化的时候会创建五类表结构，具体如下：</p>\n<ul>\n<li><strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li>\n<li><strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li>\n<li><strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li>\n<li><strong>ACT_GE</strong>： GE 表示 general。 通用数据， 用于不同场景下 </li>\n<li><strong>ACT_ID:</strong>   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</li>\n</ul>\n<p>具体的表结构的含义:</p>\n<table>\n<thead>\n<tr>\n<th><strong>表分类</strong></th>\n<th><strong>表名</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一般数据</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_BYTEARRAY]</td>\n<td>通用的流程定义和流程资源</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_PROPERTY]</td>\n<td>系统相关属性</td>\n</tr>\n<tr>\n<td>流程历史记录</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ACTINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ATTACHMENT]</td>\n<td>历史的流程附件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_COMMENT]</td>\n<td>历史的说明性信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_DETAIL]</td>\n<td>历史的流程运行中的细节信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_IDENTITYLINK]</td>\n<td>历史的流程运行过程中用户关系</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_PROCINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_TASKINST]</td>\n<td>历史的任务实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_VARINST]</td>\n<td>历史的流程运行中的变量信息</td>\n</tr>\n<tr>\n<td>流程定义表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_DEPLOYMENT]</td>\n<td>部署单元信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_MODEL]</td>\n<td>模型信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_PROCDEF]</td>\n<td>已部署的流程定义</td>\n</tr>\n<tr>\n<td>运行实例表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EVENT_SUBSCR]</td>\n<td>运行时事件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EXECUTION]</td>\n<td>运行时流程执行实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_IDENTITYLINK]</td>\n<td>运行时用户关系信息，存储任务节点与参与者的相关信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_JOB]</td>\n<td>运行时作业</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_TASK]</td>\n<td>运行时任务</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_VARIABLE]</td>\n<td>运行时变量表</td>\n</tr>\n<tr>\n<td>用户用户组表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_BYTEARRAY]</td>\n<td>二进制数据表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_GROUP]</td>\n<td>用户组信息表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_INFO]</td>\n<td>用户信息详情表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_MEMBERSHIP]</td>\n<td>人与组关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV]</td>\n<td>权限表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV_MAPPING]</td>\n<td>用户或组权限关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PROPERTY]</td>\n<td>属性表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_TOKEN]</td>\n<td>记录用户的token信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_USER]</td>\n<td>用户表</td>\n</tr>\n</tbody></table>\n<h2 id=\"ProcessEngine讲解\"><a href=\"#ProcessEngine讲解\" class=\"headerlink\" title=\"ProcessEngine讲解\"></a>ProcessEngine讲解</h2><h3 id=\"硬编码的方式\"><a href=\"#硬编码的方式\" class=\"headerlink\" title=\"硬编码的方式\"></a>硬编码的方式</h3><p>我们前面讲解案例的时候是通过ProcessEngineConfiguration这个配置类来加载的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">    .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">    .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">    .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\"><span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br></pre></td></tr></table></figure>\n\n<p>这种方式会调用buildProcessEngine()方法，里面的核心代码为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113106848.png\"\n                      alt=\"image-20220319113106848\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113139646.png\"\n                      alt=\"image-20220319113139646\"\n                ></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>除了上面的硬编码的方式外，我们还可以在resources目录下创建一个<code>flowable.cfg.xml</code>文件，注意这个名称是固定的哦。内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;processEngineConfiguration&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flow1?allowMultiQueries=true<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"symbol\">&amp;amp;</span>useSSL=false<span class=\"symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"symbol\">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcDriver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUsername&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcPassword&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseSchemaUpdate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;asyncExecutorActivate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置文件中配置相关的信息。我们在Java代码中就可以简化为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看下getDefaultProcessEngine的源码，在里面最终还是执行了和硬编码一样的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ProcessEngine <span class=\"title function_\">getProcessEngine</span><span class=\"params\">(String processEngineName)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isInitialized()) &#123;</span><br><span class=\"line\">        init(); <span class=\"comment\">// 完成初始化操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processEngines.get(processEngineName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入init方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isInitialized()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processEngines == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create new map to store process-engines if current map is null</span></span><br><span class=\"line\">            processEngines = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> ReflectUtil.getClassLoader();</span><br><span class=\"line\">        Enumeration&lt;URL&gt; resources = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            resources = classLoader.getResources(<span class=\"string\">&quot;flowable.cfg.xml&quot;</span>); <span class=\"comment\">// 加载flowable.cfg.xml配置文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowableIllegalArgumentException</span>(<span class=\"string\">&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot;</span> + System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Remove duplicated configuration URL&#x27;s using set. Some</span></span><br><span class=\"line\">        <span class=\"comment\">// classloaders may return identical URL&#x27;s twice, causing duplicate</span></span><br><span class=\"line\">        <span class=\"comment\">// startups</span></span><br><span class=\"line\">        Set&lt;URL&gt; configUrls = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resources.hasMoreElements()) &#123;</span><br><span class=\"line\">            configUrls.add(resources.nextElement());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Iterator&lt;URL&gt; iterator = configUrls.iterator(); iterator.hasNext();) &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;Initializing process engine using configuration &#x27;&#123;&#125;&#x27;&quot;</span>, resource.toString());</span><br><span class=\"line\">            initProcessEngineFromResource(resource); <span class=\"comment\">// 初始化ProcessEngine</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            resources = classLoader.getResources(<span class=\"string\">&quot;flowable-context.xml&quot;</span>); <span class=\"comment\">// 在整合Spring的情况下加载该文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowableIllegalArgumentException</span>(<span class=\"string\">&quot;problem retrieving flowable-context.xml resources on the classpath: &quot;</span> + System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resources.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> resources.nextElement();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;Initializing process engine using Spring configuration &#x27;&#123;&#125;&#x27;&quot;</span>, resource.toString());</span><br><span class=\"line\">            initProcessEngineFromSpringResource(resource); <span class=\"comment\">// 从Spring的资源文件中完成ProcessEngine的初始化</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setInitialized(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;Process engines already initialized&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在源码中提供了单独使用好整合Spring的配置加载方式。再进入到initProcessEngineFromResource(resource)方法中：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114011806.png\"\n                      alt=\"image-20220319114011806\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114053252.png\"\n                      alt=\"image-20220319114053252\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114210012.png\"\n                      alt=\"image-20220319114210012\"\n                ></p>\n<p>而且我们也可以看到ProcessEngine最终的实现是 ProcessEngineImpl对象。</p>\n<h3 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h3><p>最后我们如果要加载自定义名称的配置文件可以通过ProcessEngineConfiguration中的对应构造方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> ProcessEngineConfiguration</span><br><span class=\"line\">            .createProcessEngineConfigurationFromResource(<span class=\"string\">&quot;flowable.cfg.xml&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Servcie服务接口\"><a href=\"#Servcie服务接口\" class=\"headerlink\" title=\"Servcie服务接口\"></a>Servcie服务接口</h2><p>Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319223019186.png\"\n                      alt=\"image-20220319223019186\"\n                ></p>\n<h3 id=\"Service创建方式\"><a href=\"#Service创建方式\" class=\"headerlink\" title=\"Service创建方式\"></a>Service创建方式</h3><p>通过ProcessEngine创建Service</p>\n<p>方式如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"><span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Service总览\"><a href=\"#Service总览\" class=\"headerlink\" title=\"Service总览\"></a>Service总览</h3><table>\n<thead>\n<tr>\n<th>service名称</th>\n<th>service作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RepositoryService</td>\n<td>Flowable的资源管理类</td>\n</tr>\n<tr>\n<td>RuntimeService</td>\n<td>Flowable的流程运行管理类</td>\n</tr>\n<tr>\n<td>TaskService</td>\n<td>Flowable的任务管理类</td>\n</tr>\n<tr>\n<td>HistoryService</td>\n<td>Flowable的历史管理类</td>\n</tr>\n<tr>\n<td>ManagerService</td>\n<td>Flowable的引擎管理类</td>\n</tr>\n</tbody></table>\n<p> 简单介绍：</p>\n<p><strong>RepositoryService</strong></p>\n<p>是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。</p>\n<p>除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。</p>\n<p>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</p>\n<p>获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。</p>\n<p><strong>RuntimeService</strong></p>\n<p>Activiti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p>\n<p><strong>TaskService</strong></p>\n<p>Activiti的任务管理类。可以从这个类中获取任务的信息。</p>\n<p><strong>HistoryService</strong></p>\n<p>Flowable的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p>\n<p><strong>ManagementService</strong></p>\n<p>Activiti的引擎管理类，提供了对Flowable 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Flowable 系统的日常维护。</p>\n<h2 id=\"图标介绍\"><a href=\"#图标介绍\" class=\"headerlink\" title=\"图标介绍\"></a>图标介绍</h2><p>BPMN 2.0是业务流程建模符号2.0的缩写。它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些<strong>符号</strong>来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。接下来我们先来了解在流程设计中常见的 符号。</p>\n<p>BPMN2.0的<strong>基本符合</strong>主要包含：</p>\n<h3 id=\"事件图标\"><a href=\"#事件图标\" class=\"headerlink\" title=\"事件图标\"></a>事件图标</h3><p>在Flowable中的事件图标启动事件，边界事件,中间事件和结束事件.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103803308.png\"\n                      alt=\"image-20220320103803308\"\n                ></p>\n<h3 id=\"活动-任务-图标\"><a href=\"#活动-任务-图标\" class=\"headerlink\" title=\"活动(任务)图标\"></a>活动(任务)图标</h3><p>活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103929543.png\"\n                      alt=\"image-20220320103929543\"\n                ></p>\n<h3 id=\"结构图标\"><a href=\"#结构图标\" class=\"headerlink\" title=\"结构图标\"></a>结构图标</h3><p>结构图标可以看做是整个流程活动的结构，一个流程中可以包括子流程。常见的结构有：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220320104025737.png\"\n                      alt=\"image-20220320104025737\"\n                ></p>\n<h3 id=\"网关图标\"><a href=\"#网关图标\" class=\"headerlink\" title=\"网关图标\"></a>网关图标</h3><p>网关用来处理决策，有几种常用网关需要了解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320104157816.png\"\n                      alt=\"image-20220320104157816\"\n                ></p>\n<h2 id=\"流程部署详解\"><a href=\"#流程部署详解\" class=\"headerlink\" title=\"流程部署详解\"></a>流程部署详解</h2><h3 id=\"部署实现\"><a href=\"#部署实现\" class=\"headerlink\" title=\"部署实现\"></a>部署实现</h3><p>我们先来看下流程部署的具体过程。代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;holiday-request-new.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请假流程...&quot;</span>)</span><br><span class=\"line\">                .category(<span class=\"string\">&quot;请假&quot;</span>) <span class=\"comment\">// 分类</span></span><br><span class=\"line\">                .tenantId(<span class=\"string\">&quot;dpb&quot;</span>) <span class=\"comment\">// 租户id</span></span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getCategory() = &quot;</span> + deploy.getCategory());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署涉及表结构\"><a href=\"#部署涉及表结构\" class=\"headerlink\" title=\"部署涉及表结构\"></a>部署涉及表结构</h3><p>涉及到的三张表：</p>\n<p>部署资源表：act_ge_bytearray</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td>部署的文件名称，如：holiday-request-new.bpmn20.xml、holiday-request-new.bpmn20.png</td>\n</tr>\n<tr>\n<td>DEPLOYMENT_ID_</td>\n<td>部署ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTES_</td>\n<td>字节（二进制数据）</td>\n<td></td>\n</tr>\n<tr>\n<td>GENERATED_</td>\n<td>是否系统生成</td>\n<td>0为用户上传，<br/>1为系统自动生成， 比如系统会 自动根据xml生 成png</td>\n</tr>\n</tbody></table>\n<p>部署ID表：act_re_deployment</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>分类</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DEPLOY_TIME_</td>\n<td>部署时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DERIVED_FROM_</td>\n<td>来源于</td>\n<td></td>\n</tr>\n<tr>\n<td>DERIVED_FROM_ROOT_</td>\n<td>来源于</td>\n<td></td>\n</tr>\n<tr>\n<td>ENGINE_VERSION_</td>\n<td>流程引擎的版本</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>流程表：act_re_procdef</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>分类</td>\n<td>流程定义的Namespace就是类别</td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>KEY_</td>\n<td>标识</td>\n<td></td>\n</tr>\n<tr>\n<td>VERSION_</td>\n<td>版本</td>\n<td></td>\n</tr>\n<tr>\n<td>DEPLOYMENT_ID_</td>\n<td>部署ID</td>\n<td></td>\n</tr>\n<tr>\n<td>RESOURCE_NAME_</td>\n<td>资源名称</td>\n<td>流程bpmn文件名称</td>\n</tr>\n<tr>\n<td>DGRM_RESOURCE_NAME_</td>\n<td>图片资源名称</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>描述</td>\n<td></td>\n</tr>\n<tr>\n<td>HAS_START_FORM_KEY_</td>\n<td>拥有开始表单标识</td>\n<td>start节点是否存在formKey  0否 1是</td>\n</tr>\n<tr>\n<td>HAS_GRAPHICAL_NOTATION_</td>\n<td>拥有图形信息</td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>挂起状态</td>\n<td>暂停状态 1激活 2暂停</td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户ID</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<p>业务流程定义数据表。此表和ACT_RE_DEPLOYMENT是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在ACT_REPROCDEF表内，每个流程定义的数据，都会对于ACT_GE_BYTEARRAY表内的一个资源文件和PNG图片文件。和ACT_GE_BYTEARRAY的关联是通过程序用ACT_GE_BYTEARRAY.NAME与ACT_RE_PROCDEF.NAME_完成的</p>\n<h3 id=\"挂起和激活\"><a href=\"#挂起和激活\" class=\"headerlink\" title=\"挂起和激活\"></a>挂起和激活</h3><p>部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。</p>\n<p>流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 挂起流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test05</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程定义的状态</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">suspended</span> <span class=\"operator\">=</span> processDefinition.isSuspended();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;suspended = &quot;</span> + suspended);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(suspended)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表示被挂起</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;激活流程定义&quot;</span>);</span><br><span class=\"line\">            repositoryService.activateProcessDefinitionById(<span class=\"string\">&quot;holiday:1:4&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表示激活状态</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;挂起流程&quot;</span>);</span><br><span class=\"line\">            repositoryService.suspendProcessDefinitionById(<span class=\"string\">&quot;holiday:1:4&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的实现其实就是更新了流程定义表中的字段</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321210010518.png\"\n                      alt=\"image-20220321210010518\"\n                ></p>\n<p>而且通过REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321211858122.png\"\n                      alt=\"image-20220321211858122\"\n                ></p>\n<h2 id=\"启动流程实例-1\"><a href=\"#启动流程实例-1\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h2><p>然后我们来看看启动流程实例的过程。实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 构建流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;employee&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;<span class=\"comment\">// 谁申请请假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;nrOfHolidays&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 请几天假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;description&quot;</span>,<span class=\"string\">&quot;工作累了，想出去玩玩&quot;</span>); <span class=\"comment\">// 请假的原因</span></span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;holiday:1:4&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们启动了一个流程实例后，会在ACT_RU_*对应的表结构中操作,运行时实例涉及的表结构共10张：</p>\n<ul>\n<li>ACT_RU_DEADLETTER_JOB  正在运行的任务表 </li>\n<li>ACT_RU_EVENT_SUBSCR 运行时事件 </li>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_HISTORY_JOB  历史作业表 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_JOB 运行时作业表 </li>\n<li>ACT_RU_SUSPENDED_JOB 暂停作业表 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_TIMER_JOB 定时作业表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>启动一个流程实例的时候涉及到的表有</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>ACT_RU_EXECUTION表结构</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BUSINESS_KEY_</td>\n<td>业务主键ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_ID_</td>\n<td>父执行流的ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义的数据ID</td>\n<td></td>\n</tr>\n<tr>\n<td>SUPER_EXEC_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ROOT_PROC_INST_ID_</td>\n<td>流程实例的root流程id</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_ID_</td>\n<td>节点实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_ACTIVE_</td>\n<td>是否存活</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_CONCURRENT_</td>\n<td>执行流是否正在并行</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_SCOPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IS_EVENT_SCOPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IS_MI_ROOT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>流程终端状态</td>\n<td></td>\n</tr>\n<tr>\n<td>CACHED_ENT_STATE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>START_USER_ID_</td>\n<td>开始的用户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>LOCK_TIME_</td>\n<td>锁定时间</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_COUNT_ENABLED_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>EVT_SUBSCR_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TIMER_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SUSP_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DEADLETTER_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>VAR_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ID_LINK_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133108405.png\"\n                      alt=\"image-20220322133108405\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133219534.png\"\n                      alt=\"image-20220322133219534\"\n                ></p>\n<p>ACT_RU_TASK  运行时任务表</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>任务所在的执行流ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义数据ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>任务名称</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_TASK_ID_</td>\n<td>父任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>说明</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_DEF_KEY_</td>\n<td>任务定义的ID值</td>\n<td></td>\n</tr>\n<tr>\n<td>OWNER_</td>\n<td>任务拥有人</td>\n<td></td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>被指派执行该任务的人</td>\n<td></td>\n</tr>\n<tr>\n<td>DELEGATION_</td>\n<td>委托人</td>\n<td></td>\n</tr>\n<tr>\n<td>PRIORITY_</td>\n<td>优先级</td>\n<td></td>\n</tr>\n<tr>\n<td>CREATE_TIME_</td>\n<td>创建时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DUE_DATE_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>类别</td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>是否挂起</td>\n<td>1代表激活 2代表挂起</td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>FORM_KEY_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>CLAIM_TIME_</td>\n<td>拾取时间</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133307195.png\"\n                      alt=\"image-20220322133307195\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133335326.png\"\n                      alt=\"image-20220322133335326\"\n                ></p>\n<p>ACT_RU_VARIABLE  运行时变量表</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>参数类型</td>\n<td>可以是基本的类型，也可以用户自行扩展</td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>参数名称</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>参数执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTEARRAY_ID_</td>\n<td>资源ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DOUBLE_</td>\n<td>参数为double，则保存在该字段中</td>\n<td></td>\n</tr>\n<tr>\n<td>LONG_</td>\n<td>参数为long，则保存在该字段中</td>\n<td></td>\n</tr>\n<tr>\n<td>TEXT_</td>\n<td>用户保存文本类型的参数值</td>\n<td></td>\n</tr>\n<tr>\n<td>TEXT2_</td>\n<td>用户保存文本类型的参数值</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133406398.png\"\n                      alt=\"image-20220322133406398\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133439827.png\"\n                      alt=\"image-20220322133439827\"\n                ></p>\n<p>ACT_RU_IDENTITYLINK 运行时用户关系信息 </p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_ID_</td>\n<td>用户组ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>关系数据类型</td>\n<td>assignee支配人(组)、candidate候选人(组)、owner拥有人,participant参与者</td>\n</tr>\n<tr>\n<td>USER_ID_</td>\n<td>用户ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>属性ID</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133501720.png\"\n                      alt=\"image-20220322133501720\"\n                ></p>\n<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p>上面的流程已经流转到了zhangsan这个用户这里，然后可以开始审批了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">        taskService.complete(task.getId(),variables);</span><br></pre></td></tr></table></figure>\n\n<p>在正常处理流程中涉及到的表结构</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>ACT_RU_TASK  运行时任务表 :会新生成一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135040119.png\"\n                      alt=\"image-20220322135040119\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135125703.png\"\n                      alt=\"image-20220322135125703\"\n                ></p>\n<p>ACT_RU_VARIABLE  运行时变量表:会记录新的流程变量</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135204021.png\"\n                      alt=\"image-20220322135204021\"\n                ></p>\n<p>当然流程实例也可以挂起</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.获取ProcessEngine对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">engine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\"><span class=\"comment\">// 2.获取RuntimeService</span></span><br><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> engine.getRuntimeService();</span><br><span class=\"line\"><span class=\"comment\">// 3.获取流程实例对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.createProcessInstanceQuery()</span><br><span class=\"line\">    .processInstanceId(<span class=\"string\">&quot;25001&quot;</span>)</span><br><span class=\"line\">    .singleResult();</span><br><span class=\"line\"><span class=\"comment\">// 4.获取相关的状态操作</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">suspended</span> <span class=\"operator\">=</span> processInstance.isSuspended();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> processInstance.getId();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(suspended)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂起--》激活</span></span><br><span class=\"line\">    runtimeService.activateProcessInstanceById(id);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义：&quot;</span> + id + <span class=\"string\">&quot;，已激活&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 激活--》挂起</span></span><br><span class=\"line\">    runtimeService.suspendProcessInstanceById(id);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义：&quot;</span> + id + <span class=\"string\">&quot;，已挂起&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动第二个流程实例后再查看相关的表结构时，对他们的关系理解会更加的清楚一些</p>\n<p>启动一个新的流程实例对应的就会产生两条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135605252.png\"\n                      alt=\"image-20220322135605252\"\n                ></p>\n<p>IDENTITYLINK中会记录每次流程操作的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135636841.png\"\n                      alt=\"image-20220322135636841\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135659671.png\"\n                      alt=\"image-20220322135659671\"\n                ></p>\n<p>流程变量数据，及时key 相同，但是属于不同的流程实例相互间也是隔离的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135719104.png\"\n                      alt=\"image-20220322135719104\"\n                ></p>\n<h2 id=\"完成一个流程\"><a href=\"#完成一个流程\" class=\"headerlink\" title=\"完成一个流程\"></a>完成一个流程</h2><p>然后我们把第一个流程处理完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">    .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">    .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">    .singleResult();</span><br><span class=\"line\"><span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\"><span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">taskService.complete(task.getId(),variables);</span><br></pre></td></tr></table></figure>\n\n<p>处理完了一个工作流程后，我们来看看相关的表结构信息</p>\n<p>首先我们会发现</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息</p>\n<ul>\n<li><p>ACT_HI_ACTINST  历史的流程实例</p>\n</li>\n<li><p>ACT_HI_ATTACHMENT 历史的流程附件</p>\n</li>\n<li><p>ACT_HI_COMMENT  历史的说明性信息</p>\n</li>\n<li><p>ACT_HI_DETAIL 历史的流程运行中的细节信息</p>\n</li>\n<li><p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p>\n</li>\n<li><p>ACT_HI_PROCINST  历史的流程实例</p>\n</li>\n<li><p>ACT_HI_TASKINST  历史的任务实例</p>\n</li>\n<li><p>ACT_HI_VARINST  历史的流程运行中的变量信息</p>\n</li>\n</ul>\n<p>在我们上面的处理流程的过程中设计到的历史表有</p>\n<p>ACT_HI_ACTINST  历史的流程实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_ID_</td>\n<td>节点实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>CALL_PROC_INST_ID_</td>\n<td>调用外部的流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_NAME_</td>\n<td>节点名称</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_TYPE_</td>\n<td>节点类型</td>\n<td></td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>处理人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141800554.png\"\n                      alt=\"image-20220322141800554\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141825065.png\"\n                      alt=\"image-20220322141825065\"\n                ></p>\n<p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_ID_</td>\n<td>组编号</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>类型</td>\n<td></td>\n</tr>\n<tr>\n<td>USER_ID_</td>\n<td>用户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务编号</td>\n<td></td>\n</tr>\n<tr>\n<td>CREATE_TIME_</td>\n<td>创建时间</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例编号</td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_ID_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_TYPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_DEFINITION_ID_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141717826.png\"\n                      alt=\"image-20220322141717826\"\n                ></p>\n<p>ACT_HI_PROCINST  历史的流程实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BUSINESS_KEY_</td>\n<td>业务主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>属性ID</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>START_USER_ID_</td>\n<td>起始人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_ACT_ID_</td>\n<td>起始节点</td>\n<td></td>\n</tr>\n<tr>\n<td>END_ACT_ID_</td>\n<td>结束节点</td>\n<td></td>\n</tr>\n<tr>\n<td>SUPER_PROCESS_INSTANCE_ID_</td>\n<td>父流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141855401.png\"\n                      alt=\"image-20220322141855401\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141912602.png\"\n                      alt=\"image-20220322141912602\"\n                ></p>\n<p>ACT_HI_TASKINST  历史的任务实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_DEF_KEY_</td>\n<td>任务定义的ID值</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_TASK_ID_</td>\n<td>父任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>说明</td>\n<td></td>\n</tr>\n<tr>\n<td>OWNER_</td>\n<td>实际签收人 任务的拥有者</td>\n<td>签收人（默认为空，只有在委托时才有值）</td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>被指派执行该任务的人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>CLAIM_TIME_</td>\n<td>任务拾取时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>PRIORITY_</td>\n<td>优先级别</td>\n<td></td>\n</tr>\n<tr>\n<td>DUE_DATE_</td>\n<td>过期时间</td>\n<td></td>\n</tr>\n<tr>\n<td>FORM_KEY_</td>\n<td>节点定义的formkey</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>类别</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142609163.png\"\n                      alt=\"image-20220322142609163\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142650699.png\"\n                      alt=\"image-20220322142650699\"\n                ></p>\n<p>ACT_HI_VARINST  历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>指定ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>VAR_TYPE_</td>\n<td>参数类型</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>数据版本</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTEARRAY_ID_</td>\n<td>字节表ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DOUBLE_</td>\n<td>存储double类型数据</td>\n<td></td>\n</tr>\n<tr>\n<td>LONG_</td>\n<td>存储long类型数据</td>\n<td></td>\n</tr>\n<tr>\n<td>…..</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142756867.png\"\n                      alt=\"image-20220322142756867\"\n                ></p>\n<p>好了一个相对简单的流程处理涉及到的相关表结构内容就介绍完了</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"flowable基础篇\"><a href=\"#flowable基础篇\" class=\"headerlink\" title=\"flowable基础篇\"></a>flowable基础篇</h1><blockquote>\n<p>Lecture：波波老师</p>\n</blockquote>\n<h1 id=\"Flowable介绍\"><a href=\"#Flowable介绍\" class=\"headerlink\" title=\"Flowable介绍\"></a>Flowable介绍</h1><p>Flowable是BPMN的一个基于java的软件实现，不过Flowable不仅仅包括BPMN，还有DMN决策表和CMMN Case管理引擎，并且有自己的用户管理、微服务API等一系列功能，是一个服务平台。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317101115398.png\"\n                      alt=\"image-20220317101115398\"\n                ></p>\n<h1 id=\"Flowable基础\"><a href=\"#Flowable基础\" class=\"headerlink\" title=\"Flowable基础\"></a>Flowable基础</h1><p>官方手册：<a class=\"link\"   href=\"https://tkjohn.github.io/flowable-userguide/#_introduction\" >https://tkjohn.github.io/flowable-userguide/#_introduction<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"创建ProcessEngine\"><a href=\"#创建ProcessEngine\" class=\"headerlink\" title=\"创建ProcessEngine\"></a>创建ProcessEngine</h2><p>创建一个基本的maven工程，可以是Eclipse也可以是其他IDEA。然后添加两个依赖</p>\n<ul>\n<li>Flowable流程引擎。使我们可以创建一个ProcessEngine流程引擎对象，并访问Flowable API。</li>\n<li>一个是MySQL的数据库驱动</li>\n</ul>\n<p>在<em>pom.xml</em>文件中添加下列行：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.flowable<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flowable-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建一个普通的Java类，添加对应的main方法，首先要做的是初始化<strong>ProcessEngine</strong>流程引擎实例。这是一个线程安全的对象，因此通常只需要在一个应用中初始化一次。 <em>ProcessEngine</em>由<strong>ProcessEngineConfiguration</strong>实例创建。该实例可以配置与调整流程引擎的设置。 通常使用一个配置XML文件创建<em>ProcessEngineConfiguration</em>，但是（像在这里做的一样）也可以编程方式创建它。 <em>ProcessEngineConfiguration</em>所需的最小配置，是数据库JDBC连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">        .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&quot;</span>)</span><br><span class=\"line\">        .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">        .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">        .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">        .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意在mysql8.0中执行可能出现如下的错误</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093416477.png\"\n                      alt=\"image-20220316093416477\"\n                ></p>\n<p>出现这种情况只需要在mysql的连接字符串中添加上nullCatalogMeansCurrent&#x3D;true，设置为只查当前连接的schema库即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn1?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后应用运行没有问题，但也没有在控制台提供有用的信息，只有一条消息提示日志没有正确配置。Flowable使用<a class=\"link\"   href=\"http://www.slf4j.org/\" >SLF4J<i class=\"fas fa-external-link-alt\"></i></a>作为内部日志框架。在这个例子中，我们使用log4j作为SLF4J的实现。因此在pom.xml文件中添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Log4j需要一个配置文件。在<em>src&#x2F;main&#x2F;resources</em>文件夹下添加<em>log4j.properties</em>文件，并写入下列内容：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log4j.rootLogger</span>=<span class=\"string\">DEBUG, CA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"attr\">log4j.appender.CA.layout.ConversionPattern</span>= <span class=\"string\">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>\n\n<p>重新运行应用。应该可以看到关于引擎启动与创建数据库表结构的提示日志：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093922199.png\"\n                      alt=\"image-20220316093922199\"\n                ></p>\n<p>同时可以看到创建了相关的表结构在数据库中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316093957662.png\"\n                      alt=\"image-20220316093957662\"\n                ></p>\n<p>这样就得到了一个启动可用的流程引擎。接下来为它提供一个流程！</p>\n<h2 id=\"部署流程定义\"><a href=\"#部署流程定义\" class=\"headerlink\" title=\"部署流程定义\"></a>部署流程定义</h2><p>接下来我们构建一个非常简单的请假流程，Flowable引擎需要流程定义为BPMN 2.0格式，这是一个业界广泛接受的XML标准。 在Flowable术语中，我们将其称为一个*<em>流程定义(process definition)<strong>。一个<em>流程定义</em>可以启动多个</strong>流程实例(process instance)*<em>。</em>流程定义*可以看做是重复执行流程的蓝图。 在这个例子中，</em>流程定义<em>定义了请假的各个步骤，而一个</em>流程实例*对应某个雇员提出的一个请假申请。</p>\n<p>BPMN 2.0存储为XML，并包含可视化的部分：使用标准方式定义了每个步骤类型（人工任务，自动服务调用，等等）如何呈现，以及如何互相连接。这样BPMN 2.0标准使技术人员与业务人员能用双方都能理解的方式交流业务流程。</p>\n<p>我们要使用的流程定义为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/getting.started.bpmn.process.png\"\n                      alt=\"getting.started.bpmn.process\"\n                ></p>\n<p>流程定义说明：</p>\n<ul>\n<li>我们假定启动流程需要提供一些信息，例如雇员名字、请假时长以及说明。当然，这些可以单独建模为流程中的第一步。 但是如果将它们作为流程的“输入信息”，就能保证只有在实际请求时才会建立一个流程实例。否则（将提交作为流程的第一步），用户可能在提交之前改变主意并取消，但流程实例已经创建了。 在某些场景中，就可能影响重要的指标（例如启动了多少申请，但还未完成），取决于业务目标。</li>\n<li>左侧的圆圈叫做**启动事件(start event)**。这是一个流程实例的起点。</li>\n<li>第一个矩形是一个**用户任务(user task)**。这是流程中用户操作的步骤。在这个例子中，经理需要批准或驳回申请</li>\n<li>取决于经理的决定，<strong>排他网关(exclusive gateway)</strong> (带叉的菱形)会将流程实例路由至批准或驳回路径</li>\n<li>如果批准，则需要将申请注册至某个外部系统，并跟着另一个用户任务，将经理的决定通知给申请人。当然也可以改为发送邮件。</li>\n<li>如果驳回，则为雇员发送一封邮件通知他。</li>\n</ul>\n<p>一般来说，这样的<em>流程定义</em>使用可视化建模工具建立，如Flowable Designer(Eclipse)或Flowable Web Modeler(Web应用)。但在这里我们直接撰写XML，以熟悉BPMN 2.0及其概念。</p>\n<p>与上面展示的流程图对应的BPMN 2.0 XML在下面显示。请注意这只包含了“流程部分”。如果使用图形化建模工具，实际的XML文件还将包含“可视化部分”，用于描述图形信息，如流程定义中各个元素的坐标（所有的图形化信息包含在XML的<em>BPMNDiagram</em>标签中，作为<em>definitions</em>标签的子元素）。</p>\n<p>将下面的XML保存在<em>src&#x2F;main&#x2F;resources</em>文件夹下名为<em>holiday-request.bpmn20.xml</em>的文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayRequest&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday Request&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startEvent&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Approve or reject request&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;approveTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decision&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span>  <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;decision&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class=\"line\">                &lt;![CDATA[</span><br><span class=\"line\">          $&#123;!approved&#125;</span><br><span class=\"line\">        ]]&gt;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Enter holidays in external system&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;externalSystemCall&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;holidayApprovedTask&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Send out rejection email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sendRejectionMail&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经有了流程BPMN 2.0 XML文件，下来需要将它***部署(deploy)**<em>到引擎中。</em>部署*一个流程定义意味着：</p>\n<ul>\n<li>流程引擎会将XML文件存储在数据库中，这样可以在需要的时候获取它</li>\n<li>流程定义转换为内部的、可执行的对象模型，这样使用它就可以启动<em>流程实例</em>。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220317110902636.png\"\n                      alt=\"image-20220317110902636\"\n                ></p>\n<p>将流程定义<em>部署</em>至Flowable引擎，需要使用<em>RepositoryService</em>，其可以从<em>ProcessEngine</em>对象获取。使用<em>RepositoryService</em>，可以通过XML文件的路径创建一个新的*部署(Deployment)<em>，并调用</em>deploy()*方法实际执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> repositoryService.createDeployment()<span class=\"comment\">// 创建Deployment对象</span></span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;holiday-request.bpmn20.xml&quot;</span>) <span class=\"comment\">// 添加流程部署文件</span></span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请求流程&quot;</span>) <span class=\"comment\">// 设置部署流程的名称</span></span><br><span class=\"line\">            .deploy(); <span class=\"comment\">// 执行部署操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deployment.getId() = &quot;</span> + deployment.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deployment.getName() = &quot;</span> + deployment.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行该方法日志操作成功：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100439048.png\"\n                      alt=\"image-20220316100439048\"\n                ></p>\n<p>在后台表结构也可以看到相关的信息</p>\n<p>act_re_deployment: 流程定义部署表，每部署一次就增加一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100532725.png\"\n                      alt=\"image-20220316100532725\"\n                ></p>\n<p>act_re_procdef ：流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100611004.png\"\n                      alt=\"image-20220316100611004\"\n                ></p>\n<p>act_ge_bytearray ：流程资源表，流程部署的 bpmn文件和png图片会保存在该表中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316100648362.png\"\n                      alt=\"image-20220316100648362\"\n                ></p>\n<p>我们现在可以通过API查询验证流程定义已经部署在引擎中（并学习一些API）。通过<em>RepositoryService</em>创建的<em>ProcessDefinitionQuery</em>对象实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看流程定义</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeployQuery</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 部署流程 获取RepositoryService对象</span></span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程定义对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">                .deploymentId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getId() = &quot;</span> + processDefinition.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getName() = &quot;</span> + processDefinition.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDeploymentId() = &quot;</span> + processDefinition.getDeploymentId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;processDefinition.getDescription() = &quot;</span> + processDefinition.getDescription());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDefinition.getId() = holidayRequest:2:2503</span><br><span class=\"line\">processDefinition.getName() = Holiday Request</span><br><span class=\"line\">processDefinition.getDeploymentId() = 2501</span><br><span class=\"line\">processDefinition.getDescription() = null</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动流程实例\"><a href=\"#启动流程实例\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h2><p>现在已经在流程引擎中<em>部署</em>了流程定义，因此可以使用这个<em>流程定义</em>作为“模板”启动<em>流程实例</em>。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316102638015.png\"\n                      alt=\"image-20220316102638015\"\n                ></p>\n<p>要启动流程实例，需要提供一些初始化<em>流程变量</em>。一般来说，可以通过呈现给用户的表单，或者在流程由其他系统自动触发时通过REST API，来获取这些变量。在这个例子里，我们简化直接在代码中定义了，我们使用<em>RuntimeService</em>启动一个<em>流程实例</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 构建流程变量</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;employee&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;<span class=\"comment\">// 谁申请请假</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;nrOfHolidays&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 请几天假</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;description&quot;</span>,<span class=\"string\">&quot;工作累了，想出去玩玩&quot;</span>); <span class=\"comment\">// 请假的原因</span></span><br><span class=\"line\">    <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceByKey(<span class=\"string\">&quot;holidayRequest&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动成功，输出结果如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流程定义的ID：holidayRequest:2:2503</span><br><span class=\"line\">流程实例的ID：5001</span><br><span class=\"line\">当前活动的ID：null</span><br></pre></td></tr></table></figure>\n\n<p>对应的流程实例ID为：5001</p>\n<p>启动流程实例涉及到的表结构：</p>\n<ul>\n<li>act_hi_actinst 流程实例执行历史</li>\n<li>act_hi_identitylink 流程的参与用户的历史信息</li>\n<li>act_hi_procinst 流程实例历史信息</li>\n<li>act_hi_taskinst 流程任务历史信息</li>\n<li>act_ru_execution 流程执行信息</li>\n<li>act_ru_identitylink 流程的参与用户信息</li>\n<li>act_ru_task 任务信息</li>\n</ul>\n<h2 id=\"查看任务\"><a href=\"#查看任务\" class=\"headerlink\" title=\"查看任务\"></a>查看任务</h2><p>上面员工发起了一个请假流程，接下来就会流转到总经理这儿来处理，之前我们没有指定经理这的处理人，我们可以加一个</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316110406801.png\"\n                      alt=\"image-20220316110406801\"\n                ></p>\n<p>然后我们来查看下lisi的任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getProcessDefinitionId() = &quot;</span> + task.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.getProcessDefinitionId() = holidayRequestNew:1:10003</span><br><span class=\"line\">task.getId() = 12508</span><br><span class=\"line\">task.getAssignee() = lisi</span><br><span class=\"line\">task.getName() = Approve or reject request</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h2><p>现在李四这个角色可以来完成当前的任务了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111124019.png\"\n                      alt=\"image-20220316111124019\"\n                ></p>\n<p>在此处我们直接解决掉这个请假，然后会走发送拒绝邮件的流程，这块我们需要用到JavaDelegate来触发。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111253702.png\"\n                      alt=\"image-20220316111253702\"\n                ></p>\n<p>我们定义这样一个Java类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendRejectionMail</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 触发发送邮件的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delegateExecution</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution delegateExecution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请假被拒绝,,,安心工作吧&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来完成任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCompleteTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionKey(<span class=\"string\">&quot;holidayRequestNew&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\">    <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">    taskService.complete(task.getId(),variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以看到JavaDelegate触发了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316111913933.png\"\n                      alt=\"image-20220316111913933\"\n                ></p>\n<h2 id=\"流程的删除\"><a href=\"#流程的删除\" class=\"headerlink\" title=\"流程的删除\"></a>流程的删除</h2><p>有些流程已经没有用了，我们需要删除掉，其实也非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">            .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">            .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">            .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">            .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"comment\">// 删除流程定义，如果该流程定义已经有了流程实例启动则删除时报错</span></span><br><span class=\"line\">    <span class=\"comment\">// repositoryService.deleteDeployment(&quot;1&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置为TRUE 级联删除流程定义，及时流程有实例启动，也可以删除，设置为false 非级联删除操作。</span></span><br><span class=\"line\">    repositoryService.deleteDeployment(<span class=\"string\">&quot;2501&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看历史信息\"><a href=\"#查看历史信息\" class=\"headerlink\" title=\"查看历史信息\"></a>查看历史信息</h2><p>选择使用Flowable这样的流程引擎的原因之一，是它可以自动存储所有流程实例的<strong>审计数据</strong>或<strong>历史数据</strong>。这些数据可以用于创建报告，深入展现组织运行的情况，瓶颈在哪里，等等。</p>\n<p>例如，如果希望显示流程实例已经执行的时间，就可以从<em>ProcessEngine</em>获取<em>HistoryService</em>，并创建*历史活动(historical activities)*的查询。在下面的代码片段中，可以看到我们添加了一些额外的过滤条件：</p>\n<ul>\n<li>只选择一个特定流程实例的活动</li>\n<li>只选择已完成的活动</li>\n</ul>\n<p>结果按照结束时间排序，代表其执行顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查看历史</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryHistory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">                .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">                .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">                .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">                .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\">        List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holidayRequestNew:1:10003&quot;</span>)</span><br><span class=\"line\">                .finished()</span><br><span class=\"line\">                .orderByHistoricActivityInstanceEndTime().asc()</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HistoricActivityInstance historicActivityInstance : list) &#123;</span><br><span class=\"line\">            System.out.println(historicActivityInstance.getActivityId() + <span class=\"string\">&quot; took &quot;</span></span><br><span class=\"line\">                    + historicActivityInstance.getDurationInMillis() + <span class=\"string\">&quot; milliseconds&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startEvent took 1 milliseconds</span><br><span class=\"line\">approveTask took 837735 milliseconds</span><br><span class=\"line\">decision took 13 milliseconds</span><br><span class=\"line\">sendRejectionMail took 2 milliseconds</span><br><span class=\"line\">rejectEnd took 1 milliseconds</span><br></pre></td></tr></table></figure>\n\n<p>好了~flowable的基本应用我们就先介绍到这里了。</p>\n<h1 id=\"Flowable流程设计器\"><a href=\"#Flowable流程设计器\" class=\"headerlink\" title=\"Flowable流程设计器\"></a>Flowable流程设计器</h1><h2 id=\"Eclipse-Designer\"><a href=\"#Eclipse-Designer\" class=\"headerlink\" title=\"Eclipse Designer\"></a>Eclipse Designer</h2><p>Flowable提供了名为Flowable Eclipse Designer的Eclipse插件，可以用于图形化地建模、测试与部署BPMN 2.0流程。</p>\n<h3 id=\"下载安装Eclipse\"><a href=\"#下载安装Eclipse\" class=\"headerlink\" title=\"下载安装Eclipse\"></a>下载安装Eclipse</h3><p>去Eclipse官网下载即可：<a class=\"link\"   href=\"https://www.eclipse.org/downloads/packages/release\" >https://www.eclipse.org/downloads/packages/release<i class=\"fas fa-external-link-alt\"></i></a> 注意2020-09后的版本不再支持jdk8</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316202904261.png\"\n                      alt=\"image-20220316202904261\"\n                ></p>\n<p>解压缩就可以了，然后进入解压缩的目录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203036602.png\"\n                      alt=\"image-20220316203036602\"\n                ></p>\n<p>直接启动即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203111301.png\"\n                      alt=\"image-20220316203111301\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203237316.png\"\n                      alt=\"image-20220316203237316\"\n                ></p>\n<h3 id=\"安装Flowable插件\"><a href=\"#安装Flowable插件\" class=\"headerlink\" title=\"安装Flowable插件\"></a>安装Flowable插件</h3><p>然后我们再安装下Flowable的插件，选择<strong>Help → Install New Software</strong>。在下图面板中，点击<em>Add</em>按钮，并填写下列字段</p>\n<ul>\n<li><strong>Name:</strong> Flowable BPMN 2.0 designer</li>\n<li><strong>Location:</strong> <a class=\"link\"   href=\"http://www.flowable.org/designer/update/\" >http://www.flowable.org/designer/update/<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316203454281.png\"\n                      alt=\"image-20220316203454281\"\n                ></p>\n<p>这种在线更新的方式已经被官网移除了，操作不了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211319931.png\"\n                      alt=\"image-20220316211319931\"\n                ></p>\n<p>这时我们就只能通过离线安装的方式来实现了，下载对应的离线文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211405001.png\"\n                      alt=\"image-20220316211405001\"\n                ></p>\n<p>安装步骤来操作，</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211518520.png\"\n                      alt=\"image-20220316211518520\"\n                ></p>\n<p>然后继续：选择<strong>Help → Install New Software</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211622115.png\"\n                      alt=\"image-20220316211622115\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211651195.png\"\n                      alt=\"image-20220316211651195\"\n                ></p>\n<p>下一步</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211729581.png\"\n                      alt=\"image-20220316211729581\"\n                ></p>\n<p>再下一步</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316211802548.png\"\n                      alt=\"image-20220316211802548\"\n                ></p>\n<p>然后finish。弹出如下窗口</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212008477.png\"\n                      alt=\"image-20220316212008477\"\n                ></p>\n<p>重启即可</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>然后我们就可以创建一个Flowable Project了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212418899.png\"\n                      alt=\"image-20220316212418899\"\n                ></p>\n<p>然后我们可以在src&#x2F;mian&#x2F;resources&#x2F; 的目录下创建对应的流程图了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212605146.png\"\n                      alt=\"image-20220316212605146\"\n                ></p>\n<p>看到如下的界面说明插件安装成功了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316212720767.png\"\n                      alt=\"image-20220316212720767\"\n                ></p>\n<h3 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h3><p>使用滑板来绘制流程，通过从右侧把图标拖拽到左侧的面板，最终的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214339678.png\"\n                      alt=\"image-20220316214339678\"\n                ></p>\n<p>指定流程的主键</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214430644.png\"\n                      alt=\"image-20220316214430644\"\n                ></p>\n<p>指定任务的负责人</p>\n<p>在Properties视图中指定每个任务节点的负责人</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214700887.png\"\n                      alt=\"image-20220316214700887\"\n                ></p>\n<p>创建请假单：zhangsan</p>\n<p>审批请假单：lisi</p>\n<p>当我们设置完成后保存文件，会同时生成png图片</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214808400.png\"\n                      alt=\"image-20220316214808400\"\n                ></p>\n<p>注意：生成图片需要如下配置</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316214256235.png\"\n                      alt=\"image-20220316214256235\"\n                ></p>\n<h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>首先在Eclipse中生成bar文件，选中项目然后鼠标右击</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215805503.png\"\n                      alt=\"image-20220316215805503\"\n                ></p>\n<p>然后会发现在项目的根目录下多了一个deployment文件夹，里面多了一个MyProcess.bar文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215900052.png\"\n                      alt=\"image-20220316215900052\"\n                ></p>\n<p>然后我们就可以把这个bar文件拷贝到IDEA中，继续部署的流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316215945236.png\"\n                      alt=\"image-20220316215945236\"\n                ></p>\n<p>而部署的代码和前面没啥区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.获取 ProcessEngine 对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">    <span class=\"comment\">// 2.获取RepositoryService</span></span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;MyHoliday.bar&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">zipInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(in);</span><br><span class=\"line\">    <span class=\"comment\">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">           <span class=\"comment\">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span></span><br><span class=\"line\">            .addZipInputStream(zipInputStream)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;XXX公司请求流程&quot;</span>)</span><br><span class=\"line\">            .deploy() ;<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行后查看表结构，相关的信息就进去了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220316220121734.png\"\n                      alt=\"image-20220316220121734\"\n                ></p>\n<p>完整的案例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bobo.flowable.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.history.HistoricActivityInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.repository.Deployment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.engine.runtime.ProcessInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.flowable.task.api.Task;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipInputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取  ProcessEngineConfiguration 对象</span></span><br><span class=\"line\">        configuration = <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 配置 相关的数据库的连接信息</span></span><br><span class=\"line\">        configuration.setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        configuration.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果数据库中的表结构不存在就新建</span></span><br><span class=\"line\">        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.获取 ProcessEngine 对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 2.获取RepositoryService</span></span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;MyHoliday.bar&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ZipInputStream</span> <span class=\"variable\">zipInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(in);</span><br><span class=\"line\">        <span class=\"comment\">// 3.完成流程的部署操作 ZIP 或者 Bar文件</span></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">               <span class=\"comment\">// .addClasspathResource(&quot;MyHoliday.bar&quot;)// 关联要部署的流程文件</span></span><br><span class=\"line\">                .addZipInputStream(zipInputStream)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;XXX公司请求流程&quot;</span>)</span><br><span class=\"line\">                .deploy() ;<span class=\"comment\">// 部署流程</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 我们需要通过RuntimeService来启动流程实例</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">holidayRequest</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:25004&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getProcessDefinitionId() = &quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getActivityId() = &quot;</span> + holidayRequest.getActivityId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;holidayRequest.getId() = &quot;</span> + holidayRequest.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试任务查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testQueryTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;myProcess&quot;</span>) <span class=\"comment\">// 指定查询的流程编程</span></span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>) <span class=\"comment\">// 查询这个任务的处理人</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getProcessDefinitionId() = &quot;</span> + task.getProcessDefinitionId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getAssignee() = &quot;</span> + task.getAssignee());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getDescription() = &quot;</span> + task.getDescription());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成当前任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testCompleteTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionKey(<span class=\"string\">&quot;myProcess&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 创建流程变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">            taskService.complete(task.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取流程任务的历史数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHistory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">HistoryService</span> <span class=\"variable\">historyService</span> <span class=\"operator\">=</span> processEngine.getHistoryService();</span><br><span class=\"line\">        List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;myProcess:1:25004&quot;</span>)</span><br><span class=\"line\">                .finished() <span class=\"comment\">// 查询的历史记录的状态是已经完成</span></span><br><span class=\"line\">                .orderByHistoricActivityInstanceEndTime().asc() <span class=\"comment\">// 指定排序的字段和顺序</span></span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (HistoricActivityInstance history : list) &#123;</span><br><span class=\"line\">            System.out.println(history.getActivityName()+<span class=\"string\">&quot;:&quot;</span>+history.getAssignee()+<span class=\"string\">&quot;--&quot;</span></span><br><span class=\"line\">                    +history.getActivityId()+<span class=\"string\">&quot;:&quot;</span> + history.getDurationInMillis()+<span class=\"string\">&quot;毫秒&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Flowable-UI应用\"><a href=\"#Flowable-UI应用\" class=\"headerlink\" title=\"Flowable UI应用\"></a>Flowable UI应用</h2><p>Flowable提供了几个web应用，用于演示及介绍Flowable项目提供的功能：</p>\n<ul>\n<li>Flowable IDM: 身份管理应用。为所有Flowable UI应用提供单点登录认证功能，并且为拥有IDM管理员权限的用户提供了管理用户、组与权限的功能。</li>\n<li>Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。</li>\n<li>Flowable Task: 运行时任务应用。提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。</li>\n<li>Flowable Admin: 管理应用。让具有管理员权限的用户可以查询BPMN、DMN、Form及Content引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过REST API连接至引擎，并与Flowable Task应用及Flowable REST应用一同部署。</li>\n</ul>\n<p>所有其他的应用都需要Flowable IDM提供认证。每个应用的WAR文件可以部署在相同的servlet容器（如Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的cookie进行认证，因此应用需要运行在相同的域名下。</p>\n<h3 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h3><p>下载Tomcat：<a class=\"link\"   href=\"https://tomcat.apache.org/download-80.cgi\" >https://tomcat.apache.org/download-80.cgi<i class=\"fas fa-external-link-alt\"></i></a> 官网下载后解压缩到非中文目录即可，然后是下载FlowableUI的文件，在Flowable6.6之后把FlowableUI中提供的四个功能合并到了一起。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102128672.png\"\n                      alt=\"image-20220318102128672\"\n                ></p>\n<p>然后把解压缩后的两个war包拷贝到Tomcat的解压缩的webapps目录下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102224330.png\"\n                      alt=\"image-20220318102224330\"\n                ></p>\n<p>Tomcat目录：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102255188.png\"\n                      alt=\"image-20220318102255188\"\n                ></p>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>启动Tomcat服务，执行startup.bat文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102325924.png\"\n                      alt=\"image-20220318102325924\"\n                ></p>\n<p>如果启动中出现乱码修改Tomcat的conf目录下的 logging.properties 文件中的编码</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102446699.png\"\n                      alt=\"image-20220318102446699\"\n                ></p>\n<p>如果一闪而过则检查jdk的环境变量配置。启动成功后，在浏览器中访问 <a class=\"link\"   href=\"http://localhost:8080/flowable-ui\" >http://localhost:8080/flowable-ui<i class=\"fas fa-external-link-alt\"></i></a>, 默认的账号密码是 admin&#x2F;test</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102609807.png\"\n                      alt=\"image-20220318102609807\"\n                ></p>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><p>我们先在 <code>身份管理应用程序</code> 中创建用户并授权</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102707368.png\"\n                      alt=\"image-20220318102707368\"\n                ></p>\n<p>创建用户</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102734238.png\"\n                      alt=\"image-20220318102734238\"\n                ></p>\n<p>填写详细信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102817782.png\"\n                      alt=\"image-20220318102817782\"\n                ></p>\n<p>授权管理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318102859814.png\"\n                      alt=\"image-20220318102859814\"\n                ></p>\n<h3 id=\"绘制流程\"><a href=\"#绘制流程\" class=\"headerlink\" title=\"绘制流程\"></a>绘制流程</h3><p>创建新的流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101239742.png\"\n                      alt=\"image-20220318101239742\"\n                ></p>\n<p>流程图界面</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101346692.png\"\n                      alt=\"image-20220318101346692\"\n                ></p>\n<p>创建流程，分配处理人</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101639424.png\"\n                      alt=\"image-20220318101639424\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101611564.png\"\n                      alt=\"image-20220318101611564\"\n                ></p>\n<p>继续完成流程图的创建</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318101810272.png\"\n                      alt=\"image-20220318101810272\"\n                ></p>\n<h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>绘制好的流程图，我们只需要一键导出即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103413285.png\"\n                      alt=\"image-20220318103413285\"\n                ></p>\n<p>下载下来后拷贝到项目的resource目录下即可</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318103518807.png\"\n                      alt=\"image-20220318103518807\"\n                ></p>\n<p>然后就是正常的操作流程了</p>\n<h3 id=\"FlowableUI-演示\"><a href=\"#FlowableUI-演示\" class=\"headerlink\" title=\"FlowableUI 演示\"></a>FlowableUI 演示</h3><h4 id=\"部署流程-2\"><a href=\"#部署流程-2\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h4><p>在FlowableUI中提供了演示程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104517967.png\"\n                      alt=\"image-20220318104517967\"\n                ></p>\n<p>创建一个新的应用程序，并指定相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104614784.png\"\n                      alt=\"image-20220318104614784\"\n                ></p>\n<p>创建应用后需要指定对应的流程图</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104703306.png\"\n                      alt=\"image-20220318104703306\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104735714.png\"\n                      alt=\"image-20220318104735714\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318104811812.png\"\n                      alt=\"image-20220318104811812\"\n                ></p>\n<p>发布应用程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105045345.png\"\n                      alt=\"image-20220318105045345\"\n                ></p>\n<h4 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h4><p>发布了应用程序后我们就可以来启动流程了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105258331.png\"\n                      alt=\"image-20220318105258331\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105315908.png\"\n                      alt=\"image-20220318105315908\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105336107.png\"\n                      alt=\"image-20220318105336107\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105420011.png\"\n                      alt=\"image-20220318105420011\"\n                ></p>\n<p>点击显示图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105444672.png\"\n                      alt=\"image-20220318105444672\"\n                ></p>\n<p>也就是可以看到当前是user1来处理，user1登录后可以看到要处理的流程，user2登录是看不到的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105646273.png\"\n                      alt=\"image-20220318105646273\"\n                ></p>\n<p>点击完成后流程就向下一步流转了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105727192.png\"\n                      alt=\"image-20220318105727192\"\n                ></p>\n<p>这时再通过user2登录，就可以看到对应的代办的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105808830.png\"\n                      alt=\"image-20220318105808830\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220318105848185.png\"\n                      alt=\"image-20220318105848185\"\n                ></p>\n<p>然后点击完成，那么整个流程就介绍了</p>\n<h1 id=\"Flowable基础表结构\"><a href=\"#Flowable基础表结构\" class=\"headerlink\" title=\"Flowable基础表结构\"></a>Flowable基础表结构</h1><h2 id=\"表结构讲解\"><a href=\"#表结构讲解\" class=\"headerlink\" title=\"表结构讲解\"></a>表结构讲解</h2><p>工作流程的相关操作都是操作存储在对应的表结构中，为了能更好的弄清楚Flowable的实现原理和细节，我们有必要先弄清楚Flowable的相关表结构及其作用。在Flowable中的表结构在初始化的时候会创建五类表结构，具体如下：</p>\n<ul>\n<li><strong>ACT_RE</strong> ：’RE’表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li>\n<li><strong>ACT_RU</strong>：’RU’表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Flowable只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li>\n<li><strong>ACT_HI</strong>：’HI’表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li>\n<li><strong>ACT_GE</strong>： GE 表示 general。 通用数据， 用于不同场景下 </li>\n<li><strong>ACT_ID:</strong>   ’ID’表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。</li>\n</ul>\n<p>具体的表结构的含义:</p>\n<table>\n<thead>\n<tr>\n<th><strong>表分类</strong></th>\n<th><strong>表名</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一般数据</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_BYTEARRAY]</td>\n<td>通用的流程定义和流程资源</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_GE_PROPERTY]</td>\n<td>系统相关属性</td>\n</tr>\n<tr>\n<td>流程历史记录</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ACTINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_ATTACHMENT]</td>\n<td>历史的流程附件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_COMMENT]</td>\n<td>历史的说明性信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_DETAIL]</td>\n<td>历史的流程运行中的细节信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_IDENTITYLINK]</td>\n<td>历史的流程运行过程中用户关系</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_PROCINST]</td>\n<td>历史的流程实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_TASKINST]</td>\n<td>历史的任务实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_HI_VARINST]</td>\n<td>历史的流程运行中的变量信息</td>\n</tr>\n<tr>\n<td>流程定义表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_DEPLOYMENT]</td>\n<td>部署单元信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_MODEL]</td>\n<td>模型信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RE_PROCDEF]</td>\n<td>已部署的流程定义</td>\n</tr>\n<tr>\n<td>运行实例表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EVENT_SUBSCR]</td>\n<td>运行时事件</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_EXECUTION]</td>\n<td>运行时流程执行实例</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_IDENTITYLINK]</td>\n<td>运行时用户关系信息，存储任务节点与参与者的相关信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_JOB]</td>\n<td>运行时作业</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_TASK]</td>\n<td>运行时任务</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_RU_VARIABLE]</td>\n<td>运行时变量表</td>\n</tr>\n<tr>\n<td>用户用户组表</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_BYTEARRAY]</td>\n<td>二进制数据表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_GROUP]</td>\n<td>用户组信息表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_INFO]</td>\n<td>用户信息详情表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_MEMBERSHIP]</td>\n<td>人与组关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV]</td>\n<td>权限表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PRIV_MAPPING]</td>\n<td>用户或组权限关系表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_PROPERTY]</td>\n<td>属性表</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_TOKEN]</td>\n<td>记录用户的token信息</td>\n</tr>\n<tr>\n<td></td>\n<td>[ACT_ID_USER]</td>\n<td>用户表</td>\n</tr>\n</tbody></table>\n<h2 id=\"ProcessEngine讲解\"><a href=\"#ProcessEngine讲解\" class=\"headerlink\" title=\"ProcessEngine讲解\"></a>ProcessEngine讲解</h2><h3 id=\"硬编码的方式\"><a href=\"#硬编码的方式\" class=\"headerlink\" title=\"硬编码的方式\"></a>硬编码的方式</h3><p>我们前面讲解案例的时候是通过ProcessEngineConfiguration这个配置类来加载的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置数据库相关信息 获取 ProcessEngineConfiguration</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandaloneProcessEngineConfiguration</span>()</span><br><span class=\"line\">    .setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flowable-learn2?serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&quot;</span>)</span><br><span class=\"line\">    .setJdbcUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">    .setJdbcPassword(<span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\">    .setJdbcDriver(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class=\"line\">    .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class=\"line\"><span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br></pre></td></tr></table></figure>\n\n<p>这种方式会调用buildProcessEngine()方法，里面的核心代码为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113106848.png\"\n                      alt=\"image-20220319113106848\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319113139646.png\"\n                      alt=\"image-20220319113139646\"\n                ></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>除了上面的硬编码的方式外，我们还可以在resources目录下创建一个<code>flowable.cfg.xml</code>文件，注意这个名称是固定的哦。内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;processEngineConfiguration&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/flow1?allowMultiQueries=true<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"symbol\">&amp;amp;</span>useSSL=false<span class=\"symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"symbol\">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcDriver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUsername&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcPassword&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseSchemaUpdate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;asyncExecutorActivate&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置文件中配置相关的信息。我们在Java代码中就可以简化为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看下getDefaultProcessEngine的源码，在里面最终还是执行了和硬编码一样的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ProcessEngine <span class=\"title function_\">getProcessEngine</span><span class=\"params\">(String processEngineName)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isInitialized()) &#123;</span><br><span class=\"line\">        init(); <span class=\"comment\">// 完成初始化操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> processEngines.get(processEngineName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入init方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isInitialized()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processEngines == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create new map to store process-engines if current map is null</span></span><br><span class=\"line\">            processEngines = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> ReflectUtil.getClassLoader();</span><br><span class=\"line\">        Enumeration&lt;URL&gt; resources = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            resources = classLoader.getResources(<span class=\"string\">&quot;flowable.cfg.xml&quot;</span>); <span class=\"comment\">// 加载flowable.cfg.xml配置文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowableIllegalArgumentException</span>(<span class=\"string\">&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot;</span> + System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Remove duplicated configuration URL&#x27;s using set. Some</span></span><br><span class=\"line\">        <span class=\"comment\">// classloaders may return identical URL&#x27;s twice, causing duplicate</span></span><br><span class=\"line\">        <span class=\"comment\">// startups</span></span><br><span class=\"line\">        Set&lt;URL&gt; configUrls = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resources.hasMoreElements()) &#123;</span><br><span class=\"line\">            configUrls.add(resources.nextElement());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Iterator&lt;URL&gt; iterator = configUrls.iterator(); iterator.hasNext();) &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;Initializing process engine using configuration &#x27;&#123;&#125;&#x27;&quot;</span>, resource.toString());</span><br><span class=\"line\">            initProcessEngineFromResource(resource); <span class=\"comment\">// 初始化ProcessEngine</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            resources = classLoader.getResources(<span class=\"string\">&quot;flowable-context.xml&quot;</span>); <span class=\"comment\">// 在整合Spring的情况下加载该文件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FlowableIllegalArgumentException</span>(<span class=\"string\">&quot;problem retrieving flowable-context.xml resources on the classpath: &quot;</span> + System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resources.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> resources.nextElement();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;Initializing process engine using Spring configuration &#x27;&#123;&#125;&#x27;&quot;</span>, resource.toString());</span><br><span class=\"line\">            initProcessEngineFromSpringResource(resource); <span class=\"comment\">// 从Spring的资源文件中完成ProcessEngine的初始化</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setInitialized(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;Process engines already initialized&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在源码中提供了单独使用好整合Spring的配置加载方式。再进入到initProcessEngineFromResource(resource)方法中：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114011806.png\"\n                      alt=\"image-20220319114011806\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114053252.png\"\n                      alt=\"image-20220319114053252\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319114210012.png\"\n                      alt=\"image-20220319114210012\"\n                ></p>\n<p>而且我们也可以看到ProcessEngine最终的实现是 ProcessEngineImpl对象。</p>\n<h3 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h3><p>最后我们如果要加载自定义名称的配置文件可以通过ProcessEngineConfiguration中的对应构造方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngineConfiguration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> ProcessEngineConfiguration</span><br><span class=\"line\">            .createProcessEngineConfigurationFromResource(<span class=\"string\">&quot;flowable.cfg.xml&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> configuration.buildProcessEngine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Servcie服务接口\"><a href=\"#Servcie服务接口\" class=\"headerlink\" title=\"Servcie服务接口\"></a>Servcie服务接口</h2><p>Service是工作流引擎提供用于进行工作流部署、执行、管理的服务接口，我们使用这些接口可以就是操作服务对应的数据表</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220319223019186.png\"\n                      alt=\"image-20220319223019186\"\n                ></p>\n<h3 id=\"Service创建方式\"><a href=\"#Service创建方式\" class=\"headerlink\" title=\"Service创建方式\"></a>Service创建方式</h3><p>通过ProcessEngine创建Service</p>\n<p>方式如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\"><span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Service总览\"><a href=\"#Service总览\" class=\"headerlink\" title=\"Service总览\"></a>Service总览</h3><table>\n<thead>\n<tr>\n<th>service名称</th>\n<th>service作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RepositoryService</td>\n<td>Flowable的资源管理类</td>\n</tr>\n<tr>\n<td>RuntimeService</td>\n<td>Flowable的流程运行管理类</td>\n</tr>\n<tr>\n<td>TaskService</td>\n<td>Flowable的任务管理类</td>\n</tr>\n<tr>\n<td>HistoryService</td>\n<td>Flowable的历史管理类</td>\n</tr>\n<tr>\n<td>ManagerService</td>\n<td>Flowable的引擎管理类</td>\n</tr>\n</tbody></table>\n<p> 简单介绍：</p>\n<p><strong>RepositoryService</strong></p>\n<p>是activiti的资源管理类，提供了管理和控制流程发布包和流程定义的操作。使用工作流建模工具设计的业务流程图需要使用此service将流程定义文件的内容部署到计算机。</p>\n<p>除了部署流程定义以外还可以：查询引擎中的发布包和流程定义。</p>\n<p>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</p>\n<p>获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。</p>\n<p><strong>RuntimeService</strong></p>\n<p>Activiti的流程运行管理类。可以从这个服务类中获取很多关于流程执行相关的信息</p>\n<p><strong>TaskService</strong></p>\n<p>Activiti的任务管理类。可以从这个类中获取任务的信息。</p>\n<p><strong>HistoryService</strong></p>\n<p>Flowable的历史管理类，可以查询历史信息，执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p>\n<p><strong>ManagementService</strong></p>\n<p>Activiti的引擎管理类，提供了对Flowable 流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于 Flowable 系统的日常维护。</p>\n<h2 id=\"图标介绍\"><a href=\"#图标介绍\" class=\"headerlink\" title=\"图标介绍\"></a>图标介绍</h2><p>BPMN 2.0是业务流程建模符号2.0的缩写。它由Business Process Management Initiative这个非营利协会创建并不断发展。作为一种标识，BPMN 2.0是使用一些<strong>符号</strong>来明确业务流程设计流程图的一整套符号规范，它能增进业务建模时的沟通效率。目前BPMN2.0是最新的版本，它用于在BPM上下文中进行布局和可视化的沟通。接下来我们先来了解在流程设计中常见的 符号。</p>\n<p>BPMN2.0的<strong>基本符合</strong>主要包含：</p>\n<h3 id=\"事件图标\"><a href=\"#事件图标\" class=\"headerlink\" title=\"事件图标\"></a>事件图标</h3><p>在Flowable中的事件图标启动事件，边界事件,中间事件和结束事件.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103803308.png\"\n                      alt=\"image-20220320103803308\"\n                ></p>\n<h3 id=\"活动-任务-图标\"><a href=\"#活动-任务-图标\" class=\"headerlink\" title=\"活动(任务)图标\"></a>活动(任务)图标</h3><p>活动是工作或任务的一个通用术语。一个活动可以是一个任务，还可以是一个当前流程的子处理流程； 其次，你还可以为活动指定不同的类型。常见活动如下:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320103929543.png\"\n                      alt=\"image-20220320103929543\"\n                ></p>\n<h3 id=\"结构图标\"><a href=\"#结构图标\" class=\"headerlink\" title=\"结构图标\"></a>结构图标</h3><p>结构图标可以看做是整个流程活动的结构，一个流程中可以包括子流程。常见的结构有：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220320104025737.png\"\n                      alt=\"image-20220320104025737\"\n                ></p>\n<h3 id=\"网关图标\"><a href=\"#网关图标\" class=\"headerlink\" title=\"网关图标\"></a>网关图标</h3><p>网关用来处理决策，有几种常用网关需要了解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220320104157816.png\"\n                      alt=\"image-20220320104157816\"\n                ></p>\n<h2 id=\"流程部署详解\"><a href=\"#流程部署详解\" class=\"headerlink\" title=\"流程部署详解\"></a>流程部署详解</h2><h3 id=\"部署实现\"><a href=\"#部署实现\" class=\"headerlink\" title=\"部署实现\"></a>部署实现</h3><p>我们先来看下流程部署的具体过程。代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;holiday-request-new.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请假流程...&quot;</span>)</span><br><span class=\"line\">                .category(<span class=\"string\">&quot;请假&quot;</span>) <span class=\"comment\">// 分类</span></span><br><span class=\"line\">                .tenantId(<span class=\"string\">&quot;dpb&quot;</span>) <span class=\"comment\">// 租户id</span></span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getCategory() = &quot;</span> + deploy.getCategory());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署涉及表结构\"><a href=\"#部署涉及表结构\" class=\"headerlink\" title=\"部署涉及表结构\"></a>部署涉及表结构</h3><p>涉及到的三张表：</p>\n<p>部署资源表：act_ge_bytearray</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td>部署的文件名称，如：holiday-request-new.bpmn20.xml、holiday-request-new.bpmn20.png</td>\n</tr>\n<tr>\n<td>DEPLOYMENT_ID_</td>\n<td>部署ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTES_</td>\n<td>字节（二进制数据）</td>\n<td></td>\n</tr>\n<tr>\n<td>GENERATED_</td>\n<td>是否系统生成</td>\n<td>0为用户上传，<br/>1为系统自动生成， 比如系统会 自动根据xml生 成png</td>\n</tr>\n</tbody></table>\n<p>部署ID表：act_re_deployment</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>分类</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DEPLOY_TIME_</td>\n<td>部署时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DERIVED_FROM_</td>\n<td>来源于</td>\n<td></td>\n</tr>\n<tr>\n<td>DERIVED_FROM_ROOT_</td>\n<td>来源于</td>\n<td></td>\n</tr>\n<tr>\n<td>ENGINE_VERSION_</td>\n<td>流程引擎的版本</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>流程表：act_re_procdef</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>分类</td>\n<td>流程定义的Namespace就是类别</td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>KEY_</td>\n<td>标识</td>\n<td></td>\n</tr>\n<tr>\n<td>VERSION_</td>\n<td>版本</td>\n<td></td>\n</tr>\n<tr>\n<td>DEPLOYMENT_ID_</td>\n<td>部署ID</td>\n<td></td>\n</tr>\n<tr>\n<td>RESOURCE_NAME_</td>\n<td>资源名称</td>\n<td>流程bpmn文件名称</td>\n</tr>\n<tr>\n<td>DGRM_RESOURCE_NAME_</td>\n<td>图片资源名称</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>描述</td>\n<td></td>\n</tr>\n<tr>\n<td>HAS_START_FORM_KEY_</td>\n<td>拥有开始表单标识</td>\n<td>start节点是否存在formKey  0否 1是</td>\n</tr>\n<tr>\n<td>HAS_GRAPHICAL_NOTATION_</td>\n<td>拥有图形信息</td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>挂起状态</td>\n<td>暂停状态 1激活 2暂停</td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户ID</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<p>业务流程定义数据表。此表和ACT_RE_DEPLOYMENT是多对一的关系，即，一个部署的bar包里可能包含多个流程定义文件，每个流程定义文件都会有一条记录在ACT_REPROCDEF表内，每个流程定义的数据，都会对于ACT_GE_BYTEARRAY表内的一个资源文件和PNG图片文件。和ACT_GE_BYTEARRAY的关联是通过程序用ACT_GE_BYTEARRAY.NAME与ACT_RE_PROCDEF.NAME_完成的</p>\n<h3 id=\"挂起和激活\"><a href=\"#挂起和激活\" class=\"headerlink\" title=\"挂起和激活\"></a>挂起和激活</h3><p>部署的流程默认的状态为激活，如果我们暂时不想使用该定义的流程，那么可以挂起该流程。当然该流程定义下边所有的流程实例全部暂停。</p>\n<p>流程定义为挂起状态，该流程定义将不允许启动新的流程实例，同时该流程定义下的所有的流程实例都将全部挂起暂停执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 挂起流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test05</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">        <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程定义的状态</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">suspended</span> <span class=\"operator\">=</span> processDefinition.isSuspended();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;suspended = &quot;</span> + suspended);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(suspended)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表示被挂起</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;激活流程定义&quot;</span>);</span><br><span class=\"line\">            repositoryService.activateProcessDefinitionById(<span class=\"string\">&quot;holiday:1:4&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表示激活状态</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;挂起流程&quot;</span>);</span><br><span class=\"line\">            repositoryService.suspendProcessDefinitionById(<span class=\"string\">&quot;holiday:1:4&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体的实现其实就是更新了流程定义表中的字段</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321210010518.png\"\n                      alt=\"image-20220321210010518\"\n                ></p>\n<p>而且通过REV_字段来控制数据安全，也是一种乐观锁的体现了，如果要启动一个已经挂起的流程就会出现如下的错误</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220321211858122.png\"\n                      alt=\"image-20220321211858122\"\n                ></p>\n<h2 id=\"启动流程实例-1\"><a href=\"#启动流程实例-1\" class=\"headerlink\" title=\"启动流程实例\"></a>启动流程实例</h2><p>然后我们来看看启动流程实例的过程。实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 构建流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;employee&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;<span class=\"comment\">// 谁申请请假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;nrOfHolidays&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 请几天假</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;description&quot;</span>,<span class=\"string\">&quot;工作累了，想出去玩玩&quot;</span>); <span class=\"comment\">// 请假的原因</span></span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;holiday:1:4&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们启动了一个流程实例后，会在ACT_RU_*对应的表结构中操作,运行时实例涉及的表结构共10张：</p>\n<ul>\n<li>ACT_RU_DEADLETTER_JOB  正在运行的任务表 </li>\n<li>ACT_RU_EVENT_SUBSCR 运行时事件 </li>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_HISTORY_JOB  历史作业表 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_JOB 运行时作业表 </li>\n<li>ACT_RU_SUSPENDED_JOB 暂停作业表 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_TIMER_JOB 定时作业表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>启动一个流程实例的时候涉及到的表有</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>ACT_RU_EXECUTION表结构</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BUSINESS_KEY_</td>\n<td>业务主键ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_ID_</td>\n<td>父执行流的ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义的数据ID</td>\n<td></td>\n</tr>\n<tr>\n<td>SUPER_EXEC_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ROOT_PROC_INST_ID_</td>\n<td>流程实例的root流程id</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_ID_</td>\n<td>节点实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_ACTIVE_</td>\n<td>是否存活</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_CONCURRENT_</td>\n<td>执行流是否正在并行</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_SCOPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IS_EVENT_SCOPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IS_MI_ROOT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>流程终端状态</td>\n<td></td>\n</tr>\n<tr>\n<td>CACHED_ENT_STATE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>START_USER_ID_</td>\n<td>开始的用户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>LOCK_TIME_</td>\n<td>锁定时间</td>\n<td></td>\n</tr>\n<tr>\n<td>IS_COUNT_ENABLED_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>EVT_SUBSCR_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>TIMER_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SUSP_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DEADLETTER_JOB_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>VAR_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ID_LINK_COUNT_</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133108405.png\"\n                      alt=\"image-20220322133108405\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133219534.png\"\n                      alt=\"image-20220322133219534\"\n                ></p>\n<p>ACT_RU_TASK  运行时任务表</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>任务所在的执行流ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义数据ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>任务名称</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_TASK_ID_</td>\n<td>父任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>说明</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_DEF_KEY_</td>\n<td>任务定义的ID值</td>\n<td></td>\n</tr>\n<tr>\n<td>OWNER_</td>\n<td>任务拥有人</td>\n<td></td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>被指派执行该任务的人</td>\n<td></td>\n</tr>\n<tr>\n<td>DELEGATION_</td>\n<td>委托人</td>\n<td></td>\n</tr>\n<tr>\n<td>PRIORITY_</td>\n<td>优先级</td>\n<td></td>\n</tr>\n<tr>\n<td>CREATE_TIME_</td>\n<td>创建时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DUE_DATE_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>类别</td>\n<td></td>\n</tr>\n<tr>\n<td>SUSPENSION_STATE_</td>\n<td>是否挂起</td>\n<td>1代表激活 2代表挂起</td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>FORM_KEY_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>CLAIM_TIME_</td>\n<td>拾取时间</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133307195.png\"\n                      alt=\"image-20220322133307195\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133335326.png\"\n                      alt=\"image-20220322133335326\"\n                ></p>\n<p>ACT_RU_VARIABLE  运行时变量表</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>参数类型</td>\n<td>可以是基本的类型，也可以用户自行扩展</td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>参数名称</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>参数执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTEARRAY_ID_</td>\n<td>资源ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DOUBLE_</td>\n<td>参数为double，则保存在该字段中</td>\n<td></td>\n</tr>\n<tr>\n<td>LONG_</td>\n<td>参数为long，则保存在该字段中</td>\n<td></td>\n</tr>\n<tr>\n<td>TEXT_</td>\n<td>用户保存文本类型的参数值</td>\n<td></td>\n</tr>\n<tr>\n<td>TEXT2_</td>\n<td>用户保存文本类型的参数值</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133406398.png\"\n                      alt=\"image-20220322133406398\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133439827.png\"\n                      alt=\"image-20220322133439827\"\n                ></p>\n<p>ACT_RU_IDENTITYLINK 运行时用户关系信息 </p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>版本号</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_ID_</td>\n<td>用户组ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>关系数据类型</td>\n<td>assignee支配人(组)、candidate候选人(组)、owner拥有人,participant参与者</td>\n</tr>\n<tr>\n<td>USER_ID_</td>\n<td>用户ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>属性ID</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>创建流程实例后对应的表结构的数据:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322133501720.png\"\n                      alt=\"image-20220322133501720\"\n                ></p>\n<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p>上面的流程已经流转到了zhangsan这个用户这里，然后可以开始审批了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">        taskService.complete(task.getId(),variables);</span><br></pre></td></tr></table></figure>\n\n<p>在正常处理流程中涉及到的表结构</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>ACT_RU_TASK  运行时任务表 :会新生成一条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135040119.png\"\n                      alt=\"image-20220322135040119\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135125703.png\"\n                      alt=\"image-20220322135125703\"\n                ></p>\n<p>ACT_RU_VARIABLE  运行时变量表:会记录新的流程变量</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135204021.png\"\n                      alt=\"image-20220322135204021\"\n                ></p>\n<p>当然流程实例也可以挂起</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.获取ProcessEngine对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">engine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\"><span class=\"comment\">// 2.获取RuntimeService</span></span><br><span class=\"line\"><span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> engine.getRuntimeService();</span><br><span class=\"line\"><span class=\"comment\">// 3.获取流程实例对象</span></span><br><span class=\"line\"><span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.createProcessInstanceQuery()</span><br><span class=\"line\">    .processInstanceId(<span class=\"string\">&quot;25001&quot;</span>)</span><br><span class=\"line\">    .singleResult();</span><br><span class=\"line\"><span class=\"comment\">// 4.获取相关的状态操作</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">suspended</span> <span class=\"operator\">=</span> processInstance.isSuspended();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> processInstance.getId();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(suspended)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂起--》激活</span></span><br><span class=\"line\">    runtimeService.activateProcessInstanceById(id);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义：&quot;</span> + id + <span class=\"string\">&quot;，已激活&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 激活--》挂起</span></span><br><span class=\"line\">    runtimeService.suspendProcessInstanceById(id);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;流程定义：&quot;</span> + id + <span class=\"string\">&quot;，已挂起&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动第二个流程实例后再查看相关的表结构时，对他们的关系理解会更加的清楚一些</p>\n<p>启动一个新的流程实例对应的就会产生两条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135605252.png\"\n                      alt=\"image-20220322135605252\"\n                ></p>\n<p>IDENTITYLINK中会记录每次流程操作的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135636841.png\"\n                      alt=\"image-20220322135636841\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135659671.png\"\n                      alt=\"image-20220322135659671\"\n                ></p>\n<p>流程变量数据，及时key 相同，但是属于不同的流程实例相互间也是隔离的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322135719104.png\"\n                      alt=\"image-20220322135719104\"\n                ></p>\n<h2 id=\"完成一个流程\"><a href=\"#完成一个流程\" class=\"headerlink\" title=\"完成一个流程\"></a>完成一个流程</h2><p>然后我们把第一个流程处理完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> cfg.buildProcessEngine();</span><br><span class=\"line\"><span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\"><span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">    .processDefinitionId(<span class=\"string\">&quot;holiday:1:4&quot;</span>)</span><br><span class=\"line\">    .taskAssignee(<span class=\"string\">&quot;lisi&quot;</span>)</span><br><span class=\"line\">    .singleResult();</span><br><span class=\"line\"><span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">variables.put(<span class=\"string\">&quot;approved&quot;</span>,<span class=\"literal\">false</span>); <span class=\"comment\">// 拒绝请假</span></span><br><span class=\"line\"><span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">taskService.complete(task.getId(),variables);</span><br></pre></td></tr></table></figure>\n\n<p>处理完了一个工作流程后，我们来看看相关的表结构信息</p>\n<p>首先我们会发现</p>\n<ul>\n<li>ACT_RU_EXECUTION 运行时流程执行实例 </li>\n<li>ACT_RU_IDENTITYLINK 运行时用户关系信息 </li>\n<li>ACT_RU_TASK  运行时任务表 </li>\n<li>ACT_RU_VARIABLE  运行时变量表</li>\n</ul>\n<p>这四张表中对应的数据都没有了，也就是这个流程已经不是运行中的流程了。然后在对应的历史表中我们可以看到相关的信息</p>\n<ul>\n<li><p>ACT_HI_ACTINST  历史的流程实例</p>\n</li>\n<li><p>ACT_HI_ATTACHMENT 历史的流程附件</p>\n</li>\n<li><p>ACT_HI_COMMENT  历史的说明性信息</p>\n</li>\n<li><p>ACT_HI_DETAIL 历史的流程运行中的细节信息</p>\n</li>\n<li><p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p>\n</li>\n<li><p>ACT_HI_PROCINST  历史的流程实例</p>\n</li>\n<li><p>ACT_HI_TASKINST  历史的任务实例</p>\n</li>\n<li><p>ACT_HI_VARINST  历史的流程运行中的变量信息</p>\n</li>\n</ul>\n<p>在我们上面的处理流程的过程中设计到的历史表有</p>\n<p>ACT_HI_ACTINST  历史的流程实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_ID_</td>\n<td>节点实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>CALL_PROC_INST_ID_</td>\n<td>调用外部的流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_NAME_</td>\n<td>节点名称</td>\n<td></td>\n</tr>\n<tr>\n<td>ACT_TYPE_</td>\n<td>节点类型</td>\n<td></td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>处理人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141800554.png\"\n                      alt=\"image-20220322141800554\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141825065.png\"\n                      alt=\"image-20220322141825065\"\n                ></p>\n<p>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_ID_</td>\n<td>组编号</td>\n<td></td>\n</tr>\n<tr>\n<td>TYPE_</td>\n<td>类型</td>\n<td></td>\n</tr>\n<tr>\n<td>USER_ID_</td>\n<td>用户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务编号</td>\n<td></td>\n</tr>\n<tr>\n<td>CREATE_TIME_</td>\n<td>创建时间</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例编号</td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_ID_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_TYPE_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SCOPE_DEFINITION_ID_</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141717826.png\"\n                      alt=\"image-20220322141717826\"\n                ></p>\n<p>ACT_HI_PROCINST  历史的流程实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>BUSINESS_KEY_</td>\n<td>业务主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>属性ID</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>START_USER_ID_</td>\n<td>起始人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_ACT_ID_</td>\n<td>起始节点</td>\n<td></td>\n</tr>\n<tr>\n<td>END_ACT_ID_</td>\n<td>结束节点</td>\n<td></td>\n</tr>\n<tr>\n<td>SUPER_PROCESS_INSTANCE_ID_</td>\n<td>父流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户编号</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141855401.png\"\n                      alt=\"image-20220322141855401\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322141912602.png\"\n                      alt=\"image-20220322141912602\"\n                ></p>\n<p>ACT_HI_TASKINST  历史的任务实例</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_DEF_ID_</td>\n<td>流程定义ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_DEF_KEY_</td>\n<td>任务定义的ID值</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>执行ID</td>\n<td></td>\n</tr>\n<tr>\n<td>PARENT_TASK_ID_</td>\n<td>父任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>DESCRIPTION_</td>\n<td>说明</td>\n<td></td>\n</tr>\n<tr>\n<td>OWNER_</td>\n<td>实际签收人 任务的拥有者</td>\n<td>签收人（默认为空，只有在委托时才有值）</td>\n</tr>\n<tr>\n<td>ASSIGNEE_</td>\n<td>被指派执行该任务的人</td>\n<td></td>\n</tr>\n<tr>\n<td>START_TIME_</td>\n<td>开始时间</td>\n<td></td>\n</tr>\n<tr>\n<td>CLAIM_TIME_</td>\n<td>任务拾取时间</td>\n<td></td>\n</tr>\n<tr>\n<td>END_TIME_</td>\n<td>结束时间</td>\n<td></td>\n</tr>\n<tr>\n<td>DURATION_</td>\n<td>耗时</td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE_REASON_</td>\n<td>删除原因</td>\n<td></td>\n</tr>\n<tr>\n<td>PRIORITY_</td>\n<td>优先级别</td>\n<td></td>\n</tr>\n<tr>\n<td>DUE_DATE_</td>\n<td>过期时间</td>\n<td></td>\n</tr>\n<tr>\n<td>FORM_KEY_</td>\n<td>节点定义的formkey</td>\n<td></td>\n</tr>\n<tr>\n<td>CATEGORY_</td>\n<td>类别</td>\n<td></td>\n</tr>\n<tr>\n<td>TENANT_ID_</td>\n<td>租户</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142609163.png\"\n                      alt=\"image-20220322142609163\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142650699.png\"\n                      alt=\"image-20220322142650699\"\n                ></p>\n<p>ACT_HI_VARINST  历史的流程运行中的变量信息：流程变量虽然在任务完成后在流程实例表中会删除，但是在历史表中还是会记录的</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>名称</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID_</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td>PROC_INST_ID_</td>\n<td>流程实例ID</td>\n<td></td>\n</tr>\n<tr>\n<td>EXECUTION_ID_</td>\n<td>指定ID</td>\n<td></td>\n</tr>\n<tr>\n<td>TASK_ID_</td>\n<td>任务ID</td>\n<td></td>\n</tr>\n<tr>\n<td>NAME_</td>\n<td>名称</td>\n<td></td>\n</tr>\n<tr>\n<td>VAR_TYPE_</td>\n<td>参数类型</td>\n<td></td>\n</tr>\n<tr>\n<td>REV_</td>\n<td>数据版本</td>\n<td></td>\n</tr>\n<tr>\n<td>BYTEARRAY_ID_</td>\n<td>字节表ID</td>\n<td></td>\n</tr>\n<tr>\n<td>DOUBLE_</td>\n<td>存储double类型数据</td>\n<td></td>\n</tr>\n<tr>\n<td>LONG_</td>\n<td>存储long类型数据</td>\n<td></td>\n</tr>\n<tr>\n<td>…..</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322142756867.png\"\n                      alt=\"image-20220322142756867\"\n                ></p>\n<p>好了一个相对简单的流程处理涉及到的相关表结构内容就介绍完了</p>\n"},{"title":"flowable进阶篇","date":"2022-10-19T15:43:58.000Z","_content":"# Flowable进阶篇\n> Lecture：波波老师\n\n\n\n# 多人会签\n\n## 流程图绘制\n\n多人会签是指一个任务需要多个人来处理，案例讲解\n\n![image-20220402092950976](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402092950976.png)\n\n完整的xml内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <userTask id=\"usertask1\" name=\"User Task\">\n            <extensionElements>\n                <activiti:taskListener event=\"create\" expression=\"${mulitiInstanceTaskListener.completeListener(execution)}\"></activiti:taskListener>\n            </extensionElements>\n            <multiInstanceLoopCharacteristics isSequential=\"false\" activiti:collection=\"persons\" activiti:elementVariable=\"person\">\n                <loopCardinality>3</loopCardinality>\n                <completionCondition>${mulitiInstanceCompleteTask.completeTask(execution)}</completionCondition>\n            </multiInstanceLoopCharacteristics>\n        </userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"endevent1\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"420.0\" y=\"310.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"700.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"950.0\" y=\"310.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"455.0\" y=\"327.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"700.0\" y=\"327.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"805.0\" y=\"327.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"950.0\" y=\"327.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n## 流程说明\n\n1.在用户任务节点绑定了一个监听器，监听`create`行为，该监听器我们是通过UEL表达式来实现的，`mulitiInstanceTaskListener`是我们注入到Spring容器中的对象\n\n![image-20220402095348908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402095348908.png)\n\n对应的监听的代码如下：\n\n```java\n@Component(\"mulitiInstanceTaskListener\")\npublic class MulitiInstanceTaskListener implements Serializable {\n    \n    public void completeListener(DelegateExecution execution){\n        System.out.println(\"任务：\"+execution.getId());\n        System.out.println(\"persons:\" + execution.getVariable(\"persons\"));\n        System.out.println(\"person\" + execution.getVariable(\"person\"));\n    }\n}\n```\n\n2.在Multi instance中的配置\n\n* Loop cardinality:设置为3表示只循环3次，也就是三个人会签\n* Collection：表示要循环的集合，我们给的是persons，后面需要在流程变量中赋值\n* Element variable：表示循环的变量\n* Completion condition：表示任务结束的条件，也就是多人会签的结束条件，在此处我们用的是UEL表达式，`mulitiInstanceCompleteTask`表示的是我们注入到Spring容器中的对象\n\n![image-20220402100649924](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220402100649924.png)\n\n\n\n`mulitiInstanceCompleteTask`对象的完整代码为：\n\n```java\n@Component(\"mulitiInstanceCompleteTask\")\npublic class MulitiInstanceCompleteTask implements Serializable {\n    /**\n     * 完成任务是需要触发的方法\n     * @param execution\n     * @return\n     *     false 表示会签任务还没有结束\n     \n     *     true 表示会签任务结束了\n     */\n    public boolean completeTask(DelegateExecution execution) {\n        System.out.println(\"总的会签任务数量：\" + execution.getVariable(\"nrOfInstances\")\n                + \"当前获取的会签任务数量：\" + execution.getVariable(\"nrOfActiveInstances\")\n                + \" - \" + \"已经完成的会签任务数量：\" + execution.getVariable(\"nrOfCompletedInstances\"));\n        //有一个人同意就通过\n        Boolean flag = (Boolean) execution.getVariable(\"flag\");\n        System.out.println(\"当前意见：\"+flag);\n        return flag;\n    }\n}\n```\n\n上面的三个变量是Flowable中自带的可用变量\n\n1. nrOfInstances:该会签环节中总共有多少个实例\n\n2. nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。\n\n3. nrOfCompletedInstances:已经完成的实例的数量\n\n\n\n## 案例演示\n\n### 部署流程\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"会签案例.bpmn20.xml\")\n                .name(\"会签案例\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n### 启动流程\n\n在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\")，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248\",map);\n    }\n```\n\n![image-20220402104240267](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104240267.png)\n\n\n\n同时控制也有对应的输出，触发了Task的创建事件\n\n![image-20220402104319944](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104319944.png)\n\n\n\n### 会签处理任务\n\n启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在\n\n```java \n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",false);\n        taskService.complete(\"71337501-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n![image-20220402104554823](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104554823.png)\n\n当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出\n\n![image-20220402104729627](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104729627.png)\n\n同时Task表中的记录还有两条\n\n![image-20220402104819239](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104819239.png)\n\n然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",true); // 设置为true 结束多人会签\n        taskService.complete(\"713570d4-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n\n\n\n\n![image-20220402105058601](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105058601.png)\n\n\n\n同时来看看表结构中的记录，发现没有了\n\n![image-20220402105148471](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105148471.png)\n\n\n\n搞定~\n\n\n\n\n\n\n\n# 动态表单\n\n\n\nFlowable提供了一种简便灵活的方式，用来为业务流程中的人工步骤添加表单。 有两种使用表单的方法：使用（由表单设计器创建的）表单定义的内置表单渲染，以及外部表单渲染。 使用外部表单渲染时，可以使用（自Explorer web应用V5版本支持的）表单参数；也可以使用表单key定义，引用外部的、使用自定义代码解析的表单。\n\n## 流程绘制\n\n\n\n![image-20220403133804306](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133804306.png)\n\n\n\n表单设计\n\n![image-20220403133735195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133735195.png)\n\n\n\n![image-20220403133710713](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133710713.png)\n\n\n\n\n\n\n\n\n\n## 案例演示\n\n\n\n### 部署流程\n\n流程图绘制好之后我们就可以直接来部署这个流程了\n\n```java\n/**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"动态表单01.bpmn20.xml\")\n                .name(\"动态表单01\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n### 查看流程关联的表单信息\n\n我们部署了一个流程后，如果不清楚之前关联了什么表单，表单中有哪些字段，属性是什么？这时我们可以通过定义的流程查询出对应的form表单信息\n\n```java\n    @Test\n    public void getStartFromData(){\n        String departemntId = \"4da14de4-b313-11ec-882d-c03c59ad2248\";\n        ProcessDefinition processDefinition = repositoryService\n                .createProcessDefinitionQuery()\n                .deploymentId(departemntId)\n                .singleResult();\n        StartFormData startFormData = processEngine.getFormService()\n                .getStartFormData(processDefinition.getId());\n        List<FormProperty> formProperties = startFormData.getFormProperties();\n        for (FormProperty formProperty : formProperties) {\n            String id = formProperty.getId();\n            String name = formProperty.getName();\n            FormType type = formProperty.getType();\n            System.out.println(\"id = \" + id);\n            System.out.println(\"name = \" + name);\n            System.out.println(\"type.getClass() = \" + type.getClass());\n        }\n    }\n```\n\n\n\n\n\n### 启动流程\n\n启动流程的方式有两种，一种是正常的通过RuntimeService来启动，还有一种就是通过FormService来启动，具体代码如下：\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"5\");\n        map.put(\"startDate\",\"20220403\");\n        map.put(\"reason\",\"想休息下\");\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:5:4dd61987-b313-11ec-882d-c03c59ad2248\",map);\n    }\n\n\n    /**\n     * 通过FormService来启动一个表单流程\n     * @throws Exception\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .deploymentId(\"4da14de4-b313-11ec-882d-c03c59ad2248\")\n                .singleResult();\n        Map<String,String> map = new HashMap<>();\n        map.put(\"days\",\"2\");\n        map.put(\"startDate\",\"20220406\");\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = processEngine.getFormService().submitStartFormData(processDefinition.getId(), map);\n\n    }\n```\n\n\n\n### 保存表单数据\n\n在Task执行之前我们也可以保存表单数据到Task对应的Form表单中。\n\n```java\n/**\n * 保存表单数据\n */\n@Test\nvoid saveFormData(){\n    String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n    Map<String,String> map = new HashMap<>();\n    map.put(\"days\",\"3\");\n    map.put(\"startDate\",\"20220407\");\n    map.put(\"reason\",\"出去玩玩11\");\n    processEngine.getFormService().saveFormData(taskId,map);\n}\n```\n\n\n\n### 查看任务表单数据\n\n\n\n```java\n/**\n * 根据Task编号来查看表单数据\n */\n@Test\nvoid getTaskFormData(){\n    String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n    TaskFormData taskFormData = processEngine.getFormService().getTaskFormData(taskId);\n    List<FormProperty> formProperties = taskFormData.getFormProperties();\n    for (FormProperty formProperty : formProperties) {\n        System.out.println(\"formProperty.getId() = \" + formProperty.getId());\n        System.out.println(\"formProperty.getName() = \" + formProperty.getName());\n        System.out.println(\"formProperty.getValue() = \" + formProperty.getValue());\n    }\n}\n```\n\n输出结果\n\n```txt\nformProperty.getId() = days\nformProperty.getName() = 请假天数\nformProperty.getValue() = 3\nformProperty.getId() = reason\nformProperty.getName() = 请假理由\nformProperty.getValue() = 出去玩玩11\nformProperty.getId() = startDate\nformProperty.getName() = 开始日期\nformProperty.getValue() = 20220407\n```\n\n\n\n### 完成任务\n\n现在就可以通过指派人或者任务编号来完成当前任务,当然这时我们还是可以修改form表单中的数据\n\n```java\n    /**\n     * 保存表单数据并完成任务\n     */\n    @Test\n    void submitTaskFormData(){\n        String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n        Map<String,String> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startDate\",\"20220408\");\n        map.put(\"reason\",\"出去玩玩\");\n        processEngine.getFormService().submitTaskFormData(taskId,map);\n    }\n```\n\n\n\n### 查看完成的Task的表单数据\n\n一个Task完成后，如果我们想要查看之前的表单的历史数据可以通过如下的方法来实现\n\n```java\n    /**\n     * 查看已经完成的Task的表单数据\n     */\n    @Test\n    void getHisTaskFormData(){\n        String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n        List<HistoricDetail> list = processEngine.getHistoryService()\n                .createHistoricDetailQuery()\n                .taskId(taskId)\n                .formProperties()\n                .list();\n        for (HistoricDetail historicDetail : list) {\n            HistoricFormPropertyEntityImpl his = (HistoricFormPropertyEntityImpl) historicDetail;\n            System.out.println(\"his.getPropertyId() = \" + his.getPropertyId());\n            System.out.println(\"his.getPropertyValue() = \" + his.getPropertyValue());\n        }\n    }\n```\n\n\n\n\n\n\n\n## 外置表单\n\n我们会发现在上面的例子中通过内置的表单，我们需要在每个节点都设置一份表单数据，不是很灵活，这时我们可以单独创建一份表单，然后在对应的节点做应用就可以了。\n\n### 创建表单\n\n表单定义文件是以.form为后缀， 内容格式为Json格式\n\n```json\n{\n\"key\": \"form1\",\n\"name\": \"请假流程\",\n\"fields\": [\n            {\n            \"id\": \"startTime\",\n            \"name\": \"开始时间\",\n            \"type\": \"date\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            },\n            {\n            \"id\": \"days\",\n            \"name\": \"请假天数\",\n            \"type\": \"string\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            },\n            {\n            \"id\": \"reason\",\n            \"name\": \"请假原因\",\n            \"type\": \"text\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            }\n    ]\n}\n```\n\n注意：上面文件中的key是唯一标识，我们在表单处理的时候是根据这个key来获取的哦，\n\n\n\n### 然后创建流程文件\n\n流程文件还是以我们上面的案例来演示，主要是对表单这块做了调整\n\n![image-20220403231037718](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231037718.png)\n\nform表单通过引用来关联\n\n![image-20220403231121921](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231121921.png)\n\n\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\" activiti:formKey=\"form1\"></startEvent>\n        <userTask id=\"usertask1\" name=\"用户申请\" activiti:assignee=\"zhangsan\" activiti:formKey=\"form1\"></userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"exclusivegateway1\"></sequenceFlow>\n        <userTask id=\"usertask2\" name=\"总监审批\" activiti:assignee=\"lisi\"></userTask>\n        <sequenceFlow id=\"flow3\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask2\">\n            <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${days>3}]]></conditionExpression>\n        </sequenceFlow>\n        <userTask id=\"usertask3\" name=\"部门经理审批\" activiti:assignee=\"wangwu\"></userTask>\n        <sequenceFlow id=\"flow4\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask3\">\n            <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${days<=3}]]></conditionExpression>\n        </sequenceFlow>\n        <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"exclusivegateway2\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"usertask3\" targetRef=\"exclusivegateway2\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow7\" sourceRef=\"exclusivegateway2\" targetRef=\"endevent1\"></sequenceFlow>\n        <exclusiveGateway id=\"exclusivegateway1\" name=\"Exclusive Gateway\"></exclusiveGateway>\n        <exclusiveGateway id=\"exclusivegateway2\" name=\"Exclusive Gateway\"></exclusiveGateway>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"300.0\" y=\"280.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"380.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"650.0\" y=\"140.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"660.0\" y=\"370.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"965.0\" y=\"260.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"exclusivegateway1\" id=\"BPMNShape_exclusivegateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"530.0\" y=\"278.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"exclusivegateway2\" id=\"BPMNShape_exclusivegateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"880.0\" y=\"257.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"335.0\" y=\"297.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"380.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"485.0\" y=\"297.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"530.0\" y=\"298.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"550.0\" y=\"278.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"550.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"650.0\" y=\"167.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"550.0\" y=\"318.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"550.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"660.0\" y=\"397.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"755.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"899.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"257.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"765.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"920.0\" y=\"277.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"965.0\" y=\"277.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n### 部署流程\n\n接下来我们先部署流程\n\n```java\n    /**\n     * 部署流程：\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"动态表单02.bpmn20.xml\")\n                .name(\"动态表单02\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n    }\n```\n\n\n\n### 部署表单\n\n这个步骤很重要，我们需要单独把我们的form文件部署到流程中。\n\n```java\n    @Autowired\n    private FormRepositoryService formRepositoryService;\n\n    /**\n     * 部署form表单\n     */\n    @Test\n    public void deployForm() throws Exception{\n\n        FormDeployment formDeployment = formRepositoryService.createDeployment()\n                .addClasspathResource(\"holiday.form\")\n                .name(\"test\")\n                .parentDeploymentId(\"1\")\n                .deploy();\n        System.out.println(\"formDeployment.getId() = \" + formDeployment.getId());\n    }\n```\n\n我们需要通过FormRepositoryService来部署我们的form表单。对应的会在这几种表中生成对应的数据\n\nForm部署表：\n\n![image-20220403231443464](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231443464.png)\n\n\n\nForm定义表：\n\n![image-20220403231556049](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231556049.png)\n\n\n\nForm资源表：\n\n![image-20220403231624905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231624905.png)\n\n\n\n\n\n### 启动任务\n\n带有外置Form表单的流程我们需要通过`runtimeService.startProcessInstanceWithForm`来启动\n\n```java\n    /**\n     * 启动流程实例，并且设置对应的值\n     */\n    @Test\n    void startTask(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startTime\",\"20220404\");\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = runtimeService.startProcessInstanceWithForm(\n                \"myProcess:1:4\"\n                , null\n                , map\n                , \"请假流程\");\n        String id = processInstance.getId();\n        System.out.println(\"id = \" + id);\n\n    }\n```\n\n可以看到对应的任务\n\n![image-20220403231811784](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231811784.png)\n\n\n\n\n\n### 查看任务表单数据\n\n在任务处理之前我们可以查看表单的对应信息。\n\n```java\n    /**\n     * 查看流程定义表单数据\n     */\n    @Test\n    public void getTaskFormData1(){\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        // FormInfo 表单的元数据信息\n        FormInfo formInfo = runtimeService.getStartFormModel(\"myProcess:1:4\", \"5001\");\n        System.out.println(\"formInfo.getId() = \" + formInfo.getId());\n        System.out.println(\"formInfo.getName() = \" + formInfo.getName());\n        System.out.println(\"formInfo.getKey() = \" + formInfo.getKey());\n        // FormModel 表单中的具体信息 具体实现是 SimpleFormModel\n        SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel();\n        List<FormField> fields = formModel.getFields();\n        for (FormField field : fields) {\n            System.out.println(\"field.getId() = \" + field.getId());\n            System.out.println(\"field.getName() = \" + field.getName());\n            System.out.println(\"field.getValue() = \" + field.getValue());\n        }\n        System.out.println(\"formModel = \" + formModel);\n    }\n\n\t/**\n\t* 查看具体的Task的表单数据\n\t*/\n    @Test\n    void getTaskData(){\n        FormInfo formInfo = taskService.getTaskFormModel(\"17505\");\n        System.out.println(\"formInfo.getId() = \" + formInfo.getId());\n        System.out.println(\"formInfo.getName() = \" + formInfo.getName());\n        System.out.println(\"formInfo.getKey() = \" + formInfo.getKey());\n        SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel();\n        List<FormField> fields = formModel.getFields();\n        for (FormField field : fields) {\n            System.out.println(\"field.getId() = \" + field.getId());\n            System.out.println(\"field.getName() = \" + field.getName());\n            System.out.println(\"field.getValue() = \" + field.getValue());\n        }\n    }\n```\n\n\n\n\n\n### 完成任务\n\n在外置表单的场景中我们需要通过`taskService.completeTaskWithForm`来完成表单的任务\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTaskForm(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startTime\",\"20220404\");\n        map.put(\"reason\",\"出去玩玩\");\n        String taskId = \"5010\";\n        String formDefinitionId = \"2503\";\n        String outcome = \"波哥\";\n        taskService.completeTaskWithForm(taskId,formDefinitionId,outcome,map);\n    }\n```\n\n\n\n然后任务就流转到了下一个节点来处理了\n\n![image-20220403233308221](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403233308221.png)\n\n\n\n\n\n搞定~！\n\n\n\n\n\n\n\n\n\n# 任务的回退\n\n\n\n## 串行的回退\n\n我们先从最简单的串行流程来分析，案例如下\n\n![image-20220404221942030](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404221942030.png)\n\n完整的xml文件内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <userTask id=\"usertask1\" name=\"用户任务1\" activiti:assignee=\"user1\"></userTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n    <userTask id=\"usertask2\" name=\"用户任务2\" activiti:assignee=\"user2\"></userTask>\n    <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"usertask2\"></sequenceFlow>\n    <userTask id=\"usertask3\" name=\"用户任务3\" activiti:assignee=\"user3\"></userTask>\n    <sequenceFlow id=\"flow3\" sourceRef=\"usertask2\" targetRef=\"usertask3\"></sequenceFlow>\n    <userTask id=\"usertask4\" name=\"用户任务4\" activiti:assignee=\"user4\"></userTask>\n    <sequenceFlow id=\"flow4\" sourceRef=\"usertask3\" targetRef=\"usertask4\"></sequenceFlow>\n    <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow5\" sourceRef=\"usertask4\" targetRef=\"endevent1\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"390.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"470.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"620.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"770.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask4\" id=\"BPMNShape_usertask4\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"920.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1070.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"425.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"470.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"575.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"620.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"725.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"770.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"875.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"920.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"1025.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1070.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是`user1`,`user2`,`user3`,`user4`.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"任务回退01.bpmn20.xml\")\n                .name(\"任务回退01\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n然后我们启动一个流程实例。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    void startProcess(){\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:4\");\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n\n\n\n\n![image-20220404222436788](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404222436788.png)\n\n\n\n然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    void completeTask(){\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:1:4\")\n                .taskAssignee(\"user1\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n\n```\n\n通过上面的多个Task完成操作，现在已经到了user4来处理的节点了\n\n![image-20220404223234982](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223234982.png)\n\n\n\n![image-20220404223253043](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223253043.png)\n\n\n\n我们先看下从`用户任务4`回退到`用户任务3`的操作。\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackTask(){\n    // 当前的Task对应的用户任务的Id\n    List<String> currentActivityIds = new ArrayList<>();\n    currentActivityIds.add(\"usertask4\");\n    // 需要回退的目标节点的用户任务Id\n    String newActivityId = \"usertask3\";\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n            .changeState();\n\n}\n```\n\n操作后我们可以在对应的历史表中看到相关的信息\n\n![image-20220404224948722](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404224948722.png)\n\n\n\n![image-20220404225319024](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225319024.png)\n\n\n\n然后我们通过user3来完成任务继续到user4处理，然后我们可以测试回退到user1处。\n\n![image-20220404225345357](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225345357.png)\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackTask(){\n    // 当前的Task对应的用户任务的Id\n    List<String> currentActivityIds = new ArrayList<>();\n    currentActivityIds.add(\"usertask4\");\n    // 需要回退的目标节点的用户任务Id\n    String newActivityId = \"usertask1\";\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n            .changeState();\n}\n```\n\n![image-20220404225532864](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225532864.png)\n\n\n\n可以看到任务又回到了user1处。也就是在串行的流程中，我们可以回退到任意的用户节点，当然这个串行也包括多人会签和排他网关节点。当然在回退的时候我们还可以使用`moveActivityIdTo(String currentActivityId,String newActivityId)`这个方法来处理。\n\n\n\n\n\n## 并行的回退\n\n接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：\n\n![image-20220405111325145](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111325145.png)\n\n详细的xml文件内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <userTask id=\"usertask1\" name=\"用户审批01\" activiti:assignee=\"user1\"></userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"parallelgateway1\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway1\" name=\"Exclusive Gateway\"></parallelGateway>\n        <userTask id=\"usertask2\" name=\"业务负责人\" activiti:assignee=\"user2\"></userTask>\n        <sequenceFlow id=\"flow3\" sourceRef=\"parallelgateway1\" targetRef=\"usertask2\"></sequenceFlow>\n        <userTask id=\"usertask3\" name=\"行政副总\" activiti:assignee=\"user4\"></userTask>\n        <sequenceFlow id=\"flow4\" sourceRef=\"parallelgateway1\" targetRef=\"usertask3\"></sequenceFlow>\n        <userTask id=\"usertask4\" name=\"业务副总\" activiti:assignee=\"user3\"></userTask>\n        <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"usertask4\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"usertask4\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway2\" name=\"Exclusive Gateway\"></parallelGateway>\n        <sequenceFlow id=\"flow7\" sourceRef=\"usertask3\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <userTask id=\"usertask5\" name=\"总经理\" activiti:assignee=\"user5\"></userTask>\n        <sequenceFlow id=\"flow8\" sourceRef=\"parallelgateway2\" targetRef=\"usertask5\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow9\" sourceRef=\"usertask5\" targetRef=\"endevent1\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"370.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"450.0\" y=\"290.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway1\" id=\"BPMNShape_parallelgateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"600.0\" y=\"298.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"740.0\" y=\"180.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"740.0\" y=\"370.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask4\" id=\"BPMNShape_usertask4\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"930.0\" y=\"180.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway2\" id=\"BPMNShape_parallelgateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1140.0\" y=\"297.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask5\" id=\"BPMNShape_usertask5\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1225.0\" y=\"290.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1375.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"405.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"450.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"555.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"600.0\" y=\"318.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"620.0\" y=\"298.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"620.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"207.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"620.0\" y=\"338.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"620.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"397.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"845.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"930.0\" y=\"207.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"1035.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1159.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"845.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"337.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"1180.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1225.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1330.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1375.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n先部署流程，然后启动并运行到并行流程的节点如下的位置\n![image-20220405111459624](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111459624.png)\n\n然后我们可以尝试从`业务副总`处回退到`用户审批01`处，看看该处理应该要如何实现。\n\n![image-20220405111926713](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111926713.png)\n\n\n\n回退逻辑代码的实现\n\n```java\n    /**\n     * 回退操作\n     *   业务副总驳回到到用户审批处  那么行政审批的也应该要返回\n     */\n    @Test\n    void rollbackTask(){\n        // 当前的Task对应的用户任务的Id\n        List<String> currentActivityIds = new ArrayList<>();\n        currentActivityIds.add(\"usertask4\"); // 行政副总\n        currentActivityIds.add(\"usertask3\"); // 业务副总\n        // 需要回退的目标节点的用户任务Id\n        String newActivityId = \"usertask1\"; // 用户审批01\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"22501\")\n                .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n                .changeState();\n    }\n```\n\n查看ACT_RU_TASK可以看到回到了`用户审批01`了\n\n![image-20220405112329439](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112329439.png)\n\n同时在ACT_HI_ACTINS中也可以看到回退的历史操作\n\n![image-20220405112544706](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112544706.png)\n\n\n\n然后再来看看 行政副总的 并行分支执行完成了，然后在 业务副总处审批要驳回的处理\n\n![image-20220405113125822](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113125822.png)\n\n![image-20220405113212465](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113212465.png)\n\n\n\n```java\n    @Test\n    void rollbackTask(){\n        // 当前的Task对应的用户任务的Id\n        List<String> currentActivityIds = new ArrayList<>();\n        currentActivityIds.add(\"usertask4\"); // 行政副总\n        //currentActivityIds.add(\"usertask3\"); // 业务副总\n        // 需要回退的目标节点的用户任务Id\n        String newActivityId = \"usertask1\"; // 用户审批01\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"22501\")\n                .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n                .changeState();\n    }\n```\n\n\n\n一样的效果\n\n\n\n## 子流程回退\n\n最后我们来看看带有子流程的场景下如果有回退的情况应该要如何来处理,案例如下：\n\n![image-20220405134220482](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134220482.png)\n\n完整的xml内容为：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <userTask id=\"usertask1\" name=\"主任务1\" activiti:assignee=\"user1\"></userTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n    <subProcess id=\"subprocess1\" name=\"Sub Process\">\n      <startEvent id=\"startevent2\" name=\"Start\"></startEvent>\n      <userTask id=\"usertask2\" name=\"子任务1\" activiti:assignee=\"user2\"></userTask>\n      <sequenceFlow id=\"flow3\" sourceRef=\"startevent2\" targetRef=\"usertask2\"></sequenceFlow>\n      <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n      <sequenceFlow id=\"flow4\" sourceRef=\"usertask2\" targetRef=\"endevent1\"></sequenceFlow>\n    </subProcess>\n    <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"subprocess1\"></sequenceFlow>\n    <userTask id=\"usertask3\" name=\"主任务2\" activiti:assignee=\"user3\"></userTask>\n    <sequenceFlow id=\"flow5\" sourceRef=\"subprocess1\" targetRef=\"usertask3\"></sequenceFlow>\n    <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow6\" sourceRef=\"usertask3\" targetRef=\"endevent2\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"320.0\" y=\"290.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"400.0\" y=\"280.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"subprocess1\" id=\"BPMNShape_subprocess1\">\n        <omgdc:Bounds height=\"291.0\" width=\"481.0\" x=\"620.0\" y=\"168.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"680.0\" y=\"298.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"760.0\" y=\"288.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"910.0\" y=\"298.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1146.0\" y=\"286.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1296.0\" y=\"296.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"355.0\" y=\"307.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"400.0\" y=\"307.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"715.0\" y=\"315.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"760.0\" y=\"315.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"865.0\" y=\"315.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"910.0\" y=\"315.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"505.0\" y=\"307.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"620.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"1101.0\" y=\"313.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1146.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n        <omgdi:waypoint x=\"1251.0\" y=\"313.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1296.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n部署流程后并启动流程，我们先来看第一个场景，从子流程回退到主流程，也就是如下图：\n\n![image-20220405134411503](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134411503.png)\n\nTask进入到了子流程的Task处\n\n![image-20220405134811970](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220405134811970.png)\n\n\n\n然后我们来处理回退到主流程:直接跳转即可\n\n```java\n    /**\n     * 回退操作\n     *   从子流程回退到主流程操作\n     */\n    @Test\n    void rollbackMainTask(){\n\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"2501\")\n                .moveActivityIdTo(\"usertask2\",\"usertask1\")\n                .changeState();\n    }\n\n}\n\n    /**\n     * 回退操作\n     *   从子流程回退到主流程操作：moveExecutionToActivityId不关心当前的节点\n     */\n    @Test\n    void rollbackMainTask(){\n\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"2501\")\n                .moveExecutionToActivityId(\"5003\",\"usertask1\")\n                .changeState();\n    }\n```\n\n然后从主流程回退到子流程操作\n\n![image-20220405140816409](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405140816409.png)\n\n![image-20220405141015720](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405141015720.png)\n\n\n\n同样的直接跳转即可\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackSubTask(){\n\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdTo(\"usertask3\",\"usertask2\")\n            .changeState();\n}\n```\n\n","source":"_posts/2022/10/flowable进阶篇.md","raw":"---\ntitle: flowable进阶篇\ndate: 2022-10-19 23:43:58\ntags: [BPMN,Flowable]\ncategories: [笔记]\n---\n# Flowable进阶篇\n> Lecture：波波老师\n\n\n\n# 多人会签\n\n## 流程图绘制\n\n多人会签是指一个任务需要多个人来处理，案例讲解\n\n![image-20220402092950976](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402092950976.png)\n\n完整的xml内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <userTask id=\"usertask1\" name=\"User Task\">\n            <extensionElements>\n                <activiti:taskListener event=\"create\" expression=\"${mulitiInstanceTaskListener.completeListener(execution)}\"></activiti:taskListener>\n            </extensionElements>\n            <multiInstanceLoopCharacteristics isSequential=\"false\" activiti:collection=\"persons\" activiti:elementVariable=\"person\">\n                <loopCardinality>3</loopCardinality>\n                <completionCondition>${mulitiInstanceCompleteTask.completeTask(execution)}</completionCondition>\n            </multiInstanceLoopCharacteristics>\n        </userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"endevent1\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"420.0\" y=\"310.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"700.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"950.0\" y=\"310.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"455.0\" y=\"327.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"700.0\" y=\"327.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"805.0\" y=\"327.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"950.0\" y=\"327.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n## 流程说明\n\n1.在用户任务节点绑定了一个监听器，监听`create`行为，该监听器我们是通过UEL表达式来实现的，`mulitiInstanceTaskListener`是我们注入到Spring容器中的对象\n\n![image-20220402095348908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402095348908.png)\n\n对应的监听的代码如下：\n\n```java\n@Component(\"mulitiInstanceTaskListener\")\npublic class MulitiInstanceTaskListener implements Serializable {\n    \n    public void completeListener(DelegateExecution execution){\n        System.out.println(\"任务：\"+execution.getId());\n        System.out.println(\"persons:\" + execution.getVariable(\"persons\"));\n        System.out.println(\"person\" + execution.getVariable(\"person\"));\n    }\n}\n```\n\n2.在Multi instance中的配置\n\n* Loop cardinality:设置为3表示只循环3次，也就是三个人会签\n* Collection：表示要循环的集合，我们给的是persons，后面需要在流程变量中赋值\n* Element variable：表示循环的变量\n* Completion condition：表示任务结束的条件，也就是多人会签的结束条件，在此处我们用的是UEL表达式，`mulitiInstanceCompleteTask`表示的是我们注入到Spring容器中的对象\n\n![image-20220402100649924](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220402100649924.png)\n\n\n\n`mulitiInstanceCompleteTask`对象的完整代码为：\n\n```java\n@Component(\"mulitiInstanceCompleteTask\")\npublic class MulitiInstanceCompleteTask implements Serializable {\n    /**\n     * 完成任务是需要触发的方法\n     * @param execution\n     * @return\n     *     false 表示会签任务还没有结束\n     \n     *     true 表示会签任务结束了\n     */\n    public boolean completeTask(DelegateExecution execution) {\n        System.out.println(\"总的会签任务数量：\" + execution.getVariable(\"nrOfInstances\")\n                + \"当前获取的会签任务数量：\" + execution.getVariable(\"nrOfActiveInstances\")\n                + \" - \" + \"已经完成的会签任务数量：\" + execution.getVariable(\"nrOfCompletedInstances\"));\n        //有一个人同意就通过\n        Boolean flag = (Boolean) execution.getVariable(\"flag\");\n        System.out.println(\"当前意见：\"+flag);\n        return flag;\n    }\n}\n```\n\n上面的三个变量是Flowable中自带的可用变量\n\n1. nrOfInstances:该会签环节中总共有多少个实例\n\n2. nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。\n\n3. nrOfCompletedInstances:已经完成的实例的数量\n\n\n\n## 案例演示\n\n### 部署流程\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"会签案例.bpmn20.xml\")\n                .name(\"会签案例\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n### 启动流程\n\n在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\")，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        // 设置多人会签的数据\n        map.put(\"persons\", Arrays.asList(\"张三\",\"李四\",\"王五\",\"赵六\"));\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248\",map);\n    }\n```\n\n![image-20220402104240267](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104240267.png)\n\n\n\n同时控制也有对应的输出，触发了Task的创建事件\n\n![image-20220402104319944](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104319944.png)\n\n\n\n### 会签处理任务\n\n启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在\n\n```java \n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",false);\n        taskService.complete(\"71337501-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n![image-20220402104554823](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104554823.png)\n\n当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出\n\n![image-20220402104729627](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104729627.png)\n\n同时Task表中的记录还有两条\n\n![image-20220402104819239](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104819239.png)\n\n然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了\n\n```java\n    @Test\n    void completeTask1(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",true); // 设置为true 结束多人会签\n        taskService.complete(\"713570d4-b22e-11ec-a534-c03c59ad2248\",map);\n        System.out.println(\"complete ....\");\n    }\n```\n\n\n\n\n\n![image-20220402105058601](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105058601.png)\n\n\n\n同时来看看表结构中的记录，发现没有了\n\n![image-20220402105148471](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105148471.png)\n\n\n\n搞定~\n\n\n\n\n\n\n\n# 动态表单\n\n\n\nFlowable提供了一种简便灵活的方式，用来为业务流程中的人工步骤添加表单。 有两种使用表单的方法：使用（由表单设计器创建的）表单定义的内置表单渲染，以及外部表单渲染。 使用外部表单渲染时，可以使用（自Explorer web应用V5版本支持的）表单参数；也可以使用表单key定义，引用外部的、使用自定义代码解析的表单。\n\n## 流程绘制\n\n\n\n![image-20220403133804306](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133804306.png)\n\n\n\n表单设计\n\n![image-20220403133735195](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133735195.png)\n\n\n\n![image-20220403133710713](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133710713.png)\n\n\n\n\n\n\n\n\n\n## 案例演示\n\n\n\n### 部署流程\n\n流程图绘制好之后我们就可以直接来部署这个流程了\n\n```java\n/**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"动态表单01.bpmn20.xml\")\n                .name(\"动态表单01\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n### 查看流程关联的表单信息\n\n我们部署了一个流程后，如果不清楚之前关联了什么表单，表单中有哪些字段，属性是什么？这时我们可以通过定义的流程查询出对应的form表单信息\n\n```java\n    @Test\n    public void getStartFromData(){\n        String departemntId = \"4da14de4-b313-11ec-882d-c03c59ad2248\";\n        ProcessDefinition processDefinition = repositoryService\n                .createProcessDefinitionQuery()\n                .deploymentId(departemntId)\n                .singleResult();\n        StartFormData startFormData = processEngine.getFormService()\n                .getStartFormData(processDefinition.getId());\n        List<FormProperty> formProperties = startFormData.getFormProperties();\n        for (FormProperty formProperty : formProperties) {\n            String id = formProperty.getId();\n            String name = formProperty.getName();\n            FormType type = formProperty.getType();\n            System.out.println(\"id = \" + id);\n            System.out.println(\"name = \" + name);\n            System.out.println(\"type.getClass() = \" + type.getClass());\n        }\n    }\n```\n\n\n\n\n\n### 启动流程\n\n启动流程的方式有两种，一种是正常的通过RuntimeService来启动，还有一种就是通过FormService来启动，具体代码如下：\n\n```java\n    /**\n     * 正常的启动流程\n     */\n    @Test\n    void startFlow() throws Exception{\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"5\");\n        map.put(\"startDate\",\"20220403\");\n        map.put(\"reason\",\"想休息下\");\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:5:4dd61987-b313-11ec-882d-c03c59ad2248\",map);\n    }\n\n\n    /**\n     * 通过FormService来启动一个表单流程\n     * @throws Exception\n     */\n    @Test\n    void startFormFlow() throws Exception{\n        ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()\n                .deploymentId(\"4da14de4-b313-11ec-882d-c03c59ad2248\")\n                .singleResult();\n        Map<String,String> map = new HashMap<>();\n        map.put(\"days\",\"2\");\n        map.put(\"startDate\",\"20220406\");\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = processEngine.getFormService().submitStartFormData(processDefinition.getId(), map);\n\n    }\n```\n\n\n\n### 保存表单数据\n\n在Task执行之前我们也可以保存表单数据到Task对应的Form表单中。\n\n```java\n/**\n * 保存表单数据\n */\n@Test\nvoid saveFormData(){\n    String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n    Map<String,String> map = new HashMap<>();\n    map.put(\"days\",\"3\");\n    map.put(\"startDate\",\"20220407\");\n    map.put(\"reason\",\"出去玩玩11\");\n    processEngine.getFormService().saveFormData(taskId,map);\n}\n```\n\n\n\n### 查看任务表单数据\n\n\n\n```java\n/**\n * 根据Task编号来查看表单数据\n */\n@Test\nvoid getTaskFormData(){\n    String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n    TaskFormData taskFormData = processEngine.getFormService().getTaskFormData(taskId);\n    List<FormProperty> formProperties = taskFormData.getFormProperties();\n    for (FormProperty formProperty : formProperties) {\n        System.out.println(\"formProperty.getId() = \" + formProperty.getId());\n        System.out.println(\"formProperty.getName() = \" + formProperty.getName());\n        System.out.println(\"formProperty.getValue() = \" + formProperty.getValue());\n    }\n}\n```\n\n输出结果\n\n```txt\nformProperty.getId() = days\nformProperty.getName() = 请假天数\nformProperty.getValue() = 3\nformProperty.getId() = reason\nformProperty.getName() = 请假理由\nformProperty.getValue() = 出去玩玩11\nformProperty.getId() = startDate\nformProperty.getName() = 开始日期\nformProperty.getValue() = 20220407\n```\n\n\n\n### 完成任务\n\n现在就可以通过指派人或者任务编号来完成当前任务,当然这时我们还是可以修改form表单中的数据\n\n```java\n    /**\n     * 保存表单数据并完成任务\n     */\n    @Test\n    void submitTaskFormData(){\n        String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n        Map<String,String> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startDate\",\"20220408\");\n        map.put(\"reason\",\"出去玩玩\");\n        processEngine.getFormService().submitTaskFormData(taskId,map);\n    }\n```\n\n\n\n### 查看完成的Task的表单数据\n\n一个Task完成后，如果我们想要查看之前的表单的历史数据可以通过如下的方法来实现\n\n```java\n    /**\n     * 查看已经完成的Task的表单数据\n     */\n    @Test\n    void getHisTaskFormData(){\n        String taskId = \"80efeb32-b313-11ec-a7ff-c03c59ad2248\";\n        List<HistoricDetail> list = processEngine.getHistoryService()\n                .createHistoricDetailQuery()\n                .taskId(taskId)\n                .formProperties()\n                .list();\n        for (HistoricDetail historicDetail : list) {\n            HistoricFormPropertyEntityImpl his = (HistoricFormPropertyEntityImpl) historicDetail;\n            System.out.println(\"his.getPropertyId() = \" + his.getPropertyId());\n            System.out.println(\"his.getPropertyValue() = \" + his.getPropertyValue());\n        }\n    }\n```\n\n\n\n\n\n\n\n## 外置表单\n\n我们会发现在上面的例子中通过内置的表单，我们需要在每个节点都设置一份表单数据，不是很灵活，这时我们可以单独创建一份表单，然后在对应的节点做应用就可以了。\n\n### 创建表单\n\n表单定义文件是以.form为后缀， 内容格式为Json格式\n\n```json\n{\n\"key\": \"form1\",\n\"name\": \"请假流程\",\n\"fields\": [\n            {\n            \"id\": \"startTime\",\n            \"name\": \"开始时间\",\n            \"type\": \"date\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            },\n            {\n            \"id\": \"days\",\n            \"name\": \"请假天数\",\n            \"type\": \"string\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            },\n            {\n            \"id\": \"reason\",\n            \"name\": \"请假原因\",\n            \"type\": \"text\",\n            \"required\": true,\n            \"placeholder\": \"empty\"\n            }\n    ]\n}\n```\n\n注意：上面文件中的key是唯一标识，我们在表单处理的时候是根据这个key来获取的哦，\n\n\n\n### 然后创建流程文件\n\n流程文件还是以我们上面的案例来演示，主要是对表单这块做了调整\n\n![image-20220403231037718](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231037718.png)\n\nform表单通过引用来关联\n\n![image-20220403231121921](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231121921.png)\n\n\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\" activiti:formKey=\"form1\"></startEvent>\n        <userTask id=\"usertask1\" name=\"用户申请\" activiti:assignee=\"zhangsan\" activiti:formKey=\"form1\"></userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"exclusivegateway1\"></sequenceFlow>\n        <userTask id=\"usertask2\" name=\"总监审批\" activiti:assignee=\"lisi\"></userTask>\n        <sequenceFlow id=\"flow3\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask2\">\n            <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${days>3}]]></conditionExpression>\n        </sequenceFlow>\n        <userTask id=\"usertask3\" name=\"部门经理审批\" activiti:assignee=\"wangwu\"></userTask>\n        <sequenceFlow id=\"flow4\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask3\">\n            <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${days<=3}]]></conditionExpression>\n        </sequenceFlow>\n        <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"exclusivegateway2\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"usertask3\" targetRef=\"exclusivegateway2\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow7\" sourceRef=\"exclusivegateway2\" targetRef=\"endevent1\"></sequenceFlow>\n        <exclusiveGateway id=\"exclusivegateway1\" name=\"Exclusive Gateway\"></exclusiveGateway>\n        <exclusiveGateway id=\"exclusivegateway2\" name=\"Exclusive Gateway\"></exclusiveGateway>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"300.0\" y=\"280.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"380.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"650.0\" y=\"140.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"660.0\" y=\"370.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"965.0\" y=\"260.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"exclusivegateway1\" id=\"BPMNShape_exclusivegateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"530.0\" y=\"278.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"exclusivegateway2\" id=\"BPMNShape_exclusivegateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"880.0\" y=\"257.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"335.0\" y=\"297.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"380.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"485.0\" y=\"297.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"530.0\" y=\"298.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"550.0\" y=\"278.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"550.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"650.0\" y=\"167.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"550.0\" y=\"318.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"550.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"660.0\" y=\"397.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"755.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"899.0\" y=\"167.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"257.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"765.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"900.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"920.0\" y=\"277.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"965.0\" y=\"277.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n### 部署流程\n\n接下来我们先部署流程\n\n```java\n    /**\n     * 部署流程：\n     */\n    @Test\n    public void deploy(){\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"动态表单02.bpmn20.xml\")\n                .name(\"动态表单02\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n    }\n```\n\n\n\n### 部署表单\n\n这个步骤很重要，我们需要单独把我们的form文件部署到流程中。\n\n```java\n    @Autowired\n    private FormRepositoryService formRepositoryService;\n\n    /**\n     * 部署form表单\n     */\n    @Test\n    public void deployForm() throws Exception{\n\n        FormDeployment formDeployment = formRepositoryService.createDeployment()\n                .addClasspathResource(\"holiday.form\")\n                .name(\"test\")\n                .parentDeploymentId(\"1\")\n                .deploy();\n        System.out.println(\"formDeployment.getId() = \" + formDeployment.getId());\n    }\n```\n\n我们需要通过FormRepositoryService来部署我们的form表单。对应的会在这几种表中生成对应的数据\n\nForm部署表：\n\n![image-20220403231443464](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231443464.png)\n\n\n\nForm定义表：\n\n![image-20220403231556049](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231556049.png)\n\n\n\nForm资源表：\n\n![image-20220403231624905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231624905.png)\n\n\n\n\n\n### 启动任务\n\n带有外置Form表单的流程我们需要通过`runtimeService.startProcessInstanceWithForm`来启动\n\n```java\n    /**\n     * 启动流程实例，并且设置对应的值\n     */\n    @Test\n    void startTask(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startTime\",\"20220404\");\n        map.put(\"reason\",\"出去玩玩\");\n        ProcessInstance processInstance = runtimeService.startProcessInstanceWithForm(\n                \"myProcess:1:4\"\n                , null\n                , map\n                , \"请假流程\");\n        String id = processInstance.getId();\n        System.out.println(\"id = \" + id);\n\n    }\n```\n\n可以看到对应的任务\n\n![image-20220403231811784](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231811784.png)\n\n\n\n\n\n### 查看任务表单数据\n\n在任务处理之前我们可以查看表单的对应信息。\n\n```java\n    /**\n     * 查看流程定义表单数据\n     */\n    @Test\n    public void getTaskFormData1(){\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        // FormInfo 表单的元数据信息\n        FormInfo formInfo = runtimeService.getStartFormModel(\"myProcess:1:4\", \"5001\");\n        System.out.println(\"formInfo.getId() = \" + formInfo.getId());\n        System.out.println(\"formInfo.getName() = \" + formInfo.getName());\n        System.out.println(\"formInfo.getKey() = \" + formInfo.getKey());\n        // FormModel 表单中的具体信息 具体实现是 SimpleFormModel\n        SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel();\n        List<FormField> fields = formModel.getFields();\n        for (FormField field : fields) {\n            System.out.println(\"field.getId() = \" + field.getId());\n            System.out.println(\"field.getName() = \" + field.getName());\n            System.out.println(\"field.getValue() = \" + field.getValue());\n        }\n        System.out.println(\"formModel = \" + formModel);\n    }\n\n\t/**\n\t* 查看具体的Task的表单数据\n\t*/\n    @Test\n    void getTaskData(){\n        FormInfo formInfo = taskService.getTaskFormModel(\"17505\");\n        System.out.println(\"formInfo.getId() = \" + formInfo.getId());\n        System.out.println(\"formInfo.getName() = \" + formInfo.getName());\n        System.out.println(\"formInfo.getKey() = \" + formInfo.getKey());\n        SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel();\n        List<FormField> fields = formModel.getFields();\n        for (FormField field : fields) {\n            System.out.println(\"field.getId() = \" + field.getId());\n            System.out.println(\"field.getName() = \" + field.getName());\n            System.out.println(\"field.getValue() = \" + field.getValue());\n        }\n    }\n```\n\n\n\n\n\n### 完成任务\n\n在外置表单的场景中我们需要通过`taskService.completeTaskWithForm`来完成表单的任务\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTaskForm(){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"days\",\"4\");\n        map.put(\"startTime\",\"20220404\");\n        map.put(\"reason\",\"出去玩玩\");\n        String taskId = \"5010\";\n        String formDefinitionId = \"2503\";\n        String outcome = \"波哥\";\n        taskService.completeTaskWithForm(taskId,formDefinitionId,outcome,map);\n    }\n```\n\n\n\n然后任务就流转到了下一个节点来处理了\n\n![image-20220403233308221](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403233308221.png)\n\n\n\n\n\n搞定~！\n\n\n\n\n\n\n\n\n\n# 任务的回退\n\n\n\n## 串行的回退\n\n我们先从最简单的串行流程来分析，案例如下\n\n![image-20220404221942030](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404221942030.png)\n\n完整的xml文件内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <userTask id=\"usertask1\" name=\"用户任务1\" activiti:assignee=\"user1\"></userTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n    <userTask id=\"usertask2\" name=\"用户任务2\" activiti:assignee=\"user2\"></userTask>\n    <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"usertask2\"></sequenceFlow>\n    <userTask id=\"usertask3\" name=\"用户任务3\" activiti:assignee=\"user3\"></userTask>\n    <sequenceFlow id=\"flow3\" sourceRef=\"usertask2\" targetRef=\"usertask3\"></sequenceFlow>\n    <userTask id=\"usertask4\" name=\"用户任务4\" activiti:assignee=\"user4\"></userTask>\n    <sequenceFlow id=\"flow4\" sourceRef=\"usertask3\" targetRef=\"usertask4\"></sequenceFlow>\n    <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow5\" sourceRef=\"usertask4\" targetRef=\"endevent1\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"390.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"470.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"620.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"770.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask4\" id=\"BPMNShape_usertask4\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"920.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1070.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"425.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"470.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"575.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"620.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"725.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"770.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"875.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"920.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"1025.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1070.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是`user1`,`user2`,`user3`,`user4`.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    void testDeploy() throws Exception {\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"任务回退01.bpmn20.xml\")\n                .name(\"任务回退01\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n然后我们启动一个流程实例。\n\n```java\n    /**\n     * 启动流程实例\n     */\n    @Test\n    void startProcess(){\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"myProcess:1:4\");\n        System.out.println(\"processInstance.getId() = \" + processInstance.getId());\n    }\n```\n\n\n\n\n\n![image-20220404222436788](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404222436788.png)\n\n\n\n然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。\n\n```java\n    /**\n     * 完成任务\n     */\n    @Test\n    void completeTask(){\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:1:4\")\n                .taskAssignee(\"user1\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n\n```\n\n通过上面的多个Task完成操作，现在已经到了user4来处理的节点了\n\n![image-20220404223234982](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223234982.png)\n\n\n\n![image-20220404223253043](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223253043.png)\n\n\n\n我们先看下从`用户任务4`回退到`用户任务3`的操作。\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackTask(){\n    // 当前的Task对应的用户任务的Id\n    List<String> currentActivityIds = new ArrayList<>();\n    currentActivityIds.add(\"usertask4\");\n    // 需要回退的目标节点的用户任务Id\n    String newActivityId = \"usertask3\";\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n            .changeState();\n\n}\n```\n\n操作后我们可以在对应的历史表中看到相关的信息\n\n![image-20220404224948722](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404224948722.png)\n\n\n\n![image-20220404225319024](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225319024.png)\n\n\n\n然后我们通过user3来完成任务继续到user4处理，然后我们可以测试回退到user1处。\n\n![image-20220404225345357](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225345357.png)\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackTask(){\n    // 当前的Task对应的用户任务的Id\n    List<String> currentActivityIds = new ArrayList<>();\n    currentActivityIds.add(\"usertask4\");\n    // 需要回退的目标节点的用户任务Id\n    String newActivityId = \"usertask1\";\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n            .changeState();\n}\n```\n\n![image-20220404225532864](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225532864.png)\n\n\n\n可以看到任务又回到了user1处。也就是在串行的流程中，我们可以回退到任意的用户节点，当然这个串行也包括多人会签和排他网关节点。当然在回退的时候我们还可以使用`moveActivityIdTo(String currentActivityId,String newActivityId)`这个方法来处理。\n\n\n\n\n\n## 并行的回退\n\n接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：\n\n![image-20220405111325145](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111325145.png)\n\n详细的xml文件内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <userTask id=\"usertask1\" name=\"用户审批01\" activiti:assignee=\"user1\"></userTask>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"parallelgateway1\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway1\" name=\"Exclusive Gateway\"></parallelGateway>\n        <userTask id=\"usertask2\" name=\"业务负责人\" activiti:assignee=\"user2\"></userTask>\n        <sequenceFlow id=\"flow3\" sourceRef=\"parallelgateway1\" targetRef=\"usertask2\"></sequenceFlow>\n        <userTask id=\"usertask3\" name=\"行政副总\" activiti:assignee=\"user4\"></userTask>\n        <sequenceFlow id=\"flow4\" sourceRef=\"parallelgateway1\" targetRef=\"usertask3\"></sequenceFlow>\n        <userTask id=\"usertask4\" name=\"业务副总\" activiti:assignee=\"user3\"></userTask>\n        <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"usertask4\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"usertask4\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway2\" name=\"Exclusive Gateway\"></parallelGateway>\n        <sequenceFlow id=\"flow7\" sourceRef=\"usertask3\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <userTask id=\"usertask5\" name=\"总经理\" activiti:assignee=\"user5\"></userTask>\n        <sequenceFlow id=\"flow8\" sourceRef=\"parallelgateway2\" targetRef=\"usertask5\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow9\" sourceRef=\"usertask5\" targetRef=\"endevent1\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"370.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"450.0\" y=\"290.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway1\" id=\"BPMNShape_parallelgateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"600.0\" y=\"298.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"740.0\" y=\"180.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"740.0\" y=\"370.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask4\" id=\"BPMNShape_usertask4\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"930.0\" y=\"180.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway2\" id=\"BPMNShape_parallelgateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1140.0\" y=\"297.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask5\" id=\"BPMNShape_usertask5\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1225.0\" y=\"290.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1375.0\" y=\"300.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"405.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"450.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"555.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"600.0\" y=\"318.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"620.0\" y=\"298.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"620.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"207.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"620.0\" y=\"338.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"620.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"397.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"845.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"930.0\" y=\"207.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"1035.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1159.0\" y=\"207.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"297.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"845.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"337.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"1180.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1225.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1330.0\" y=\"317.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1375.0\" y=\"317.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n先部署流程，然后启动并运行到并行流程的节点如下的位置\n![image-20220405111459624](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111459624.png)\n\n然后我们可以尝试从`业务副总`处回退到`用户审批01`处，看看该处理应该要如何实现。\n\n![image-20220405111926713](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111926713.png)\n\n\n\n回退逻辑代码的实现\n\n```java\n    /**\n     * 回退操作\n     *   业务副总驳回到到用户审批处  那么行政审批的也应该要返回\n     */\n    @Test\n    void rollbackTask(){\n        // 当前的Task对应的用户任务的Id\n        List<String> currentActivityIds = new ArrayList<>();\n        currentActivityIds.add(\"usertask4\"); // 行政副总\n        currentActivityIds.add(\"usertask3\"); // 业务副总\n        // 需要回退的目标节点的用户任务Id\n        String newActivityId = \"usertask1\"; // 用户审批01\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"22501\")\n                .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n                .changeState();\n    }\n```\n\n查看ACT_RU_TASK可以看到回到了`用户审批01`了\n\n![image-20220405112329439](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112329439.png)\n\n同时在ACT_HI_ACTINS中也可以看到回退的历史操作\n\n![image-20220405112544706](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112544706.png)\n\n\n\n然后再来看看 行政副总的 并行分支执行完成了，然后在 业务副总处审批要驳回的处理\n\n![image-20220405113125822](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113125822.png)\n\n![image-20220405113212465](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113212465.png)\n\n\n\n```java\n    @Test\n    void rollbackTask(){\n        // 当前的Task对应的用户任务的Id\n        List<String> currentActivityIds = new ArrayList<>();\n        currentActivityIds.add(\"usertask4\"); // 行政副总\n        //currentActivityIds.add(\"usertask3\"); // 业务副总\n        // 需要回退的目标节点的用户任务Id\n        String newActivityId = \"usertask1\"; // 用户审批01\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"22501\")\n                .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)\n                .changeState();\n    }\n```\n\n\n\n一样的效果\n\n\n\n## 子流程回退\n\n最后我们来看看带有子流程的场景下如果有回退的情况应该要如何来处理,案例如下：\n\n![image-20220405134220482](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134220482.png)\n\n完整的xml内容为：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <userTask id=\"usertask1\" name=\"主任务1\" activiti:assignee=\"user1\"></userTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"usertask1\"></sequenceFlow>\n    <subProcess id=\"subprocess1\" name=\"Sub Process\">\n      <startEvent id=\"startevent2\" name=\"Start\"></startEvent>\n      <userTask id=\"usertask2\" name=\"子任务1\" activiti:assignee=\"user2\"></userTask>\n      <sequenceFlow id=\"flow3\" sourceRef=\"startevent2\" targetRef=\"usertask2\"></sequenceFlow>\n      <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n      <sequenceFlow id=\"flow4\" sourceRef=\"usertask2\" targetRef=\"endevent1\"></sequenceFlow>\n    </subProcess>\n    <sequenceFlow id=\"flow2\" sourceRef=\"usertask1\" targetRef=\"subprocess1\"></sequenceFlow>\n    <userTask id=\"usertask3\" name=\"主任务2\" activiti:assignee=\"user3\"></userTask>\n    <sequenceFlow id=\"flow5\" sourceRef=\"subprocess1\" targetRef=\"usertask3\"></sequenceFlow>\n    <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow6\" sourceRef=\"usertask3\" targetRef=\"endevent2\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"320.0\" y=\"290.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"400.0\" y=\"280.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"subprocess1\" id=\"BPMNShape_subprocess1\">\n        <omgdc:Bounds height=\"291.0\" width=\"481.0\" x=\"620.0\" y=\"168.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"680.0\" y=\"298.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"760.0\" y=\"288.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"910.0\" y=\"298.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask3\" id=\"BPMNShape_usertask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1146.0\" y=\"286.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1296.0\" y=\"296.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"355.0\" y=\"307.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"400.0\" y=\"307.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"715.0\" y=\"315.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"760.0\" y=\"315.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"865.0\" y=\"315.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"910.0\" y=\"315.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"505.0\" y=\"307.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"620.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"1101.0\" y=\"313.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1146.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n        <omgdi:waypoint x=\"1251.0\" y=\"313.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1296.0\" y=\"313.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n部署流程后并启动流程，我们先来看第一个场景，从子流程回退到主流程，也就是如下图：\n\n![image-20220405134411503](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134411503.png)\n\nTask进入到了子流程的Task处\n\n![image-20220405134811970](C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220405134811970.png)\n\n\n\n然后我们来处理回退到主流程:直接跳转即可\n\n```java\n    /**\n     * 回退操作\n     *   从子流程回退到主流程操作\n     */\n    @Test\n    void rollbackMainTask(){\n\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"2501\")\n                .moveActivityIdTo(\"usertask2\",\"usertask1\")\n                .changeState();\n    }\n\n}\n\n    /**\n     * 回退操作\n     *   从子流程回退到主流程操作：moveExecutionToActivityId不关心当前的节点\n     */\n    @Test\n    void rollbackMainTask(){\n\n        // 回退操作\n        runtimeService.createChangeActivityStateBuilder()\n                .processInstanceId(\"2501\")\n                .moveExecutionToActivityId(\"5003\",\"usertask1\")\n                .changeState();\n    }\n```\n\n然后从主流程回退到子流程操作\n\n![image-20220405140816409](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405140816409.png)\n\n![image-20220405141015720](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405141015720.png)\n\n\n\n同样的直接跳转即可\n\n```java\n/**\n * 回退操作\n */\n@Test\nvoid rollbackSubTask(){\n\n    // 回退操作\n    runtimeService.createChangeActivityStateBuilder()\n            .processInstanceId(\"2501\")\n            .moveActivityIdTo(\"usertask3\",\"usertask2\")\n            .changeState();\n}\n```\n\n","slug":"flowable进阶篇","published":1,"updated":"2022-11-05T14:16:59.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9erst000hdk8fdqj20ye1","content":"<h1 id=\"Flowable进阶篇\"><a href=\"#Flowable进阶篇\" class=\"headerlink\" title=\"Flowable进阶篇\"></a>Flowable进阶篇</h1><blockquote>\n<p>Lecture：波波老师</p>\n</blockquote>\n<h1 id=\"多人会签\"><a href=\"#多人会签\" class=\"headerlink\" title=\"多人会签\"></a>多人会签</h1><h2 id=\"流程图绘制\"><a href=\"#流程图绘制\" class=\"headerlink\" title=\"流程图绘制\"></a>流程图绘制</h2><p>多人会签是指一个任务需要多个人来处理，案例讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402092950976.png\"\n                      alt=\"image-20220402092950976\"\n                ></p>\n<p>完整的xml内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;User Task&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">activiti:taskListener</span> <span class=\"attr\">event</span>=<span class=\"string\">&quot;create&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;$&#123;mulitiInstanceTaskListener.completeListener(execution)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">activiti:taskListener</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">multiInstanceLoopCharacteristics</span> <span class=\"attr\">isSequential</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">activiti:collection</span>=<span class=\"string\">&quot;persons&quot;</span> <span class=\"attr\">activiti:elementVariable</span>=<span class=\"string\">&quot;person&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">loopCardinality</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">loopCardinality</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">completionCondition</span>&gt;</span>$&#123;mulitiInstanceCompleteTask.completeTask(execution)&#125;<span class=\"tag\">&lt;/<span class=\"name\">completionCondition</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;310.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;310.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;455.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程说明\"><a href=\"#流程说明\" class=\"headerlink\" title=\"流程说明\"></a>流程说明</h2><p>1.在用户任务节点绑定了一个监听器，监听<code>create</code>行为，该监听器我们是通过UEL表达式来实现的，<code>mulitiInstanceTaskListener</code>是我们注入到Spring容器中的对象</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402095348908.png\"\n                      alt=\"image-20220402095348908\"\n                ></p>\n<p>对应的监听的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceTaskListener&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeListener</span><span class=\"params\">(DelegateExecution execution)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务：&quot;</span>+execution.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;persons:&quot;</span> + execution.getVariable(<span class=\"string\">&quot;persons&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person&quot;</span> + execution.getVariable(<span class=\"string\">&quot;person&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在Multi instance中的配置</p>\n<ul>\n<li>Loop cardinality:设置为3表示只循环3次，也就是三个人会签</li>\n<li>Collection：表示要循环的集合，我们给的是persons，后面需要在流程变量中赋值</li>\n<li>Element variable：表示循环的变量</li>\n<li>Completion condition：表示任务结束的条件，也就是多人会签的结束条件，在此处我们用的是UEL表达式，<code>mulitiInstanceCompleteTask</code>表示的是我们注入到Spring容器中的对象</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220402100649924.png\"\n                      alt=\"image-20220402100649924\"\n                ></p>\n<p><code>mulitiInstanceCompleteTask</code>对象的完整代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceCompleteTask&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceCompleteTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务是需要触发的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> execution</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     *     false 表示会签任务还没有结束</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">     *     true 表示会签任务结束了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">completeTask</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot;当前获取的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfActiveInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot; - &quot;</span> + <span class=\"string\">&quot;已经完成的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfCompletedInstances&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//有一个人同意就通过</span></span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (Boolean) execution.getVariable(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前意见：&quot;</span>+flag);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的三个变量是Flowable中自带的可用变量</p>\n<ol>\n<li><p>nrOfInstances:该会签环节中总共有多少个实例</p>\n</li>\n<li><p>nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。</p>\n</li>\n<li><p>nrOfCompletedInstances:已经完成的实例的数量</p>\n</li>\n</ol>\n<h2 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h2><h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;会签案例.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;会签案例&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(“张三”,”李四”,”王五”,”赵六”)，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104240267.png\"\n                      alt=\"image-20220402104240267\"\n                ></p>\n<p>同时控制也有对应的输出，触发了Task的创建事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104319944.png\"\n                      alt=\"image-20220402104319944\"\n                ></p>\n<h3 id=\"会签处理任务\"><a href=\"#会签处理任务\" class=\"headerlink\" title=\"会签处理任务\"></a>会签处理任务</h3><p>启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;71337501-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104554823.png\"\n                      alt=\"image-20220402104554823\"\n                ></p>\n<p>当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104729627.png\"\n                      alt=\"image-20220402104729627\"\n                ></p>\n<p>同时Task表中的记录还有两条</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104819239.png\"\n                      alt=\"image-20220402104819239\"\n                ></p>\n<p>然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">true</span>); <span class=\"comment\">// 设置为true 结束多人会签</span></span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;713570d4-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105058601.png\"\n                      alt=\"image-20220402105058601\"\n                ></p>\n<p>同时来看看表结构中的记录，发现没有了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105148471.png\"\n                      alt=\"image-20220402105148471\"\n                ></p>\n<p>搞定~</p>\n<h1 id=\"动态表单\"><a href=\"#动态表单\" class=\"headerlink\" title=\"动态表单\"></a>动态表单</h1><p>Flowable提供了一种简便灵活的方式，用来为业务流程中的人工步骤添加表单。 有两种使用表单的方法：使用（由表单设计器创建的）表单定义的内置表单渲染，以及外部表单渲染。 使用外部表单渲染时，可以使用（自Explorer web应用V5版本支持的）表单参数；也可以使用表单key定义，引用外部的、使用自定义代码解析的表单。</p>\n<h2 id=\"流程绘制\"><a href=\"#流程绘制\" class=\"headerlink\" title=\"流程绘制\"></a>流程绘制</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133804306.png\"\n                      alt=\"image-20220403133804306\"\n                ></p>\n<p>表单设计</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133735195.png\"\n                      alt=\"image-20220403133735195\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133710713.png\"\n                      alt=\"image-20220403133710713\"\n                ></p>\n<h2 id=\"案例演示-1\"><a href=\"#案例演示-1\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h2><h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>流程图绘制好之后我们就可以直接来部署这个流程了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;动态表单01.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;动态表单01&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看流程关联的表单信息\"><a href=\"#查看流程关联的表单信息\" class=\"headerlink\" title=\"查看流程关联的表单信息\"></a>查看流程关联的表单信息</h3><p>我们部署了一个流程后，如果不清楚之前关联了什么表单，表单中有哪些字段，属性是什么？这时我们可以通过定义的流程查询出对应的form表单信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getStartFromData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">departemntId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;4da14de4-b313-11ec-882d-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService</span><br><span class=\"line\">            .createProcessDefinitionQuery()</span><br><span class=\"line\">            .deploymentId(departemntId)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> processEngine.getFormService()</span><br><span class=\"line\">            .getStartFormData(processDefinition.getId());</span><br><span class=\"line\">    List&lt;FormProperty&gt; formProperties = startFormData.getFormProperties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormProperty formProperty : formProperties) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> formProperty.getId();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> formProperty.getName();</span><br><span class=\"line\">        <span class=\"type\">FormType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> formProperty.getType();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;type.getClass() = &quot;</span> + type.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程-1\"><a href=\"#启动流程-1\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>启动流程的方式有两种，一种是正常的通过RuntimeService来启动，还有一种就是通过FormService来启动，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220403&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;想休息下&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:5:4dd61987-b313-11ec-882d-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过FormService来启动一个表单流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">            .deploymentId(<span class=\"string\">&quot;4da14de4-b313-11ec-882d-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220406&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> processEngine.getFormService().submitStartFormData(processDefinition.getId(), map);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"保存表单数据\"><a href=\"#保存表单数据\" class=\"headerlink\" title=\"保存表单数据\"></a>保存表单数据</h3><p>在Task执行之前我们也可以保存表单数据到Task对应的Form表单中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">saveFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220407&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩11&quot;</span>);</span><br><span class=\"line\">    processEngine.getFormService().saveFormData(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看任务表单数据\"><a href=\"#查看任务表单数据\" class=\"headerlink\" title=\"查看任务表单数据\"></a>查看任务表单数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据Task编号来查看表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">TaskFormData</span> <span class=\"variable\">taskFormData</span> <span class=\"operator\">=</span> processEngine.getFormService().getTaskFormData(taskId);</span><br><span class=\"line\">    List&lt;FormProperty&gt; formProperties = taskFormData.getFormProperties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormProperty formProperty : formProperties) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getId() = &quot;</span> + formProperty.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getName() = &quot;</span> + formProperty.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getValue() = &quot;</span> + formProperty.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formProperty.getId() = days</span><br><span class=\"line\">formProperty.getName() = 请假天数</span><br><span class=\"line\">formProperty.getValue() = 3</span><br><span class=\"line\">formProperty.getId() = reason</span><br><span class=\"line\">formProperty.getName() = 请假理由</span><br><span class=\"line\">formProperty.getValue() = 出去玩玩11</span><br><span class=\"line\">formProperty.getId() = startDate</span><br><span class=\"line\">formProperty.getName() = 开始日期</span><br><span class=\"line\">formProperty.getValue() = 20220407</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h3><p>现在就可以通过指派人或者任务编号来完成当前任务,当然这时我们还是可以修改form表单中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存表单数据并完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">submitTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220408&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    processEngine.getFormService().submitTaskFormData(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看完成的Task的表单数据\"><a href=\"#查看完成的Task的表单数据\" class=\"headerlink\" title=\"查看完成的Task的表单数据\"></a>查看完成的Task的表单数据</h3><p>一个Task完成后，如果我们想要查看之前的表单的历史数据可以通过如下的方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看已经完成的Task的表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getHisTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    List&lt;HistoricDetail&gt; list = processEngine.getHistoryService()</span><br><span class=\"line\">            .createHistoricDetailQuery()</span><br><span class=\"line\">            .taskId(taskId)</span><br><span class=\"line\">            .formProperties()</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HistoricDetail historicDetail : list) &#123;</span><br><span class=\"line\">        <span class=\"type\">HistoricFormPropertyEntityImpl</span> <span class=\"variable\">his</span> <span class=\"operator\">=</span> (HistoricFormPropertyEntityImpl) historicDetail;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;his.getPropertyId() = &quot;</span> + his.getPropertyId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;his.getPropertyValue() = &quot;</span> + his.getPropertyValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"外置表单\"><a href=\"#外置表单\" class=\"headerlink\" title=\"外置表单\"></a>外置表单</h2><p>我们会发现在上面的例子中通过内置的表单，我们需要在每个节点都设置一份表单数据，不是很灵活，这时我们可以单独创建一份表单，然后在对应的节点做应用就可以了。</p>\n<h3 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h3><p>表单定义文件是以.form为后缀， 内容格式为Json格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;form1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假流程&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;startTime&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;开始时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;days&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假天数&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;reason&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假原因&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：上面文件中的key是唯一标识，我们在表单处理的时候是根据这个key来获取的哦，</p>\n<h3 id=\"然后创建流程文件\"><a href=\"#然后创建流程文件\" class=\"headerlink\" title=\"然后创建流程文件\"></a>然后创建流程文件</h3><p>流程文件还是以我们上面的案例来演示，主要是对表单这块做了调整</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231037718.png\"\n                      alt=\"image-20220403231037718\"\n                ></p>\n<p>form表单通过引用来关联</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231121921.png\"\n                      alt=\"image-20220403231121921\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span> <span class=\"attr\">activiti:formKey</span>=<span class=\"string\">&quot;form1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户申请&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">activiti:formKey</span>=<span class=\"string\">&quot;form1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;总监审批&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;days&gt;3&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;部门经理审批&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;wangwu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;days&lt;=3&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;300.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;280.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;140.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;370.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;880.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;257.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;335.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;485.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;318.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;755.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;899.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;257.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署流程-2\"><a href=\"#部署流程-2\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>接下来我们先部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;动态表单02.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;动态表单02&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署表单\"><a href=\"#部署表单\" class=\"headerlink\" title=\"部署表单\"></a>部署表单</h3><p>这个步骤很重要，我们需要单独把我们的form文件部署到流程中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> FormRepositoryService formRepositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署form表单</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployForm</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">FormDeployment</span> <span class=\"variable\">formDeployment</span> <span class=\"operator\">=</span> formRepositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;holiday.form&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">            .parentDeploymentId(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;formDeployment.getId() = &quot;</span> + formDeployment.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们需要通过FormRepositoryService来部署我们的form表单。对应的会在这几种表中生成对应的数据</p>\n<p>Form部署表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231443464.png\"\n                      alt=\"image-20220403231443464\"\n                ></p>\n<p>Form定义表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231556049.png\"\n                      alt=\"image-20220403231556049\"\n                ></p>\n<p>Form资源表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231624905.png\"\n                      alt=\"image-20220403231624905\"\n                ></p>\n<h3 id=\"启动任务\"><a href=\"#启动任务\" class=\"headerlink\" title=\"启动任务\"></a>启动任务</h3><p>带有外置Form表单的流程我们需要通过<code>runtimeService.startProcessInstanceWithForm</code>来启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例，并且设置对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startTime&quot;</span>,<span class=\"string\">&quot;20220404&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceWithForm(</span><br><span class=\"line\">            <span class=\"string\">&quot;myProcess:1:4&quot;</span></span><br><span class=\"line\">            , <span class=\"literal\">null</span></span><br><span class=\"line\">            , map</span><br><span class=\"line\">            , <span class=\"string\">&quot;请假流程&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> processInstance.getId();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231811784.png\"\n                      alt=\"image-20220403231811784\"\n                ></p>\n<h3 id=\"查看任务表单数据-1\"><a href=\"#查看任务表单数据-1\" class=\"headerlink\" title=\"查看任务表单数据\"></a>查看任务表单数据</h3><p>在任务处理之前我们可以查看表单的对应信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 查看流程定义表单数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">               .processDefinitionId(<span class=\"string\">&quot;myProcess:1:4&quot;</span>)</span><br><span class=\"line\">               .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">               .singleResult();</span><br><span class=\"line\">       <span class=\"comment\">// FormInfo 表单的元数据信息</span></span><br><span class=\"line\">       <span class=\"type\">FormInfo</span> <span class=\"variable\">formInfo</span> <span class=\"operator\">=</span> runtimeService.getStartFormModel(<span class=\"string\">&quot;myProcess:1:4&quot;</span>, <span class=\"string\">&quot;5001&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getId() = &quot;</span> + formInfo.getId());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getName() = &quot;</span> + formInfo.getName());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getKey() = &quot;</span> + formInfo.getKey());</span><br><span class=\"line\">       <span class=\"comment\">// FormModel 表单中的具体信息 具体实现是 SimpleFormModel</span></span><br><span class=\"line\">       <span class=\"type\">SimpleFormModel</span> <span class=\"variable\">formModel</span> <span class=\"operator\">=</span> (SimpleFormModel) formInfo.getFormModel();</span><br><span class=\"line\">       List&lt;FormField&gt; fields = formModel.getFields();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (FormField field : fields) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getId() = &quot;</span> + field.getId());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getName() = &quot;</span> + field.getName());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getValue() = &quot;</span> + field.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formModel = &quot;</span> + formModel);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查看具体的Task的表单数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">FormInfo</span> <span class=\"variable\">formInfo</span> <span class=\"operator\">=</span> taskService.getTaskFormModel(<span class=\"string\">&quot;17505&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getId() = &quot;</span> + formInfo.getId());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getName() = &quot;</span> + formInfo.getName());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getKey() = &quot;</span> + formInfo.getKey());</span><br><span class=\"line\">       <span class=\"type\">SimpleFormModel</span> <span class=\"variable\">formModel</span> <span class=\"operator\">=</span> (SimpleFormModel) formInfo.getFormModel();</span><br><span class=\"line\">       List&lt;FormField&gt; fields = formModel.getFields();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (FormField field : fields) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getId() = &quot;</span> + field.getId());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getName() = &quot;</span> + field.getName());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getValue() = &quot;</span> + field.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"完成任务-1\"><a href=\"#完成任务-1\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h3><p>在外置表单的场景中我们需要通过<code>taskService.completeTaskWithForm</code>来完成表单的任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTaskForm</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startTime&quot;</span>,<span class=\"string\">&quot;20220404&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;5010&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">formDefinitionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2503&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">outcome</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;波哥&quot;</span>;</span><br><span class=\"line\">    taskService.completeTaskWithForm(taskId,formDefinitionId,outcome,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后任务就流转到了下一个节点来处理了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403233308221.png\"\n                      alt=\"image-20220403233308221\"\n                ></p>\n<p>搞定~！</p>\n<h1 id=\"任务的回退\"><a href=\"#任务的回退\" class=\"headerlink\" title=\"任务的回退\"></a>任务的回退</h1><h2 id=\"串行的回退\"><a href=\"#串行的回退\" class=\"headerlink\" title=\"串行的回退\"></a>串行的回退</h2><p>我们先从最简单的串行流程来分析，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404221942030.png\"\n                      alt=\"image-20220404221942030\"\n                ></p>\n<p>完整的xml文件内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务2&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务3&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务4&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;470.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;770.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1070.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;425.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;470.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;575.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;725.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;770.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;875.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1025.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1070.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是<code>user1</code>,<code>user2</code>,<code>user3</code>,<code>user4</code>.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;任务回退01.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;任务回退01&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们启动一个流程实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:4&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404222436788.png\"\n                      alt=\"image-20220404222436788\"\n                ></p>\n<p>然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;myProcess:1:4&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;user1&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的多个Task完成操作，现在已经到了user4来处理的节点了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223234982.png\"\n                      alt=\"image-20220404223234982\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223253043.png\"\n                      alt=\"image-20220404223253043\"\n                ></p>\n<p>我们先看下从<code>用户任务4</code>回退到<code>用户任务3</code>的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask3&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作后我们可以在对应的历史表中看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404224948722.png\"\n                      alt=\"image-20220404224948722\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225319024.png\"\n                      alt=\"image-20220404225319024\"\n                ></p>\n<p>然后我们通过user3来完成任务继续到user4处理，然后我们可以测试回退到user1处。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225345357.png\"\n                      alt=\"image-20220404225345357\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225532864.png\"\n                      alt=\"image-20220404225532864\"\n                ></p>\n<p>可以看到任务又回到了user1处。也就是在串行的流程中，我们可以回退到任意的用户节点，当然这个串行也包括多人会签和排他网关节点。当然在回退的时候我们还可以使用<code>moveActivityIdTo(String currentActivityId,String newActivityId)</code>这个方法来处理。</p>\n<h2 id=\"并行的回退\"><a href=\"#并行的回退\" class=\"headerlink\" title=\"并行的回退\"></a>并行的回退</h2><p>接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111325145.png\"\n                      alt=\"image-20220405111325145\"\n                ></p>\n<p>详细的xml文件内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户审批01&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;业务负责人&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;行政副总&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;业务副总&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;总经理&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;370.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;180.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;370.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;180.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1140.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1375.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;405.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;555.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;318.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;338.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;845.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1035.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1159.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;845.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;337.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1180.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1330.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1375.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>先部署流程，然后启动并运行到并行流程的节点如下的位置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111459624.png\"\n                      alt=\"image-20220405111459624\"\n                ></p>\n<p>然后我们可以尝试从<code>业务副总</code>处回退到<code>用户审批01</code>处，看看该处理应该要如何实现。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111926713.png\"\n                      alt=\"image-20220405111926713\"\n                ></p>\n<p>回退逻辑代码的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> *   业务副总驳回到到用户审批处  那么行政审批的也应该要返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>); <span class=\"comment\">// 行政副总</span></span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask3&quot;</span>); <span class=\"comment\">// 业务副总</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>; <span class=\"comment\">// 用户审批01</span></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;22501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看ACT_RU_TASK可以看到回到了<code>用户审批01</code>了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112329439.png\"\n                      alt=\"image-20220405112329439\"\n                ></p>\n<p>同时在ACT_HI_ACTINS中也可以看到回退的历史操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112544706.png\"\n                      alt=\"image-20220405112544706\"\n                ></p>\n<p>然后再来看看 行政副总的 并行分支执行完成了，然后在 业务副总处审批要驳回的处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113125822.png\"\n                      alt=\"image-20220405113125822\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113212465.png\"\n                      alt=\"image-20220405113212465\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>); <span class=\"comment\">// 行政副总</span></span><br><span class=\"line\">    <span class=\"comment\">//currentActivityIds.add(&quot;usertask3&quot;); // 业务副总</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>; <span class=\"comment\">// 用户审批01</span></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;22501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一样的效果</p>\n<h2 id=\"子流程回退\"><a href=\"#子流程回退\" class=\"headerlink\" title=\"子流程回退\"></a>子流程回退</h2><p>最后我们来看看带有子流程的场景下如果有回退的情况应该要如何来处理,案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134220482.png\"\n                      alt=\"image-20220405134220482\"\n                ></p>\n<p>完整的xml内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Sub Process&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主任务2&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;280.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;291.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;481.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;168.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;680.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;760.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;288.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;910.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1146.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;286.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1296.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;296.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;355.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;715.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;760.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;865.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;910.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;505.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1101.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1146.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1251.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1296.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署流程后并启动流程，我们先来看第一个场景，从子流程回退到主流程，也就是如下图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134411503.png\"\n                      alt=\"image-20220405134411503\"\n                ></p>\n<p>Task进入到了子流程的Task处</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220405134811970.png\"\n                      alt=\"image-20220405134811970\"\n                ></p>\n<p>然后我们来处理回退到主流程:直接跳转即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\">     *   从子流程回退到主流程操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackMainTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">        runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">                .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .moveActivityIdTo(<span class=\"string\">&quot;usertask2&quot;</span>,<span class=\"string\">&quot;usertask1&quot;</span>)</span><br><span class=\"line\">                .changeState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\">     *   从子流程回退到主流程操作：moveExecutionToActivityId不关心当前的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackMainTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">        runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">                .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .moveExecutionToActivityId(<span class=\"string\">&quot;5003&quot;</span>,<span class=\"string\">&quot;usertask1&quot;</span>)</span><br><span class=\"line\">                .changeState();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后从主流程回退到子流程操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405140816409.png\"\n                      alt=\"image-20220405140816409\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405141015720.png\"\n                      alt=\"image-20220405141015720\"\n                ></p>\n<p>同样的直接跳转即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackSubTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdTo(<span class=\"string\">&quot;usertask3&quot;</span>,<span class=\"string\">&quot;usertask2&quot;</span>)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Flowable进阶篇\"><a href=\"#Flowable进阶篇\" class=\"headerlink\" title=\"Flowable进阶篇\"></a>Flowable进阶篇</h1><blockquote>\n<p>Lecture：波波老师</p>\n</blockquote>\n<h1 id=\"多人会签\"><a href=\"#多人会签\" class=\"headerlink\" title=\"多人会签\"></a>多人会签</h1><h2 id=\"流程图绘制\"><a href=\"#流程图绘制\" class=\"headerlink\" title=\"流程图绘制\"></a>流程图绘制</h2><p>多人会签是指一个任务需要多个人来处理，案例讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402092950976.png\"\n                      alt=\"image-20220402092950976\"\n                ></p>\n<p>完整的xml内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;User Task&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">activiti:taskListener</span> <span class=\"attr\">event</span>=<span class=\"string\">&quot;create&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;$&#123;mulitiInstanceTaskListener.completeListener(execution)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">activiti:taskListener</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">multiInstanceLoopCharacteristics</span> <span class=\"attr\">isSequential</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">activiti:collection</span>=<span class=\"string\">&quot;persons&quot;</span> <span class=\"attr\">activiti:elementVariable</span>=<span class=\"string\">&quot;person&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">loopCardinality</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">loopCardinality</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">completionCondition</span>&gt;</span>$&#123;mulitiInstanceCompleteTask.completeTask(execution)&#125;<span class=\"tag\">&lt;/<span class=\"name\">completionCondition</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;310.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;310.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;455.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程说明\"><a href=\"#流程说明\" class=\"headerlink\" title=\"流程说明\"></a>流程说明</h2><p>1.在用户任务节点绑定了一个监听器，监听<code>create</code>行为，该监听器我们是通过UEL表达式来实现的，<code>mulitiInstanceTaskListener</code>是我们注入到Spring容器中的对象</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402095348908.png\"\n                      alt=\"image-20220402095348908\"\n                ></p>\n<p>对应的监听的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceTaskListener&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeListener</span><span class=\"params\">(DelegateExecution execution)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;任务：&quot;</span>+execution.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;persons:&quot;</span> + execution.getVariable(<span class=\"string\">&quot;persons&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person&quot;</span> + execution.getVariable(<span class=\"string\">&quot;person&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.在Multi instance中的配置</p>\n<ul>\n<li>Loop cardinality:设置为3表示只循环3次，也就是三个人会签</li>\n<li>Collection：表示要循环的集合，我们给的是persons，后面需要在流程变量中赋值</li>\n<li>Element variable：表示循环的变量</li>\n<li>Completion condition：表示任务结束的条件，也就是多人会签的结束条件，在此处我们用的是UEL表达式，<code>mulitiInstanceCompleteTask</code>表示的是我们注入到Spring容器中的对象</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220402100649924.png\"\n                      alt=\"image-20220402100649924\"\n                ></p>\n<p><code>mulitiInstanceCompleteTask</code>对象的完整代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;mulitiInstanceCompleteTask&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MulitiInstanceCompleteTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务是需要触发的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> execution</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     *     false 表示会签任务还没有结束</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">     *     true 表示会签任务结束了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">completeTask</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot;当前获取的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfActiveInstances&quot;</span>)</span><br><span class=\"line\">                + <span class=\"string\">&quot; - &quot;</span> + <span class=\"string\">&quot;已经完成的会签任务数量：&quot;</span> + execution.getVariable(<span class=\"string\">&quot;nrOfCompletedInstances&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//有一个人同意就通过</span></span><br><span class=\"line\">        <span class=\"type\">Boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (Boolean) execution.getVariable(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前意见：&quot;</span>+flag);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的三个变量是Flowable中自带的可用变量</p>\n<ol>\n<li><p>nrOfInstances:该会签环节中总共有多少个实例</p>\n</li>\n<li><p>nrOfActiveInstances:当前活动的实例的数量，即还没有完成的实例数量。</p>\n</li>\n<li><p>nrOfCompletedInstances:已经完成的实例的数量</p>\n</li>\n</ol>\n<h2 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h2><h3 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;会签案例.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;会签案例&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>在启动流程实例的时候，我们需要设置相关的参数，在流程定义的时候设置的persons在此处我们就需要设置了，设置为Arrays.asList(“张三”,”李四”,”王五”,”赵六”)，这里设置了4个元素，在流程定义里定义了3个，表示只会循环3次，启动流程后，在Task中可以看到只有3个任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置多人会签的数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;persons&quot;</span>, Arrays.asList(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:ba1518fc-b22d-11ec-9313-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104240267.png\"\n                      alt=\"image-20220402104240267\"\n                ></p>\n<p>同时控制也有对应的输出，触发了Task的创建事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104319944.png\"\n                      alt=\"image-20220402104319944\"\n                ></p>\n<h3 id=\"会签处理任务\"><a href=\"#会签处理任务\" class=\"headerlink\" title=\"会签处理任务\"></a>会签处理任务</h3><p>启动流程后我们发下在Task中产生了3条任务，我们先通过TaskService来完成其中一个任务，设置一个标志flag为false，来控制会签还没有结束，同时Task中另外两个任务还在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;71337501-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104554823.png\"\n                      alt=\"image-20220402104554823\"\n                ></p>\n<p>当任务执行完成时会同步触发会签完成表达式中对象方法。有如下的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104729627.png\"\n                      alt=\"image-20220402104729627\"\n                ></p>\n<p>同时Task表中的记录还有两条</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402104819239.png\"\n                      alt=\"image-20220402104819239\"\n                ></p>\n<p>然后当我们在完成一个任务，这时设置flag为true，会发现在这个多人处理中，最多3个人处理在第二个人处理后就结束了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"literal\">true</span>); <span class=\"comment\">// 设置为true 结束多人会签</span></span><br><span class=\"line\">    taskService.complete(<span class=\"string\">&quot;713570d4-b22e-11ec-a534-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;complete ....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105058601.png\"\n                      alt=\"image-20220402105058601\"\n                ></p>\n<p>同时来看看表结构中的记录，发现没有了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220402105148471.png\"\n                      alt=\"image-20220402105148471\"\n                ></p>\n<p>搞定~</p>\n<h1 id=\"动态表单\"><a href=\"#动态表单\" class=\"headerlink\" title=\"动态表单\"></a>动态表单</h1><p>Flowable提供了一种简便灵活的方式，用来为业务流程中的人工步骤添加表单。 有两种使用表单的方法：使用（由表单设计器创建的）表单定义的内置表单渲染，以及外部表单渲染。 使用外部表单渲染时，可以使用（自Explorer web应用V5版本支持的）表单参数；也可以使用表单key定义，引用外部的、使用自定义代码解析的表单。</p>\n<h2 id=\"流程绘制\"><a href=\"#流程绘制\" class=\"headerlink\" title=\"流程绘制\"></a>流程绘制</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133804306.png\"\n                      alt=\"image-20220403133804306\"\n                ></p>\n<p>表单设计</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133735195.png\"\n                      alt=\"image-20220403133735195\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403133710713.png\"\n                      alt=\"image-20220403133710713\"\n                ></p>\n<h2 id=\"案例演示-1\"><a href=\"#案例演示-1\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h2><h3 id=\"部署流程-1\"><a href=\"#部署流程-1\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>流程图绘制好之后我们就可以直接来部署这个流程了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;动态表单01.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;动态表单01&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看流程关联的表单信息\"><a href=\"#查看流程关联的表单信息\" class=\"headerlink\" title=\"查看流程关联的表单信息\"></a>查看流程关联的表单信息</h3><p>我们部署了一个流程后，如果不清楚之前关联了什么表单，表单中有哪些字段，属性是什么？这时我们可以通过定义的流程查询出对应的form表单信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getStartFromData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">departemntId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;4da14de4-b313-11ec-882d-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService</span><br><span class=\"line\">            .createProcessDefinitionQuery()</span><br><span class=\"line\">            .deploymentId(departemntId)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"type\">StartFormData</span> <span class=\"variable\">startFormData</span> <span class=\"operator\">=</span> processEngine.getFormService()</span><br><span class=\"line\">            .getStartFormData(processDefinition.getId());</span><br><span class=\"line\">    List&lt;FormProperty&gt; formProperties = startFormData.getFormProperties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormProperty formProperty : formProperties) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> formProperty.getId();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> formProperty.getName();</span><br><span class=\"line\">        <span class=\"type\">FormType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> formProperty.getType();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;name = &quot;</span> + name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;type.getClass() = &quot;</span> + type.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"启动流程-1\"><a href=\"#启动流程-1\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h3><p>启动流程的方式有两种，一种是正常的通过RuntimeService来启动，还有一种就是通过FormService来启动，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正常的启动流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220403&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;想休息下&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:5:4dd61987-b313-11ec-882d-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过FormService来启动一个表单流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFormFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessDefinition</span> <span class=\"variable\">processDefinition</span> <span class=\"operator\">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class=\"line\">            .deploymentId(<span class=\"string\">&quot;4da14de4-b313-11ec-882d-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220406&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> processEngine.getFormService().submitStartFormData(processDefinition.getId(), map);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"保存表单数据\"><a href=\"#保存表单数据\" class=\"headerlink\" title=\"保存表单数据\"></a>保存表单数据</h3><p>在Task执行之前我们也可以保存表单数据到Task对应的Form表单中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">saveFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220407&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩11&quot;</span>);</span><br><span class=\"line\">    processEngine.getFormService().saveFormData(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看任务表单数据\"><a href=\"#查看任务表单数据\" class=\"headerlink\" title=\"查看任务表单数据\"></a>查看任务表单数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据Task编号来查看表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">TaskFormData</span> <span class=\"variable\">taskFormData</span> <span class=\"operator\">=</span> processEngine.getFormService().getTaskFormData(taskId);</span><br><span class=\"line\">    List&lt;FormProperty&gt; formProperties = taskFormData.getFormProperties();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (FormProperty formProperty : formProperties) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getId() = &quot;</span> + formProperty.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getName() = &quot;</span> + formProperty.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;formProperty.getValue() = &quot;</span> + formProperty.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formProperty.getId() = days</span><br><span class=\"line\">formProperty.getName() = 请假天数</span><br><span class=\"line\">formProperty.getValue() = 3</span><br><span class=\"line\">formProperty.getId() = reason</span><br><span class=\"line\">formProperty.getName() = 请假理由</span><br><span class=\"line\">formProperty.getValue() = 出去玩玩11</span><br><span class=\"line\">formProperty.getId() = startDate</span><br><span class=\"line\">formProperty.getName() = 开始日期</span><br><span class=\"line\">formProperty.getValue() = 20220407</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"完成任务\"><a href=\"#完成任务\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h3><p>现在就可以通过指派人或者任务编号来完成当前任务,当然这时我们还是可以修改form表单中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存表单数据并完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">submitTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startDate&quot;</span>,<span class=\"string\">&quot;20220408&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    processEngine.getFormService().submitTaskFormData(taskId,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看完成的Task的表单数据\"><a href=\"#查看完成的Task的表单数据\" class=\"headerlink\" title=\"查看完成的Task的表单数据\"></a>查看完成的Task的表单数据</h3><p>一个Task完成后，如果我们想要查看之前的表单的历史数据可以通过如下的方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看已经完成的Task的表单数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getHisTaskFormData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;80efeb32-b313-11ec-a7ff-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    List&lt;HistoricDetail&gt; list = processEngine.getHistoryService()</span><br><span class=\"line\">            .createHistoricDetailQuery()</span><br><span class=\"line\">            .taskId(taskId)</span><br><span class=\"line\">            .formProperties()</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HistoricDetail historicDetail : list) &#123;</span><br><span class=\"line\">        <span class=\"type\">HistoricFormPropertyEntityImpl</span> <span class=\"variable\">his</span> <span class=\"operator\">=</span> (HistoricFormPropertyEntityImpl) historicDetail;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;his.getPropertyId() = &quot;</span> + his.getPropertyId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;his.getPropertyValue() = &quot;</span> + his.getPropertyValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"外置表单\"><a href=\"#外置表单\" class=\"headerlink\" title=\"外置表单\"></a>外置表单</h2><p>我们会发现在上面的例子中通过内置的表单，我们需要在每个节点都设置一份表单数据，不是很灵活，这时我们可以单独创建一份表单，然后在对应的节点做应用就可以了。</p>\n<h3 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h3><p>表单定义文件是以.form为后缀， 内容格式为Json格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;form1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假流程&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;startTime&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;开始时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;days&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假天数&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;reason&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;请假原因&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;text&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;placeholder&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：上面文件中的key是唯一标识，我们在表单处理的时候是根据这个key来获取的哦，</p>\n<h3 id=\"然后创建流程文件\"><a href=\"#然后创建流程文件\" class=\"headerlink\" title=\"然后创建流程文件\"></a>然后创建流程文件</h3><p>流程文件还是以我们上面的案例来演示，主要是对表单这块做了调整</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231037718.png\"\n                      alt=\"image-20220403231037718\"\n                ></p>\n<p>form表单通过引用来关联</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231121921.png\"\n                      alt=\"image-20220403231121921\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span> <span class=\"attr\">activiti:formKey</span>=<span class=\"string\">&quot;form1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户申请&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">activiti:formKey</span>=<span class=\"string\">&quot;form1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;总监审批&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;days&gt;3&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;部门经理审批&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;wangwu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;days&lt;=3&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;300.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;280.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;140.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;370.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;880.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;257.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;335.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;485.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;318.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;550.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;755.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;899.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;167.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;257.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;900.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署流程-2\"><a href=\"#部署流程-2\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h3><p>接下来我们先部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;动态表单02.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;动态表单02&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署表单\"><a href=\"#部署表单\" class=\"headerlink\" title=\"部署表单\"></a>部署表单</h3><p>这个步骤很重要，我们需要单独把我们的form文件部署到流程中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> FormRepositoryService formRepositoryService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署form表单</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deployForm</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">FormDeployment</span> <span class=\"variable\">formDeployment</span> <span class=\"operator\">=</span> formRepositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;holiday.form&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">            .parentDeploymentId(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;formDeployment.getId() = &quot;</span> + formDeployment.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们需要通过FormRepositoryService来部署我们的form表单。对应的会在这几种表中生成对应的数据</p>\n<p>Form部署表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231443464.png\"\n                      alt=\"image-20220403231443464\"\n                ></p>\n<p>Form定义表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231556049.png\"\n                      alt=\"image-20220403231556049\"\n                ></p>\n<p>Form资源表：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231624905.png\"\n                      alt=\"image-20220403231624905\"\n                ></p>\n<h3 id=\"启动任务\"><a href=\"#启动任务\" class=\"headerlink\" title=\"启动任务\"></a>启动任务</h3><p>带有外置Form表单的流程我们需要通过<code>runtimeService.startProcessInstanceWithForm</code>来启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例，并且设置对应的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startTime&quot;</span>,<span class=\"string\">&quot;20220404&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService.startProcessInstanceWithForm(</span><br><span class=\"line\">            <span class=\"string\">&quot;myProcess:1:4&quot;</span></span><br><span class=\"line\">            , <span class=\"literal\">null</span></span><br><span class=\"line\">            , map</span><br><span class=\"line\">            , <span class=\"string\">&quot;请假流程&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> processInstance.getId();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403231811784.png\"\n                      alt=\"image-20220403231811784\"\n                ></p>\n<h3 id=\"查看任务表单数据-1\"><a href=\"#查看任务表单数据-1\" class=\"headerlink\" title=\"查看任务表单数据\"></a>查看任务表单数据</h3><p>在任务处理之前我们可以查看表单的对应信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 查看流程定义表单数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskFormData1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">               .processDefinitionId(<span class=\"string\">&quot;myProcess:1:4&quot;</span>)</span><br><span class=\"line\">               .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">               .singleResult();</span><br><span class=\"line\">       <span class=\"comment\">// FormInfo 表单的元数据信息</span></span><br><span class=\"line\">       <span class=\"type\">FormInfo</span> <span class=\"variable\">formInfo</span> <span class=\"operator\">=</span> runtimeService.getStartFormModel(<span class=\"string\">&quot;myProcess:1:4&quot;</span>, <span class=\"string\">&quot;5001&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getId() = &quot;</span> + formInfo.getId());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getName() = &quot;</span> + formInfo.getName());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getKey() = &quot;</span> + formInfo.getKey());</span><br><span class=\"line\">       <span class=\"comment\">// FormModel 表单中的具体信息 具体实现是 SimpleFormModel</span></span><br><span class=\"line\">       <span class=\"type\">SimpleFormModel</span> <span class=\"variable\">formModel</span> <span class=\"operator\">=</span> (SimpleFormModel) formInfo.getFormModel();</span><br><span class=\"line\">       List&lt;FormField&gt; fields = formModel.getFields();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (FormField field : fields) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getId() = &quot;</span> + field.getId());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getName() = &quot;</span> + field.getName());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getValue() = &quot;</span> + field.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formModel = &quot;</span> + formModel);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查看具体的Task的表单数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> <span class=\"title function_\">getTaskData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">FormInfo</span> <span class=\"variable\">formInfo</span> <span class=\"operator\">=</span> taskService.getTaskFormModel(<span class=\"string\">&quot;17505&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getId() = &quot;</span> + formInfo.getId());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getName() = &quot;</span> + formInfo.getName());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;formInfo.getKey() = &quot;</span> + formInfo.getKey());</span><br><span class=\"line\">       <span class=\"type\">SimpleFormModel</span> <span class=\"variable\">formModel</span> <span class=\"operator\">=</span> (SimpleFormModel) formInfo.getFormModel();</span><br><span class=\"line\">       List&lt;FormField&gt; fields = formModel.getFields();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (FormField field : fields) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getId() = &quot;</span> + field.getId());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getName() = &quot;</span> + field.getName());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;field.getValue() = &quot;</span> + field.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"完成任务-1\"><a href=\"#完成任务-1\" class=\"headerlink\" title=\"完成任务\"></a>完成任务</h3><p>在外置表单的场景中我们需要通过<code>taskService.completeTaskWithForm</code>来完成表单的任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTaskForm</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;days&quot;</span>,<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;startTime&quot;</span>,<span class=\"string\">&quot;20220404&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reason&quot;</span>,<span class=\"string\">&quot;出去玩玩&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">taskId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;5010&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">formDefinitionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2503&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">outcome</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;波哥&quot;</span>;</span><br><span class=\"line\">    taskService.completeTaskWithForm(taskId,formDefinitionId,outcome,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后任务就流转到了下一个节点来处理了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220403233308221.png\"\n                      alt=\"image-20220403233308221\"\n                ></p>\n<p>搞定~！</p>\n<h1 id=\"任务的回退\"><a href=\"#任务的回退\" class=\"headerlink\" title=\"任务的回退\"></a>任务的回退</h1><h2 id=\"串行的回退\"><a href=\"#串行的回退\" class=\"headerlink\" title=\"串行的回退\"></a>串行的回退</h2><p>我们先从最简单的串行流程来分析，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404221942030.png\"\n                      alt=\"image-20220404221942030\"\n                ></p>\n<p>完整的xml文件内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务2&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务3&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务4&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;470.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;770.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1070.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;425.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;470.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;575.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;725.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;770.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;875.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;920.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1025.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1070.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的流程就是一个非常简单的串行任务，定义了4个用户任务，指派的处理人分别是<code>user1</code>,<code>user2</code>,<code>user3</code>,<code>user4</code>.在流程的执行过程中我们可以通过回退来演示具体的效果。首先来部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;任务回退01.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;任务回退01&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们启动一个流程实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:4&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;processInstance.getId() = &quot;</span> + processInstance.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404222436788.png\"\n                      alt=\"image-20220404222436788\"\n                ></p>\n<p>然后我们通过user1完成任务，直到user3完成任务，到user4来处理任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;myProcess:1:4&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;user1&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的多个Task完成操作，现在已经到了user4来处理的节点了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223234982.png\"\n                      alt=\"image-20220404223234982\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404223253043.png\"\n                      alt=\"image-20220404223253043\"\n                ></p>\n<p>我们先看下从<code>用户任务4</code>回退到<code>用户任务3</code>的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask3&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作后我们可以在对应的历史表中看到相关的信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404224948722.png\"\n                      alt=\"image-20220404224948722\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225319024.png\"\n                      alt=\"image-20220404225319024\"\n                ></p>\n<p>然后我们通过user3来完成任务继续到user4处理，然后我们可以测试回退到user1处。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225345357.png\"\n                      alt=\"image-20220404225345357\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220404225532864.png\"\n                      alt=\"image-20220404225532864\"\n                ></p>\n<p>可以看到任务又回到了user1处。也就是在串行的流程中，我们可以回退到任意的用户节点，当然这个串行也包括多人会签和排他网关节点。当然在回退的时候我们还可以使用<code>moveActivityIdTo(String currentActivityId,String newActivityId)</code>这个方法来处理。</p>\n<h2 id=\"并行的回退\"><a href=\"#并行的回退\" class=\"headerlink\" title=\"并行的回退\"></a>并行的回退</h2><p>接下来我们在并行的场景中来看看各种回退的场景。具体案例流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111325145.png\"\n                      alt=\"image-20220405111325145\"\n                ></p>\n<p>详细的xml文件内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户审批01&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;业务负责人&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;行政副总&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;业务副总&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Exclusive Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;总经理&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;370.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;180.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;370.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;180.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1140.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1375.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;405.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;555.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;318.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;338.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;845.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1035.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1159.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;297.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;845.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;337.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1180.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1330.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1375.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;317.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>先部署流程，然后启动并运行到并行流程的节点如下的位置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111459624.png\"\n                      alt=\"image-20220405111459624\"\n                ></p>\n<p>然后我们可以尝试从<code>业务副总</code>处回退到<code>用户审批01</code>处，看看该处理应该要如何实现。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405111926713.png\"\n                      alt=\"image-20220405111926713\"\n                ></p>\n<p>回退逻辑代码的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> *   业务副总驳回到到用户审批处  那么行政审批的也应该要返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>); <span class=\"comment\">// 行政副总</span></span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask3&quot;</span>); <span class=\"comment\">// 业务副总</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>; <span class=\"comment\">// 用户审批01</span></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;22501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看ACT_RU_TASK可以看到回到了<code>用户审批01</code>了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112329439.png\"\n                      alt=\"image-20220405112329439\"\n                ></p>\n<p>同时在ACT_HI_ACTINS中也可以看到回退的历史操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405112544706.png\"\n                      alt=\"image-20220405112544706\"\n                ></p>\n<p>然后再来看看 行政副总的 并行分支执行完成了，然后在 业务副总处审批要驳回的处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113125822.png\"\n                      alt=\"image-20220405113125822\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405113212465.png\"\n                      alt=\"image-20220405113212465\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的Task对应的用户任务的Id</span></span><br><span class=\"line\">    List&lt;String&gt; currentActivityIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    currentActivityIds.add(<span class=\"string\">&quot;usertask4&quot;</span>); <span class=\"comment\">// 行政副总</span></span><br><span class=\"line\">    <span class=\"comment\">//currentActivityIds.add(&quot;usertask3&quot;); // 业务副总</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要回退的目标节点的用户任务Id</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">newActivityId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;usertask1&quot;</span>; <span class=\"comment\">// 用户审批01</span></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;22501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdsToSingleActivityId(currentActivityIds,newActivityId)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一样的效果</p>\n<h2 id=\"子流程回退\"><a href=\"#子流程回退\" class=\"headerlink\" title=\"子流程回退\"></a>子流程回退</h2><p>最后我们来看看带有子流程的场景下如果有回退的情况应该要如何来处理,案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134220482.png\"\n                      alt=\"image-20220405134220482\"\n                ></p>\n<p>完整的xml内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Sub Process&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子任务1&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主任务2&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;user3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;290.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;280.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;291.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;481.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;168.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;680.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;760.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;288.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;910.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;298.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1146.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;286.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1296.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;296.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;355.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;715.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;760.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;865.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;910.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;505.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;307.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;620.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1101.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1146.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1251.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1296.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;313.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署流程后并启动流程，我们先来看第一个场景，从子流程回退到主流程，也就是如下图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405134411503.png\"\n                      alt=\"image-20220405134411503\"\n                ></p>\n<p>Task进入到了子流程的Task处</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\dpb\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220405134811970.png\"\n                      alt=\"image-20220405134811970\"\n                ></p>\n<p>然后我们来处理回退到主流程:直接跳转即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\">     *   从子流程回退到主流程操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackMainTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">        runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">                .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .moveActivityIdTo(<span class=\"string\">&quot;usertask2&quot;</span>,<span class=\"string\">&quot;usertask1&quot;</span>)</span><br><span class=\"line\">                .changeState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\">     *   从子流程回退到主流程操作：moveExecutionToActivityId不关心当前的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">rollbackMainTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">        runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">                .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">                .moveExecutionToActivityId(<span class=\"string\">&quot;5003&quot;</span>,<span class=\"string\">&quot;usertask1&quot;</span>)</span><br><span class=\"line\">                .changeState();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后从主流程回退到子流程操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405140816409.png\"\n                      alt=\"image-20220405140816409\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220405141015720.png\"\n                      alt=\"image-20220405141015720\"\n                ></p>\n<p>同样的直接跳转即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 回退操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">rollbackSubTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回退操作</span></span><br><span class=\"line\">    runtimeService.createChangeActivityStateBuilder()</span><br><span class=\"line\">            .processInstanceId(<span class=\"string\">&quot;2501&quot;</span>)</span><br><span class=\"line\">            .moveActivityIdTo(<span class=\"string\">&quot;usertask3&quot;</span>,<span class=\"string\">&quot;usertask2&quot;</span>)</span><br><span class=\"line\">            .changeState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"iot边缘计算","date":"2022-10-01T11:25:51.000Z","_content":"## 稳定可靠的通信技术\n\n### 有线通信技术\n\n优点：稳定性高，可靠性强\n\n缺点：受限于传输媒介\n\n以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网\n\nRS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1\n\nRS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn\n\nM-Bus：户用仪表总线，远程抄表，低成本组网\n\nPLC：电力线通信，表表->工业网关 \n\n### 无线通信技术\n\n2G,3G,4G：蜂窝移动通信\n\nBluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控\n\nWi-Fi：连接到无线局域网，速度快\n\nZigBee：低功耗局域网协议\t物体遮挡衰减厉害  \n\nZ-Wave：用于住宅。30-100m\t网络简单，速率较低\n\n### lpwa低功耗广域网\n\nSigFox：低功耗，ISM射频频段\n\nNB-lot：窄频网络，可部署在蜂窝网络 \n\nLoRa：开源MAC层协议\n\n![image-20220923194944959](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png)\n\n![image-20220923195011645](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png)\n\n## OceanConnect\n\n![image-20220923195209078](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png)\n\n统一接口，方便拓展\n\n### MQTT和HTTP\n\n消息队列遥测传输：Message Queuing Telemetry Transport\n\nIBM开发的基于TCP/IP的即时通讯协议\n\n采用订阅发布的模式，长连接方式\n\n优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低\n\n智慧家庭\n\nCoAP：Constrained Application Protocol\n\n专用于资源受限设备的通信，NB-lot/LoRa\n\n从http发展而来，采用请求响应\n\n最小4字节\n\n### 对比\n\n![image-20220923195746901](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png)\n\n物联网平台层次\n\n![image-20220923195812117](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png)\n\n接入无关，可靠性，安全性，弹性伸缩，能力开放\n\n![image-20220923200007426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png)\n\n设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap/HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理\n\n鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权\n\n规则引擎：规则绑定，满足条件，自动执行动作\n\nPortal：SP，OSS，Operation\n\n### 平台架构\n\n![image-20220923201228365](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png)\n\nIoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发\n\nDM Server：设备管理服务器，物联网管理和升级\n\nRule Engine：规则引擎，用户设定规则满足业务需求\n\nMongoDB：用户信息数据库\n\nCIG：云网关\n\n南向的终端设备可以通过CIG的协议适配连接平台\n\n平台通过API Server接入北向的iot应用服务器\n\n业务流程：\n\n![image-20220923201805426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png)\n\n### NB-iot\n\n是一项基于窄带的通信技术\n\nHSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息\n\nEPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关\n\n应用层：web界面","source":"_posts/2022/10/iot.md","raw":"---\ntitle: iot边缘计算\ndate: 2022-10-01 19:25:51\ntags: [边缘计算]\ncategories: [笔记]\n---\n## 稳定可靠的通信技术\n\n### 有线通信技术\n\n优点：稳定性高，可靠性强\n\n缺点：受限于传输媒介\n\n以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网\n\nRS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1\n\nRS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn\n\nM-Bus：户用仪表总线，远程抄表，低成本组网\n\nPLC：电力线通信，表表->工业网关 \n\n### 无线通信技术\n\n2G,3G,4G：蜂窝移动通信\n\nBluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控\n\nWi-Fi：连接到无线局域网，速度快\n\nZigBee：低功耗局域网协议\t物体遮挡衰减厉害  \n\nZ-Wave：用于住宅。30-100m\t网络简单，速率较低\n\n### lpwa低功耗广域网\n\nSigFox：低功耗，ISM射频频段\n\nNB-lot：窄频网络，可部署在蜂窝网络 \n\nLoRa：开源MAC层协议\n\n![image-20220923194944959](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png)\n\n![image-20220923195011645](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png)\n\n## OceanConnect\n\n![image-20220923195209078](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png)\n\n统一接口，方便拓展\n\n### MQTT和HTTP\n\n消息队列遥测传输：Message Queuing Telemetry Transport\n\nIBM开发的基于TCP/IP的即时通讯协议\n\n采用订阅发布的模式，长连接方式\n\n优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低\n\n智慧家庭\n\nCoAP：Constrained Application Protocol\n\n专用于资源受限设备的通信，NB-lot/LoRa\n\n从http发展而来，采用请求响应\n\n最小4字节\n\n### 对比\n\n![image-20220923195746901](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png)\n\n物联网平台层次\n\n![image-20220923195812117](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png)\n\n接入无关，可靠性，安全性，弹性伸缩，能力开放\n\n![image-20220923200007426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png)\n\n设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap/HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理\n\n鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权\n\n规则引擎：规则绑定，满足条件，自动执行动作\n\nPortal：SP，OSS，Operation\n\n### 平台架构\n\n![image-20220923201228365](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png)\n\nIoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发\n\nDM Server：设备管理服务器，物联网管理和升级\n\nRule Engine：规则引擎，用户设定规则满足业务需求\n\nMongoDB：用户信息数据库\n\nCIG：云网关\n\n南向的终端设备可以通过CIG的协议适配连接平台\n\n平台通过API Server接入北向的iot应用服务器\n\n业务流程：\n\n![image-20220923201805426](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png)\n\n### NB-iot\n\n是一项基于窄带的通信技术\n\nHSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息\n\nEPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关\n\n应用层：web界面","slug":"iot","published":1,"updated":"2022-09-29T16:07:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersu000ldk8fcsat0gd2","content":"<h2 id=\"稳定可靠的通信技术\"><a href=\"#稳定可靠的通信技术\" class=\"headerlink\" title=\"稳定可靠的通信技术\"></a>稳定可靠的通信技术</h2><h3 id=\"有线通信技术\"><a href=\"#有线通信技术\" class=\"headerlink\" title=\"有线通信技术\"></a>有线通信技术</h3><p>优点：稳定性高，可靠性强</p>\n<p>缺点：受限于传输媒介</p>\n<p>以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网</p>\n<p>RS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1</p>\n<p>RS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn</p>\n<p>M-Bus：户用仪表总线，远程抄表，低成本组网</p>\n<p>PLC：电力线通信，表表-&gt;工业网关 </p>\n<h3 id=\"无线通信技术\"><a href=\"#无线通信技术\" class=\"headerlink\" title=\"无线通信技术\"></a>无线通信技术</h3><p>2G,3G,4G：蜂窝移动通信</p>\n<p>Bluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控</p>\n<p>Wi-Fi：连接到无线局域网，速度快</p>\n<p>ZigBee：低功耗局域网协议\t物体遮挡衰减厉害  </p>\n<p>Z-Wave：用于住宅。30-100m\t网络简单，速率较低</p>\n<h3 id=\"lpwa低功耗广域网\"><a href=\"#lpwa低功耗广域网\" class=\"headerlink\" title=\"lpwa低功耗广域网\"></a>lpwa低功耗广域网</h3><p>SigFox：低功耗，ISM射频频段</p>\n<p>NB-lot：窄频网络，可部署在蜂窝网络 </p>\n<p>LoRa：开源MAC层协议</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png\"\n                      alt=\"image-20220923194944959\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png\"\n                      alt=\"image-20220923195011645\"\n                ></p>\n<h2 id=\"OceanConnect\"><a href=\"#OceanConnect\" class=\"headerlink\" title=\"OceanConnect\"></a>OceanConnect</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png\"\n                      alt=\"image-20220923195209078\"\n                ></p>\n<p>统一接口，方便拓展</p>\n<h3 id=\"MQTT和HTTP\"><a href=\"#MQTT和HTTP\" class=\"headerlink\" title=\"MQTT和HTTP\"></a>MQTT和HTTP</h3><p>消息队列遥测传输：Message Queuing Telemetry Transport</p>\n<p>IBM开发的基于TCP&#x2F;IP的即时通讯协议</p>\n<p>采用订阅发布的模式，长连接方式</p>\n<p>优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低</p>\n<p>智慧家庭</p>\n<p>CoAP：Constrained Application Protocol</p>\n<p>专用于资源受限设备的通信，NB-lot&#x2F;LoRa</p>\n<p>从http发展而来，采用请求响应</p>\n<p>最小4字节</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png\"\n                      alt=\"image-20220923195746901\"\n                ></p>\n<p>物联网平台层次</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png\"\n                      alt=\"image-20220923195812117\"\n                ></p>\n<p>接入无关，可靠性，安全性，弹性伸缩，能力开放</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png\"\n                      alt=\"image-20220923200007426\"\n                ></p>\n<p>设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap&#x2F;HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理</p>\n<p>鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权</p>\n<p>规则引擎：规则绑定，满足条件，自动执行动作</p>\n<p>Portal：SP，OSS，Operation</p>\n<h3 id=\"平台架构\"><a href=\"#平台架构\" class=\"headerlink\" title=\"平台架构\"></a>平台架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png\"\n                      alt=\"image-20220923201228365\"\n                ></p>\n<p>IoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发</p>\n<p>DM Server：设备管理服务器，物联网管理和升级</p>\n<p>Rule Engine：规则引擎，用户设定规则满足业务需求</p>\n<p>MongoDB：用户信息数据库</p>\n<p>CIG：云网关</p>\n<p>南向的终端设备可以通过CIG的协议适配连接平台</p>\n<p>平台通过API Server接入北向的iot应用服务器</p>\n<p>业务流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png\"\n                      alt=\"image-20220923201805426\"\n                ></p>\n<h3 id=\"NB-iot\"><a href=\"#NB-iot\" class=\"headerlink\" title=\"NB-iot\"></a>NB-iot</h3><p>是一项基于窄带的通信技术</p>\n<p>HSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息</p>\n<p>EPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关</p>\n<p>应用层：web界面</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h2 id=\"稳定可靠的通信技术\"><a href=\"#稳定可靠的通信技术\" class=\"headerlink\" title=\"稳定可靠的通信技术\"></a>稳定可靠的通信技术</h2><h3 id=\"有线通信技术\"><a href=\"#有线通信技术\" class=\"headerlink\" title=\"有线通信技术\"></a>有线通信技术</h3><p>优点：稳定性高，可靠性强</p>\n<p>缺点：受限于传输媒介</p>\n<p>以太网:最通用的通信协议标准，标准以太网，快速以太网，10G以太网</p>\n<p>RS—232：个人计算机DB9 or DB25\t不平衡传输方式，单边通信\t传输距离不超过20m\t1V1</p>\n<p>RS-485：可以实现联网\t平衡传输，差分传输方式\t几百到上千\t1Vn</p>\n<p>M-Bus：户用仪表总线，远程抄表，低成本组网</p>\n<p>PLC：电力线通信，表表-&gt;工业网关 </p>\n<h3 id=\"无线通信技术\"><a href=\"#无线通信技术\" class=\"headerlink\" title=\"无线通信技术\"></a>无线通信技术</h3><p>2G,3G,4G：蜂窝移动通信</p>\n<p>Bluetooth:2.4-2.48GH波段的无线电波，速率1Mbps，10cm-10m，速率快、低功耗、安全性高，节点少不利于多点布控</p>\n<p>Wi-Fi：连接到无线局域网，速度快</p>\n<p>ZigBee：低功耗局域网协议\t物体遮挡衰减厉害  </p>\n<p>Z-Wave：用于住宅。30-100m\t网络简单，速率较低</p>\n<h3 id=\"lpwa低功耗广域网\"><a href=\"#lpwa低功耗广域网\" class=\"headerlink\" title=\"lpwa低功耗广域网\"></a>lpwa低功耗广域网</h3><p>SigFox：低功耗，ISM射频频段</p>\n<p>NB-lot：窄频网络，可部署在蜂窝网络 </p>\n<p>LoRa：开源MAC层协议</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923194944959.png\"\n                      alt=\"image-20220923194944959\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195011645.png\"\n                      alt=\"image-20220923195011645\"\n                ></p>\n<h2 id=\"OceanConnect\"><a href=\"#OceanConnect\" class=\"headerlink\" title=\"OceanConnect\"></a>OceanConnect</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195209078.png\"\n                      alt=\"image-20220923195209078\"\n                ></p>\n<p>统一接口，方便拓展</p>\n<h3 id=\"MQTT和HTTP\"><a href=\"#MQTT和HTTP\" class=\"headerlink\" title=\"MQTT和HTTP\"></a>MQTT和HTTP</h3><p>消息队列遥测传输：Message Queuing Telemetry Transport</p>\n<p>IBM开发的基于TCP&#x2F;IP的即时通讯协议</p>\n<p>采用订阅发布的模式，长连接方式</p>\n<p>优点：协议简单，轻量级，消息可以短至两字节，对终端的硬件配置要求低</p>\n<p>智慧家庭</p>\n<p>CoAP：Constrained Application Protocol</p>\n<p>专用于资源受限设备的通信，NB-lot&#x2F;LoRa</p>\n<p>从http发展而来，采用请求响应</p>\n<p>最小4字节</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195746901.png\"\n                      alt=\"image-20220923195746901\"\n                ></p>\n<p>物联网平台层次</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923195812117.png\"\n                      alt=\"image-20220923195812117\"\n                ></p>\n<p>接入无关，可靠性，安全性，弹性伸缩，能力开放</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923200007426.png\"\n                      alt=\"image-20220923200007426\"\n                ></p>\n<p>设备管理：网关管理，REST和HTTPS下发各类配置管理命令，DM Server通过Coap&#x2F;HTTPS将命令传给网关或者其他直连设备，完成设备的配置管理</p>\n<p>鉴权：创建传感器鉴权，设备接入鉴权，上报数据鉴权</p>\n<p>规则引擎：规则绑定，满足条件，自动执行动作</p>\n<p>Portal：SP，OSS，Operation</p>\n<h3 id=\"平台架构\"><a href=\"#平台架构\" class=\"headerlink\" title=\"平台架构\"></a>平台架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201228365.png\"\n                      alt=\"image-20220923201228365\"\n                ></p>\n<p>IoCM：iot联接管理模块，是平台最重要的模块，支持联接状态管理和控制命令转发</p>\n<p>DM Server：设备管理服务器，物联网管理和升级</p>\n<p>Rule Engine：规则引擎，用户设定规则满足业务需求</p>\n<p>MongoDB：用户信息数据库</p>\n<p>CIG：云网关</p>\n<p>南向的终端设备可以通过CIG的协议适配连接平台</p>\n<p>平台通过API Server接入北向的iot应用服务器</p>\n<p>业务流程：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220923201805426.png\"\n                      alt=\"image-20220923201805426\"\n                ></p>\n<h3 id=\"NB-iot\"><a href=\"#NB-iot\" class=\"headerlink\" title=\"NB-iot\"></a>NB-iot</h3><p>是一项基于窄带的通信技术</p>\n<p>HSS归属用户服务器：存储用户信息的核心数据库，主要用来保存用户签约信息</p>\n<p>EPC核心网：HSS归属用户服务器，MME信令处理部分，PGW：PDN网关，SGW服务网关</p>\n<p>应用层：web界面</p>\n"},{"title":"Git使用","date":"2022-09-14T13:55:14.000Z","_content":"# Git使用\n**Git Bash**：Unix与Linux风格的命令行，使用最多，推荐最多\n**Git CMD**：Windows风格的命令行\n**Git GUI**：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令\n所有的配置文件，其实都保存在本地！\n查看配置 git config -l\n\n```\n#查看系统config\ngit config --system --list\n　　\n#查看当前用户（global）配置\ngit config --global  --lis\n```\n \n## 三个区域\nGit本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：\n![图片](https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png)\n**Workspace**：工作区，就是你平时存放项目代码的地方\n\n**Index / Stage**：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n\n**Repository**：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n\n**Remote**：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换","source":"_posts/2022/09/Git使用.md","raw":"---\ntitle: Git使用\ndate: 2022-09-14 21:55:14\ntags: [Github]\ncategories: [常用工具]\n---\n# Git使用\n**Git Bash**：Unix与Linux风格的命令行，使用最多，推荐最多\n**Git CMD**：Windows风格的命令行\n**Git GUI**：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令\n所有的配置文件，其实都保存在本地！\n查看配置 git config -l\n\n```\n#查看系统config\ngit config --system --list\n　　\n#查看当前用户（global）配置\ngit config --global  --lis\n```\n \n## 三个区域\nGit本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：\n![图片](https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png)\n**Workspace**：工作区，就是你平时存放项目代码的地方\n\n**Index / Stage**：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息\n\n**Repository**：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本\n\n**Remote**：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换","slug":"Git使用","published":1,"updated":"2022-09-29T15:28:35.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersv000odk8f5cjtg9rm","content":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br><strong>Git CMD</strong>：Windows风格的命令行<br><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看系统config</span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\">　　</span><br><span class=\"line\">#查看当前用户（global）配置</span><br><span class=\"line\">git config --global  --lis</span><br></pre></td></tr></table></figure>\n<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png\"\n                      alt=\"图片\"\n                ><br><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</p>\n<p><strong>Index &#x2F; Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p>\n<p><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>\n<p><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多<br><strong>Git CMD</strong>：Windows风格的命令行<br><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看系统config</span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\">　　</span><br><span class=\"line\">#查看当前用户（global）配置</span><br><span class=\"line\">git config --global  --lis</span><br></pre></td></tr></table></figure>\n<h2 id=\"三个区域\"><a href=\"#三个区域\" class=\"headerlink\" title=\"三个区域\"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/markdown/git/001.png\"\n                      alt=\"图片\"\n                ><br><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</p>\n<p><strong>Index &#x2F; Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p>\n<p><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>\n<p><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>\n"},{"title":"Lambda表达式","date":"2022-09-28T13:07:45.000Z","_content":"# Lambda表达式\n\n💛[原文地址](https://www.cnblogs.com/haixiang/p/11029639.html)，转载请注明出处!\n\n### Lambda简介\n\nLambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。\n\nJDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。\n\n### 对接口的要求\n\n虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。**Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法**\n\njdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。\n\n### @FunctionalInterface\n\n修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。\n\n### Lambda 基础语法\n\n我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。\n\n```java\n/**多参数无返回*/\n@FunctionalInterface\npublic interface NoReturnMultiParam {\n    void method(int a, int b);\n}\n\n/**无参无返回值*/\n@FunctionalInterface\npublic interface NoReturnNoParam {\n    void method();\n}\n\n/**一个参数无返回*/\n@FunctionalInterface\npublic interface NoReturnOneParam {\n    void method(int a);\n}\n\n/**多个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnMultiParam {\n    int method(int a, int b);\n}\n\n/*** 无参有返回*/\n@FunctionalInterface\npublic interface ReturnNoParam {\n    int method();\n}\n\n/**一个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnOneParam {\n    int method(int a);\n}\n```\n\n语法形式为 () -> {}，其中 () 用来描述参数列表，{} 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test1 {\n    public static void main(String[] args) {\n\n        //无参无返回\n        NoReturnNoParam noReturnNoParam = () -> {\n            System.out.println(\"NoReturnNoParam\");\n        };\n        noReturnNoParam.method();\n\n        //一个参数无返回\n        NoReturnOneParam noReturnOneParam = (int a) -> {\n            System.out.println(\"NoReturnOneParam param:\" + a);\n        };\n        noReturnOneParam.method(6);\n\n        //多个参数无返回\n        NoReturnMultiParam noReturnMultiParam = (int a, int b) -> {\n            System.out.println(\"NoReturnMultiParam param:\" + \"{\" + a +\",\" + + b +\"}\");\n        };\n        noReturnMultiParam.method(6, 8);\n\n        //无参有返回值\n        ReturnNoParam returnNoParam = () -> {\n            System.out.print(\"ReturnNoParam\");\n            return 1;\n        };\n\n        int res = returnNoParam.method();\n        System.out.println(\"return:\" + res);\n\n        //一个参数有返回值\n        ReturnOneParam returnOneParam = (int a) -> {\n            System.out.println(\"ReturnOneParam param:\" + a);\n            return 1;\n        };\n\n        int res2 = returnOneParam.method(6);\n        System.out.println(\"return:\" + res2);\n\n        //多个参数有返回值\n        ReturnMultiParam returnMultiParam = (int a, int b) -> {\n            System.out.println(\"ReturnMultiParam param:\" + \"{\" + a + \",\" + b +\"}\");\n            return 1;\n        };\n\n        int res3 = returnMultiParam.method(6, 8);\n        System.out.println(\"return:\" + res3);\n    }\n}\n```\n\n### Lambda 语法简化\n\n我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test2 {\n    public static void main(String[] args) {\n\n        //1.简化参数类型，可以不写参数类型，但是必须所有参数都不写\n        NoReturnMultiParam lamdba1 = (a, b) -> {\n            System.out.println(\"简化参数类型\");\n        };\n        lamdba1.method(1, 2);\n\n        //2.简化参数小括号，如果只有一个参数则可以省略参数小括号\n        NoReturnOneParam lambda2 = a -> {\n            System.out.println(\"简化参数小括号\");\n        };\n        lambda2.method(1);\n\n        //3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号\n        NoReturnNoParam lambda3 = () -> System.out.println(\"简化方法体大括号\");\n        lambda3.method();\n\n        //4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号\n        ReturnOneParam lambda4 = a -> a+3;\n        System.out.println(lambda4.method(5));\n\n        ReturnMultiParam lambda5 = (a, b) -> a+b;\n        System.out.println(lambda5.method(1, 1));\n    }\n}\n```\n\n### Lambda 表达式常用示例\n\n**lambda 表达式引用方法**\n\n有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。\n\n**语法**\n\n 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象\n\n```java\npublic class Exe1 {\n    public static void main(String[] args) {\n        ReturnOneParam lambda1 = a -> doubleNum(a);\n        System.out.println(lambda1.method(3));\n\n        //lambda2 引用了已经实现的 doubleNum 方法\n        ReturnOneParam lambda2 = Exe1::doubleNum;\n        System.out.println(lambda2.method(3));\n\n        Exe1 exe = new Exe1();\n\n        //lambda4 引用了已经实现的 addTwo 方法\n        ReturnOneParam lambda4 = exe::addTwo;\n        System.out.println(lambda4.method(2));\n    }\n\n    /**\n     * 要求\n     * 1.参数数量和类型要与接口中定义的一致\n     * 2.返回值类型要与接口中定义的一致\n     */\n    public static int doubleNum(int a) {\n        return a * 2;\n    }\n\n    public int addTwo(int a) {\n        return a + 2;\n    }\n}\n```\n\n**构造方法的引用**\n\n一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。\n\n```java\ninterface ItemCreatorBlankConstruct {\n    Item getItem();\n}\ninterface ItemCreatorParamContruct {\n    Item getItem(int id, String name, double price);\n}\n\npublic class Exe2 {\n    public static void main(String[] args) {\n        ItemCreatorBlankConstruct creator = () -> new Item();\n        Item item = creator.getItem();\n\n        ItemCreatorBlankConstruct creator2 = Item::new;\n        Item item2 = creator2.getItem();\n\n        ItemCreatorParamContruct creator3 = Item::new;\n        Item item3 = creator3.getItem(112, \"鼠标\", 135.99);\n    }\n}\n```\n\n**lambda 表达式创建线程**\n\n我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。\n\n```java\n  Thread t = new Thread(() -> {\n      for (int i = 0; i < 10; i++) {\n        System.out.println(2 + \":\" + i);\n      }\n    });\n  \tt.start();\n```\n\n**遍历集合**\n\n我们可以调用集合的 `public void forEach(Consumer<? super E> action)` 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。\n\n```java\n \t@FunctionalInterface\n    public interface Consumer<T> {\n        void accept(T t);\n        //....\n    }\n```\n\n```java\n\tArrayList<Integer> list = new ArrayList<>();\n    Collections.addAll(list, 1,2,3,4,5);\n    //lambda表达式 方法引用\n    list.forEach(System.out::println);\n\n    list.forEach(element -> {\n      if (element % 2 == 0) {\n        System.out.println(element);\n      }\n    });\n```\n\n**删除集合中的某个元素**\n\n我们通过`public boolean removeIf(Predicate<? super E> filter)`方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。\n\n```java\n\tArrayList<Item> items = new ArrayList<>();\n    items.add(new Item(11, \"小牙刷\", 12.05 ));\n    items.add(new Item(5, \"日本马桶盖\", 999.05 ));\n    items.add(new Item(7, \"格力空调\", 888.88 ));\n    items.add(new Item(17, \"肥皂\", 2.00 ));\n    items.add(new Item(9, \"冰箱\", 4200.00 ));\n\n    items.removeIf(ele -> ele.getId() == 7);\n\n    //通过 foreach 遍历，查看是否已经删除\n    items.forEach(System.out::println);\n```\n\n**集合内元素的排序**\n\n在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。\n\n```java\n    ArrayList<Item> list = new ArrayList<>();\n    list.add(new Item(13, \"背心\", 7.80));\n    list.add(new Item(11, \"半袖\", 37.80));\n    list.add(new Item(14, \"风衣\", 139.80));\n    list.add(new Item(12, \"秋裤\", 55.33));\n\n    /*\n            list.sort(new Comparator<Item>() {\n                @Override\n                public int compare(Item o1, Item o2) {\n                    return o1.getId()  - o2.getId();\n                }\n            });\n            */\n\n    list.sort((o1, o2) -> o1.getId() - o2.getId());\n\n    System.out.println(list);\n```\n\n### Lambda 表达式中的闭包问题\n\n这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。\n\n```java\nimport java.util.function.Consumer;\npublic class Main {\n    public static void main(String[] args) {\n\n        int num = 10;\n\n        Consumer<String> consumer = ele -> {\n            System.out.println(num);\n        };\n\n        //num = num + 2;\n        consumer.accept(\"hello\");\n    }\n}\n```\n\n","source":"_posts/2022/09/Lambda表达式.md","raw":"---\ntitle: Lambda表达式\ndate: 2022-09-28 21:07:45\ntags: [Lambda]  \ncategories: [JAVA,基础知识]\n---\n# Lambda表达式\n\n💛[原文地址](https://www.cnblogs.com/haixiang/p/11029639.html)，转载请注明出处!\n\n### Lambda简介\n\nLambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。\n\nJDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。\n\n### 对接口的要求\n\n虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。**Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法**\n\njdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。\n\n### @FunctionalInterface\n\n修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。\n\n### Lambda 基础语法\n\n我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。\n\n```java\n/**多参数无返回*/\n@FunctionalInterface\npublic interface NoReturnMultiParam {\n    void method(int a, int b);\n}\n\n/**无参无返回值*/\n@FunctionalInterface\npublic interface NoReturnNoParam {\n    void method();\n}\n\n/**一个参数无返回*/\n@FunctionalInterface\npublic interface NoReturnOneParam {\n    void method(int a);\n}\n\n/**多个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnMultiParam {\n    int method(int a, int b);\n}\n\n/*** 无参有返回*/\n@FunctionalInterface\npublic interface ReturnNoParam {\n    int method();\n}\n\n/**一个参数有返回值*/\n@FunctionalInterface\npublic interface ReturnOneParam {\n    int method(int a);\n}\n```\n\n语法形式为 () -> {}，其中 () 用来描述参数列表，{} 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test1 {\n    public static void main(String[] args) {\n\n        //无参无返回\n        NoReturnNoParam noReturnNoParam = () -> {\n            System.out.println(\"NoReturnNoParam\");\n        };\n        noReturnNoParam.method();\n\n        //一个参数无返回\n        NoReturnOneParam noReturnOneParam = (int a) -> {\n            System.out.println(\"NoReturnOneParam param:\" + a);\n        };\n        noReturnOneParam.method(6);\n\n        //多个参数无返回\n        NoReturnMultiParam noReturnMultiParam = (int a, int b) -> {\n            System.out.println(\"NoReturnMultiParam param:\" + \"{\" + a +\",\" + + b +\"}\");\n        };\n        noReturnMultiParam.method(6, 8);\n\n        //无参有返回值\n        ReturnNoParam returnNoParam = () -> {\n            System.out.print(\"ReturnNoParam\");\n            return 1;\n        };\n\n        int res = returnNoParam.method();\n        System.out.println(\"return:\" + res);\n\n        //一个参数有返回值\n        ReturnOneParam returnOneParam = (int a) -> {\n            System.out.println(\"ReturnOneParam param:\" + a);\n            return 1;\n        };\n\n        int res2 = returnOneParam.method(6);\n        System.out.println(\"return:\" + res2);\n\n        //多个参数有返回值\n        ReturnMultiParam returnMultiParam = (int a, int b) -> {\n            System.out.println(\"ReturnMultiParam param:\" + \"{\" + a + \",\" + b +\"}\");\n            return 1;\n        };\n\n        int res3 = returnMultiParam.method(6, 8);\n        System.out.println(\"return:\" + res3);\n    }\n}\n```\n\n### Lambda 语法简化\n\n我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。\n\n```java\nimport lambda.interfaces.*;\n\npublic class Test2 {\n    public static void main(String[] args) {\n\n        //1.简化参数类型，可以不写参数类型，但是必须所有参数都不写\n        NoReturnMultiParam lamdba1 = (a, b) -> {\n            System.out.println(\"简化参数类型\");\n        };\n        lamdba1.method(1, 2);\n\n        //2.简化参数小括号，如果只有一个参数则可以省略参数小括号\n        NoReturnOneParam lambda2 = a -> {\n            System.out.println(\"简化参数小括号\");\n        };\n        lambda2.method(1);\n\n        //3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号\n        NoReturnNoParam lambda3 = () -> System.out.println(\"简化方法体大括号\");\n        lambda3.method();\n\n        //4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号\n        ReturnOneParam lambda4 = a -> a+3;\n        System.out.println(lambda4.method(5));\n\n        ReturnMultiParam lambda5 = (a, b) -> a+b;\n        System.out.println(lambda5.method(1, 1));\n    }\n}\n```\n\n### Lambda 表达式常用示例\n\n**lambda 表达式引用方法**\n\n有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。\n\n**语法**\n\n 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象\n\n```java\npublic class Exe1 {\n    public static void main(String[] args) {\n        ReturnOneParam lambda1 = a -> doubleNum(a);\n        System.out.println(lambda1.method(3));\n\n        //lambda2 引用了已经实现的 doubleNum 方法\n        ReturnOneParam lambda2 = Exe1::doubleNum;\n        System.out.println(lambda2.method(3));\n\n        Exe1 exe = new Exe1();\n\n        //lambda4 引用了已经实现的 addTwo 方法\n        ReturnOneParam lambda4 = exe::addTwo;\n        System.out.println(lambda4.method(2));\n    }\n\n    /**\n     * 要求\n     * 1.参数数量和类型要与接口中定义的一致\n     * 2.返回值类型要与接口中定义的一致\n     */\n    public static int doubleNum(int a) {\n        return a * 2;\n    }\n\n    public int addTwo(int a) {\n        return a + 2;\n    }\n}\n```\n\n**构造方法的引用**\n\n一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。\n\n```java\ninterface ItemCreatorBlankConstruct {\n    Item getItem();\n}\ninterface ItemCreatorParamContruct {\n    Item getItem(int id, String name, double price);\n}\n\npublic class Exe2 {\n    public static void main(String[] args) {\n        ItemCreatorBlankConstruct creator = () -> new Item();\n        Item item = creator.getItem();\n\n        ItemCreatorBlankConstruct creator2 = Item::new;\n        Item item2 = creator2.getItem();\n\n        ItemCreatorParamContruct creator3 = Item::new;\n        Item item3 = creator3.getItem(112, \"鼠标\", 135.99);\n    }\n}\n```\n\n**lambda 表达式创建线程**\n\n我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。\n\n```java\n  Thread t = new Thread(() -> {\n      for (int i = 0; i < 10; i++) {\n        System.out.println(2 + \":\" + i);\n      }\n    });\n  \tt.start();\n```\n\n**遍历集合**\n\n我们可以调用集合的 `public void forEach(Consumer<? super E> action)` 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。\n\n```java\n \t@FunctionalInterface\n    public interface Consumer<T> {\n        void accept(T t);\n        //....\n    }\n```\n\n```java\n\tArrayList<Integer> list = new ArrayList<>();\n    Collections.addAll(list, 1,2,3,4,5);\n    //lambda表达式 方法引用\n    list.forEach(System.out::println);\n\n    list.forEach(element -> {\n      if (element % 2 == 0) {\n        System.out.println(element);\n      }\n    });\n```\n\n**删除集合中的某个元素**\n\n我们通过`public boolean removeIf(Predicate<? super E> filter)`方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。\n\n```java\n\tArrayList<Item> items = new ArrayList<>();\n    items.add(new Item(11, \"小牙刷\", 12.05 ));\n    items.add(new Item(5, \"日本马桶盖\", 999.05 ));\n    items.add(new Item(7, \"格力空调\", 888.88 ));\n    items.add(new Item(17, \"肥皂\", 2.00 ));\n    items.add(new Item(9, \"冰箱\", 4200.00 ));\n\n    items.removeIf(ele -> ele.getId() == 7);\n\n    //通过 foreach 遍历，查看是否已经删除\n    items.forEach(System.out::println);\n```\n\n**集合内元素的排序**\n\n在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。\n\n```java\n    ArrayList<Item> list = new ArrayList<>();\n    list.add(new Item(13, \"背心\", 7.80));\n    list.add(new Item(11, \"半袖\", 37.80));\n    list.add(new Item(14, \"风衣\", 139.80));\n    list.add(new Item(12, \"秋裤\", 55.33));\n\n    /*\n            list.sort(new Comparator<Item>() {\n                @Override\n                public int compare(Item o1, Item o2) {\n                    return o1.getId()  - o2.getId();\n                }\n            });\n            */\n\n    list.sort((o1, o2) -> o1.getId() - o2.getId());\n\n    System.out.println(list);\n```\n\n### Lambda 表达式中的闭包问题\n\n这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。\n\n```java\nimport java.util.function.Consumer;\npublic class Main {\n    public static void main(String[] args) {\n\n        int num = 10;\n\n        Consumer<String> consumer = ele -> {\n            System.out.println(num);\n        };\n\n        //num = num + 2;\n        consumer.accept(\"hello\");\n    }\n}\n```\n\n","slug":"Lambda表达式","published":1,"updated":"2022-09-29T15:28:35.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersx000sdk8f926cfes6","content":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>💛<a class=\"link\"   href=\"https://www.cnblogs.com/haixiang/p/11029639.html\" >原文地址<i class=\"fas fa-external-link-alt\"></i></a>，转载请注明出处!</p>\n<h3 id=\"Lambda简介\"><a href=\"#Lambda简介\" class=\"headerlink\" title=\"Lambda简介\"></a>Lambda简介</h3><p>Lambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>JDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。</p>\n<h3 id=\"对接口的要求\"><a href=\"#对接口的要求\" class=\"headerlink\" title=\"对接口的要求\"></a>对接口的要求</h3><p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。<strong>Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法</strong></p>\n<p>jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</p>\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p>\n<h3 id=\"Lambda-基础语法\"><a href=\"#Lambda-基础语法\" class=\"headerlink\" title=\"Lambda 基础语法\"></a>Lambda 基础语法</h3><p>我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**多参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**无参无返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** 无参有返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法形式为 () -&gt; {}，其中 () 用来描述参数列表，{} 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">noReturnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnNoParam&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnNoParam.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">noReturnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">noReturnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a +<span class=\"string\">&quot;,&quot;</span> + + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnNoParam</span> <span class=\"variable\">returnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;ReturnNoParam&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> returnNoParam.method();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">returnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res2</span> <span class=\"operator\">=</span> returnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">returnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a + <span class=\"string\">&quot;,&quot;</span> + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res3</span> <span class=\"operator\">=</span> returnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-语法简化\"><a href=\"#Lambda-语法简化\" class=\"headerlink\" title=\"Lambda 语法简化\"></a>Lambda 语法简化</h3><p>我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">lamdba1</span> <span class=\"operator\">=</span> (a, b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数类型&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lamdba1.method(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> a -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数小括号&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lambda2.method(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">lambda3</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;简化方法体大括号&quot;</span>);</span><br><span class=\"line\">        lambda3.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> a -&gt; a+<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">lambda5</span> <span class=\"operator\">=</span> (a, b) -&gt; a+b;</span><br><span class=\"line\">        System.out.println(lambda5.method(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式常用示例\"><a href=\"#Lambda-表达式常用示例\" class=\"headerlink\" title=\"Lambda 表达式常用示例\"></a>Lambda 表达式常用示例</h3><p><strong>lambda 表达式引用方法</strong></p>\n<p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p>\n<p><strong>语法</strong></p>\n<p> 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda1</span> <span class=\"operator\">=</span> a -&gt; doubleNum(a);</span><br><span class=\"line\">        System.out.println(lambda1.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> Exe1::doubleNum;</span><br><span class=\"line\">        System.out.println(lambda2.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Exe1</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exe1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> exe::addTwo;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 要求</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">doubleNum</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">addTwo</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构造方法的引用</strong></p>\n<p>一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorBlankConstruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorParamContruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">double</span> price)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator</span> <span class=\"operator\">=</span> () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>();</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> creator.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator2</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item2</span> <span class=\"operator\">=</span> creator2.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorParamContruct</span> <span class=\"variable\">creator3</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item3</span> <span class=\"operator\">=</span> creator3.getItem(<span class=\"number\">112</span>, <span class=\"string\">&quot;鼠标&quot;</span>, <span class=\"number\">135.99</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lambda 表达式创建线程</strong></p>\n<p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">2</span> + <span class=\"string\">&quot;:&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\tt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历集合</strong></p>\n<p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;T&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">      <span class=\"comment\">//....</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   Collections.addAll(list, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">   <span class=\"comment\">//lambda表达式 方法引用</span></span><br><span class=\"line\">   list.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   list.forEach(element -&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (element % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       System.out.println(element);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除集合中的某个元素</strong></p>\n<p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; items = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;小牙刷&quot;</span>, <span class=\"number\">12.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;日本马桶盖&quot;</span>, <span class=\"number\">999.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;格力空调&quot;</span>, <span class=\"number\">888.88</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">17</span>, <span class=\"string\">&quot;肥皂&quot;</span>, <span class=\"number\">2.00</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"number\">4200.00</span> ));</span><br><span class=\"line\"></span><br><span class=\"line\">   items.removeIf(ele -&gt; ele.getId() == <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class=\"line\">   items.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p><strong>集合内元素的排序</strong></p>\n<p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">13</span>, <span class=\"string\">&quot;背心&quot;</span>, <span class=\"number\">7.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;半袖&quot;</span>, <span class=\"number\">37.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">14</span>, <span class=\"string\">&quot;风衣&quot;</span>, <span class=\"number\">139.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">12</span>, <span class=\"string\">&quot;秋裤&quot;</span>, <span class=\"number\">55.33</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            @Override</span></span><br><span class=\"line\"><span class=\"comment\">            public int compare(Item o1, Item o2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return o1.getId()  - o2.getId();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式中的闭包问题\"><a href=\"#Lambda-表达式中的闭包问题\" class=\"headerlink\" title=\"Lambda 表达式中的闭包问题\"></a>Lambda 表达式中的闭包问题</h3><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//num = num + 2;</span></span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>💛<a class=\"link\"   href=\"https://www.cnblogs.com/haixiang/p/11029639.html\" >原文地址<i class=\"fas fa-external-link-alt\"></i></a>，转载请注明出处!</p>\n<h3 id=\"Lambda简介\"><a href=\"#Lambda简介\" class=\"headerlink\" title=\"Lambda简介\"></a>Lambda简介</h3><p>Lambda表达式时JDK8的一个新特性，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>JDK也提供了大量的内置函数式接口供我们使用，使得Lambda表达式的运用更加方便、高效。</p>\n<h3 id=\"对接口的要求\"><a href=\"#对接口的要求\" class=\"headerlink\" title=\"对接口的要求\"></a>对接口的要求</h3><p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。<strong>Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法</strong></p>\n<p>jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</p>\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>修饰函数式接口的，要求接口中的抽象方法只有一个。 这个注解往往会和 lambda 表达式一起出现。</p>\n<h3 id=\"Lambda-基础语法\"><a href=\"#Lambda-基础语法\" class=\"headerlink\" title=\"Lambda 基础语法\"></a>Lambda 基础语法</h3><p>我们这里给出六个接口，后文的全部操作都利用这六个接口来进行阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**多参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**无参无返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">NoReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnMultiParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** 无参有返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnNoParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ReturnOneParam</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法形式为 () -&gt; {}，其中 () 用来描述参数列表，{} 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">noReturnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnNoParam&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnNoParam.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">noReturnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数无返回</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">noReturnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a +<span class=\"string\">&quot;,&quot;</span> + + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnNoParam</span> <span class=\"variable\">returnNoParam</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;ReturnNoParam&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> returnNoParam.method();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">returnOneParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res2</span> <span class=\"operator\">=</span> returnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数有返回值</span></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">returnMultiParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a + <span class=\"string\">&quot;,&quot;</span> + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res3</span> <span class=\"operator\">=</span> returnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-语法简化\"><a href=\"#Lambda-语法简化\" class=\"headerlink\" title=\"Lambda 语法简化\"></a>Lambda 语法简化</h3><p>我们可以通过观察以下代码来完成代码的进一步简化，写出更加优雅的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lambda.interfaces.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnMultiParam</span> <span class=\"variable\">lamdba1</span> <span class=\"operator\">=</span> (a, b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数类型&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lamdba1.method(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> a -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数小括号&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lambda2.method(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">NoReturnNoParam</span> <span class=\"variable\">lambda3</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;简化方法体大括号&quot;</span>);</span><br><span class=\"line\">        lambda3.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> a -&gt; a+<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ReturnMultiParam</span> <span class=\"variable\">lambda5</span> <span class=\"operator\">=</span> (a, b) -&gt; a+b;</span><br><span class=\"line\">        System.out.println(lambda5.method(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式常用示例\"><a href=\"#Lambda-表达式常用示例\" class=\"headerlink\" title=\"Lambda 表达式常用示例\"></a>Lambda 表达式常用示例</h3><p><strong>lambda 表达式引用方法</strong></p>\n<p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p>\n<p><strong>语法</strong></p>\n<p> 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda1</span> <span class=\"operator\">=</span> a -&gt; doubleNum(a);</span><br><span class=\"line\">        System.out.println(lambda1.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda2</span> <span class=\"operator\">=</span> Exe1::doubleNum;</span><br><span class=\"line\">        System.out.println(lambda2.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Exe1</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exe1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class=\"line\">        <span class=\"type\">ReturnOneParam</span> <span class=\"variable\">lambda4</span> <span class=\"operator\">=</span> exe::addTwo;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 要求</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">doubleNum</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">addTwo</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>构造方法的引用</strong></p>\n<p>一般我们需要声明接口，该接口作为对象的生成器，通过 类名::new 的方式来实例化对象，然后调用方法返回对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorBlankConstruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ItemCreatorParamContruct</span> &#123;</span><br><span class=\"line\">    Item <span class=\"title function_\">getItem</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">double</span> price)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exe2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator</span> <span class=\"operator\">=</span> () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>();</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item</span> <span class=\"operator\">=</span> creator.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorBlankConstruct</span> <span class=\"variable\">creator2</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item2</span> <span class=\"operator\">=</span> creator2.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ItemCreatorParamContruct</span> <span class=\"variable\">creator3</span> <span class=\"operator\">=</span> Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Item</span> <span class=\"variable\">item3</span> <span class=\"operator\">=</span> creator3.getItem(<span class=\"number\">112</span>, <span class=\"string\">&quot;鼠标&quot;</span>, <span class=\"number\">135.99</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lambda 表达式创建线程</strong></p>\n<p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">2</span> + <span class=\"string\">&quot;:&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\tt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>遍历集合</strong></p>\n<p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Consumer</span>&lt;T&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">      <span class=\"comment\">//....</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   Collections.addAll(list, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">   <span class=\"comment\">//lambda表达式 方法引用</span></span><br><span class=\"line\">   list.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   list.forEach(element -&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (element % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       System.out.println(element);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除集合中的某个元素</strong></p>\n<p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; items = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;小牙刷&quot;</span>, <span class=\"number\">12.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;日本马桶盖&quot;</span>, <span class=\"number\">999.05</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;格力空调&quot;</span>, <span class=\"number\">888.88</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">17</span>, <span class=\"string\">&quot;肥皂&quot;</span>, <span class=\"number\">2.00</span> ));</span><br><span class=\"line\">   items.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">9</span>, <span class=\"string\">&quot;冰箱&quot;</span>, <span class=\"number\">4200.00</span> ));</span><br><span class=\"line\"></span><br><span class=\"line\">   items.removeIf(ele -&gt; ele.getId() == <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class=\"line\">   items.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p><strong>集合内元素的排序</strong></p>\n<p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Item&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">13</span>, <span class=\"string\">&quot;背心&quot;</span>, <span class=\"number\">7.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">11</span>, <span class=\"string\">&quot;半袖&quot;</span>, <span class=\"number\">37.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">14</span>, <span class=\"string\">&quot;风衣&quot;</span>, <span class=\"number\">139.80</span>));</span><br><span class=\"line\">list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"number\">12</span>, <span class=\"string\">&quot;秋裤&quot;</span>, <span class=\"number\">55.33</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            @Override</span></span><br><span class=\"line\"><span class=\"comment\">            public int compare(Item o1, Item o2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return o1.getId()  - o2.getId();</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(list);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lambda-表达式中的闭包问题\"><a href=\"#Lambda-表达式中的闭包问题\" class=\"headerlink\" title=\"Lambda 表达式中的闭包问题\"></a>Lambda 表达式中的闭包问题</h3><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//num = num + 2;</span></span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"ROS入门教程","date":"2022-09-28T13:40:14.000Z","_content":"# ROS入门学习\n\n## 一、Ubuntu环境搭建\n\n**建议版本**：Ubuntu18.04 or Ubuntu16.04\n\n**安装方法**：虚拟机安装、硬盘安装（推荐）\n\n![image-20220928213527604](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png)\n\n### 方法一：虚拟机安装Ubuntu\n\n**1.虚拟机安装**：https://blog.csdn.net/hao5119266/article/details/89198275/\n\n**2.Ubuntu镜像下载**，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本\n\n官方下载链接（不推荐）：https://ubuntu.com/download\n\n中科大元：http://mirrors.ustc.edu.cn/ubuntu-releases/\n\n阿里云源：https://mirrors.aliyun.com/ubuntu-releases/\n\n北理工源：https://mirror.bit.edu.cn/ubuntu-releases/\n\n3.Ubuntu安装：https://blog.csdn.net/woshinsy/article/details/124150654\n\n### 方法二：硬盘安装Ubuntu（双系统)\n\n谨慎操作，最好有自己安装系统的经验！\n\n教程如下：https://blog.csdn.net/weixin_43091381/article/details/108522223##\n\n## 二、Linux基本命令\n\n**常用指令**：https://blog.csdn.net/qq_46416934/article/details/123190966\n\n命令大全：https://www.runoob.com/linux/linux-command-manual.html\n\n## 三、ROS安装\n\n安装教程https://blog.csdn.net/my_id_kt/article/details/123753771\n\n**注意**：根据Ubuntu版本安装指定版本的ROS\n\n## 四、ROS基础学习\n\n推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：\n\nhttps://www.bilibili.com/video/BV1zt411G7Vn?p=1\n\n**CSDN教程**：\n\nhttps://blog.csdn.net/mbdong/article/details/109310874\n\nhttps://blog.csdn.net/u011832219/category_10500120.html","source":"_posts/2022/09/ROS入门教程.md","raw":"---\ntitle: ROS入门教程\ndate: 2022-09-28 21:40:14\ntags: [ROS]\ncategories: [笔记]\n---\n# ROS入门学习\n\n## 一、Ubuntu环境搭建\n\n**建议版本**：Ubuntu18.04 or Ubuntu16.04\n\n**安装方法**：虚拟机安装、硬盘安装（推荐）\n\n![image-20220928213527604](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png)\n\n### 方法一：虚拟机安装Ubuntu\n\n**1.虚拟机安装**：https://blog.csdn.net/hao5119266/article/details/89198275/\n\n**2.Ubuntu镜像下载**，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本\n\n官方下载链接（不推荐）：https://ubuntu.com/download\n\n中科大元：http://mirrors.ustc.edu.cn/ubuntu-releases/\n\n阿里云源：https://mirrors.aliyun.com/ubuntu-releases/\n\n北理工源：https://mirror.bit.edu.cn/ubuntu-releases/\n\n3.Ubuntu安装：https://blog.csdn.net/woshinsy/article/details/124150654\n\n### 方法二：硬盘安装Ubuntu（双系统)\n\n谨慎操作，最好有自己安装系统的经验！\n\n教程如下：https://blog.csdn.net/weixin_43091381/article/details/108522223##\n\n## 二、Linux基本命令\n\n**常用指令**：https://blog.csdn.net/qq_46416934/article/details/123190966\n\n命令大全：https://www.runoob.com/linux/linux-command-manual.html\n\n## 三、ROS安装\n\n安装教程https://blog.csdn.net/my_id_kt/article/details/123753771\n\n**注意**：根据Ubuntu版本安装指定版本的ROS\n\n## 四、ROS基础学习\n\n推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：\n\nhttps://www.bilibili.com/video/BV1zt411G7Vn?p=1\n\n**CSDN教程**：\n\nhttps://blog.csdn.net/mbdong/article/details/109310874\n\nhttps://blog.csdn.net/u011832219/category_10500120.html","slug":"ROS入门教程","published":1,"updated":"2022-09-29T15:28:35.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ersy000vdk8fdu39f5zg","content":"<h1 id=\"ROS入门学习\"><a href=\"#ROS入门学习\" class=\"headerlink\" title=\"ROS入门学习\"></a>ROS入门学习</h1><h2 id=\"一、Ubuntu环境搭建\"><a href=\"#一、Ubuntu环境搭建\" class=\"headerlink\" title=\"一、Ubuntu环境搭建\"></a>一、Ubuntu环境搭建</h2><p><strong>建议版本</strong>：Ubuntu18.04 or Ubuntu16.04</p>\n<p><strong>安装方法</strong>：虚拟机安装、硬盘安装（推荐）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png\"\n                      alt=\"image-20220928213527604\"\n                ></p>\n<h3 id=\"方法一：虚拟机安装Ubuntu\"><a href=\"#方法一：虚拟机安装Ubuntu\" class=\"headerlink\" title=\"方法一：虚拟机安装Ubuntu\"></a>方法一：虚拟机安装Ubuntu</h3><p><strong>1.虚拟机安装</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/hao5119266/article/details/89198275/\" >https://blog.csdn.net/hao5119266/article/details/89198275/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>2.Ubuntu镜像下载</strong>，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本</p>\n<p>官方下载链接（不推荐）：<a class=\"link\"   href=\"https://ubuntu.com/download\" >https://ubuntu.com/download<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中科大元：<a class=\"link\"   href=\"http://mirrors.ustc.edu.cn/ubuntu-releases/\" >http://mirrors.ustc.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>阿里云源：<a class=\"link\"   href=\"https://mirrors.aliyun.com/ubuntu-releases/\" >https://mirrors.aliyun.com/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>北理工源：<a class=\"link\"   href=\"https://mirror.bit.edu.cn/ubuntu-releases/\" >https://mirror.bit.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>3.Ubuntu安装：<a class=\"link\"   href=\"https://blog.csdn.net/woshinsy/article/details/124150654\" >https://blog.csdn.net/woshinsy/article/details/124150654<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"方法二：硬盘安装Ubuntu（双系统\"><a href=\"#方法二：硬盘安装Ubuntu（双系统\" class=\"headerlink\" title=\"方法二：硬盘安装Ubuntu（双系统)\"></a>方法二：硬盘安装Ubuntu（双系统)</h3><p>谨慎操作，最好有自己安装系统的经验！</p>\n<p>教程如下：<a class=\"link\"   href=\"https://blog.csdn.net/weixin_43091381/article/details/108522223##\" >https://blog.csdn.net/weixin_43091381/article/details/108522223##<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"二、Linux基本命令\"><a href=\"#二、Linux基本命令\" class=\"headerlink\" title=\"二、Linux基本命令\"></a>二、Linux基本命令</h2><p><strong>常用指令</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/qq_46416934/article/details/123190966\" >https://blog.csdn.net/qq_46416934/article/details/123190966<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>命令大全：<a class=\"link\"   href=\"https://www.runoob.com/linux/linux-command-manual.html\" >https://www.runoob.com/linux/linux-command-manual.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"三、ROS安装\"><a href=\"#三、ROS安装\" class=\"headerlink\" title=\"三、ROS安装\"></a>三、ROS安装</h2><p>安装教程<a class=\"link\"   href=\"https://blog.csdn.net/my_id_kt/article/details/123753771\" >https://blog.csdn.net/my_id_kt/article/details/123753771<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>注意</strong>：根据Ubuntu版本安装指定版本的ROS</p>\n<h2 id=\"四、ROS基础学习\"><a href=\"#四、ROS基础学习\" class=\"headerlink\" title=\"四、ROS基础学习\"></a>四、ROS基础学习</h2><p>推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：</p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1zt411G7Vn?p=1\" >https://www.bilibili.com/video/BV1zt411G7Vn?p=1<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>CSDN教程</strong>：</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/mbdong/article/details/109310874\" >https://blog.csdn.net/mbdong/article/details/109310874<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/u011832219/category_10500120.html\" >https://blog.csdn.net/u011832219/category_10500120.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"ROS入门学习\"><a href=\"#ROS入门学习\" class=\"headerlink\" title=\"ROS入门学习\"></a>ROS入门学习</h1><h2 id=\"一、Ubuntu环境搭建\"><a href=\"#一、Ubuntu环境搭建\" class=\"headerlink\" title=\"一、Ubuntu环境搭建\"></a>一、Ubuntu环境搭建</h2><p><strong>建议版本</strong>：Ubuntu18.04 or Ubuntu16.04</p>\n<p><strong>安装方法</strong>：虚拟机安装、硬盘安装（推荐）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20220928213527604.png\"\n                      alt=\"image-20220928213527604\"\n                ></p>\n<h3 id=\"方法一：虚拟机安装Ubuntu\"><a href=\"#方法一：虚拟机安装Ubuntu\" class=\"headerlink\" title=\"方法一：虚拟机安装Ubuntu\"></a>方法一：虚拟机安装Ubuntu</h3><p><strong>1.虚拟机安装</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/hao5119266/article/details/89198275/\" >https://blog.csdn.net/hao5119266/article/details/89198275/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>2.Ubuntu镜像下载</strong>，注意：镜像一般为2Gb左右后缀iso的文件，下载desktop版本</p>\n<p>官方下载链接（不推荐）：<a class=\"link\"   href=\"https://ubuntu.com/download\" >https://ubuntu.com/download<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>中科大元：<a class=\"link\"   href=\"http://mirrors.ustc.edu.cn/ubuntu-releases/\" >http://mirrors.ustc.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>阿里云源：<a class=\"link\"   href=\"https://mirrors.aliyun.com/ubuntu-releases/\" >https://mirrors.aliyun.com/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>北理工源：<a class=\"link\"   href=\"https://mirror.bit.edu.cn/ubuntu-releases/\" >https://mirror.bit.edu.cn/ubuntu-releases/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>3.Ubuntu安装：<a class=\"link\"   href=\"https://blog.csdn.net/woshinsy/article/details/124150654\" >https://blog.csdn.net/woshinsy/article/details/124150654<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"方法二：硬盘安装Ubuntu（双系统\"><a href=\"#方法二：硬盘安装Ubuntu（双系统\" class=\"headerlink\" title=\"方法二：硬盘安装Ubuntu（双系统)\"></a>方法二：硬盘安装Ubuntu（双系统)</h3><p>谨慎操作，最好有自己安装系统的经验！</p>\n<p>教程如下：<a class=\"link\"   href=\"https://blog.csdn.net/weixin_43091381/article/details/108522223##\" >https://blog.csdn.net/weixin_43091381/article/details/108522223##<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"二、Linux基本命令\"><a href=\"#二、Linux基本命令\" class=\"headerlink\" title=\"二、Linux基本命令\"></a>二、Linux基本命令</h2><p><strong>常用指令</strong>：<a class=\"link\"   href=\"https://blog.csdn.net/qq_46416934/article/details/123190966\" >https://blog.csdn.net/qq_46416934/article/details/123190966<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>命令大全：<a class=\"link\"   href=\"https://www.runoob.com/linux/linux-command-manual.html\" >https://www.runoob.com/linux/linux-command-manual.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"三、ROS安装\"><a href=\"#三、ROS安装\" class=\"headerlink\" title=\"三、ROS安装\"></a>三、ROS安装</h2><p>安装教程<a class=\"link\"   href=\"https://blog.csdn.net/my_id_kt/article/details/123753771\" >https://blog.csdn.net/my_id_kt/article/details/123753771<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>注意</strong>：根据Ubuntu版本安装指定版本的ROS</p>\n<h2 id=\"四、ROS基础学习\"><a href=\"#四、ROS基础学习\" class=\"headerlink\" title=\"四、ROS基础学习\"></a>四、ROS基础学习</h2><p>推荐古月居入门视频，从入门课程从Linux安装开始讲起，C++和Python都有讲到，掌握一种语言即可：</p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1zt411G7Vn?p=1\" >https://www.bilibili.com/video/BV1zt411G7Vn?p=1<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>CSDN教程</strong>：</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/mbdong/article/details/109310874\" >https://blog.csdn.net/mbdong/article/details/109310874<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/u011832219/category_10500120.html\" >https://blog.csdn.net/u011832219/category_10500120.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"flowable高级篇","date":"2022-10-19T15:45:46.000Z","_content":"# flowable高级篇\n> lecture：波波老师\n\n# 任务分配和流程变量\n\n## 任务分配\n\n### 固定分配\n\n固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式\n\n![image-20220322205919319](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322205919319.png)\n\n![image-20220322210018615](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322210018615.png)\n\n\n\n### 表达式分配\n\nFlowable使用UEL进行表达式解析。UEL代表*Unified Expression Language*，是EE6规范的一部分.Flowable支持两种UEL表达式： UEL-value 和UEL-method\n\n#### 值表达式\n\n**值表达式 Value expression**: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如\n\n```txt\n${myVar}\n${myBean.myProperty}\n```\n\n案例讲解：\n\n![image-20220322212342245](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212342245.png)\n\n\n\n可以看到通过表达式处理的效果\n\n![image-20220322212431304](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212431304.png)\n\n\n\n先部署流程，然后在启动流程实例的时候绑定表达式对应的值\n\n```java\n/**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 设置 assignee 的取值\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"assignee0\",\"张三\") ;\n        variables.put(\"assignee1\",\"李四\"); \n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"MyHolidayUI:1:4\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n在流程变量表中我们可以看到对应的流程变量信息\n\n![image-20220322213558754](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213558754.png)\n\n同时在Task表中，可以看到流程当前的分配人是`张三`，说明UEL表达式被解析了\n\n![image-20220322213655020](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213655020.png)\n\n\n\n\n\n\n\n#### 方法表达式\n\n**方法表达式 Method expression**: 调用一个方法，可以带或不带参数。**当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。**传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如：\n\n```txt\n${printer.print()}\n${myBean.addNewOrder('orderName')}\n${myBean.doSomething(myVar, execution)}\n```\n\nmyBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法\n\n\n\n\n\n### 监听器分配\n\n可以使用监听器来完成很多Flowable的流程业务。\n\n我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee\n\n创建自定义监听器：\n\n```java\n/**\n * 自定义的监听器\n */\npublic class MyTaskListener implements TaskListener {\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        System.out.println(\"监听器触发了：\" + delegateTask.getName());\n        if(\"提交请假流程\".equals(delegateTask.getName()) &&\n                \"create\".equals(delegateTask.getEventName())){\n            // 指定任务的负责人\n            delegateTask.setAssignee(\"小明\");\n        }else {\n            delegateTask.setAssignee(\"小张\");\n        }\n    }\n}\n```\n\n\n\n然后在FlowableUI中关联对应的监听器\n\n```txt\ncreate:任务创建后触发\nassignment:任务分配后触发\nDelete:任务完成后触发\nAll：所有事件都触发\n```\n\n\n\n![image-20220322214807416](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322214807416.png)\n\n然后我们先部署流程，然后执行查看效果：\n\n![image-20220322215711211](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215711211.png)\n\n然后在Task表中我们可以看到对应的分配人为`小明`说明通过监听也完成了任务分配的工作了\n\n![image-20220322215805734](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215805734.png)\n\n\n\n\n\n\n\n## 流程变量\n\n流程实例按步骤执行时，需要使用一些数据。在Flowable中，这些数据称作*变量(variable)*，并会存储在数据库中。变量可以用在表达式中（例如在排他网关中用于选择正确的出口路径），也可以在Java服务任务(service task)中用于调用外部服务（例如为服务调用提供输入或结果存储），等等。\n\n流程实例可以持有变量（称作*流程变量 process variables*）；用户任务以及*执行(executions)*——流程当前活动节点的指针——也可以持有变量。流程实例可以持有任意数量的变量，每个变量存储为*ACT_RU_VARIABLE*数据库表的一行。\n\n所有的*startProcessInstanceXXX*方法都有一个可选参数，用于在流程实例创建及启动时设置变量。例如，在*RuntimeService*中：\n\n```java\nProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map<String, Object> variables);\n```\n\n也可以在流程执行中加入变量。例如，(*RuntimeService*):\n\n```java\nvoid setVariable(String executionId, String variableName, Object value);\nvoid setVariableLocal(String executionId, String variableName, Object value);\nvoid setVariables(String executionId, Map<String, ? extends Object> variables);\nvoid setVariablesLocal(String executionId, Map<String, ? extends Object> variables);\n```\n\n\n\n![image-20220324095243595](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324095243595.png)\n\n\n\n### 全局变量\n\n流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量\n\n注意：如：    Global变量：userId（变量名）、zhangsan（变量值）\n\nglobal 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。\n\n### 局部变量\n\n任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。\n\nLocal 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 \n\n\n\n\n\n### 案例讲解\n\n 需求：员工创建出差申请单，由部门经理审核，部门经理申请通过后3天以下由财务直接申批，3天以上先由总经理审批，总经理审批通过后再由财务审批。\n\n\n\n![image-20220324093855618](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093855618.png)\n\n\n\n连接先设置条件\n\n![image-20220324093806442](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093806442.png)\n\n\n\n![image-20220324093700631](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093700631.png)\n\n\n\n\n\n部署流程\n\n```java\n@Test\npublic void deploy(){\n    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n    RepositoryService repositoryService = processEngine.getRepositoryService();\n    Deployment deploy = repositoryService.createDeployment()\n        .addClasspathResource(\"出差申请单.bpmn20.xml\")\n        .name(\"请假流程...\")\n        .category(\"请假\") // 分类\n        .tenantId(\"dpb\") // 租户id\n        .deploy();\n    System.out.println(\"deploy.getId() = \" + deploy.getId());\n    System.out.println(\"deploy.getName() = \" + deploy.getName());\n    System.out.println(\"deploy.getCategory() = \" + deploy.getCategory());\n}\n```\n\n\n\n启动流程实例：并且指定全局流程变量\n\n```java\n/**\n     * 在启动流程实例的时候设置流程变量\n     */\n    @Test\n    public void runProcess(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 设置流程变量\n        Map<String,Object> variables = new HashMap<>();\n        // 设置assignee的取值\n        variables.put(\"assignee0\",\"张三\");\n        variables.put(\"assignee1\",\"李四\");\n        variables.put(\"assignee2\",\"王五\");\n        variables.put(\"assignee3\",\"赵财务\");\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"evection:1:4\",variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n\n    }\n```\n\n完成Task任务，同时也可以指定流程变量\n\n```java\n/**\n     * 完成任务时指定流程变量\n     */\n    @Test\n    public void completeTask(){\n\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"evection:1:4\")\n                .taskAssignee(\"李四\")\n                .singleResult();\n        // 添加流程变量\n        Map<String, Object> map = task.getProcessVariables();\n        map.put(\"num\",4);\n\n        // 完成任务\n        taskService.complete(task.getId(),map);\n    }\n```\n\n当然我们也可以在处理流程之外通过Task编号来修改流程变量\n\n```java\n/**\n     * 通过当前任务设置\n     */\n    @Test\n    public void currentTask(){\n        //   当前待办任务id\n        //  获取processEngine\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"evection:1:4\")\n                .taskAssignee(\"王五\")\n                .singleResult();\n        // 添加流程变量\n        Map<String, Object> map = task.getProcessVariables();\n        map.put(\"num\",1);\n        //  一次设置多个值 设置局部变量\n        taskService.setVariables(task.getId(), map);\n    }\n```\n\n\n\n\n\n# 候选人和候选人组\n\n在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。\n\n## 候选人\n\n### 定义流程图\n\n定义流程图，同时指定候选人，多个候选人会通过`,`连接\n\n![image-20220325095959489](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325095959489.png)\n\n![image-20220325100835461](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325100835461.png)\n\n\n\n\n\n### 部署和启动流程实例\n\n部署流程，并且在启动流程实例的时候对UEL表达式赋值\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-候选人.bpmn20.xml\")\n                .name(\"请求流程-候选人\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"candidate1\",\"张三\");\n        variables.put(\"candidate2\",\"李四\");\n        variables.put(\"candidate3\",\"王五\");\n        runtimeService.startProcessInstanceById(\"holiday-candidate:1:4\",variables);\n    }\n```\n\n在对应的表结构中我们可以看到流程变量已经有了，但是对于的Task的Assignee还是为空。\n\n![image-20220325101054787](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325101054787.png)\n\n\n\n\n\n![image-20220325102600573](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325102600573.png)\n\n\n\n\n\n### 任务的查询\n\n根据当前登录的用户，查询对应的候选任务\n\n```java\n   /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskCandidateUser(\"李四\") # 注意\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n```\n\n\n\n### 任务的拾取\n\n知道了我有可拾取的任务后，拾取任务。\n\n```java\n/**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskCandidateUser(\"李四\")\n                .singleResult();\n        if(task != null){\n            // 拾取对应的任务\n            taskService.claim(task.getId(),\"李四\");\n            System.out.println(\"任务拾取成功\");\n        }\n    }\n```\n\n\n\n![image-20220325103624344](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325103624344.png)\n\n\n\n### 任务的归还\n\n拾取任务后不想操作那么就归还任务\n\n```java\n    /**\n     * 退还任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void unclaimTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"张三\")\n                .singleResult();\n        if(task != null){\n            // 拾取对应的任务\n            taskService.unclaim(task.getId());\n            System.out.println(\"归还拾取成功\");\n        }\n    }\n```\n\n\n\n\n\n### 任务的交接\n\n拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理\n\n```java\n   /**\n     * 任务的交接\n     *    如果我获取了任务，但是不想执行，那么我可以把这个任务交接给其他的用户\n     */\n    @Test\n    public void taskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"李四\")\n                .singleResult();\n        if(task != null){\n            // 任务的交接\n            taskService.setAssignee(task.getId(),\"王五\");\n            System.out.println(\"任务交接给了王五\");\n        }\n    }\n```\n\n\n\n\n\n### 任务的完成\n\n正常的任务处理\n\n```java\n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"王五\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n\n```\n\n\n\n\n\n\n\n## 候选人组\n\n当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。\n\n### 管理用户和组\n\n#### 用户管理\n\n我们需要先单独维护用户信息。后台对应的表结构是`ACT_ID_USER`.\n\n```java\n   /**\n     * 维护用户\n     */\n    @Test\n    public void createUser(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 通过 IdentityService 完成相关的用户和组的管理\n        IdentityService identityService = processEngine.getIdentityService();\n        User user = identityService.newUser(\"田佳\");\n        user.setFirstName(\"田\");\n        user.setLastName(\"jia\");\n        user.setEmail(\"tianjia@qq.com\");\n        identityService.saveUser(user);\n    }\n```\n\n\n\n![image-20220325110324815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110324815.png)\n\n\n\n#### Group管理\n\n维护对应的Group信息，后台对应的表结构是`ACT_ID_GROUP`\n\n```java\n    /**\n     * 创建用户组\n     */\n    @Test\n    public void createGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        // 创建Group对象并指定相关的信息\n        Group group = identityService.newGroup(\"group2\");\n        group.setName(\"开发部\");\n        group.setType(\"type1\");\n        // 创建Group对应的表结构数据\n        identityService.saveGroup(group);\n\n    }\n```\n\n![image-20220325110408435](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110408435.png)\n\n\n\n#### 用户分配组\n\n用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是`ACT_ID_MEMBERSHIP`\n\n```java\n    /**\n     * 将用户分配给对应的Group\n     */\n    @Test\n    public void userGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        // 根据组的编号找到对应的Group对象\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        List<User> list = identityService.createUserQuery().list();\n        for (User user : list) {\n            // 将用户分配给对应的组\n            identityService.createMembership(user.getId(),group.getId());\n        }\n    }\n```\n\n\n\n![image-20220325110511848](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110511848.png)\n\n\n\n\n\n### 候选人组应用\n\n搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了\n\n#### 创建流程图\n\n![image-20220325111013641](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325111013641.png)\n\n\n\n![image-20220325110952527](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110952527.png)\n\n\n\n\n\n\n\n#### 流程的部署运行\n\n然后我们把流程部署和运行，注意对UEL表达式赋值，关联上Group\n\n```java\n/**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-候选人组.bpmn20.xml\")\n                .name(\"请求流程-候选人\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"g1\",group.getId()); // 给流程定义中的UEL表达式赋值\n        runtimeService.startProcessInstanceById(\"holiday-group:1:17504\",variables);\n    }\n```\n\n对应表结构中就有对应的体现\n\n![image-20220325112545719](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325112545719.png)\n\n\n\n\n\n#### 任务的拾取和完成\n\n然后完成任务的查询拾取和处理操作\n\n```java\n/**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidateGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 根据当前登录的用户找到对应的组\n        IdentityService identityService = processEngine.getIdentityService();\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(\"邓彪\").singleResult();\n\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskCandidateGroup(group.getId())\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate(){\n        String userId = \"田佳\";\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 根据当前登录的用户找到对应的组\n        IdentityService identityService = processEngine.getIdentityService();\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(userId).singleResult();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskCandidateGroup(group.getId())\n                .singleResult();\n        if(task != null) {\n            // 任务拾取\n            taskService.claim(task.getId(),userId);\n            System.out.println(\"任务拾取成功\");\n        }\n    }  \n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskAssignee(\"邓彪\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n```\n\n\n\n\n\n# 网关\n\n网关用来控制流程的流向\n\n## 排他网关\n\n排他网关（exclusive gateway）（也叫*异或网关 XOR gateway*，或者更专业的，*基于数据的排他网关 exclusive data-based gateway*），用于对流程中的**决策**建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为*true*）继续流程。\n\n**请注意这里出口顺序流的含义与BPMN 2.0中的一般情况不一样。一般情况下，会选择所有条件计算为true的顺序流，并行执行。而使用排他网关时，只会选择一条顺序流。当多条顺序流的条件都计算为true时，会且仅会选择在XML中最先定义的顺序流继续流程。如果没有可选的顺序流，会抛出异常。**\n\n图示\n\n排他网关用内部带有’X’图标的标准网关（菱形）表示，'X’图标代表*异或*的含义。请注意内部没有图标的网关默认为排他网关。BPMN 2.0规范不允许在同一个流程中混合使用有及没有X的菱形标志。\n\n![image-20220326100630908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326100630908.png)\n\n\n\n案例：\n\n![image-20220326103951903](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326103951903.png)\n\n\n\n```java\n   /**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-排他网关.bpmn20.xml\")\n                .name(\"请求流程-排他网关\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",3); // 给流程定义中的UEL表达式赋值\n        runtimeService.startProcessInstanceById(\"holiday-exclusive:1:4\",variables);\n    }\n\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void setVariables(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",4); // 给流程定义中的UEL表达式赋值\n        runtimeService.setVariables(\"12503\",variables);\n    }\n\n\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-exclusive:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n```\n\n\n\n\n\n如果从网关出去的线所有条件都不满足的情况下会抛出系统异常，\n\n![image-20220326104744181](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326104744181.png)\n\n\n\n但是要注意任务没有介绍，还是原来的任务，我们可以重置流程变量\n\n```java\n    @Test\n    public void setVariables(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",4); // 给流程定义中的UEL表达式赋值\n        runtimeService.setVariables(\"12503\",variables);\n    }\n```\n\n\n\n\n\n前面我们可以直接在连接线上定义条件，那为什么还要有排他网关呢？直接在线上的情况，如果条件都不满足，流程就结束了，是异常结束!!\n\n## 并行网关\n\n并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：\n\n* fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。\n\n* join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。\n\n注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。\n\n**与其他网关的主要区别是，并行网关不会解析条件。** **即使顺序流中定义了条件，也会被忽略。**\n\n\n\n案例：\n\n![image-20220326110341232](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326110341232.png)\n\n当我们执行了创建请假单后，到并行网关的位置的时候，在ACT_RU_TASK表中就有两条记录\n\n![image-20220326111359504](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111359504.png)\n\n然后同时在ACT_RU_EXECUTION中有三条记录，一个任务对应的有两个执行实例\n\n![image-20220326111453630](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111453630.png)\n\n\n\n\n\n\n\n## 包含网关\n\n包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。\n\n包含网关的功能是基于进入和外出顺序流的：\n\n* 分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。\n\n* 汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。\n\n\n\n![image-20220326112720089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326112720089.png)\n\n\n\n\n\n## 事件网关\n\n事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。\n\n事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的\"执行\"， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：\n\n1. 事件网关必须有两条或以上外出顺序流；\n2. 事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）\n3. 连接到事件网关的中间捕获事件必须只有一个入口顺序流。 \n\n\n\n\n\n# 事件\n\n事件（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：*捕获（catching）*与*抛出（throwing）*事件。\n\n- **捕获:** 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。\n- **抛出:** 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。\n\n\n\n## 定时事件\n\n定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件\n\n### 定时器启动事件\n\n定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。\n\n***请注意**：*子流程不能有定时器启动事件。\n\n***请注意**：*定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。\n\n***请注意**：*当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。\n\n定时器启动事件，用其中有一个钟表图标的圆圈来表示。\n\n![image-20220327223547656](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327223547656.png)\n\n案例：\n\n![image-20220327231015715](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231015715.png)\n\n在定时启动的节点设置时间：\n\n![image-20220327231055237](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231055237.png)\n\n可以通过FlowableUI中的部署来演示，通过FlowableUI我们可以看到，没有启动流程实例的情况下，到里23:14:14秒的时候自动帮助我们创建了一个流程实例。\n\n![image-20220327231551538](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231551538.png)\n\n\n\n\n\n\n\n### 定时器捕获中间事件\n\n当第一个人工处理完成后，第二个人工处理的任务需要在2022-03-27T23:25:14之后执行\n\n案例：\n\n![image-20220327232259428](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232259428.png)\n\n通过FlowableUI的案例演示我们可以看到后一个任务是在定时时间之后执行的\n\n![image-20220327232624091](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232624091.png)\n\n\n\n\n\n### 定时器边界事件\n\n人工任务1如果在定义的`2022-03-27T23:36:14`这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.\n\n案例\n\n![image-20220327233132259](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233132259.png)\n\n\n\n\n\n发布启动流程\n\n![image-20220327233410596](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233410596.png)\n\n\n\n然后在张三这个位置我们不完成，等到定时到来，达到定时的时间，任务进入到了人工审批三\n\n\n\n### timeDuration\n\n​       在定时事件中我们一定要放开如下的配置：\n\n![image-20220329082431920](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329082431920.png)\n\n指定计时器在启动前应等待多长的时间，首先一定时器启动事件为例：\n\n#### 开始事件\n\n![image-20220328200755160](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328200755160.png)\n\n可以通过FlowableUI的应用来验证\n\n![image-20220328202242555](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202242555.png)\n\n发布任务后然后我们等待两分钟就可以看到任务到了`zhangsan`的位置。或者我们也可以在SpringBoot整合Flowable的项目中添加对应的Controller来处理\n\n```java\n    @Autowired\n    private ProcessEngine processEngine;\n\n\n    @GetMapping(\"/deploy\")\n    public String deploy(){\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"test003.bpmn20.xml\")\n                .name(\"等待定时器启动事件\")\n                .deploy();\n        return \"部署任务成功....\";\n    }\n```\n\n提交请求完成部署操作\n\n![image-20220328202918399](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202918399.png)\n\n\n\n生成了对应的Task记录\n\n![image-20220328203621023](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203621023.png)\n\n\n\n**注意**：在事件中一定要开启异步任务，不然相关的事件是不会触发的！\n\n![image-20220328203656000](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203656000.png)\n\n\n\n#### 中间事件\n\n然后来看看中间事件的等待定时器事件案例：\n\n![image-20220328204205453](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204205453.png)\n\n案例由两个自动任务和一个定时器中间事件组成，在定时任务中绑定了两个JavaDelegate的Java类来处理\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n\n\n然后流程图中的关联为\n\n![image-20220328204349358](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204349358.png)\n\n另一个类似，然后定时器中间事件的等待时间设置是2分钟。我们部署后通过Java代码来演示看看\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"等待定时器中间事件.bpmn20.xml\")\n                .name(\"等待定时中间事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后我们需要启动流程实例，之后等待两分钟看效果\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"Test04:1:325edb10-ae95-11ec-a77f-c03c59ad2248\");\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220328205718521](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328205718521.png)\n\n\n\n#### 边界事件\n\n最后我们来看看边界事件中的等待定时器的处理，案例为：\n\n![image-20220328210150212](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210150212.png)\n\n该案例由一个人工审核+两个自动任务+定时器边界事件组成，自动任务一绑定的JavaDelegate是\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n自动任务二绑定的JavaDelegate是\n\n```java\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n定时器边界事件设置的是30S，也就是如果人工审核在30S还没处理就会触发边界事件：通过代码来演示，部署流程后需要启动流程，然后等待30S看控制台输出\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"等待定时器边界事件.bpmn20.xml\")\n                .name(\"等待定时器边界事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"test05:1:c46f83bf-ae97-11ec-b055-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n等待控制台输出：\n\n![image-20220328210905204](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210905204.png)\n\n\n\n小结：timeDuration在三种定时器的事件中\n\n* 定时器启动事件：等待指定时间后启动流程实例\n* 定时器中间事件：AB任务中间有个定时器中间事件，A任务处理后需要等待对应的时间才能流转到B处\n* 定时器边界事件：任务A绑定了定时器边界事件后，如果在等待时间以内A没有处理任务，那么就会触发对应的边界事件\n\n\n\n\n\n### timeCycle\n\n指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式\n\n* 第一种是按照[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals)标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3/PT10H\n* 也可以使用*timeCycle*的可选属性*endDate*，或者像这样直接写在时间表达式的结尾：`R3/PT10H/${EndDate}`。 当到达endDate时，应用会停止，并为该任务创建其他作业\n* 也可以通过cron表达式来处理\n\n\n\n#### 开始事件\n\n编写案例来演示：\n\n![image-20220328213218525](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213218525.png)\n\n重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n![image-20220328213330813](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213330813.png)\n\n然后我们部署看效果\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"重复启动事件.bpmn20.xml\")\n                .name(\"等待定时器边界事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n![image-20220328213955271](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213955271.png)\n\n\n\n然后我们再指定下endDate来看看案例，直接可以在xml中来处理\n\n```xml\n      <timerEventDefinition>\n        <timeCycle>R3/PT30S/2022-03-28T21:46:11+00:00</timeCycle>\n      </timerEventDefinition>\n```\n\n![image-20220328214459137](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328214459137.png)\n\n\n\n此外还可以通过cron表达式来处理：\n\n```corn\n0 0/5 * * * ?\n```\n\n![image-20220328215255141](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215255141.png)\n\n![image-20220328215340678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215340678.png)\n\n\n\n#### 中间事件\n\n&emsp;timeCycle作为中间事件的话，只会执行一次，案例如下\n\n![image-20220328225250878](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225250878.png)\n\n案例中的自动任务一二对应绑定如下的JavaDelegate.\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n中间事件的设置为`R3/PT30S` 循环3次，间隔30秒执行，但是这是中间事件，其实只会执行一次，我来看效果\n\n部署后启动\n\n```java\n@Autowired\n    private ProcessEngine processEngine;\n\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"循环中间事件.bpmn20.xml\")\n                .name(\"循环中间事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"cycle-middle-event:1:3456ade8-aea7-11ec-9064-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220328225931465](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225931465.png)\n\n\n\n\n\n#### 边界事件\n\n在边界事件中，定义了循环条件`R3/PT30S`理论上要循环3次，间隔30S，单其实也只会执行一次，来看案例\n\n![image-20220328231838967](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231838967.png)\n\n\n\n案例上面的等待时间的是一样的，只是边界事件是30S\n\n![image-20220328231955441](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231955441.png)\n\n\n\n然后我们部署启动流程看效果\n\n![image-20220329094741327](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329094741327.png)\n\n\n\n总结：循环设定\n\n* 启动事件：根据设置循环启动流程实例\n* 中间事件：即使设置了循环时间也只会触发异常\n* 边界事件：即使设置了循环时间也只会触发异常\n\n\n\n\n\n\n\n## 消息事件\n\n消息事件（message event），是指引用具名消息的事件。消息具有名字与载荷。与信号不同，消息事件只有一个接收者\n\n### 启动事件\n\n消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解\n\n![image-20220329103837021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329103837021.png)\n\n我们需要先定义一个消息\n\n![image-20220329105849732](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105849732.png)\n\n然后在消息开始节点出引用\n\n![image-20220329105922977](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105922977.png)\n\n然后通过代码来处理，部署和启动\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息启动事件.bpmn20.xml\")\n                .name(\"消息启动事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n部署后不会自动启动，我们需要接收相关的信息后来触发。\n\n```java\n   /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n       // runtimeService.startProcessInstanceById(\"event006:1:0532e730-af02-11ec-8cf3-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n\n\n\n\n**注意**：发送消息发送的应该是消息的名称而不是消息的ID，报错如下：\n\n![image-20220329104823537](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329104823537.png)\n\n\n\n\n\n### 中间事件\n\n消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，`自动流程1`处理完成后，需要接收特定的消息之后才能进入到`自动流程2`\n\n![image-20220329111412619](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111412619.png)\n\n消息中间事件绑定的消息为\n\n![image-20220329111446959](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111446959.png)\n\n\n\n\n\n\n\n然后通过代码来演示\n\n```java\n   /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息中间事件.bpmn20.xml\")\n                .name(\"消息中间事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n\n    /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n        runtimeService.startProcessInstanceById(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        //runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        //TimeUnit.MINUTES.sleep(1);\n    }\n\n    /**\n     * 中间事件-发布消息\n     */\n    @Test\n    void recevedMsg(){\n        // 需要查询到executionId\n        String processExecutionId = \"b5349e22-af0e-11ec-93e6-c03c59ad2248\";\n        // 我们需要根据流程实例编号找到对应的执行编号\n       /* Execution execution = runtimeService.createExecutionQuery()\n                .processInstanceId(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\")\n                .singleResult();\n        System.out.println(\"----------->\"+execution.getId());*/\n        runtimeService.messageEventReceived(\"第二个消息\",processExecutionId);\n    }\n```\n\n可以看到的输出效果\n\n![image-20220329112435376](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329112435376.png)\n\n\n\n### 边界事件\n\n消息边界事件，如果在消息触发前还没有，案例演示：\n\n![image-20220329113848978](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329113848978.png)\n\n部署流程\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息边界事件.bpmn20.xml\")\n                .name(\"消息边界事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n    /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n        runtimeService.startProcessInstanceById(\"event009:1:f2096787-af11-11ec-b290-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        //runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        //TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n部署流程后启动流程实例会运转到\n\n![image-20220329114038773](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114038773.png)\n\n\n\n如果人工处理在消息订阅前没有处理就会触发边界事件\n\n```java\n    /**\n     * 边界事件-发布消息\n     */\n    @Test\n    void recevedMsg(){\n        // 需要查询到executionId\n        String processExecutionId = \"1d503361-af12-11ec-89a4-c03c59ad2248\";\n        // 我们需要根据流程实例编号找到对应的执行编号\n       /* Execution execution = runtimeService.createExecutionQuery()\n                .processInstanceId(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\")\n                .singleResult();\n        System.out.println(\"----------->\"+execution.getId());*/\n        runtimeService.messageEventReceived(\"第三个消息\",processExecutionId);\n    }\n```\n\n\n\n![image-20220329114505074](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114505074.png)\n\n\n\n\n\n\n\n## 错误事件\n\n错误事件可以用做一个流程的开始事件或者作为一个任务或者子流程的边界事件，错误事件没有提供作用中间事件的功能，这一点和前面介绍的定时器事件和消息事件还有区别的。\n\n### 开始事件\n\n错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。**错误启动事件不能用于启动流程实例**。\n\n错误启动事件总是中断。我们通过案例来介绍。此处我们用Eclipse来绘制流程图，熟悉下Eclipse工具\n\n![image-20220329235608917](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235608917.png)\n\n注意：绘制的是子流程事件：\n\n![image-20220330004724798](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004724798.png)\n\n然后我们再定义一个错误，内容为：\n\n```xml\n<error id=\"error01\" errorCode=\"abcd\">\n```\n\n在FlowableUI中没找到错误定义的选项，我们就在流程文件中自己添加即可。\n\n\n\n![image-20220329235702382](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235702382.png)\n\n\n\n![image-20220329214507352](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329214507352.png)\n\n完整的流程文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <error id=\"error01\" errorCode=\"abcd\"></error>\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <serviceTask id=\"servicetask1\" name=\"自动任务一\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"servicetask1\"></sequenceFlow>\n    <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow2\" sourceRef=\"servicetask1\" targetRef=\"endevent1\"></sequenceFlow>\n    <subProcess id=\"eventsubprocess1\" name=\"Event sub Process\" triggeredByEvent=\"true\">\n      <startEvent id=\"errorstartevent1\" name=\"Error start\">\n        <errorEventDefinition errorRef=\"error01\"></errorEventDefinition>\n      </startEvent>\n      <serviceTask id=\"servicetask2\" name=\"自动任务二\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n      <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n      <sequenceFlow id=\"flow3\" sourceRef=\"servicetask2\" targetRef=\"endevent2\"></sequenceFlow>\n      <sequenceFlow id=\"flow4\" sourceRef=\"errorstartevent1\" targetRef=\"servicetask2\"></sequenceFlow>\n    </subProcess>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"480.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask1\" id=\"BPMNShape_servicetask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"710.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"930.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"eventsubprocess1\" id=\"BPMNShape_eventsubprocess1\">\n        <omgdc:Bounds height=\"211.0\" width=\"401.0\" x=\"530.0\" y=\"420.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"errorstartevent1\" id=\"BPMNShape_errorstartevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"600.0\" y=\"520.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"700.0\" y=\"510.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"850.0\" y=\"520.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"515.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"710.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"815.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"930.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"805.0\" y=\"537.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"850.0\" y=\"537.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"635.0\" y=\"537.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"700.0\" y=\"537.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n然后我们在主流程中的`自动任务一`中我们抛出异常\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        // 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致\n        throw new BpmnError(\"abcd\");\n    }\n}\n```\n\n然后我们在`自定义任务二`中简单定义一个输出即可。然后我们部署任务\n\n```java\n    @Test\n    public void test01() throws Exception{\n        ZipInputStream in = new ZipInputStream(SpringBootFlowableApplicationTests.class.getClassLoader().getResourceAsStream(\"错误启动事件.bar\"));\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addZipInputStream(in)\n                .name(\"错误启动事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n\n\n然后我们再启动流程实例，那么自动任务一就会抛出异常，然后对应的子流程就会开始\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:1:c0462994-af79-11ec-8cae-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n输出结果获取到了我们期望的结果\n\n![image-20220330000557061](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000557061.png)\n\n\n\n\n\n通过输出结果也可以看到执行的自动任务一后，抛出错误事件`abcd`,子流程触发并执行了。\n\n![image-20220330000741836](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000741836.png)\n\n\n\n\n\n### 边界事件\n\n定义如下的流程图：\n\n![image-20220330004335187](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004335187.png)\n\n注意绘制的时候\n\n![image-20220330004644673](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004644673.png)\n\nxml文件内容为：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <error id=\"error02\" errorCode=\"a123\" ></error>\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <serviceTask id=\"servicetask2\" name=\"自动任务二\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n        <serviceTask id=\"servicetask3\" name=\"自动任务三\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n        <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow5\" sourceRef=\"servicetask2\" targetRef=\"endevent2\"></sequenceFlow>\n        <endEvent id=\"endevent3\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow6\" sourceRef=\"servicetask3\" targetRef=\"endevent3\"></sequenceFlow>\n        <subProcess id=\"subprocess1\" name=\"Sub Process\">\n            <startEvent id=\"startevent2\" name=\"Start\"></startEvent>\n            <serviceTask id=\"servicetask4\" name=\"Service Task\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n            <endEvent id=\"endevent4\" name=\"End\"></endEvent>\n            <sequenceFlow id=\"flow10\" sourceRef=\"servicetask4\" targetRef=\"endevent4\"></sequenceFlow>\n            <sequenceFlow id=\"flow11\" sourceRef=\"startevent2\" targetRef=\"servicetask4\"></sequenceFlow>\n        </subProcess>\n        <sequenceFlow id=\"flow8\" sourceRef=\"startevent1\" targetRef=\"subprocess1\"></sequenceFlow>\n        <sequenceFlow id=\"flow9\" sourceRef=\"subprocess1\" targetRef=\"servicetask2\"></sequenceFlow>\n        <boundaryEvent id=\"boundaryerror1\" name=\"Error\" attachedToRef=\"subprocess1\">\n            <errorEventDefinition errorRef=\"error02\"></errorEventDefinition>\n        </boundaryEvent>\n        <sequenceFlow id=\"flow12\" sourceRef=\"boundaryerror1\" targetRef=\"servicetask3\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"402.0\" y=\"388.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1285.0\" y=\"368.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1099.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1440.0\" y=\"378.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent3\" id=\"BPMNShape_endevent3\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1320.0\" y=\"600.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"subprocess1\" id=\"BPMNShape_subprocess1\">\n                <omgdc:Bounds height=\"271.0\" width=\"451.0\" x=\"660.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"720.0\" y=\"390.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask4\" id=\"BPMNShape_servicetask4\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"850.0\" y=\"381.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent4\" id=\"BPMNShape_endevent4\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1030.0\" y=\"391.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundaryerror1\" id=\"BPMNShape_boundaryerror1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"950.0\" y=\"520.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"1390.0\" y=\"395.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1440.0\" y=\"395.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"1204.0\" y=\"617.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1320.0\" y=\"617.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow10\" id=\"BPMNEdge_flow10\">\n                <omgdi:waypoint x=\"955.0\" y=\"408.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1030.0\" y=\"408.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow11\" id=\"BPMNEdge_flow11\">\n                <omgdi:waypoint x=\"755.0\" y=\"407.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"850.0\" y=\"408.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"437.0\" y=\"405.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"660.0\" y=\"405.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1111.0\" y=\"405.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1285.0\" y=\"395.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow12\" id=\"BPMNEdge_flow12\">\n                <omgdi:waypoint x=\"965.0\" y=\"550.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"964.0\" y=\"617.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1099.0\" y=\"617.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n对应的三个自定义任务绑定的JavaDelegate为：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        // 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致\n        throw new BpmnError(\"a123\");\n    }\n}\n\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n然后我们部署文件\n\n```java\n    @Test\n    public void test01() throws Exception{\n        ZipInputStream in = new ZipInputStream(SpringBootFlowableApplicationTests.class\n                .getClassLoader()\n                .getResourceAsStream(\"错误边界事件.bar\"));\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addZipInputStream(in)\n                .name(\"错误边界事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n部署成功后我们再启动一个流程实例，进入到自定义任务一处会抛出异常，触发边界异常处理\n\n![image-20220330003624235](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330003624235.png)\n\n输出的结果和我们预期的是一样的\n\n\n\n\n\n## 信号事件\n\n### 开始事件\n\n\n\n![image-20220330095103789](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095103789.png)\n\n然后设置相关的属性，并定义一个信号\n\n![image-20220330095157518](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095157518.png)\n\n然后在我们声明的信号开始引用我们上面创建的信号\n\n![image-20220330095725130](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095725130.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal01\" name=\"firstSignal\" flowable:scope=\"global\"></signal>\n  <process id=\"event2001\" name=\"信号启动事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"信号开始\" isInterrupting=\"true\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </startEvent>\n    <serviceTask id=\"task1\" name=\"自动任务\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <endEvent id=\"end01\" name=\"结束\"></endEvent>\n    <sequenceFlow id=\"sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" sourceRef=\"task1\" targetRef=\"end01\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" sourceRef=\"start01\" targetRef=\"task1\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2001\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2001\" id=\"BPMNPlane_event2001\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"285.0\" y=\"172.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"467.5\" y=\"147.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"612.5\" y=\"173.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" id=\"BPMNEdge_sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"314.94999961358405\" y=\"187.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"467.4999999999399\" y=\"187.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" id=\"BPMNEdge_sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"567.449999999996\" y=\"187.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"612.5\" y=\"187.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n部署流程：\n\n```java\n   /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"信号启动事件.bpmn20.xml\")\n                .name(\"信号启动事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n流程是一个信息启动事件，所以我们需要释放对应的信号来触发流程的启动\n\n```java\n    /**\n     * 通过信号发送来触发信号启动事件的执行\n     * 全局的信息\n     */\n    @Test\n    void signalReceived() throws Exception {\n        runtimeService.signalEventReceived(\"firstSignal\");\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n通过输出语句可以看到自定义任务触发了\n\n![image-20220330100203036](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330100203036.png)\n\n\n\n我们可以把信息的作用域由原来的golbal全局的调整为processInstance，测试后发现还是执行了，说明在启动事件信息的作用域其实是不起作用的。\n\n```java\n  <signal id=\"signal01\" name=\"firstSignal\" flowable:scope=\"processInstance\"></signal>\n```\n\n\n\n### 中间捕获事件\n\n案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。\n\n![image-20220330101820083](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330101820083.png)\n\n对应的信号绑定\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"singnal02\" name=\"secondSingal\" flowable:scope=\"global\"></signal>\n  <process id=\"event2002\" name=\"信号中间捕获事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始\" flowable:formFieldValidation=\"true\"></startEvent>\n    <intermediateCatchEvent id=\"signal01\" name=\"信号捕获中间事件\">\n      <signalEventDefinition signalRef=\"singnal02\"></signalEventDefinition>\n    </intermediateCatchEvent>\n    <sequenceFlow id=\"sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" sourceRef=\"start01\" targetRef=\"signal01\"></sequenceFlow>\n    <serviceTask id=\"task01\" name=\"自动任务\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" sourceRef=\"signal01\" targetRef=\"task01\"></sequenceFlow>\n    <endEvent id=\"end01\" name=\"结束任务\"></endEvent>\n    <sequenceFlow id=\"sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" sourceRef=\"task01\" targetRef=\"end01\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2002\" id=\"BPMNPlane_event2002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"120.0\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"signal01\" id=\"BPMNShape_signal01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"318.5\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"495.5\" y=\"122.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"151.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" id=\"BPMNEdge_sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"348.44853390329115\" y=\"164.78775666509335\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"495.49999999999903\" y=\"162.7068396226415\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" id=\"BPMNEdge_sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"595.4499999999996\" y=\"162.94542586750788\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0016973189436\" y=\"164.73506227304313\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" id=\"BPMNEdge_sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"149.94999953609073\" y=\"165.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"318.5\" y=\"165.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n先部署：\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"信号中间捕获事件.bpmn20.xml\")\n                .name(\"信号中间捕获事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n然后我们需要启动流程：\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        runtimeService.startProcessInstanceById(\"event2002:1:adc5b8f8-afcf-11ec-959a-c03c59ad2248\");\n        System.out.println(\"启动时间：\" + new Date());\n    }\n```\n\n发送信号信息\n\n```java\n    /**\n     * 通过信号发送来触发信号启动事件的执行\n     * 全局的信息\n     */\n    @Test\n    void signalGolbal() throws Exception {\n        runtimeService.signalEventReceived(\"secondSingal\");\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n然后被我们的信号捕获中间事件捕获\n\n![image-20220330102256367](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102256367.png)\n\n信号作用域为processInstance的情况\n\n![image-20220330102524238](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102524238.png)\n\n\n\n首先针对processInstance的信号，我们发送global信号是不会被捕获的\n\n![image-20220330102808127](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102808127.png)\n\n\n\n然后processInstance的信息我们需要在流程实例内部抛出信号\n\n![image-20220330112205035](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330112205035.png)\n\n\n\n### 中间抛出事件\n\n信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：\n\n![image-20220330235847392](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330235847392.png)\n\n\n\n定义信息信息：\n\n![image-20220330193530718](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330193530718.png)\n\n\n\n\n\n\n\n![image-20220331000011215](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331000011215.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal01\" name=\"signal01\" flowable:scope=\"global\"></signal>\n  <process id=\"event2003\" name=\"信号中间抛出事件\" isExecutable=\"true\">\n    <startEvent id=\"startId01\" flowable:formFieldValidation=\"true\"></startEvent>\n    <parallelGateway id=\"pid01\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" sourceRef=\"startId01\" targetRef=\"pid01\"></sequenceFlow>\n    <serviceTask id=\"task01\" name=\"自动任务一\" flowable:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <serviceTask id=\"task02\" name=\"自动任务二\" flowable:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <serviceTask id=\"task03\" name=\"自动任务三\" flowable:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-2325ED54-C769-4161-A00F-001F006B72B5\" sourceRef=\"pid01\" targetRef=\"task01\"></sequenceFlow>\n    <intermediateThrowEvent id=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </intermediateThrowEvent>\n    <intermediateCatchEvent id=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </intermediateCatchEvent>\n    <sequenceFlow id=\"sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" sourceRef=\"task01\" targetRef=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\"></sequenceFlow>\n    <sequenceFlow id=\"sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" sourceRef=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\" targetRef=\"task02\"></sequenceFlow>\n    <sequenceFlow id=\"sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" sourceRef=\"pid01\" targetRef=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\"></sequenceFlow>\n    <sequenceFlow id=\"sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" sourceRef=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\" targetRef=\"task03\"></sequenceFlow>\n    <parallelGateway id=\"pid02\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-584ADF4E-9140-4E5A-A396-1257E1436704\" sourceRef=\"task02\" targetRef=\"pid02\"></sequenceFlow>\n    <sequenceFlow id=\"sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" sourceRef=\"task03\" targetRef=\"pid02\"></sequenceFlow>\n    <endEvent id=\"end01\" name=\"结束\"></endEvent>\n    <sequenceFlow id=\"sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" sourceRef=\"pid02\" targetRef=\"end01\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2003\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2003\" id=\"BPMNPlane_event2003\">\n      <bpmndi:BPMNShape bpmnElement=\"startId01\" id=\"BPMNShape_startId01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"100.0\" y=\"163.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"pid01\" id=\"BPMNShape_pid01\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"270.0\" y=\"158.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"419.5\" y=\"71.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task02\" id=\"BPMNShape_task02\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"780.0\" y=\"71.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task03\" id=\"BPMNShape_task03\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"795.0\" y=\"255.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\" id=\"BPMNShape_sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"633.5\" y=\"96.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\" id=\"BPMNShape_sid-51D70059-8D15-4BF7-9151-48CCD99544F1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"465.0\" y=\"278.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"pid02\" id=\"BPMNShape_pid02\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"994.5\" y=\"158.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"1079.5\" y=\"164.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" id=\"BPMNEdge_sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"519.45\" y=\"111.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"633.5\" y=\"111.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" id=\"BPMNEdge_sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"1034.0591869398208\" y=\"178.3782051282051\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1079.5002755524838\" y=\"178.08885188426407\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" id=\"BPMNEdge_sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"894.9499999999999\" y=\"260.4867256637168\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1002.6675392670157\" y=\"186.14712041884815\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" id=\"BPMNEdge_sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"663.4499994451444\" y=\"111.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"779.9999999999972\" y=\"111.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" id=\"BPMNEdge_sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"494.9497692355611\" y=\"293.0819166248564\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"794.9999999999911\" y=\"294.7260273972602\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-584ADF4E-9140-4E5A-A396-1257E1436704\" id=\"BPMNEdge_sid-584ADF4E-9140-4E5A-A396-1257E1436704\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"879.9499999999999\" y=\"129.1390243902439\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"999.8065381558029\" y=\"172.67196819085487\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-2325ED54-C769-4161-A00F-001F006B72B5\" id=\"BPMNEdge_sid-2325ED54-C769-4161-A00F-001F006B72B5\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"304.9870182555781\" y=\"173.0233265720081\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"419.49999999999994\" y=\"129.8358938547486\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" id=\"BPMNEdge_sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"302.31181354817494\" y=\"185.6374177631579\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"467.15151373509184\" y=\"285.24160328636844\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" id=\"BPMNEdge_sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"129.94999940317362\" y=\"178.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"270.0\" y=\"178.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n三个自定义任务绑定了三个javaDelegate分别给出打印语句来记录\n\n\n\n然后部署任务\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"信号中间抛出事件.bpmn20.xml\")\n                .name(\"信号中间抛出事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后在启动任务即可\n\n```java\n /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2003:1:665b1533-b020-11ec-877d-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n看控制台的输出\n\n![image-20220330200124232](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200124232.png)\n\n\n\n效果：\n\n![image-20220330200235193](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200235193.png)\n\n### 边界事件\n\n最后来看看信号边界事件，案例如下：\n\n![image-20220330202443905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330202443905.png)\n\n完整的xml定义为\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal2\" name=\"signal2\" flowable:scope=\"global\"></signal>\n  <process id=\"event2004\" name=\"信号边界事件\" isExecutable=\"true\">\n    <startEvent id=\"startEvent1\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" name=\"人工任务\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" sourceRef=\"startEvent1\" targetRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\"></sequenceFlow>\n    <serviceTask id=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" name=\"自动任务一\" flowable:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <serviceTask id=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" name=\"自动任务二\" flowable:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" sourceRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" targetRef=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\"></sequenceFlow>\n    <endEvent id=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\"></endEvent>\n    <sequenceFlow id=\"sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" sourceRef=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" targetRef=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\"></sequenceFlow>\n    <endEvent id=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\"></endEvent>\n    <sequenceFlow id=\"sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" sourceRef=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" targetRef=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\"></sequenceFlow>\n    <boundaryEvent id=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" attachedToRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" cancelActivity=\"true\">\n      <signalEventDefinition signalRef=\"signal2\"></signalEventDefinition>\n    </boundaryEvent>\n    <sequenceFlow id=\"sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" sourceRef=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" targetRef=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2004\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2004\" id=\"BPMNPlane_event2004\">\n      <bpmndi:BPMNShape bpmnElement=\"startEvent1\" id=\"BPMNShape_startEvent1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"100.0\" y=\"163.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" id=\"BPMNShape_sid-F11058BE-828A-45FF-A830-8BF099D71FBD\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"255.0\" y=\"138.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" id=\"BPMNShape_sid-FAB46591-3247-4776-B3B5-79826133F5AF\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"521.5\" y=\"135.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" id=\"BPMNShape_sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"521.5\" y=\"315.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\" id=\"BPMNShape_sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"161.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\" id=\"BPMNShape_sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"341.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" id=\"BPMNShape_sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"308.4527694396093\" y=\"203.7233532460343\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" id=\"BPMNEdge_sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"336.557461183174\" y=\"225.9233207922021\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"521.4999999999999\" y=\"327.5301011331414\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" id=\"BPMNEdge_sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"354.95000000000005\" y=\"177.43714821763604\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"521.5\" y=\"175.56228893058162\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" id=\"BPMNEdge_sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"129.94999949366624\" y=\"178.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"254.99999999993574\" y=\"178.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" id=\"BPMNEdge_sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"621.4499999999999\" y=\"355.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0\" y=\"355.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" id=\"BPMNEdge_sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"621.4499999999999\" y=\"175.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0\" y=\"175.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n定义的信号为：\n\n```xml\n<signal id=\"signal2\" name=\"signal2\" flowable:scope=\"global\"></signal>\n```\n\n自动任务的内容\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n    }\n}\n\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n\n\n部署项目然后启动流程\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"信号边界事件.bpmn20.xml\")\n                .name(\"信号边界事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2004:1:e8b5c39f-b024-11ec-bdac-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220330203056055](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203056055.png)\n\n\n\n```java\n    @Test\n    public void signalGlobal()  throws Exception{\n        String signal = \"signal2\";\n        Map<String, Object> variables = new HashMap();\n        processEngine.getRuntimeService().signalEventReceived(signal,variables);\n    }\n```\n\n![image-20220330203233862](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203233862.png)\n\n\n\n通过输出看到了我们期望的结果了，这样就给大家介绍完了信号相关的各种事件了\n\n\n\n\n\n## 结束事件\n\n结束事件顾名思义就是流程结束的事件，除了前面遇到的空结束事件外，结束事件还包括如下几种：\n\n* 错误结束事件\n* 中断结束事件\n* 取消结束事件\n\n### 错误结束事件\n\n当流程执行到达**错误结束事件（error end event）**时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：\n\n![image-20220331100340069](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331100340069.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <error id=\"error03\" errorCode=\"error03\" ></error>\n  <process id=\"event5001\" name=\"错误结束事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始任务\" flowable:formFieldValidation=\"true\"></startEvent>\n    <subProcess id=\"sid-794CA748-4381-417F-8350-360E89907E84\" name=\"subProcess\">\n      <startEvent id=\"startc01\" name=\"开始子流程\" flowable:formFieldValidation=\"true\"></startEvent>\n      <serviceTask id=\"task01\" name=\"自动任务一\" flowable:class=\"com.bobo.flow.delegate.MyOneJavaDelegate\"></serviceTask>\n      <exclusiveGateway id=\"p001\" name=\"排他网关\"></exclusiveGateway>\n      <endEvent id=\"endc01\" name=\"子流程结束\"></endEvent>\n      <endEvent id=\"errorend01\" name=\"错误结束事件\">\n        <errorEventDefinition errorRef=\"error03\" flowable:errorVariableLocalScope=\"true\" flowable:errorVariableTransient=\"true\"></errorEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" sourceRef=\"startc01\" targetRef=\"task01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" sourceRef=\"task01\" targetRef=\"p001\"></sequenceFlow>\n      <sequenceFlow id=\"sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" sourceRef=\"p001\" targetRef=\"errorend01\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n    </subProcess>\n    <sequenceFlow id=\"sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" sourceRef=\"start01\" targetRef=\"sid-794CA748-4381-417F-8350-360E89907E84\"></sequenceFlow>\n    <serviceTask id=\"task2\" name=\"自动任务二\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" sourceRef=\"sid-794CA748-4381-417F-8350-360E89907E84\" targetRef=\"task2\"></sequenceFlow>\n    <endEvent id=\"end02\" name=\"主流程结束\"></endEvent>\n    <sequenceFlow id=\"sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" sourceRef=\"task2\" targetRef=\"end02\"></sequenceFlow>\n    <boundaryEvent id=\"perror01\" name=\"边界错误事件\" attachedToRef=\"sid-794CA748-4381-417F-8350-360E89907E84\">\n      <errorEventDefinition errorRef=\"error03\" flowable:errorVariableLocalScope=\"true\" flowable:errorVariableTransient=\"true\"></errorEventDefinition>\n    </boundaryEvent>\n    <sequenceFlow id=\"sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" sourceRef=\"perror01\" targetRef=\"task3\"></sequenceFlow>\n    <serviceTask id=\"task3\" name=\"自动任务三\" flowable:class=\"com.bobo.flow.delegate.MyThreeJavaDelegate\"></serviceTask>\n    <endEvent id=\"end003\" name=\"主流程结束\"></endEvent>\n    <sequenceFlow id=\"sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" sourceRef=\"task3\" targetRef=\"end003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C17C73A1-5853-496B-B686-E7911105D459\" sourceRef=\"sid-794CA748-4381-417F-8350-360E89907E84\" targetRef=\"endc01\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n    </sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event5001\">\n    <bpmndi:BPMNPlane bpmnElement=\"event5001\" id=\"BPMNPlane_event5001\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"75.0\" y=\"205.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-794CA748-4381-417F-8350-360E89907E84\" id=\"BPMNShape_sid-794CA748-4381-417F-8350-360E89907E84\">\n        <omgdc:Bounds height=\"261.0\" width=\"593.0\" x=\"240.0\" y=\"90.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startc01\" id=\"BPMNShape_startc01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"285.0\" y=\"199.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"418.5\" y=\"174.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"563.5\" y=\"194.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endc01\" id=\"BPMNShape_endc01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"675.0\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"errorend01\" id=\"BPMNShape_errorend01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"675.0\" y=\"255.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"942.5\" y=\"176.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end02\" id=\"BPMNShape_end02\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"1087.5\" y=\"202.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"perror01\" id=\"BPMNShape_perror01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"478.02252392098524\" y=\"336.450017237985\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task3\" id=\"BPMNShape_task3\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"665.5\" y=\"406.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"810.5\" y=\"432.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" id=\"BPMNEdge_sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"296.5\" flowable:targetDockerY=\"130.5\">\n        <omgdi:waypoint x=\"104.9499999082861\" y=\"220.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"240.0\" y=\"220.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" id=\"BPMNEdge_sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"1.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"493.02252392098524\" y=\"366.40001519452954\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"493.02252392098524\" y=\"446.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"665.4999999999623\" y=\"446.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" id=\"BPMNEdge_sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" flowable:sourceDockerX=\"296.5\" flowable:sourceDockerY=\"130.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"832.9499999999987\" y=\"217.57401315789474\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"942.499999999999\" y=\"216.49292763157894\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" id=\"BPMNEdge_sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"765.4499999999999\" y=\"446.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"810.5\" y=\"446.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" id=\"BPMNEdge_sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"518.4499999999978\" y=\"214.71623376623376\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"563.9130434782609\" y=\"214.91304347826087\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" id=\"BPMNEdge_sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"1042.449999999996\" y=\"216.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1087.5\" y=\"216.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C17C73A1-5853-496B-B686-E7911105D459\" id=\"BPMNEdge_sid-C17C73A1-5853-496B-B686-E7911105D459\" flowable:sourceDockerX=\"343.3984375\" flowable:sourceDockerY=\"106.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"583.3984375\" y=\"196.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"583.3984375\" y=\"164.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"675.0\" y=\"164.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" id=\"BPMNEdge_sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"314.949999356254\" y=\"214.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"418.5\" y=\"214.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" id=\"BPMNEdge_sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" flowable:sourceDockerX=\"20.8984375\" flowable:sourceDockerY=\"36.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"584.3984375\" y=\"233.54821399278214\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"584.3984375\" y=\"269.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"675.0\" y=\"269.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n定义的error\n\n```xml\n<error id=\"error01\" errorCode=\"error01\"></error>\n```\n\n在子流程中，当flag的数据为0的时候，就会触发错误结束事件\n\n```xml\n      <sequenceFlow id=\"1111\" sourceRef=\"12222\" targetRef=\"xxxxx44\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag==0}]]></conditionExpression>\n      </sequenceFlow>\n```\n\n然后我们在子流程上绑定了一个错误边界事件，绑定的也是error01,也就是当子流程触发错误结束事件，就会触发这个边界事件，进而完成自动任务三。\n\n流程中关联的三个自动任务都只是输出一个打印语句~\n\n然后我们需要做的操作有，部署，启动流程绑定流程变量flag的值为0，然后就可以看输出结果了\n\n```java\n    /**\n    * 部署\n    */\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"错误结束事件.bpmn20.xml\")\n                .name(\"错误结束事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后启动流程\n\n```java\n    /**\n     * 启动流程实例,设置流程变量中的flag=0触发错误结束事件\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2005:1:ebec87e2-b028-11ec-b93f-c03c59ad2248\",map);\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n看控制台输出\n\n![image-20220330210538338](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210538338.png)\n\n控制台输出的结果和我们预期的是一样的\n\n![image-20220330210708334](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210708334.png)\n\n说明错误结束事件的作用就是在执行到错误结束的节点位置会抛出对应的错误，供需要获取的事件来处理。\n\n\n\n### 中断结束事件\n\n中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：\n\n#### 案例一\n\n案例一我们介绍没有子流程的情况下终止的场景，具体案例如下\n\n![image-20220331102808059](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331102808059.png)\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <process id=\"event5002\" name=\"终止结束事件01\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始事件\" flowable:formFieldValidation=\"true\"></startEvent>\n    <parallelGateway id=\"p001\" name=\"并行网关\"></parallelGateway>\n    <parallelGateway id=\"p004\" name=\"并行网关\"></parallelGateway>\n    <userTask id=\"task2\" name=\"用户任务二\" flowable:assignee=\"lisi\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" sourceRef=\"p001\" targetRef=\"task2\"></sequenceFlow>\n    <userTask id=\"task1\" name=\"用户任务一\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" sourceRef=\"p001\" targetRef=\"task1\"></sequenceFlow>\n    <userTask id=\"task3\" name=\"用户任务三\" flowable:assignee=\"wangwu\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" sourceRef=\"p001\" targetRef=\"task3\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" sourceRef=\"start01\" targetRef=\"p001\"></sequenceFlow>\n    <sequenceFlow id=\"sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" sourceRef=\"task1\" targetRef=\"p004\"></sequenceFlow>\n    <sequenceFlow id=\"sid-E1E26394-8B33-4766-9B3B-722958B91972\" sourceRef=\"task2\" targetRef=\"p004\"></sequenceFlow>\n    <endEvent id=\"end003\" name=\"结束事件\"></endEvent>\n    <sequenceFlow id=\"sid-074345F1-5C34-435D-AECE-912DDBBBE105\" sourceRef=\"p004\" targetRef=\"end003\"></sequenceFlow>\n    <exclusiveGateway id=\"p003\" name=\"排他网关\"></exclusiveGateway>\n    <endEvent id=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\" name=\"终止结束事件\">\n      <terminateEventDefinition></terminateEventDefinition>\n    </endEvent>\n    <sequenceFlow id=\"sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" sourceRef=\"task3\" targetRef=\"p003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-325962BF-7168-48C0-9107-B232A4627C10\" sourceRef=\"p003\" targetRef=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"sid-413A98AF-8CAF-470C-B751-E32229801310\" sourceRef=\"p003\" targetRef=\"p004\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n    </sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event5002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event5002\" id=\"BPMNPlane_event5002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"102.5\" y=\"253.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"287.5\" y=\"248.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p004\" id=\"BPMNShape_p004\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"720.0\" y=\"248.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"372.5\" y=\"228.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"372.5\" y=\"105.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task3\" id=\"BPMNShape_task3\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"377.5\" y=\"390.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"805.0\" y=\"254.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p003\" id=\"BPMNShape_p003\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"570.0\" y=\"410.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\" id=\"BPMNShape_sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"576.0\" y=\"495.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E1E26394-8B33-4766-9B3B-722958B91972\" id=\"BPMNEdge_sid-E1E26394-8B33-4766-9B3B-722958B91972\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"7.5\" flowable:targetDockerY=\"19.0\">\n        <omgdi:waypoint x=\"472.4499999999732\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"596.25\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"596.25\" y=\"267.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"720.9525123715264\" y=\"267.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" id=\"BPMNEdge_sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"308.0\" y=\"287.4441367574257\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"308.0\" y=\"430.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"377.5\" y=\"430.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-325962BF-7168-48C0-9107-B232A4627C10\" id=\"BPMNEdge_sid-325962BF-7168-48C0-9107-B232A4627C10\" flowable:sourceDockerX=\"19.53125\" flowable:sourceDockerY=\"34.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"589.5677159590043\" y=\"449.51771595900436\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"589.8981518165715\" y=\"495.0001397608249\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" id=\"BPMNEdge_sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"1.0\">\n        <omgdi:waypoint x=\"472.44999999982196\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"740.0\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"740.0\" y=\"248.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" id=\"BPMNEdge_sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"7.0\" flowable:targetDockerY=\"22.0\">\n        <omgdi:waypoint x=\"477.449999999998\" y=\"430.66822742474915\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"571.9322033898305\" y=\"431.93220338983053\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" id=\"BPMNEdge_sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"327.0247370727432\" y=\"268.4166666666667\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"372.49999999998806\" y=\"268.2181222707423\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-074345F1-5C34-435D-AECE-912DDBBBE105\" id=\"BPMNEdge_sid-074345F1-5C34-435D-AECE-912DDBBBE105\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"759.5591869398207\" y=\"268.37820512820514\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"805.0002755524882\" y=\"268.08885188426405\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" id=\"BPMNEdge_sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"132.44999949366624\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"287.5\" y=\"268.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-413A98AF-8CAF-470C-B751-E32229801310\" id=\"BPMNEdge_sid-413A98AF-8CAF-470C-B751-E32229801310\" flowable:sourceDockerX=\"37.5\" flowable:sourceDockerY=\"20.4375\" flowable:targetDockerX=\"22.5\" flowable:targetDockerY=\"31.0\">\n        <omgdi:waypoint x=\"609.5117551813031\" y=\"430.4375\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"742.5\" y=\"430.4375\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"742.5\" y=\"285.402097959858\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" id=\"BPMNEdge_sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"308.0\" y=\"248.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"308.0\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"372.5\" y=\"145.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程定义说明：并行网关中3个人工审核任务，分别分配的用户为zhangsan lisi wangwu ，然后在wangwu审核后会进入一个排他网关，如果flag是小于等于0就会触发终止结束事件。\n\n```xml\n<sequenceFlow id=\"sid-89945688-1D51-4391-A713-3E77ADB2FA06\" sourceRef=\"p001\" targetRef=\"stop001\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n    </sequenceFlow>\n```\n\n具体操作：部署流程-->启动流程实例-->wanwu 处理任务【流程实例 flag <= 0】 触发任务\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"终止流程1.bpmn20.xml\")\n                .name(\"终止流程1\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n启动流程实例\n\n```java\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248\",map);\n    }\n```\n\n这时可以看到三个并行的Task任务：\n\n![image-20220330213147240](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213147240.png)\n\n这时我们只需王五来处理即可，在上一步中我们已经对流程变量赋值了\n\n```java\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248\")\n                .taskAssignee(\"wangwu\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n然后再去看Task表中已经没有另外两条记录了哦\n\n![image-20220330213516673](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213516673.png)\n\n通过案例可以看到在没有子流程的情况下，终止结束事件会把整个流程都进程都结束了，而且在历史记录中也可以看到信息\n\n![image-20220330215127129](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330215127129.png)\n\n\n\n#### 案例二\n\n然后我们来看看在子流程中触发终止结束事件的案例：\n\n![image-20220330220208085](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330220208085.png)\n\n完整的xml内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <process id=\"event3002\" name=\"终止流程2\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"任务开始\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"task2\" name=\"用户任务二\" flowable:assignee=\"lisi\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" sourceRef=\"b001\" targetRef=\"task2\"></sequenceFlow>\n    <userTask id=\"task1\" name=\"用户任务一\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" sourceRef=\"b001\" targetRef=\"task1\"></sequenceFlow>\n    <subProcess id=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" name=\"subProcess\">\n      <startEvent id=\"cstart01\" name=\"子流程开始\" flowable:formFieldValidation=\"true\"></startEvent>\n      <userTask id=\"taskc01\" name=\"子人工任务一\" flowable:assignee=\"user1\" flowable:formFieldValidation=\"true\">\n        <extensionElements>\n          <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n        </extensionElements>\n      </userTask>\n      <exclusiveGateway id=\"p001\" name=\"排他网关\"></exclusiveGateway>\n      <userTask id=\"taskc02\" name=\"子人工任务二\" flowable:assignee=\"user2\" flowable:formFieldValidation=\"true\">\n        <extensionElements>\n          <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n        </extensionElements>\n      </userTask>\n      <endEvent id=\"endc01\" name=\"子流程结束\"></endEvent>\n      <endEvent id=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <terminateEventDefinition></terminateEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" sourceRef=\"cstart01\" targetRef=\"taskc01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" sourceRef=\"taskc01\" targetRef=\"p001\"></sequenceFlow>\n      <sequenceFlow id=\"sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" sourceRef=\"taskc02\" targetRef=\"endc01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" sourceRef=\"p001\" targetRef=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n      <sequenceFlow id=\"sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" sourceRef=\"p001\" targetRef=\"taskc02\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n      </sequenceFlow>\n    </subProcess>\n    <parallelGateway id=\"b001\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" sourceRef=\"start01\" targetRef=\"b001\"></sequenceFlow>\n    <parallelGateway id=\"b002\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" sourceRef=\"task2\" targetRef=\"b002\"></sequenceFlow>\n    <sequenceFlow id=\"sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" sourceRef=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" targetRef=\"b002\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" sourceRef=\"task1\" targetRef=\"b002\"></sequenceFlow>\n    <endEvent id=\"end003\" name=\"结束事件\"></endEvent>\n    <sequenceFlow id=\"sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" sourceRef=\"b002\" targetRef=\"end003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" sourceRef=\"b001\" targetRef=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event3002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event3002\" id=\"BPMNPlane_event3002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"75.0\" y=\"200.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"420.0\" y=\"175.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"420.0\" y=\"15.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" id=\"BPMNShape_sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\">\n        <omgdc:Bounds height=\"187.0\" width=\"531.0\" x=\"285.0\" y=\"330.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"cstart01\" id=\"BPMNShape_cstart01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"322.5\" y=\"410.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"taskc01\" id=\"BPMNShape_taskc01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"390.0\" y=\"385.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"542.5\" y=\"405.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"taskc02\" id=\"BPMNShape_taskc02\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"627.5\" y=\"385.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endc01\" id=\"BPMNShape_endc01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"765.0\" y=\"411.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\" id=\"BPMNShape_sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"548.5\" y=\"480.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"b001\" id=\"BPMNShape_b001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"165.0\" y=\"195.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"b002\" id=\"BPMNShape_b002\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"867.5\" y=\"195.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"960.0\" y=\"207.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" id=\"BPMNEdge_sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"582.0247370727355\" y=\"425.41666666666663\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"627.4999999999881\" y=\"425.2181222707423\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" id=\"BPMNEdge_sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"727.4499999997752\" y=\"425.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"765.0\" y=\"425.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" id=\"BPMNEdge_sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"352.449998261009\" y=\"425.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"390.0\" y=\"425.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" id=\"BPMNEdge_sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" flowable:sourceDockerX=\"265.5\" flowable:sourceDockerY=\"93.5\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"815.95\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"888.0\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"888.0\" y=\"234.40453342953353\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" id=\"BPMNEdge_sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"562.8602941176471\" y=\"444.5752202643172\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"562.6018221538329\" y=\"480.0003662069823\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" id=\"BPMNEdge_sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"519.949999999999\" y=\"215.05974880382777\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"867.97604790418\" y=\"215.4760479041916\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" id=\"BPMNEdge_sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"489.9499999999965\" y=\"425.2030487804878\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"542.9183673469388\" y=\"425.4183673469388\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" id=\"BPMNEdge_sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"906.92933478735\" y=\"215.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"933.75\" y=\"215.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"933.75\" y=\"221.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"960.0\" y=\"221.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" id=\"BPMNEdge_sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"104.94999797575196\" y=\"215.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"165.0\" y=\"215.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" id=\"BPMNEdge_sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" flowable:sourceDockerX=\"22.5\" flowable:sourceDockerY=\"32.015625\" flowable:targetDockerX=\"1.1773835920177385\" flowable:targetDockerY=\"93.5\">\n        <omgdi:waypoint x=\"187.5\" y=\"232.44861780088067\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"187.5\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"285.0\" y=\"423.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" id=\"BPMNEdge_sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"204.4800158394907\" y=\"215.46654929577466\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"419.99999999998107\" y=\"215.08778558875218\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" id=\"BPMNEdge_sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"185.5\" y=\"195.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"185.5\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"420.0\" y=\"55.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" id=\"BPMNEdge_sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"13.7109375\">\n        <omgdi:waypoint x=\"519.95\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"887.5\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"887.5\" y=\"195.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程说明：人工任务一 -->zhangsan  人工任务二 -->lisi  子人工任务一 ： user1 子人工任务二 ： user2\n\n子任务完成任务如果flag<=0,那么子流程中断结束，子人工任务二不会触发\n\n部署流程\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"终止流程2.bpmn20.xml\")\n                .name(\"终止流程2\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后启动流程\n\n```java\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248\",map);\n    }\n```\n\n这时在ACT_RU_TASK中就应该有三条对应的TASK记录了\n\n![image-20220330232643286](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232643286.png)\n\n然后我们执行`user1`的子任务，因为现在流程变量`flag=0`所以会触发终止结束事件\n\n![image-20220330232801450](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232801450.png)\n\n执行任务：\n\n```java\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248\")\n                .taskAssignee(\"user1\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n执行成功后我们可以发现子人工任务一没有了，但是也没有子人工任务二，但是主流程中的两个任务都还在\n\n![image-20220330232959807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232959807.png)\n\n而且进入到历史数据中也可以看到\n\n![image-20220330233448096](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330233448096.png)\n\n\n\n\n\n### 取消结束事件\n\n取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。\n\n具体通过案例来讲解：\n\n![image-20220401110131810](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110131810.png)\n\n\n\n结束取消事件我们只能在事务子流程中使用，在FlowableUI中暂时没有找到这个组件，所以在Eclipse中来绘制\n\n![image-20220401110621048](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110621048.png)\n\n\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <transaction id=\"transaction1\" name=\"Transaction\">\n      <startEvent id=\"startevent2\" name=\"事务子流程开始\"></startEvent>\n      <userTask id=\"usertask1\" name=\"人工任务一\" activiti:assignee=\"zhangsan\"></userTask>\n      <sequenceFlow id=\"flow2\" sourceRef=\"startevent2\" targetRef=\"usertask1\"></sequenceFlow>\n      <exclusiveGateway id=\"exclusivegateway1\" name=\"排他网关\"></exclusiveGateway>\n      <sequenceFlow id=\"flow3\" sourceRef=\"usertask1\" targetRef=\"exclusivegateway1\"></sequenceFlow>\n      <userTask id=\"usertask2\" name=\"人工任务二\" activiti:assignee=\"lisi\"></userTask>\n      <sequenceFlow id=\"flow4\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask2\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n      </sequenceFlow>\n      <endEvent id=\"endevent1\" name=\"事务子流程结束\"></endEvent>\n      <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"endevent1\"></sequenceFlow>\n      <endEvent id=\"cancelendevent1\" name=\"取消结束事件\">\n        <cancelEventDefinition></cancelEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"flow6\" sourceRef=\"exclusivegateway1\" targetRef=\"cancelendevent1\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n      <boundaryEvent id=\"boundarycompensation1\" name=\"Compensate\" attachedToRef=\"usertask1\" cancelActivity=\"true\">\n        <compensateEventDefinition></compensateEventDefinition>\n      </boundaryEvent>\n      <serviceTask id=\"servicetask5\" name=\"补偿自动任务\" isForCompensation=\"true\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n      <association id=\"association1\" sourceRef=\"boundarycompensation1\" targetRef=\"servicetask5\" associationDirection=\"None\"></association>\n    </transaction>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"transaction1\"></sequenceFlow>\n    <boundaryEvent id=\"boundarycancel1\" name=\"取消边界事件\" attachedToRef=\"transaction1\" cancelActivity=\"true\">\n      <cancelEventDefinition></cancelEventDefinition>\n    </boundaryEvent>\n    <serviceTask id=\"servicetask3\" name=\"取消事件结束\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow8\" sourceRef=\"boundarycancel1\" targetRef=\"servicetask3\"></sequenceFlow>\n    <endEvent id=\"endevent2\" name=\"取消事件结束\"></endEvent>\n    <sequenceFlow id=\"flow9\" sourceRef=\"servicetask3\" targetRef=\"endevent2\"></sequenceFlow>\n    <serviceTask id=\"servicetask4\" name=\"正常结束任务\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow10\" sourceRef=\"transaction1\" targetRef=\"servicetask4\"></sequenceFlow>\n    <endEvent id=\"endevent3\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow11\" sourceRef=\"servicetask4\" targetRef=\"endevent3\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"248.0\" y=\"390.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"transaction1\" id=\"BPMNShape_transaction1\">\n        <omgdc:Bounds height=\"291.0\" width=\"761.0\" x=\"371.0\" y=\"262.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"431.0\" y=\"382.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"511.0\" y=\"372.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"boundarycompensation1\" id=\"BPMNShape_boundarycompensation1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"581.0\" y=\"412.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"exclusivegateway1\" id=\"BPMNShape_exclusivegateway1\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"661.0\" y=\"380.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"746.0\" y=\"373.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"896.0\" y=\"383.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"cancelendevent1\" id=\"BPMNShape_cancelendevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"664.0\" y=\"472.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask5\" id=\"BPMNShape_servicetask5\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"511.0\" y=\"472.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"boundarycancel1\" id=\"BPMNShape_boundarycancel1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"871.0\" y=\"542.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"980.0\" y=\"640.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1130.0\" y=\"650.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask4\" id=\"BPMNShape_servicetask4\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1291.0\" y=\"391.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent3\" id=\"BPMNShape_endevent3\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1450.0\" y=\"401.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"466.0\" y=\"399.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"511.0\" y=\"399.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"616.0\" y=\"399.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"661.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"701.0\" y=\"400.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"746.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"851.0\" y=\"400.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"896.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n        <omgdi:waypoint x=\"681.0\" y=\"420.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"681.0\" y=\"472.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"association1\" id=\"BPMNEdge_association1\">\n        <omgdi:waypoint x=\"596.0\" y=\"442.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"563.0\" y=\"472.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"283.0\" y=\"407.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"371.0\" y=\"407.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n        <omgdi:waypoint x=\"886.0\" y=\"572.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1032.0\" y=\"640.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n        <omgdi:waypoint x=\"1085.0\" y=\"667.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1130.0\" y=\"667.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow10\" id=\"BPMNEdge_flow10\">\n        <omgdi:waypoint x=\"1132.0\" y=\"407.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1291.0\" y=\"418.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow11\" id=\"BPMNEdge_flow11\">\n        <omgdi:waypoint x=\"1396.0\" y=\"418.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1450.0\" y=\"418.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n流程说明：流程中定义了一个事务子流程和两个自动任务\n\n![image-20220401111036816](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111036816.png)\n\n\n\n\n\n然后在事务子流程中定义了两个人工任务用一个排他网关连接，flag<=0 的情况下会触发 取消结束事件\n\n![image-20220401111201815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111201815.png)\n\n\n\n触发取消结束事件后同时会被取消边界事件捕获而走 取消事件结束的自动任务\n\n![image-20220401111316353](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111316353.png)\n\n\n\n同时自动补偿任务也会触发，关联的自动任务也会触发\n\n![image-20220401111351513](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111351513.png)\n\n注意在设置的时候需要设置补偿自动任务为可补偿的\n\n![image-20220401111438577](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111438577.png)\n\n补偿自动任务绑定的JavaDelegate：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n正常结束任务绑定的JavaDelegate:\n\n```java\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n取消事件结束绑定的JavaDelegate\n\n```java\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n然后我们部署，启动，和执行流程，看输出情况\n\n```java\n    /**\n     * 部署流程\n     * @throws Exception\n     */\n    @Test\n    public void deploy() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"取消结束事件.bpmn20.xml\")\n                .name(\"取消结束事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    /**\n     * 启动流程实例,设置流程变量中的flag=0触发取消结束事件\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248\",map);\n    }\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n\n\n输出结果：\n\n![image-20220401111758140](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111758140.png)\n\n\n\n输出结果是满足我们的期望的。\n\n\n\n### 补偿事件\n\n通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：\n\n![image-20220401202116847](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202116847.png)\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <error id=\"payFail\" errorCode=\"payFail\" ></error>\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"开始事件\"></startEvent>\n        <parallelGateway id=\"parallelgateway1\" name=\"并行网关\"></parallelGateway>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"parallelgateway1\"></sequenceFlow>\n        <serviceTask id=\"servicetask1\" name=\"预订机票\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n        <serviceTask id=\"servicetask2\" name=\"微信支付\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n        <userTask id=\"usertask1\" name=\"人工出票\" activiti:assignee=\"zhangsan\"></userTask>\n        <sequenceFlow id=\"flow2\" sourceRef=\"servicetask1\" targetRef=\"usertask1\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway2\" name=\"Parallel Gateway\"></parallelGateway>\n        <sequenceFlow id=\"flow3\" sourceRef=\"usertask1\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <sequenceFlow id=\"flow4\" sourceRef=\"parallelgateway1\" targetRef=\"servicetask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow5\" sourceRef=\"parallelgateway1\" targetRef=\"servicetask2\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"servicetask2\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <serviceTask id=\"servicetask3\" name=\"取消预订\" isForCompensation=\"true\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n        <boundaryEvent id=\"boundarycompensation1\" name=\"补偿边界事件\" attachedToRef=\"servicetask1\" cancelActivity=\"true\">\n            <compensateEventDefinition></compensateEventDefinition>\n        </boundaryEvent>\n        <boundaryEvent id=\"boundaryerror1\" name=\"错误边界事件\" attachedToRef=\"servicetask2\">\n            <errorEventDefinition errorRef=\"payFail\"></errorEventDefinition>\n        </boundaryEvent>\n        <intermediateThrowEvent id=\"compensationintermediatethrowevent1\" name=\"补偿抛出中间事件\">\n            <compensateEventDefinition></compensateEventDefinition>\n        </intermediateThrowEvent>\n        <sequenceFlow id=\"flow7\" sourceRef=\"boundaryerror1\" targetRef=\"compensationintermediatethrowevent1\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow8\" sourceRef=\"compensationintermediatethrowevent1\" targetRef=\"endevent1\"></sequenceFlow>\n        <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow9\" sourceRef=\"parallelgateway2\" targetRef=\"endevent2\"></sequenceFlow>\n        <association id=\"association1\" sourceRef=\"boundarycompensation1\" targetRef=\"servicetask3\" associationDirection=\"None\"></association>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"160.0\" y=\"360.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway1\" id=\"BPMNShape_parallelgateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"380.0\" y=\"357.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask1\" id=\"BPMNShape_servicetask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"580.0\" y=\"220.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundarycompensation1\" id=\"BPMNShape_boundarycompensation1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"650.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"580.0\" y=\"450.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundaryerror1\" id=\"BPMNShape_boundaryerror1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"650.0\" y=\"490.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"820.0\" y=\"220.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway2\" id=\"BPMNShape_parallelgateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1140.0\" y=\"336.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"830.0\" y=\"336.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"compensationintermediatethrowevent1\" id=\"BPMNShape_compensationintermediatethrowevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"740.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"820.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1225.0\" y=\"339.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"195.0\" y=\"377.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"380.0\" y=\"377.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"685.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"820.0\" y=\"247.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"925.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"336.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"400.0\" y=\"357.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"400.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"580.0\" y=\"247.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"400.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"400.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"580.0\" y=\"477.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"685.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"376.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"665.0\" y=\"520.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"664.0\" y=\"607.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"607.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"775.0\" y=\"607.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"820.0\" y=\"607.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1180.0\" y=\"356.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1225.0\" y=\"356.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"association1\" id=\"BPMNEdge_association1\">\n                <omgdi:waypoint x=\"665.0\" y=\"300.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"664.0\" y=\"363.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"830.0\" y=\"363.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程说明：\n\n\n\n![image-20220401202447583](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202447583.png)\n\n微信支付绑定的JavaDelegate：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"微信支付-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        System.out.println(\"余额不足....\");\n        throw  new BpmnError(\"payFail\");\n    }\n}\n```\n\n预订机票绑定的JavaDelegate\n\n```java\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->预订机票流程执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n取消订单绑定的javaDelegate:\n\n```java\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->机票预订取消了....\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n整个流程执行的过程是：任务开始后会并行的执行机票预订和微信支付，然后在微信支付是抛出payFail错误，同时错误边界事件会捕获到这个错误，然后执行到 补偿抛出中间事件，之后在机票预订的 补偿边界事件 被触发，对应的补偿触发器会执行对应的代码。 然后我们部署加启动流程后观察控制台的输出：\n\n```java\n    /**\n     * 部署流程\n     * @throws Exception\n     */\n    @Test\n    public void deploy() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"补偿事件.bpmn20.xml\")\n                .name(\"补偿事件\")\n                .deploy();\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:4:a45abe9f-b1b5-11ec-9daf-c03c59ad2248\");\n    }\n```\n\n控制台输出：\n\n```txt\nMyTwoDelegate---->预订机票流程执行了2022-04-01T20:17:44.985\n微信支付-----》MyOneDelegate2022-04-01T20:17:44.987\n余额不足....\nMyThreeDelegate---->机票预订取消了....2022-04-01T20:17:45.028\n```\n\n输出的结果和我们前面设计的是一样的，搞定~\n\n","source":"_posts/2022/10/flowable高级篇.md","raw":"---\ntitle: flowable高级篇\ndate: 2022-10-19 23:45:46\ntags: [BPMN,Flowable]\ncategories: [笔记]\n---\n# flowable高级篇\n> lecture：波波老师\n\n# 任务分配和流程变量\n\n## 任务分配\n\n### 固定分配\n\n固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式\n\n![image-20220322205919319](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322205919319.png)\n\n![image-20220322210018615](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322210018615.png)\n\n\n\n### 表达式分配\n\nFlowable使用UEL进行表达式解析。UEL代表*Unified Expression Language*，是EE6规范的一部分.Flowable支持两种UEL表达式： UEL-value 和UEL-method\n\n#### 值表达式\n\n**值表达式 Value expression**: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如\n\n```txt\n${myVar}\n${myBean.myProperty}\n```\n\n案例讲解：\n\n![image-20220322212342245](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212342245.png)\n\n\n\n可以看到通过表达式处理的效果\n\n![image-20220322212431304](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212431304.png)\n\n\n\n先部署流程，然后在启动流程实例的时候绑定表达式对应的值\n\n```java\n/**\n     * 启动流程实例\n     */\n    @Test\n    public void testRunProcess(){\n\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 设置 assignee 的取值\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"assignee0\",\"张三\") ;\n        variables.put(\"assignee1\",\"李四\"); \n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"MyHolidayUI:1:4\", variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n    }\n```\n\n在流程变量表中我们可以看到对应的流程变量信息\n\n![image-20220322213558754](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213558754.png)\n\n同时在Task表中，可以看到流程当前的分配人是`张三`，说明UEL表达式被解析了\n\n![image-20220322213655020](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213655020.png)\n\n\n\n\n\n\n\n#### 方法表达式\n\n**方法表达式 Method expression**: 调用一个方法，可以带或不带参数。**当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。**传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如：\n\n```txt\n${printer.print()}\n${myBean.addNewOrder('orderName')}\n${myBean.doSomething(myVar, execution)}\n```\n\nmyBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法\n\n\n\n\n\n### 监听器分配\n\n可以使用监听器来完成很多Flowable的流程业务。\n\n我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee\n\n创建自定义监听器：\n\n```java\n/**\n * 自定义的监听器\n */\npublic class MyTaskListener implements TaskListener {\n    @Override\n    public void notify(DelegateTask delegateTask) {\n        System.out.println(\"监听器触发了：\" + delegateTask.getName());\n        if(\"提交请假流程\".equals(delegateTask.getName()) &&\n                \"create\".equals(delegateTask.getEventName())){\n            // 指定任务的负责人\n            delegateTask.setAssignee(\"小明\");\n        }else {\n            delegateTask.setAssignee(\"小张\");\n        }\n    }\n}\n```\n\n\n\n然后在FlowableUI中关联对应的监听器\n\n```txt\ncreate:任务创建后触发\nassignment:任务分配后触发\nDelete:任务完成后触发\nAll：所有事件都触发\n```\n\n\n\n![image-20220322214807416](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322214807416.png)\n\n然后我们先部署流程，然后执行查看效果：\n\n![image-20220322215711211](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215711211.png)\n\n然后在Task表中我们可以看到对应的分配人为`小明`说明通过监听也完成了任务分配的工作了\n\n![image-20220322215805734](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215805734.png)\n\n\n\n\n\n\n\n## 流程变量\n\n流程实例按步骤执行时，需要使用一些数据。在Flowable中，这些数据称作*变量(variable)*，并会存储在数据库中。变量可以用在表达式中（例如在排他网关中用于选择正确的出口路径），也可以在Java服务任务(service task)中用于调用外部服务（例如为服务调用提供输入或结果存储），等等。\n\n流程实例可以持有变量（称作*流程变量 process variables*）；用户任务以及*执行(executions)*——流程当前活动节点的指针——也可以持有变量。流程实例可以持有任意数量的变量，每个变量存储为*ACT_RU_VARIABLE*数据库表的一行。\n\n所有的*startProcessInstanceXXX*方法都有一个可选参数，用于在流程实例创建及启动时设置变量。例如，在*RuntimeService*中：\n\n```java\nProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map<String, Object> variables);\n```\n\n也可以在流程执行中加入变量。例如，(*RuntimeService*):\n\n```java\nvoid setVariable(String executionId, String variableName, Object value);\nvoid setVariableLocal(String executionId, String variableName, Object value);\nvoid setVariables(String executionId, Map<String, ? extends Object> variables);\nvoid setVariablesLocal(String executionId, Map<String, ? extends Object> variables);\n```\n\n\n\n![image-20220324095243595](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324095243595.png)\n\n\n\n### 全局变量\n\n流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量\n\n注意：如：    Global变量：userId（变量名）、zhangsan（变量值）\n\nglobal 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。\n\n### 局部变量\n\n任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。\n\nLocal 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 \n\n\n\n\n\n### 案例讲解\n\n 需求：员工创建出差申请单，由部门经理审核，部门经理申请通过后3天以下由财务直接申批，3天以上先由总经理审批，总经理审批通过后再由财务审批。\n\n\n\n![image-20220324093855618](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093855618.png)\n\n\n\n连接先设置条件\n\n![image-20220324093806442](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093806442.png)\n\n\n\n![image-20220324093700631](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093700631.png)\n\n\n\n\n\n部署流程\n\n```java\n@Test\npublic void deploy(){\n    ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n    RepositoryService repositoryService = processEngine.getRepositoryService();\n    Deployment deploy = repositoryService.createDeployment()\n        .addClasspathResource(\"出差申请单.bpmn20.xml\")\n        .name(\"请假流程...\")\n        .category(\"请假\") // 分类\n        .tenantId(\"dpb\") // 租户id\n        .deploy();\n    System.out.println(\"deploy.getId() = \" + deploy.getId());\n    System.out.println(\"deploy.getName() = \" + deploy.getName());\n    System.out.println(\"deploy.getCategory() = \" + deploy.getCategory());\n}\n```\n\n\n\n启动流程实例：并且指定全局流程变量\n\n```java\n/**\n     * 在启动流程实例的时候设置流程变量\n     */\n    @Test\n    public void runProcess(){\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 启动流程实例通过 RuntimeService 对象\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 设置流程变量\n        Map<String,Object> variables = new HashMap<>();\n        // 设置assignee的取值\n        variables.put(\"assignee0\",\"张三\");\n        variables.put(\"assignee1\",\"李四\");\n        variables.put(\"assignee2\",\"王五\");\n        variables.put(\"assignee3\",\"赵财务\");\n        // 启动流程实例，第一个参数是流程定义的id\n        ProcessInstance processInstance = runtimeService\n                .startProcessInstanceById(\"evection:1:4\",variables);// 启动流程实例\n        // 输出相关的流程实例信息\n        System.out.println(\"流程定义的ID：\" + processInstance.getProcessDefinitionId());\n        System.out.println(\"流程实例的ID：\" + processInstance.getId());\n        System.out.println(\"当前活动的ID：\" + processInstance.getActivityId());\n\n    }\n```\n\n完成Task任务，同时也可以指定流程变量\n\n```java\n/**\n     * 完成任务时指定流程变量\n     */\n    @Test\n    public void completeTask(){\n\n        // 获取流程引擎对象\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"evection:1:4\")\n                .taskAssignee(\"李四\")\n                .singleResult();\n        // 添加流程变量\n        Map<String, Object> map = task.getProcessVariables();\n        map.put(\"num\",4);\n\n        // 完成任务\n        taskService.complete(task.getId(),map);\n    }\n```\n\n当然我们也可以在处理流程之外通过Task编号来修改流程变量\n\n```java\n/**\n     * 通过当前任务设置\n     */\n    @Test\n    public void currentTask(){\n        //   当前待办任务id\n        //  获取processEngine\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"evection:1:4\")\n                .taskAssignee(\"王五\")\n                .singleResult();\n        // 添加流程变量\n        Map<String, Object> map = task.getProcessVariables();\n        map.put(\"num\",1);\n        //  一次设置多个值 设置局部变量\n        taskService.setVariables(task.getId(), map);\n    }\n```\n\n\n\n\n\n# 候选人和候选人组\n\n在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。\n\n## 候选人\n\n### 定义流程图\n\n定义流程图，同时指定候选人，多个候选人会通过`,`连接\n\n![image-20220325095959489](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325095959489.png)\n\n![image-20220325100835461](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325100835461.png)\n\n\n\n\n\n### 部署和启动流程实例\n\n部署流程，并且在启动流程实例的时候对UEL表达式赋值\n\n```java\n    /**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-候选人.bpmn20.xml\")\n                .name(\"请求流程-候选人\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        variables.put(\"candidate1\",\"张三\");\n        variables.put(\"candidate2\",\"李四\");\n        variables.put(\"candidate3\",\"王五\");\n        runtimeService.startProcessInstanceById(\"holiday-candidate:1:4\",variables);\n    }\n```\n\n在对应的表结构中我们可以看到流程变量已经有了，但是对于的Task的Assignee还是为空。\n\n![image-20220325101054787](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325101054787.png)\n\n\n\n\n\n![image-20220325102600573](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325102600573.png)\n\n\n\n\n\n### 任务的查询\n\n根据当前登录的用户，查询对应的候选任务\n\n```java\n   /**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskCandidateUser(\"李四\") # 注意\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n```\n\n\n\n### 任务的拾取\n\n知道了我有可拾取的任务后，拾取任务。\n\n```java\n/**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskCandidateUser(\"李四\")\n                .singleResult();\n        if(task != null){\n            // 拾取对应的任务\n            taskService.claim(task.getId(),\"李四\");\n            System.out.println(\"任务拾取成功\");\n        }\n    }\n```\n\n\n\n![image-20220325103624344](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325103624344.png)\n\n\n\n### 任务的归还\n\n拾取任务后不想操作那么就归还任务\n\n```java\n    /**\n     * 退还任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void unclaimTaskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"张三\")\n                .singleResult();\n        if(task != null){\n            // 拾取对应的任务\n            taskService.unclaim(task.getId());\n            System.out.println(\"归还拾取成功\");\n        }\n    }\n```\n\n\n\n\n\n### 任务的交接\n\n拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理\n\n```java\n   /**\n     * 任务的交接\n     *    如果我获取了任务，但是不想执行，那么我可以把这个任务交接给其他的用户\n     */\n    @Test\n    public void taskCandidate(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"李四\")\n                .singleResult();\n        if(task != null){\n            // 任务的交接\n            taskService.setAssignee(task.getId(),\"王五\");\n            System.out.println(\"任务交接给了王五\");\n        }\n    }\n```\n\n\n\n\n\n### 任务的完成\n\n正常的任务处理\n\n```java\n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-candidate:1:4\")\n                .taskAssignee(\"王五\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n\n```\n\n\n\n\n\n\n\n## 候选人组\n\n当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。\n\n### 管理用户和组\n\n#### 用户管理\n\n我们需要先单独维护用户信息。后台对应的表结构是`ACT_ID_USER`.\n\n```java\n   /**\n     * 维护用户\n     */\n    @Test\n    public void createUser(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 通过 IdentityService 完成相关的用户和组的管理\n        IdentityService identityService = processEngine.getIdentityService();\n        User user = identityService.newUser(\"田佳\");\n        user.setFirstName(\"田\");\n        user.setLastName(\"jia\");\n        user.setEmail(\"tianjia@qq.com\");\n        identityService.saveUser(user);\n    }\n```\n\n\n\n![image-20220325110324815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110324815.png)\n\n\n\n#### Group管理\n\n维护对应的Group信息，后台对应的表结构是`ACT_ID_GROUP`\n\n```java\n    /**\n     * 创建用户组\n     */\n    @Test\n    public void createGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        // 创建Group对象并指定相关的信息\n        Group group = identityService.newGroup(\"group2\");\n        group.setName(\"开发部\");\n        group.setType(\"type1\");\n        // 创建Group对应的表结构数据\n        identityService.saveGroup(group);\n\n    }\n```\n\n![image-20220325110408435](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110408435.png)\n\n\n\n#### 用户分配组\n\n用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是`ACT_ID_MEMBERSHIP`\n\n```java\n    /**\n     * 将用户分配给对应的Group\n     */\n    @Test\n    public void userGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        // 根据组的编号找到对应的Group对象\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        List<User> list = identityService.createUserQuery().list();\n        for (User user : list) {\n            // 将用户分配给对应的组\n            identityService.createMembership(user.getId(),group.getId());\n        }\n    }\n```\n\n\n\n![image-20220325110511848](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110511848.png)\n\n\n\n\n\n### 候选人组应用\n\n搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了\n\n#### 创建流程图\n\n![image-20220325111013641](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325111013641.png)\n\n\n\n![image-20220325110952527](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110952527.png)\n\n\n\n\n\n\n\n#### 流程的部署运行\n\n然后我们把流程部署和运行，注意对UEL表达式赋值，关联上Group\n\n```java\n/**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-候选人组.bpmn20.xml\")\n                .name(\"请求流程-候选人\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        IdentityService identityService = processEngine.getIdentityService();\n        Group group = identityService.createGroupQuery().groupId(\"group1\").singleResult();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"g1\",group.getId()); // 给流程定义中的UEL表达式赋值\n        runtimeService.startProcessInstanceById(\"holiday-group:1:17504\",variables);\n    }\n```\n\n对应表结构中就有对应的体现\n\n![image-20220325112545719](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325112545719.png)\n\n\n\n\n\n#### 任务的拾取和完成\n\n然后完成任务的查询拾取和处理操作\n\n```java\n/**\n     * 根据登录的用户查询对应的可以拾取的任务\n     *\n     */\n    @Test\n    public void queryTaskCandidateGroup(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 根据当前登录的用户找到对应的组\n        IdentityService identityService = processEngine.getIdentityService();\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(\"邓彪\").singleResult();\n\n        TaskService taskService = processEngine.getTaskService();\n        List<Task> list = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskCandidateGroup(group.getId())\n                .list();\n        for (Task task : list) {\n            System.out.println(\"task.getId() = \" + task.getId());\n            System.out.println(\"task.getName() = \" + task.getName());\n        }\n    }\n\n    /**\n     * 拾取任务\n     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了\n     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还\n     */\n    @Test\n    public void claimTaskCandidate(){\n        String userId = \"田佳\";\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        // 根据当前登录的用户找到对应的组\n        IdentityService identityService = processEngine.getIdentityService();\n        // 当前用户所在的组\n        Group group = identityService.createGroupQuery().groupMember(userId).singleResult();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskCandidateGroup(group.getId())\n                .singleResult();\n        if(task != null) {\n            // 任务拾取\n            taskService.claim(task.getId(),userId);\n            System.out.println(\"任务拾取成功\");\n        }\n    }  \n   /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-group:1:17504\")\n                .taskAssignee(\"邓彪\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n```\n\n\n\n\n\n# 网关\n\n网关用来控制流程的流向\n\n## 排他网关\n\n排他网关（exclusive gateway）（也叫*异或网关 XOR gateway*，或者更专业的，*基于数据的排他网关 exclusive data-based gateway*），用于对流程中的**决策**建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为*true*）继续流程。\n\n**请注意这里出口顺序流的含义与BPMN 2.0中的一般情况不一样。一般情况下，会选择所有条件计算为true的顺序流，并行执行。而使用排他网关时，只会选择一条顺序流。当多条顺序流的条件都计算为true时，会且仅会选择在XML中最先定义的顺序流继续流程。如果没有可选的顺序流，会抛出异常。**\n\n图示\n\n排他网关用内部带有’X’图标的标准网关（菱形）表示，'X’图标代表*异或*的含义。请注意内部没有图标的网关默认为排他网关。BPMN 2.0规范不允许在同一个流程中混合使用有及没有X的菱形标志。\n\n![image-20220326100630908](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326100630908.png)\n\n\n\n案例：\n\n![image-20220326103951903](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326103951903.png)\n\n\n\n```java\n   /**\n     * 部署流程\n     */\n    @Test\n    public void deploy(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RepositoryService repositoryService = processEngine.getRepositoryService();\n\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"请假流程-排他网关.bpmn20.xml\")\n                .name(\"请求流程-排他网关\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(deploy.getName());\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void runProcess(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",3); // 给流程定义中的UEL表达式赋值\n        runtimeService.startProcessInstanceById(\"holiday-exclusive:1:4\",variables);\n    }\n\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void setVariables(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",4); // 给流程定义中的UEL表达式赋值\n        runtimeService.setVariables(\"12503\",variables);\n    }\n\n\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                //.processInstanceId(\"2501\")\n                .processDefinitionId(\"holiday-exclusive:1:4\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        if(task != null){\n            // 完成任务\n            taskService.complete(task.getId());\n            System.out.println(\"完成Task\");\n        }\n    }\n```\n\n\n\n\n\n如果从网关出去的线所有条件都不满足的情况下会抛出系统异常，\n\n![image-20220326104744181](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326104744181.png)\n\n\n\n但是要注意任务没有介绍，还是原来的任务，我们可以重置流程变量\n\n```java\n    @Test\n    public void setVariables(){\n        ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();\n        RuntimeService runtimeService = processEngine.getRuntimeService();\n        // 给流程定义中的UEL表达式赋值\n        Map<String,Object> variables = new HashMap<>();\n        // variables.put(\"g1\",\"group1\");\n        variables.put(\"num\",4); // 给流程定义中的UEL表达式赋值\n        runtimeService.setVariables(\"12503\",variables);\n    }\n```\n\n\n\n\n\n前面我们可以直接在连接线上定义条件，那为什么还要有排他网关呢？直接在线上的情况，如果条件都不满足，流程就结束了，是异常结束!!\n\n## 并行网关\n\n并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：\n\n* fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。\n\n* join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。\n\n注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。\n\n**与其他网关的主要区别是，并行网关不会解析条件。** **即使顺序流中定义了条件，也会被忽略。**\n\n\n\n案例：\n\n![image-20220326110341232](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326110341232.png)\n\n当我们执行了创建请假单后，到并行网关的位置的时候，在ACT_RU_TASK表中就有两条记录\n\n![image-20220326111359504](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111359504.png)\n\n然后同时在ACT_RU_EXECUTION中有三条记录，一个任务对应的有两个执行实例\n\n![image-20220326111453630](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111453630.png)\n\n\n\n\n\n\n\n## 包含网关\n\n包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。\n\n包含网关的功能是基于进入和外出顺序流的：\n\n* 分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。\n\n* 汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。\n\n\n\n![image-20220326112720089](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326112720089.png)\n\n\n\n\n\n## 事件网关\n\n事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。\n\n事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的\"执行\"， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：\n\n1. 事件网关必须有两条或以上外出顺序流；\n2. 事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）\n3. 连接到事件网关的中间捕获事件必须只有一个入口顺序流。 \n\n\n\n\n\n# 事件\n\n事件（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：*捕获（catching）*与*抛出（throwing）*事件。\n\n- **捕获:** 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。\n- **抛出:** 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。\n\n\n\n## 定时事件\n\n定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件\n\n### 定时器启动事件\n\n定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。\n\n***请注意**：*子流程不能有定时器启动事件。\n\n***请注意**：*定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。\n\n***请注意**：*当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。\n\n定时器启动事件，用其中有一个钟表图标的圆圈来表示。\n\n![image-20220327223547656](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327223547656.png)\n\n案例：\n\n![image-20220327231015715](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231015715.png)\n\n在定时启动的节点设置时间：\n\n![image-20220327231055237](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231055237.png)\n\n可以通过FlowableUI中的部署来演示，通过FlowableUI我们可以看到，没有启动流程实例的情况下，到里23:14:14秒的时候自动帮助我们创建了一个流程实例。\n\n![image-20220327231551538](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231551538.png)\n\n\n\n\n\n\n\n### 定时器捕获中间事件\n\n当第一个人工处理完成后，第二个人工处理的任务需要在2022-03-27T23:25:14之后执行\n\n案例：\n\n![image-20220327232259428](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232259428.png)\n\n通过FlowableUI的案例演示我们可以看到后一个任务是在定时时间之后执行的\n\n![image-20220327232624091](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232624091.png)\n\n\n\n\n\n### 定时器边界事件\n\n人工任务1如果在定义的`2022-03-27T23:36:14`这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.\n\n案例\n\n![image-20220327233132259](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233132259.png)\n\n\n\n\n\n发布启动流程\n\n![image-20220327233410596](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233410596.png)\n\n\n\n然后在张三这个位置我们不完成，等到定时到来，达到定时的时间，任务进入到了人工审批三\n\n\n\n### timeDuration\n\n​       在定时事件中我们一定要放开如下的配置：\n\n![image-20220329082431920](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329082431920.png)\n\n指定计时器在启动前应等待多长的时间，首先一定时器启动事件为例：\n\n#### 开始事件\n\n![image-20220328200755160](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328200755160.png)\n\n可以通过FlowableUI的应用来验证\n\n![image-20220328202242555](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202242555.png)\n\n发布任务后然后我们等待两分钟就可以看到任务到了`zhangsan`的位置。或者我们也可以在SpringBoot整合Flowable的项目中添加对应的Controller来处理\n\n```java\n    @Autowired\n    private ProcessEngine processEngine;\n\n\n    @GetMapping(\"/deploy\")\n    public String deploy(){\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"test003.bpmn20.xml\")\n                .name(\"等待定时器启动事件\")\n                .deploy();\n        return \"部署任务成功....\";\n    }\n```\n\n提交请求完成部署操作\n\n![image-20220328202918399](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202918399.png)\n\n\n\n生成了对应的Task记录\n\n![image-20220328203621023](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203621023.png)\n\n\n\n**注意**：在事件中一定要开启异步任务，不然相关的事件是不会触发的！\n\n![image-20220328203656000](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203656000.png)\n\n\n\n#### 中间事件\n\n然后来看看中间事件的等待定时器事件案例：\n\n![image-20220328204205453](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204205453.png)\n\n案例由两个自动任务和一个定时器中间事件组成，在定时任务中绑定了两个JavaDelegate的Java类来处理\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n\n\n然后流程图中的关联为\n\n![image-20220328204349358](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204349358.png)\n\n另一个类似，然后定时器中间事件的等待时间设置是2分钟。我们部署后通过Java代码来演示看看\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"等待定时器中间事件.bpmn20.xml\")\n                .name(\"等待定时中间事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后我们需要启动流程实例，之后等待两分钟看效果\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"Test04:1:325edb10-ae95-11ec-a77f-c03c59ad2248\");\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220328205718521](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328205718521.png)\n\n\n\n#### 边界事件\n\n最后我们来看看边界事件中的等待定时器的处理，案例为：\n\n![image-20220328210150212](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210150212.png)\n\n该案例由一个人工审核+两个自动任务+定时器边界事件组成，自动任务一绑定的JavaDelegate是\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n自动任务二绑定的JavaDelegate是\n\n```java\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n定时器边界事件设置的是30S，也就是如果人工审核在30S还没处理就会触发边界事件：通过代码来演示，部署流程后需要启动流程，然后等待30S看控制台输出\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"等待定时器边界事件.bpmn20.xml\")\n                .name(\"等待定时器边界事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"test05:1:c46f83bf-ae97-11ec-b055-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n等待控制台输出：\n\n![image-20220328210905204](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210905204.png)\n\n\n\n小结：timeDuration在三种定时器的事件中\n\n* 定时器启动事件：等待指定时间后启动流程实例\n* 定时器中间事件：AB任务中间有个定时器中间事件，A任务处理后需要等待对应的时间才能流转到B处\n* 定时器边界事件：任务A绑定了定时器边界事件后，如果在等待时间以内A没有处理任务，那么就会触发对应的边界事件\n\n\n\n\n\n### timeCycle\n\n指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式\n\n* 第一种是按照[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals)标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3/PT10H\n* 也可以使用*timeCycle*的可选属性*endDate*，或者像这样直接写在时间表达式的结尾：`R3/PT10H/${EndDate}`。 当到达endDate时，应用会停止，并为该任务创建其他作业\n* 也可以通过cron表达式来处理\n\n\n\n#### 开始事件\n\n编写案例来演示：\n\n![image-20220328213218525](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213218525.png)\n\n重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n![image-20220328213330813](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213330813.png)\n\n然后我们部署看效果\n\n```java\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"重复启动事件.bpmn20.xml\")\n                .name(\"等待定时器边界事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n![image-20220328213955271](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213955271.png)\n\n\n\n然后我们再指定下endDate来看看案例，直接可以在xml中来处理\n\n```xml\n      <timerEventDefinition>\n        <timeCycle>R3/PT30S/2022-03-28T21:46:11+00:00</timeCycle>\n      </timerEventDefinition>\n```\n\n![image-20220328214459137](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328214459137.png)\n\n\n\n此外还可以通过cron表达式来处理：\n\n```corn\n0 0/5 * * * ?\n```\n\n![image-20220328215255141](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215255141.png)\n\n![image-20220328215340678](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215340678.png)\n\n\n\n#### 中间事件\n\n&emsp;timeCycle作为中间事件的话，只会执行一次，案例如下\n\n![image-20220328225250878](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225250878.png)\n\n案例中的自动任务一二对应绑定如下的JavaDelegate.\n\n```java\npublic class SignalStartOnedelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了-111-------->\"+ LocalDateTime.now().toString());\n    }\n}\n\npublic class SignalStartTwodelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"-------触发了222--------->\"+ LocalDateTime.now().toString());\n    }\n}\n```\n\n中间事件的设置为`R3/PT30S` 循环3次，间隔30秒执行，但是这是中间事件，其实只会执行一次，我来看效果\n\n部署后启动\n\n```java\n@Autowired\n    private ProcessEngine processEngine;\n\n    @Test\n    public void test01() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"循环中间事件.bpmn20.xml\")\n                .name(\"循环中间事件...\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"cycle-middle-event:1:3456ade8-aea7-11ec-9064-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220328225931465](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225931465.png)\n\n\n\n\n\n#### 边界事件\n\n在边界事件中，定义了循环条件`R3/PT30S`理论上要循环3次，间隔30S，单其实也只会执行一次，来看案例\n\n![image-20220328231838967](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231838967.png)\n\n\n\n案例上面的等待时间的是一样的，只是边界事件是30S\n\n![image-20220328231955441](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231955441.png)\n\n\n\n然后我们部署启动流程看效果\n\n![image-20220329094741327](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329094741327.png)\n\n\n\n总结：循环设定\n\n* 启动事件：根据设置循环启动流程实例\n* 中间事件：即使设置了循环时间也只会触发异常\n* 边界事件：即使设置了循环时间也只会触发异常\n\n\n\n\n\n\n\n## 消息事件\n\n消息事件（message event），是指引用具名消息的事件。消息具有名字与载荷。与信号不同，消息事件只有一个接收者\n\n### 启动事件\n\n消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解\n\n![image-20220329103837021](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329103837021.png)\n\n我们需要先定义一个消息\n\n![image-20220329105849732](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105849732.png)\n\n然后在消息开始节点出引用\n\n![image-20220329105922977](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105922977.png)\n\n然后通过代码来处理，部署和启动\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息启动事件.bpmn20.xml\")\n                .name(\"消息启动事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n部署后不会自动启动，我们需要接收相关的信息后来触发。\n\n```java\n   /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n       // runtimeService.startProcessInstanceById(\"event006:1:0532e730-af02-11ec-8cf3-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n\n\n\n\n**注意**：发送消息发送的应该是消息的名称而不是消息的ID，报错如下：\n\n![image-20220329104823537](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329104823537.png)\n\n\n\n\n\n### 中间事件\n\n消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，`自动流程1`处理完成后，需要接收特定的消息之后才能进入到`自动流程2`\n\n![image-20220329111412619](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111412619.png)\n\n消息中间事件绑定的消息为\n\n![image-20220329111446959](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111446959.png)\n\n\n\n\n\n\n\n然后通过代码来演示\n\n```java\n   /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息中间事件.bpmn20.xml\")\n                .name(\"消息中间事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n\n    /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n        runtimeService.startProcessInstanceById(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        //runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        //TimeUnit.MINUTES.sleep(1);\n    }\n\n    /**\n     * 中间事件-发布消息\n     */\n    @Test\n    void recevedMsg(){\n        // 需要查询到executionId\n        String processExecutionId = \"b5349e22-af0e-11ec-93e6-c03c59ad2248\";\n        // 我们需要根据流程实例编号找到对应的执行编号\n       /* Execution execution = runtimeService.createExecutionQuery()\n                .processInstanceId(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\")\n                .singleResult();\n        System.out.println(\"----------->\"+execution.getId());*/\n        runtimeService.messageEventReceived(\"第二个消息\",processExecutionId);\n    }\n```\n\n可以看到的输出效果\n\n![image-20220329112435376](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329112435376.png)\n\n\n\n### 边界事件\n\n消息边界事件，如果在消息触发前还没有，案例演示：\n\n![image-20220329113848978](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329113848978.png)\n\n部署流程\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"消息边界事件.bpmn20.xml\")\n                .name(\"消息边界事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n    /**\n     * 通过消息来启动一个流程实例\n     */\n    @Test\n    void startFlow() throws Exception{\n\n        runtimeService.startProcessInstanceById(\"event009:1:f2096787-af11-11ec-b290-c03c59ad2248\");\n       // 注意：发送消息发送的应该是消息的名称而不是消息的ID\n        //runtimeService.startProcessInstanceByMessage(\"第一个消息\");\n        System.out.println(\"启动时间：\" + new Date());\n        // 我们得保证容器的运行，所以需要阻塞\n        //TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n部署流程后启动流程实例会运转到\n\n![image-20220329114038773](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114038773.png)\n\n\n\n如果人工处理在消息订阅前没有处理就会触发边界事件\n\n```java\n    /**\n     * 边界事件-发布消息\n     */\n    @Test\n    void recevedMsg(){\n        // 需要查询到executionId\n        String processExecutionId = \"1d503361-af12-11ec-89a4-c03c59ad2248\";\n        // 我们需要根据流程实例编号找到对应的执行编号\n       /* Execution execution = runtimeService.createExecutionQuery()\n                .processInstanceId(\"event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248\")\n                .singleResult();\n        System.out.println(\"----------->\"+execution.getId());*/\n        runtimeService.messageEventReceived(\"第三个消息\",processExecutionId);\n    }\n```\n\n\n\n![image-20220329114505074](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114505074.png)\n\n\n\n\n\n\n\n## 错误事件\n\n错误事件可以用做一个流程的开始事件或者作为一个任务或者子流程的边界事件，错误事件没有提供作用中间事件的功能，这一点和前面介绍的定时器事件和消息事件还有区别的。\n\n### 开始事件\n\n错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。**错误启动事件不能用于启动流程实例**。\n\n错误启动事件总是中断。我们通过案例来介绍。此处我们用Eclipse来绘制流程图，熟悉下Eclipse工具\n\n![image-20220329235608917](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235608917.png)\n\n注意：绘制的是子流程事件：\n\n![image-20220330004724798](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004724798.png)\n\n然后我们再定义一个错误，内容为：\n\n```xml\n<error id=\"error01\" errorCode=\"abcd\">\n```\n\n在FlowableUI中没找到错误定义的选项，我们就在流程文件中自己添加即可。\n\n\n\n![image-20220329235702382](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235702382.png)\n\n\n\n![image-20220329214507352](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329214507352.png)\n\n完整的流程文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <error id=\"error01\" errorCode=\"abcd\"></error>\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <serviceTask id=\"servicetask1\" name=\"自动任务一\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"servicetask1\"></sequenceFlow>\n    <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow2\" sourceRef=\"servicetask1\" targetRef=\"endevent1\"></sequenceFlow>\n    <subProcess id=\"eventsubprocess1\" name=\"Event sub Process\" triggeredByEvent=\"true\">\n      <startEvent id=\"errorstartevent1\" name=\"Error start\">\n        <errorEventDefinition errorRef=\"error01\"></errorEventDefinition>\n      </startEvent>\n      <serviceTask id=\"servicetask2\" name=\"自动任务二\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n      <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n      <sequenceFlow id=\"flow3\" sourceRef=\"servicetask2\" targetRef=\"endevent2\"></sequenceFlow>\n      <sequenceFlow id=\"flow4\" sourceRef=\"errorstartevent1\" targetRef=\"servicetask2\"></sequenceFlow>\n    </subProcess>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"480.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask1\" id=\"BPMNShape_servicetask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"710.0\" y=\"250.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"930.0\" y=\"260.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"eventsubprocess1\" id=\"BPMNShape_eventsubprocess1\">\n        <omgdc:Bounds height=\"211.0\" width=\"401.0\" x=\"530.0\" y=\"420.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"errorstartevent1\" id=\"BPMNShape_errorstartevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"600.0\" y=\"520.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"700.0\" y=\"510.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"850.0\" y=\"520.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"515.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"710.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"815.0\" y=\"277.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"930.0\" y=\"277.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"805.0\" y=\"537.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"850.0\" y=\"537.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"635.0\" y=\"537.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"700.0\" y=\"537.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n然后我们在主流程中的`自动任务一`中我们抛出异常\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        // 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致\n        throw new BpmnError(\"abcd\");\n    }\n}\n```\n\n然后我们在`自定义任务二`中简单定义一个输出即可。然后我们部署任务\n\n```java\n    @Test\n    public void test01() throws Exception{\n        ZipInputStream in = new ZipInputStream(SpringBootFlowableApplicationTests.class.getClassLoader().getResourceAsStream(\"错误启动事件.bar\"));\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addZipInputStream(in)\n                .name(\"错误启动事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n\n\n然后我们再启动流程实例，那么自动任务一就会抛出异常，然后对应的子流程就会开始\n\n```java\n    /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:1:c0462994-af79-11ec-8cae-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n输出结果获取到了我们期望的结果\n\n![image-20220330000557061](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000557061.png)\n\n\n\n\n\n通过输出结果也可以看到执行的自动任务一后，抛出错误事件`abcd`,子流程触发并执行了。\n\n![image-20220330000741836](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000741836.png)\n\n\n\n\n\n### 边界事件\n\n定义如下的流程图：\n\n![image-20220330004335187](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004335187.png)\n\n注意绘制的时候\n\n![image-20220330004644673](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004644673.png)\n\nxml文件内容为：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <error id=\"error02\" errorCode=\"a123\" ></error>\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n        <serviceTask id=\"servicetask2\" name=\"自动任务二\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n        <serviceTask id=\"servicetask3\" name=\"自动任务三\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n        <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow5\" sourceRef=\"servicetask2\" targetRef=\"endevent2\"></sequenceFlow>\n        <endEvent id=\"endevent3\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow6\" sourceRef=\"servicetask3\" targetRef=\"endevent3\"></sequenceFlow>\n        <subProcess id=\"subprocess1\" name=\"Sub Process\">\n            <startEvent id=\"startevent2\" name=\"Start\"></startEvent>\n            <serviceTask id=\"servicetask4\" name=\"Service Task\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n            <endEvent id=\"endevent4\" name=\"End\"></endEvent>\n            <sequenceFlow id=\"flow10\" sourceRef=\"servicetask4\" targetRef=\"endevent4\"></sequenceFlow>\n            <sequenceFlow id=\"flow11\" sourceRef=\"startevent2\" targetRef=\"servicetask4\"></sequenceFlow>\n        </subProcess>\n        <sequenceFlow id=\"flow8\" sourceRef=\"startevent1\" targetRef=\"subprocess1\"></sequenceFlow>\n        <sequenceFlow id=\"flow9\" sourceRef=\"subprocess1\" targetRef=\"servicetask2\"></sequenceFlow>\n        <boundaryEvent id=\"boundaryerror1\" name=\"Error\" attachedToRef=\"subprocess1\">\n            <errorEventDefinition errorRef=\"error02\"></errorEventDefinition>\n        </boundaryEvent>\n        <sequenceFlow id=\"flow12\" sourceRef=\"boundaryerror1\" targetRef=\"servicetask3\"></sequenceFlow>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"402.0\" y=\"388.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1285.0\" y=\"368.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1099.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1440.0\" y=\"378.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent3\" id=\"BPMNShape_endevent3\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1320.0\" y=\"600.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"subprocess1\" id=\"BPMNShape_subprocess1\">\n                <omgdc:Bounds height=\"271.0\" width=\"451.0\" x=\"660.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"720.0\" y=\"390.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask4\" id=\"BPMNShape_servicetask4\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"850.0\" y=\"381.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent4\" id=\"BPMNShape_endevent4\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1030.0\" y=\"391.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundaryerror1\" id=\"BPMNShape_boundaryerror1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"950.0\" y=\"520.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"1390.0\" y=\"395.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1440.0\" y=\"395.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"1204.0\" y=\"617.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1320.0\" y=\"617.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow10\" id=\"BPMNEdge_flow10\">\n                <omgdi:waypoint x=\"955.0\" y=\"408.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1030.0\" y=\"408.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow11\" id=\"BPMNEdge_flow11\">\n                <omgdi:waypoint x=\"755.0\" y=\"407.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"850.0\" y=\"408.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"437.0\" y=\"405.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"660.0\" y=\"405.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1111.0\" y=\"405.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1285.0\" y=\"395.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow12\" id=\"BPMNEdge_flow12\">\n                <omgdi:waypoint x=\"965.0\" y=\"550.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"964.0\" y=\"617.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1099.0\" y=\"617.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n对应的三个自定义任务绑定的JavaDelegate为：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        // 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致\n        throw new BpmnError(\"a123\");\n    }\n}\n\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n然后我们部署文件\n\n```java\n    @Test\n    public void test01() throws Exception{\n        ZipInputStream in = new ZipInputStream(SpringBootFlowableApplicationTests.class\n                .getClassLoader()\n                .getResourceAsStream(\"错误边界事件.bar\"));\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addZipInputStream(in)\n                .name(\"错误边界事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n部署成功后我们再启动一个流程实例，进入到自定义任务一处会抛出异常，触发边界异常处理\n\n![image-20220330003624235](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330003624235.png)\n\n输出的结果和我们预期的是一样的\n\n\n\n\n\n## 信号事件\n\n### 开始事件\n\n\n\n![image-20220330095103789](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095103789.png)\n\n然后设置相关的属性，并定义一个信号\n\n![image-20220330095157518](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095157518.png)\n\n然后在我们声明的信号开始引用我们上面创建的信号\n\n![image-20220330095725130](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095725130.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal01\" name=\"firstSignal\" flowable:scope=\"global\"></signal>\n  <process id=\"event2001\" name=\"信号启动事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"信号开始\" isInterrupting=\"true\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </startEvent>\n    <serviceTask id=\"task1\" name=\"自动任务\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <endEvent id=\"end01\" name=\"结束\"></endEvent>\n    <sequenceFlow id=\"sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" sourceRef=\"task1\" targetRef=\"end01\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" sourceRef=\"start01\" targetRef=\"task1\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2001\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2001\" id=\"BPMNPlane_event2001\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"285.0\" y=\"172.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"467.5\" y=\"147.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"612.5\" y=\"173.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" id=\"BPMNEdge_sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"314.94999961358405\" y=\"187.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"467.4999999999399\" y=\"187.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" id=\"BPMNEdge_sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"567.449999999996\" y=\"187.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"612.5\" y=\"187.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n部署流程：\n\n```java\n   /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"信号启动事件.bpmn20.xml\")\n                .name(\"信号启动事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n流程是一个信息启动事件，所以我们需要释放对应的信号来触发流程的启动\n\n```java\n    /**\n     * 通过信号发送来触发信号启动事件的执行\n     * 全局的信息\n     */\n    @Test\n    void signalReceived() throws Exception {\n        runtimeService.signalEventReceived(\"firstSignal\");\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n通过输出语句可以看到自定义任务触发了\n\n![image-20220330100203036](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330100203036.png)\n\n\n\n我们可以把信息的作用域由原来的golbal全局的调整为processInstance，测试后发现还是执行了，说明在启动事件信息的作用域其实是不起作用的。\n\n```java\n  <signal id=\"signal01\" name=\"firstSignal\" flowable:scope=\"processInstance\"></signal>\n```\n\n\n\n### 中间捕获事件\n\n案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。\n\n![image-20220330101820083](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330101820083.png)\n\n对应的信号绑定\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"singnal02\" name=\"secondSingal\" flowable:scope=\"global\"></signal>\n  <process id=\"event2002\" name=\"信号中间捕获事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始\" flowable:formFieldValidation=\"true\"></startEvent>\n    <intermediateCatchEvent id=\"signal01\" name=\"信号捕获中间事件\">\n      <signalEventDefinition signalRef=\"singnal02\"></signalEventDefinition>\n    </intermediateCatchEvent>\n    <sequenceFlow id=\"sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" sourceRef=\"start01\" targetRef=\"signal01\"></sequenceFlow>\n    <serviceTask id=\"task01\" name=\"自动任务\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" sourceRef=\"signal01\" targetRef=\"task01\"></sequenceFlow>\n    <endEvent id=\"end01\" name=\"结束任务\"></endEvent>\n    <sequenceFlow id=\"sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" sourceRef=\"task01\" targetRef=\"end01\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2002\" id=\"BPMNPlane_event2002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"120.0\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"signal01\" id=\"BPMNShape_signal01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"318.5\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"495.5\" y=\"122.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"151.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" id=\"BPMNEdge_sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"348.44853390329115\" y=\"164.78775666509335\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"495.49999999999903\" y=\"162.7068396226415\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" id=\"BPMNEdge_sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"595.4499999999996\" y=\"162.94542586750788\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0016973189436\" y=\"164.73506227304313\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" id=\"BPMNEdge_sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"149.94999953609073\" y=\"165.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"318.5\" y=\"165.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n先部署：\n\n```java\n    /**\n     * Deploy\n     */\n    @Test\n    void testDeploy() throws Exception {\n        //RepositoryService repositoryService = processEngine.getRepositoryService();\n        Deployment deploy = repositoryService.createDeployment()\n                .addClasspathResource(\"信号中间捕获事件.bpmn20.xml\")\n                .name(\"信号中间捕获事件\")\n                .deploy();\n        System.out.println(\"deploy.getId() = \" + deploy.getId());\n        System.out.println(\"deploy.getName() = \" + deploy.getName());\n        System.out.println(\"部署开始的时间：\" + new Date());\n        //TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n然后我们需要启动流程：\n\n```java\n    @Test\n    void startFlow() throws Exception{\n        runtimeService.startProcessInstanceById(\"event2002:1:adc5b8f8-afcf-11ec-959a-c03c59ad2248\");\n        System.out.println(\"启动时间：\" + new Date());\n    }\n```\n\n发送信号信息\n\n```java\n    /**\n     * 通过信号发送来触发信号启动事件的执行\n     * 全局的信息\n     */\n    @Test\n    void signalGolbal() throws Exception {\n        runtimeService.signalEventReceived(\"secondSingal\");\n        // 我们得保证容器的运行，所以需要阻塞\n        TimeUnit.MINUTES.sleep(1);\n    }\n```\n\n然后被我们的信号捕获中间事件捕获\n\n![image-20220330102256367](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102256367.png)\n\n信号作用域为processInstance的情况\n\n![image-20220330102524238](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102524238.png)\n\n\n\n首先针对processInstance的信号，我们发送global信号是不会被捕获的\n\n![image-20220330102808127](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102808127.png)\n\n\n\n然后processInstance的信息我们需要在流程实例内部抛出信号\n\n![image-20220330112205035](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330112205035.png)\n\n\n\n### 中间抛出事件\n\n信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：\n\n![image-20220330235847392](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330235847392.png)\n\n\n\n定义信息信息：\n\n![image-20220330193530718](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330193530718.png)\n\n\n\n\n\n\n\n![image-20220331000011215](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331000011215.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal01\" name=\"signal01\" flowable:scope=\"global\"></signal>\n  <process id=\"event2003\" name=\"信号中间抛出事件\" isExecutable=\"true\">\n    <startEvent id=\"startId01\" flowable:formFieldValidation=\"true\"></startEvent>\n    <parallelGateway id=\"pid01\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" sourceRef=\"startId01\" targetRef=\"pid01\"></sequenceFlow>\n    <serviceTask id=\"task01\" name=\"自动任务一\" flowable:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <serviceTask id=\"task02\" name=\"自动任务二\" flowable:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <serviceTask id=\"task03\" name=\"自动任务三\" flowable:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-2325ED54-C769-4161-A00F-001F006B72B5\" sourceRef=\"pid01\" targetRef=\"task01\"></sequenceFlow>\n    <intermediateThrowEvent id=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </intermediateThrowEvent>\n    <intermediateCatchEvent id=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\">\n      <signalEventDefinition signalRef=\"signal01\"></signalEventDefinition>\n    </intermediateCatchEvent>\n    <sequenceFlow id=\"sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" sourceRef=\"task01\" targetRef=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\"></sequenceFlow>\n    <sequenceFlow id=\"sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" sourceRef=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\" targetRef=\"task02\"></sequenceFlow>\n    <sequenceFlow id=\"sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" sourceRef=\"pid01\" targetRef=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\"></sequenceFlow>\n    <sequenceFlow id=\"sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" sourceRef=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\" targetRef=\"task03\"></sequenceFlow>\n    <parallelGateway id=\"pid02\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-584ADF4E-9140-4E5A-A396-1257E1436704\" sourceRef=\"task02\" targetRef=\"pid02\"></sequenceFlow>\n    <sequenceFlow id=\"sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" sourceRef=\"task03\" targetRef=\"pid02\"></sequenceFlow>\n    <endEvent id=\"end01\" name=\"结束\"></endEvent>\n    <sequenceFlow id=\"sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" sourceRef=\"pid02\" targetRef=\"end01\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2003\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2003\" id=\"BPMNPlane_event2003\">\n      <bpmndi:BPMNShape bpmnElement=\"startId01\" id=\"BPMNShape_startId01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"100.0\" y=\"163.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"pid01\" id=\"BPMNShape_pid01\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"270.0\" y=\"158.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"419.5\" y=\"71.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task02\" id=\"BPMNShape_task02\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"780.0\" y=\"71.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task03\" id=\"BPMNShape_task03\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"795.0\" y=\"255.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\" id=\"BPMNShape_sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"633.5\" y=\"96.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-51D70059-8D15-4BF7-9151-48CCD99544F1\" id=\"BPMNShape_sid-51D70059-8D15-4BF7-9151-48CCD99544F1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"465.0\" y=\"278.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"pid02\" id=\"BPMNShape_pid02\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"994.5\" y=\"158.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end01\" id=\"BPMNShape_end01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"1079.5\" y=\"164.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" id=\"BPMNEdge_sid-4A038E06-A731-4A5F-A929-840FB8A92AA5\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"519.45\" y=\"111.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"633.5\" y=\"111.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" id=\"BPMNEdge_sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"1034.0591869398208\" y=\"178.3782051282051\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1079.5002755524838\" y=\"178.08885188426407\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" id=\"BPMNEdge_sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"894.9499999999999\" y=\"260.4867256637168\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1002.6675392670157\" y=\"186.14712041884815\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" id=\"BPMNEdge_sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"663.4499994451444\" y=\"111.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"779.9999999999972\" y=\"111.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" id=\"BPMNEdge_sid-0ABE23AE-344C-49D8-B574-010DECD093BE\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"494.9497692355611\" y=\"293.0819166248564\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"794.9999999999911\" y=\"294.7260273972602\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-584ADF4E-9140-4E5A-A396-1257E1436704\" id=\"BPMNEdge_sid-584ADF4E-9140-4E5A-A396-1257E1436704\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"879.9499999999999\" y=\"129.1390243902439\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"999.8065381558029\" y=\"172.67196819085487\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-2325ED54-C769-4161-A00F-001F006B72B5\" id=\"BPMNEdge_sid-2325ED54-C769-4161-A00F-001F006B72B5\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"304.9870182555781\" y=\"173.0233265720081\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"419.49999999999994\" y=\"129.8358938547486\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" id=\"BPMNEdge_sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"15.0\" flowable:targetDockerY=\"15.0\">\n        <omgdi:waypoint x=\"302.31181354817494\" y=\"185.6374177631579\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"467.15151373509184\" y=\"285.24160328636844\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" id=\"BPMNEdge_sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"129.94999940317362\" y=\"178.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"270.0\" y=\"178.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n三个自定义任务绑定了三个javaDelegate分别给出打印语句来记录\n\n\n\n然后部署任务\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"信号中间抛出事件.bpmn20.xml\")\n                .name(\"信号中间抛出事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后在启动任务即可\n\n```java\n /**\n     * 启动流程实例\n     *\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2003:1:665b1533-b020-11ec-877d-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n看控制台的输出\n\n![image-20220330200124232](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200124232.png)\n\n\n\n效果：\n\n![image-20220330200235193](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200235193.png)\n\n### 边界事件\n\n最后来看看信号边界事件，案例如下：\n\n![image-20220330202443905](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330202443905.png)\n\n完整的xml定义为\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <signal id=\"signal2\" name=\"signal2\" flowable:scope=\"global\"></signal>\n  <process id=\"event2004\" name=\"信号边界事件\" isExecutable=\"true\">\n    <startEvent id=\"startEvent1\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" name=\"人工任务\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" sourceRef=\"startEvent1\" targetRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\"></sequenceFlow>\n    <serviceTask id=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" name=\"自动任务一\" flowable:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n    <serviceTask id=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" name=\"自动任务二\" flowable:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" sourceRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" targetRef=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\"></sequenceFlow>\n    <endEvent id=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\"></endEvent>\n    <sequenceFlow id=\"sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" sourceRef=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" targetRef=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\"></sequenceFlow>\n    <endEvent id=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\"></endEvent>\n    <sequenceFlow id=\"sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" sourceRef=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" targetRef=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\"></sequenceFlow>\n    <boundaryEvent id=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" attachedToRef=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" cancelActivity=\"true\">\n      <signalEventDefinition signalRef=\"signal2\"></signalEventDefinition>\n    </boundaryEvent>\n    <sequenceFlow id=\"sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" sourceRef=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" targetRef=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event2004\">\n    <bpmndi:BPMNPlane bpmnElement=\"event2004\" id=\"BPMNPlane_event2004\">\n      <bpmndi:BPMNShape bpmnElement=\"startEvent1\" id=\"BPMNShape_startEvent1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"100.0\" y=\"163.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-F11058BE-828A-45FF-A830-8BF099D71FBD\" id=\"BPMNShape_sid-F11058BE-828A-45FF-A830-8BF099D71FBD\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"255.0\" y=\"138.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-FAB46591-3247-4776-B3B5-79826133F5AF\" id=\"BPMNShape_sid-FAB46591-3247-4776-B3B5-79826133F5AF\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"521.5\" y=\"135.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\" id=\"BPMNShape_sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"521.5\" y=\"315.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\" id=\"BPMNShape_sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"161.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\" id=\"BPMNShape_sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"690.0\" y=\"341.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\" id=\"BPMNShape_sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"308.4527694396093\" y=\"203.7233532460343\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" id=\"BPMNEdge_sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"336.557461183174\" y=\"225.9233207922021\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"521.4999999999999\" y=\"327.5301011331414\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" id=\"BPMNEdge_sid-74B48035-4CED-4963-AA87-55D1FB95EEA8\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"354.95000000000005\" y=\"177.43714821763604\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"521.5\" y=\"175.56228893058162\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" id=\"BPMNEdge_sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"129.94999949366624\" y=\"178.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"254.99999999993574\" y=\"178.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" id=\"BPMNEdge_sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"621.4499999999999\" y=\"355.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0\" y=\"355.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" id=\"BPMNEdge_sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"621.4499999999999\" y=\"175.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"690.0\" y=\"175.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n定义的信号为：\n\n```xml\n<signal id=\"signal2\" name=\"signal2\" flowable:scope=\"global\"></signal>\n```\n\n自动任务的内容\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n    }\n}\n\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n\n\n部署项目然后启动流程\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"信号边界事件.bpmn20.xml\")\n                .name(\"信号边界事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2004:1:e8b5c39f-b024-11ec-bdac-c03c59ad2248\");\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n\n\n![image-20220330203056055](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203056055.png)\n\n\n\n```java\n    @Test\n    public void signalGlobal()  throws Exception{\n        String signal = \"signal2\";\n        Map<String, Object> variables = new HashMap();\n        processEngine.getRuntimeService().signalEventReceived(signal,variables);\n    }\n```\n\n![image-20220330203233862](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203233862.png)\n\n\n\n通过输出看到了我们期望的结果了，这样就给大家介绍完了信号相关的各种事件了\n\n\n\n\n\n## 结束事件\n\n结束事件顾名思义就是流程结束的事件，除了前面遇到的空结束事件外，结束事件还包括如下几种：\n\n* 错误结束事件\n* 中断结束事件\n* 取消结束事件\n\n### 错误结束事件\n\n当流程执行到达**错误结束事件（error end event）**时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：\n\n![image-20220331100340069](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331100340069.png)\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <error id=\"error03\" errorCode=\"error03\" ></error>\n  <process id=\"event5001\" name=\"错误结束事件\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始任务\" flowable:formFieldValidation=\"true\"></startEvent>\n    <subProcess id=\"sid-794CA748-4381-417F-8350-360E89907E84\" name=\"subProcess\">\n      <startEvent id=\"startc01\" name=\"开始子流程\" flowable:formFieldValidation=\"true\"></startEvent>\n      <serviceTask id=\"task01\" name=\"自动任务一\" flowable:class=\"com.bobo.flow.delegate.MyOneJavaDelegate\"></serviceTask>\n      <exclusiveGateway id=\"p001\" name=\"排他网关\"></exclusiveGateway>\n      <endEvent id=\"endc01\" name=\"子流程结束\"></endEvent>\n      <endEvent id=\"errorend01\" name=\"错误结束事件\">\n        <errorEventDefinition errorRef=\"error03\" flowable:errorVariableLocalScope=\"true\" flowable:errorVariableTransient=\"true\"></errorEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" sourceRef=\"startc01\" targetRef=\"task01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" sourceRef=\"task01\" targetRef=\"p001\"></sequenceFlow>\n      <sequenceFlow id=\"sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" sourceRef=\"p001\" targetRef=\"errorend01\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n    </subProcess>\n    <sequenceFlow id=\"sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" sourceRef=\"start01\" targetRef=\"sid-794CA748-4381-417F-8350-360E89907E84\"></sequenceFlow>\n    <serviceTask id=\"task2\" name=\"自动任务二\" flowable:class=\"com.bobo.flow.delegate.MyTwoJavaDelegate\"></serviceTask>\n    <sequenceFlow id=\"sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" sourceRef=\"sid-794CA748-4381-417F-8350-360E89907E84\" targetRef=\"task2\"></sequenceFlow>\n    <endEvent id=\"end02\" name=\"主流程结束\"></endEvent>\n    <sequenceFlow id=\"sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" sourceRef=\"task2\" targetRef=\"end02\"></sequenceFlow>\n    <boundaryEvent id=\"perror01\" name=\"边界错误事件\" attachedToRef=\"sid-794CA748-4381-417F-8350-360E89907E84\">\n      <errorEventDefinition errorRef=\"error03\" flowable:errorVariableLocalScope=\"true\" flowable:errorVariableTransient=\"true\"></errorEventDefinition>\n    </boundaryEvent>\n    <sequenceFlow id=\"sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" sourceRef=\"perror01\" targetRef=\"task3\"></sequenceFlow>\n    <serviceTask id=\"task3\" name=\"自动任务三\" flowable:class=\"com.bobo.flow.delegate.MyThreeJavaDelegate\"></serviceTask>\n    <endEvent id=\"end003\" name=\"主流程结束\"></endEvent>\n    <sequenceFlow id=\"sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" sourceRef=\"task3\" targetRef=\"end003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C17C73A1-5853-496B-B686-E7911105D459\" sourceRef=\"sid-794CA748-4381-417F-8350-360E89907E84\" targetRef=\"endc01\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n    </sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event5001\">\n    <bpmndi:BPMNPlane bpmnElement=\"event5001\" id=\"BPMNPlane_event5001\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"75.0\" y=\"205.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-794CA748-4381-417F-8350-360E89907E84\" id=\"BPMNShape_sid-794CA748-4381-417F-8350-360E89907E84\">\n        <omgdc:Bounds height=\"261.0\" width=\"593.0\" x=\"240.0\" y=\"90.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startc01\" id=\"BPMNShape_startc01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"285.0\" y=\"199.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task01\" id=\"BPMNShape_task01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"418.5\" y=\"174.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"563.5\" y=\"194.5\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endc01\" id=\"BPMNShape_endc01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"675.0\" y=\"150.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"errorend01\" id=\"BPMNShape_errorend01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"675.0\" y=\"255.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"942.5\" y=\"176.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end02\" id=\"BPMNShape_end02\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"1087.5\" y=\"202.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"perror01\" id=\"BPMNShape_perror01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"478.02252392098524\" y=\"336.450017237985\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task3\" id=\"BPMNShape_task3\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"665.5\" y=\"406.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"810.5\" y=\"432.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" id=\"BPMNEdge_sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"296.5\" flowable:targetDockerY=\"130.5\">\n        <omgdi:waypoint x=\"104.9499999082861\" y=\"220.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"240.0\" y=\"220.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" id=\"BPMNEdge_sid-9562301E-B400-4D1F-89B8-23E69ADEAE68\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"1.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"493.02252392098524\" y=\"366.40001519452954\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"493.02252392098524\" y=\"446.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"665.4999999999623\" y=\"446.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" id=\"BPMNEdge_sid-E8166885-00F6-49A1-BE26-3AB98FE95455\" flowable:sourceDockerX=\"296.5\" flowable:sourceDockerY=\"130.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"832.9499999999987\" y=\"217.57401315789474\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"942.499999999999\" y=\"216.49292763157894\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" id=\"BPMNEdge_sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"765.4499999999999\" y=\"446.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"810.5\" y=\"446.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" id=\"BPMNEdge_sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"518.4499999999978\" y=\"214.71623376623376\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"563.9130434782609\" y=\"214.91304347826087\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" id=\"BPMNEdge_sid-496A30AE-44AC-4298-83E0-3183F3FF935B\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"1042.449999999996\" y=\"216.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1087.5\" y=\"216.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C17C73A1-5853-496B-B686-E7911105D459\" id=\"BPMNEdge_sid-C17C73A1-5853-496B-B686-E7911105D459\" flowable:sourceDockerX=\"343.3984375\" flowable:sourceDockerY=\"106.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"583.3984375\" y=\"196.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"583.3984375\" y=\"164.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"675.0\" y=\"164.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" id=\"BPMNEdge_sid-1B2782FA-5216-4817-B964-A77EDEBB7547\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"314.949999356254\" y=\"214.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"418.5\" y=\"214.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" id=\"BPMNEdge_sid-DEC53745-1E74-4D08-B472-95F9A6B92D98\" flowable:sourceDockerX=\"20.8984375\" flowable:sourceDockerY=\"36.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"584.3984375\" y=\"233.54821399278214\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"584.3984375\" y=\"269.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"675.0\" y=\"269.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n定义的error\n\n```xml\n<error id=\"error01\" errorCode=\"error01\"></error>\n```\n\n在子流程中，当flag的数据为0的时候，就会触发错误结束事件\n\n```xml\n      <sequenceFlow id=\"1111\" sourceRef=\"12222\" targetRef=\"xxxxx44\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag==0}]]></conditionExpression>\n      </sequenceFlow>\n```\n\n然后我们在子流程上绑定了一个错误边界事件，绑定的也是error01,也就是当子流程触发错误结束事件，就会触发这个边界事件，进而完成自动任务三。\n\n流程中关联的三个自动任务都只是输出一个打印语句~\n\n然后我们需要做的操作有，部署，启动流程绑定流程变量flag的值为0，然后就可以看输出结果了\n\n```java\n    /**\n    * 部署\n    */\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"错误结束事件.bpmn20.xml\")\n                .name(\"错误结束事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后启动流程\n\n```java\n    /**\n     * 启动流程实例,设置流程变量中的flag=0触发错误结束事件\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event2005:1:ebec87e2-b028-11ec-b93f-c03c59ad2248\",map);\n        System.out.println(\"开始启动的时间：\" + LocalDateTime.now().toString());\n        // 需要在此阻塞比等待长的时间\n        TimeUnit.MINUTES.sleep(3);\n    }\n```\n\n看控制台输出\n\n![image-20220330210538338](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210538338.png)\n\n控制台输出的结果和我们预期的是一样的\n\n![image-20220330210708334](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210708334.png)\n\n说明错误结束事件的作用就是在执行到错误结束的节点位置会抛出对应的错误，供需要获取的事件来处理。\n\n\n\n### 中断结束事件\n\n中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：\n\n#### 案例一\n\n案例一我们介绍没有子流程的情况下终止的场景，具体案例如下\n\n![image-20220331102808059](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331102808059.png)\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <process id=\"event5002\" name=\"终止结束事件01\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"开始事件\" flowable:formFieldValidation=\"true\"></startEvent>\n    <parallelGateway id=\"p001\" name=\"并行网关\"></parallelGateway>\n    <parallelGateway id=\"p004\" name=\"并行网关\"></parallelGateway>\n    <userTask id=\"task2\" name=\"用户任务二\" flowable:assignee=\"lisi\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" sourceRef=\"p001\" targetRef=\"task2\"></sequenceFlow>\n    <userTask id=\"task1\" name=\"用户任务一\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" sourceRef=\"p001\" targetRef=\"task1\"></sequenceFlow>\n    <userTask id=\"task3\" name=\"用户任务三\" flowable:assignee=\"wangwu\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" sourceRef=\"p001\" targetRef=\"task3\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" sourceRef=\"start01\" targetRef=\"p001\"></sequenceFlow>\n    <sequenceFlow id=\"sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" sourceRef=\"task1\" targetRef=\"p004\"></sequenceFlow>\n    <sequenceFlow id=\"sid-E1E26394-8B33-4766-9B3B-722958B91972\" sourceRef=\"task2\" targetRef=\"p004\"></sequenceFlow>\n    <endEvent id=\"end003\" name=\"结束事件\"></endEvent>\n    <sequenceFlow id=\"sid-074345F1-5C34-435D-AECE-912DDBBBE105\" sourceRef=\"p004\" targetRef=\"end003\"></sequenceFlow>\n    <exclusiveGateway id=\"p003\" name=\"排他网关\"></exclusiveGateway>\n    <endEvent id=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\" name=\"终止结束事件\">\n      <terminateEventDefinition></terminateEventDefinition>\n    </endEvent>\n    <sequenceFlow id=\"sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" sourceRef=\"task3\" targetRef=\"p003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-325962BF-7168-48C0-9107-B232A4627C10\" sourceRef=\"p003\" targetRef=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n    </sequenceFlow>\n    <sequenceFlow id=\"sid-413A98AF-8CAF-470C-B751-E32229801310\" sourceRef=\"p003\" targetRef=\"p004\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n    </sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event5002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event5002\" id=\"BPMNPlane_event5002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"102.5\" y=\"253.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"287.5\" y=\"248.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p004\" id=\"BPMNShape_p004\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"720.0\" y=\"248.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"372.5\" y=\"228.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"372.5\" y=\"105.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task3\" id=\"BPMNShape_task3\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"377.5\" y=\"390.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"805.0\" y=\"254.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p003\" id=\"BPMNShape_p003\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"570.0\" y=\"410.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\" id=\"BPMNShape_sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"576.0\" y=\"495.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E1E26394-8B33-4766-9B3B-722958B91972\" id=\"BPMNEdge_sid-E1E26394-8B33-4766-9B3B-722958B91972\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"7.5\" flowable:targetDockerY=\"19.0\">\n        <omgdi:waypoint x=\"472.4499999999732\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"596.25\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"596.25\" y=\"267.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"720.9525123715264\" y=\"267.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" id=\"BPMNEdge_sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"308.0\" y=\"287.4441367574257\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"308.0\" y=\"430.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"377.5\" y=\"430.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-325962BF-7168-48C0-9107-B232A4627C10\" id=\"BPMNEdge_sid-325962BF-7168-48C0-9107-B232A4627C10\" flowable:sourceDockerX=\"19.53125\" flowable:sourceDockerY=\"34.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"589.5677159590043\" y=\"449.51771595900436\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"589.8981518165715\" y=\"495.0001397608249\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" id=\"BPMNEdge_sid-F5ABC1D7-091F-4966-990F-44CE1A927869\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"1.0\">\n        <omgdi:waypoint x=\"472.44999999982196\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"740.0\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"740.0\" y=\"248.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" id=\"BPMNEdge_sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"7.0\" flowable:targetDockerY=\"22.0\">\n        <omgdi:waypoint x=\"477.449999999998\" y=\"430.66822742474915\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"571.9322033898305\" y=\"431.93220338983053\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" id=\"BPMNEdge_sid-E3A5580F-4CE3-4556-894E-46C3D2134071\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"327.0247370727432\" y=\"268.4166666666667\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"372.49999999998806\" y=\"268.2181222707423\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-074345F1-5C34-435D-AECE-912DDBBBE105\" id=\"BPMNEdge_sid-074345F1-5C34-435D-AECE-912DDBBBE105\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"759.5591869398207\" y=\"268.37820512820514\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"805.0002755524882\" y=\"268.08885188426405\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" id=\"BPMNEdge_sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"132.44999949366624\" y=\"268.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"287.5\" y=\"268.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-413A98AF-8CAF-470C-B751-E32229801310\" id=\"BPMNEdge_sid-413A98AF-8CAF-470C-B751-E32229801310\" flowable:sourceDockerX=\"37.5\" flowable:sourceDockerY=\"20.4375\" flowable:targetDockerX=\"22.5\" flowable:targetDockerY=\"31.0\">\n        <omgdi:waypoint x=\"609.5117551813031\" y=\"430.4375\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"742.5\" y=\"430.4375\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"742.5\" y=\"285.402097959858\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" id=\"BPMNEdge_sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"308.0\" y=\"248.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"308.0\" y=\"145.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"372.5\" y=\"145.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程定义说明：并行网关中3个人工审核任务，分别分配的用户为zhangsan lisi wangwu ，然后在wangwu审核后会进入一个排他网关，如果flag是小于等于0就会触发终止结束事件。\n\n```xml\n<sequenceFlow id=\"sid-89945688-1D51-4391-A713-3E77ADB2FA06\" sourceRef=\"p001\" targetRef=\"stop001\">\n      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n    </sequenceFlow>\n```\n\n具体操作：部署流程-->启动流程实例-->wanwu 处理任务【流程实例 flag <= 0】 触发任务\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"终止流程1.bpmn20.xml\")\n                .name(\"终止流程1\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n启动流程实例\n\n```java\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248\",map);\n    }\n```\n\n这时可以看到三个并行的Task任务：\n\n![image-20220330213147240](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213147240.png)\n\n这时我们只需王五来处理即可，在上一步中我们已经对流程变量赋值了\n\n```java\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248\")\n                .taskAssignee(\"wangwu\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n然后再去看Task表中已经没有另外两条记录了哦\n\n![image-20220330213516673](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213516673.png)\n\n通过案例可以看到在没有子流程的情况下，终止结束事件会把整个流程都进程都结束了，而且在历史记录中也可以看到信息\n\n![image-20220330215127129](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330215127129.png)\n\n\n\n#### 案例二\n\n然后我们来看看在子流程中触发终止结束事件的案例：\n\n![image-20220330220208085](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330220208085.png)\n\n完整的xml内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\" exporter=\"Flowable Open Source Modeler\" exporterVersion=\"6.7.2\">\n  <process id=\"event3002\" name=\"终止流程2\" isExecutable=\"true\">\n    <startEvent id=\"start01\" name=\"任务开始\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"task2\" name=\"用户任务二\" flowable:assignee=\"lisi\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" sourceRef=\"b001\" targetRef=\"task2\"></sequenceFlow>\n    <userTask id=\"task1\" name=\"用户任务一\" flowable:assignee=\"zhangsan\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" sourceRef=\"b001\" targetRef=\"task1\"></sequenceFlow>\n    <subProcess id=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" name=\"subProcess\">\n      <startEvent id=\"cstart01\" name=\"子流程开始\" flowable:formFieldValidation=\"true\"></startEvent>\n      <userTask id=\"taskc01\" name=\"子人工任务一\" flowable:assignee=\"user1\" flowable:formFieldValidation=\"true\">\n        <extensionElements>\n          <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n        </extensionElements>\n      </userTask>\n      <exclusiveGateway id=\"p001\" name=\"排他网关\"></exclusiveGateway>\n      <userTask id=\"taskc02\" name=\"子人工任务二\" flowable:assignee=\"user2\" flowable:formFieldValidation=\"true\">\n        <extensionElements>\n          <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n        </extensionElements>\n      </userTask>\n      <endEvent id=\"endc01\" name=\"子流程结束\"></endEvent>\n      <endEvent id=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <terminateEventDefinition></terminateEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" sourceRef=\"cstart01\" targetRef=\"taskc01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" sourceRef=\"taskc01\" targetRef=\"p001\"></sequenceFlow>\n      <sequenceFlow id=\"sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" sourceRef=\"taskc02\" targetRef=\"endc01\"></sequenceFlow>\n      <sequenceFlow id=\"sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" sourceRef=\"p001\" targetRef=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n      <sequenceFlow id=\"sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" sourceRef=\"p001\" targetRef=\"taskc02\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n      </sequenceFlow>\n    </subProcess>\n    <parallelGateway id=\"b001\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" sourceRef=\"start01\" targetRef=\"b001\"></sequenceFlow>\n    <parallelGateway id=\"b002\" name=\"并行网关\"></parallelGateway>\n    <sequenceFlow id=\"sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" sourceRef=\"task2\" targetRef=\"b002\"></sequenceFlow>\n    <sequenceFlow id=\"sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" sourceRef=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" targetRef=\"b002\"></sequenceFlow>\n    <sequenceFlow id=\"sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" sourceRef=\"task1\" targetRef=\"b002\"></sequenceFlow>\n    <endEvent id=\"end003\" name=\"结束事件\"></endEvent>\n    <sequenceFlow id=\"sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" sourceRef=\"b002\" targetRef=\"end003\"></sequenceFlow>\n    <sequenceFlow id=\"sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" sourceRef=\"b001\" targetRef=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_event3002\">\n    <bpmndi:BPMNPlane bpmnElement=\"event3002\" id=\"BPMNPlane_event3002\">\n      <bpmndi:BPMNShape bpmnElement=\"start01\" id=\"BPMNShape_start01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"75.0\" y=\"200.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task2\" id=\"BPMNShape_task2\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"420.0\" y=\"175.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"task1\" id=\"BPMNShape_task1\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"420.0\" y=\"15.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\" id=\"BPMNShape_sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7\">\n        <omgdc:Bounds height=\"187.0\" width=\"531.0\" x=\"285.0\" y=\"330.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"cstart01\" id=\"BPMNShape_cstart01\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"322.5\" y=\"410.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"taskc01\" id=\"BPMNShape_taskc01\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"390.0\" y=\"385.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"p001\" id=\"BPMNShape_p001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"542.5\" y=\"405.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"taskc02\" id=\"BPMNShape_taskc02\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"627.5\" y=\"385.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endc01\" id=\"BPMNShape_endc01\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"765.0\" y=\"411.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-BD67523C-DDDA-46B8-A788-C54769B081B1\" id=\"BPMNShape_sid-BD67523C-DDDA-46B8-A788-C54769B081B1\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"548.5\" y=\"480.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"b001\" id=\"BPMNShape_b001\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"165.0\" y=\"195.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"b002\" id=\"BPMNShape_b002\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"867.5\" y=\"195.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"end003\" id=\"BPMNShape_end003\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"960.0\" y=\"207.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" id=\"BPMNEdge_sid-EFCAE414-03A4-4313-B97A-4BF962888C37\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"582.0247370727355\" y=\"425.41666666666663\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"627.4999999999881\" y=\"425.2181222707423\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" id=\"BPMNEdge_sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"727.4499999997752\" y=\"425.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"765.0\" y=\"425.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" id=\"BPMNEdge_sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"352.449998261009\" y=\"425.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"390.0\" y=\"425.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" id=\"BPMNEdge_sid-A554CEA8-FD95-4EA4-BED3-EA748273D775\" flowable:sourceDockerX=\"265.5\" flowable:sourceDockerY=\"93.5\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"815.95\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"888.0\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"888.0\" y=\"234.40453342953353\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" id=\"BPMNEdge_sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"562.8602941176471\" y=\"444.5752202643172\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"562.6018221538329\" y=\"480.0003662069823\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" id=\"BPMNEdge_sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"519.949999999999\" y=\"215.05974880382777\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"867.97604790418\" y=\"215.4760479041916\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" id=\"BPMNEdge_sid-B0777673-C3BE-488B-87B2-34A71CEE2C73\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.5\" flowable:targetDockerY=\"20.5\">\n        <omgdi:waypoint x=\"489.9499999999965\" y=\"425.2030487804878\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"542.9183673469388\" y=\"425.4183673469388\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" id=\"BPMNEdge_sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"14.0\" flowable:targetDockerY=\"14.0\">\n        <omgdi:waypoint x=\"906.92933478735\" y=\"215.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"933.75\" y=\"215.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"933.75\" y=\"221.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"960.0\" y=\"221.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" id=\"BPMNEdge_sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1\" flowable:sourceDockerX=\"15.0\" flowable:sourceDockerY=\"15.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"20.0\">\n        <omgdi:waypoint x=\"104.94999797575196\" y=\"215.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"165.0\" y=\"215.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" id=\"BPMNEdge_sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594\" flowable:sourceDockerX=\"22.5\" flowable:sourceDockerY=\"32.015625\" flowable:targetDockerX=\"1.1773835920177385\" flowable:targetDockerY=\"93.5\">\n        <omgdi:waypoint x=\"187.5\" y=\"232.44861780088067\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"187.5\" y=\"423.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"285.0\" y=\"423.5\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" id=\"BPMNEdge_sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"204.4800158394907\" y=\"215.46654929577466\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"419.99999999998107\" y=\"215.08778558875218\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" id=\"BPMNEdge_sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD\" flowable:sourceDockerX=\"20.5\" flowable:sourceDockerY=\"20.5\" flowable:targetDockerX=\"50.0\" flowable:targetDockerY=\"40.0\">\n        <omgdi:waypoint x=\"185.5\" y=\"195.5\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"185.5\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"420.0\" y=\"55.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" id=\"BPMNEdge_sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD\" flowable:sourceDockerX=\"50.0\" flowable:sourceDockerY=\"40.0\" flowable:targetDockerX=\"20.0\" flowable:targetDockerY=\"13.7109375\">\n        <omgdi:waypoint x=\"519.95\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"887.5\" y=\"55.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"887.5\" y=\"195.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程说明：人工任务一 -->zhangsan  人工任务二 -->lisi  子人工任务一 ： user1 子人工任务二 ： user2\n\n子任务完成任务如果flag<=0,那么子流程中断结束，子人工任务二不会触发\n\n部署流程\n\n```java\n    @Test\n    public void test02() throws Exception{\n\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"终止流程2.bpmn20.xml\")\n                .name(\"终止流程2\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n```\n\n然后启动流程\n\n```java\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248\",map);\n    }\n```\n\n这时在ACT_RU_TASK中就应该有三条对应的TASK记录了\n\n![image-20220330232643286](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232643286.png)\n\n然后我们执行`user1`的子任务，因为现在流程变量`flag=0`所以会触发终止结束事件\n\n![image-20220330232801450](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232801450.png)\n\n执行任务：\n\n```java\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248\")\n                .taskAssignee(\"user1\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n执行成功后我们可以发现子人工任务一没有了，但是也没有子人工任务二，但是主流程中的两个任务都还在\n\n![image-20220330232959807](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232959807.png)\n\n而且进入到历史数据中也可以看到\n\n![image-20220330233448096](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330233448096.png)\n\n\n\n\n\n### 取消结束事件\n\n取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。\n\n具体通过案例来讲解：\n\n![image-20220401110131810](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110131810.png)\n\n\n\n结束取消事件我们只能在事务子流程中使用，在FlowableUI中暂时没有找到这个组件，所以在Eclipse中来绘制\n\n![image-20220401110621048](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110621048.png)\n\n\n\n完整的xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n  <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n    <startEvent id=\"startevent1\" name=\"Start\"></startEvent>\n    <transaction id=\"transaction1\" name=\"Transaction\">\n      <startEvent id=\"startevent2\" name=\"事务子流程开始\"></startEvent>\n      <userTask id=\"usertask1\" name=\"人工任务一\" activiti:assignee=\"zhangsan\"></userTask>\n      <sequenceFlow id=\"flow2\" sourceRef=\"startevent2\" targetRef=\"usertask1\"></sequenceFlow>\n      <exclusiveGateway id=\"exclusivegateway1\" name=\"排他网关\"></exclusiveGateway>\n      <sequenceFlow id=\"flow3\" sourceRef=\"usertask1\" targetRef=\"exclusivegateway1\"></sequenceFlow>\n      <userTask id=\"usertask2\" name=\"人工任务二\" activiti:assignee=\"lisi\"></userTask>\n      <sequenceFlow id=\"flow4\" sourceRef=\"exclusivegateway1\" targetRef=\"usertask2\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag>0}]]></conditionExpression>\n      </sequenceFlow>\n      <endEvent id=\"endevent1\" name=\"事务子流程结束\"></endEvent>\n      <sequenceFlow id=\"flow5\" sourceRef=\"usertask2\" targetRef=\"endevent1\"></sequenceFlow>\n      <endEvent id=\"cancelendevent1\" name=\"取消结束事件\">\n        <cancelEventDefinition></cancelEventDefinition>\n      </endEvent>\n      <sequenceFlow id=\"flow6\" sourceRef=\"exclusivegateway1\" targetRef=\"cancelendevent1\">\n        <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${flag<=0}]]></conditionExpression>\n      </sequenceFlow>\n      <boundaryEvent id=\"boundarycompensation1\" name=\"Compensate\" attachedToRef=\"usertask1\" cancelActivity=\"true\">\n        <compensateEventDefinition></compensateEventDefinition>\n      </boundaryEvent>\n      <serviceTask id=\"servicetask5\" name=\"补偿自动任务\" isForCompensation=\"true\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n      <association id=\"association1\" sourceRef=\"boundarycompensation1\" targetRef=\"servicetask5\" associationDirection=\"None\"></association>\n    </transaction>\n    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"transaction1\"></sequenceFlow>\n    <boundaryEvent id=\"boundarycancel1\" name=\"取消边界事件\" attachedToRef=\"transaction1\" cancelActivity=\"true\">\n      <cancelEventDefinition></cancelEventDefinition>\n    </boundaryEvent>\n    <serviceTask id=\"servicetask3\" name=\"取消事件结束\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow8\" sourceRef=\"boundarycancel1\" targetRef=\"servicetask3\"></sequenceFlow>\n    <endEvent id=\"endevent2\" name=\"取消事件结束\"></endEvent>\n    <sequenceFlow id=\"flow9\" sourceRef=\"servicetask3\" targetRef=\"endevent2\"></sequenceFlow>\n    <serviceTask id=\"servicetask4\" name=\"正常结束任务\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n    <sequenceFlow id=\"flow10\" sourceRef=\"transaction1\" targetRef=\"servicetask4\"></sequenceFlow>\n    <endEvent id=\"endevent3\" name=\"End\"></endEvent>\n    <sequenceFlow id=\"flow11\" sourceRef=\"servicetask4\" targetRef=\"endevent3\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n    <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"248.0\" y=\"390.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"transaction1\" id=\"BPMNShape_transaction1\">\n        <omgdc:Bounds height=\"291.0\" width=\"761.0\" x=\"371.0\" y=\"262.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"startevent2\" id=\"BPMNShape_startevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"431.0\" y=\"382.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"511.0\" y=\"372.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"boundarycompensation1\" id=\"BPMNShape_boundarycompensation1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"581.0\" y=\"412.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"exclusivegateway1\" id=\"BPMNShape_exclusivegateway1\">\n        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"661.0\" y=\"380.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"usertask2\" id=\"BPMNShape_usertask2\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"746.0\" y=\"373.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"896.0\" y=\"383.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"cancelendevent1\" id=\"BPMNShape_cancelendevent1\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"664.0\" y=\"472.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask5\" id=\"BPMNShape_servicetask5\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"511.0\" y=\"472.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"boundarycancel1\" id=\"BPMNShape_boundarycancel1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"871.0\" y=\"542.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"980.0\" y=\"640.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1130.0\" y=\"650.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"servicetask4\" id=\"BPMNShape_servicetask4\">\n        <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"1291.0\" y=\"391.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"endevent3\" id=\"BPMNShape_endevent3\">\n        <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1450.0\" y=\"401.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n        <omgdi:waypoint x=\"466.0\" y=\"399.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"511.0\" y=\"399.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n        <omgdi:waypoint x=\"616.0\" y=\"399.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"661.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n        <omgdi:waypoint x=\"701.0\" y=\"400.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"746.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n        <omgdi:waypoint x=\"851.0\" y=\"400.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"896.0\" y=\"400.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n        <omgdi:waypoint x=\"681.0\" y=\"420.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"681.0\" y=\"472.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"association1\" id=\"BPMNEdge_association1\">\n        <omgdi:waypoint x=\"596.0\" y=\"442.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"563.0\" y=\"472.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n        <omgdi:waypoint x=\"283.0\" y=\"407.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"371.0\" y=\"407.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n        <omgdi:waypoint x=\"886.0\" y=\"572.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1032.0\" y=\"640.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n        <omgdi:waypoint x=\"1085.0\" y=\"667.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1130.0\" y=\"667.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow10\" id=\"BPMNEdge_flow10\">\n        <omgdi:waypoint x=\"1132.0\" y=\"407.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1291.0\" y=\"418.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"flow11\" id=\"BPMNEdge_flow11\">\n        <omgdi:waypoint x=\"1396.0\" y=\"418.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"1450.0\" y=\"418.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n\n\n流程说明：流程中定义了一个事务子流程和两个自动任务\n\n![image-20220401111036816](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111036816.png)\n\n\n\n\n\n然后在事务子流程中定义了两个人工任务用一个排他网关连接，flag<=0 的情况下会触发 取消结束事件\n\n![image-20220401111201815](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111201815.png)\n\n\n\n触发取消结束事件后同时会被取消边界事件捕获而走 取消事件结束的自动任务\n\n![image-20220401111316353](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111316353.png)\n\n\n\n同时自动补偿任务也会触发，关联的自动任务也会触发\n\n![image-20220401111351513](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111351513.png)\n\n注意在设置的时候需要设置补偿自动任务为可补偿的\n\n![image-20220401111438577](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111438577.png)\n\n补偿自动任务绑定的JavaDelegate：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"完成自动审批任务-----》MyOneDelegate\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n正常结束任务绑定的JavaDelegate:\n\n```java\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n取消事件结束绑定的JavaDelegate\n\n```java\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n然后我们部署，启动，和执行流程，看输出情况\n\n```java\n    /**\n     * 部署流程\n     * @throws Exception\n     */\n    @Test\n    public void deploy() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"取消结束事件.bpmn20.xml\")\n                .name(\"取消结束事件\")\n                .deploy();\n        System.out.println(\"-----\");\n    }\n\n    /**\n     * 启动流程实例,设置流程变量中的flag=0触发取消结束事件\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        // 设置对应的流程变量的值\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"flag\",0);// 设置flag为0触发流程结束事件\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248\",map);\n    }\n\n    /**\n     * 完成任务\n     */\n    @Test\n    public void completeTask(){\n        TaskService taskService = processEngine.getTaskService();\n        Task task = taskService.createTaskQuery()\n                .processDefinitionId(\"myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248\")\n                .taskAssignee(\"zhangsan\")\n                .singleResult();\n        taskService.complete(task.getId());\n    }\n```\n\n\n\n输出结果：\n\n![image-20220401111758140](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111758140.png)\n\n\n\n输出结果是满足我们的期望的。\n\n\n\n### 补偿事件\n\n通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：\n\n![image-20220401202116847](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202116847.png)\n\n完整的xml文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:activiti=\"http://activiti.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.activiti.org/test\">\n    <error id=\"payFail\" errorCode=\"payFail\" ></error>\n    <process id=\"myProcess\" name=\"My process\" isExecutable=\"true\">\n        <startEvent id=\"startevent1\" name=\"开始事件\"></startEvent>\n        <parallelGateway id=\"parallelgateway1\" name=\"并行网关\"></parallelGateway>\n        <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"parallelgateway1\"></sequenceFlow>\n        <serviceTask id=\"servicetask1\" name=\"预订机票\" activiti:class=\"com.bobo.delegate.MyTwoDelegate\"></serviceTask>\n        <serviceTask id=\"servicetask2\" name=\"微信支付\" activiti:class=\"com.bobo.delegate.MyOneDelegate\"></serviceTask>\n        <userTask id=\"usertask1\" name=\"人工出票\" activiti:assignee=\"zhangsan\"></userTask>\n        <sequenceFlow id=\"flow2\" sourceRef=\"servicetask1\" targetRef=\"usertask1\"></sequenceFlow>\n        <parallelGateway id=\"parallelgateway2\" name=\"Parallel Gateway\"></parallelGateway>\n        <sequenceFlow id=\"flow3\" sourceRef=\"usertask1\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <sequenceFlow id=\"flow4\" sourceRef=\"parallelgateway1\" targetRef=\"servicetask1\"></sequenceFlow>\n        <sequenceFlow id=\"flow5\" sourceRef=\"parallelgateway1\" targetRef=\"servicetask2\"></sequenceFlow>\n        <sequenceFlow id=\"flow6\" sourceRef=\"servicetask2\" targetRef=\"parallelgateway2\"></sequenceFlow>\n        <serviceTask id=\"servicetask3\" name=\"取消预订\" isForCompensation=\"true\" activiti:class=\"com.bobo.delegate.MyThreeDelegate\"></serviceTask>\n        <boundaryEvent id=\"boundarycompensation1\" name=\"补偿边界事件\" attachedToRef=\"servicetask1\" cancelActivity=\"true\">\n            <compensateEventDefinition></compensateEventDefinition>\n        </boundaryEvent>\n        <boundaryEvent id=\"boundaryerror1\" name=\"错误边界事件\" attachedToRef=\"servicetask2\">\n            <errorEventDefinition errorRef=\"payFail\"></errorEventDefinition>\n        </boundaryEvent>\n        <intermediateThrowEvent id=\"compensationintermediatethrowevent1\" name=\"补偿抛出中间事件\">\n            <compensateEventDefinition></compensateEventDefinition>\n        </intermediateThrowEvent>\n        <sequenceFlow id=\"flow7\" sourceRef=\"boundaryerror1\" targetRef=\"compensationintermediatethrowevent1\"></sequenceFlow>\n        <endEvent id=\"endevent1\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow8\" sourceRef=\"compensationintermediatethrowevent1\" targetRef=\"endevent1\"></sequenceFlow>\n        <endEvent id=\"endevent2\" name=\"End\"></endEvent>\n        <sequenceFlow id=\"flow9\" sourceRef=\"parallelgateway2\" targetRef=\"endevent2\"></sequenceFlow>\n        <association id=\"association1\" sourceRef=\"boundarycompensation1\" targetRef=\"servicetask3\" associationDirection=\"None\"></association>\n    </process>\n    <bpmndi:BPMNDiagram id=\"BPMNDiagram_myProcess\">\n        <bpmndi:BPMNPlane bpmnElement=\"myProcess\" id=\"BPMNPlane_myProcess\">\n            <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"160.0\" y=\"360.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway1\" id=\"BPMNShape_parallelgateway1\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"380.0\" y=\"357.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask1\" id=\"BPMNShape_servicetask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"580.0\" y=\"220.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundarycompensation1\" id=\"BPMNShape_boundarycompensation1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"650.0\" y=\"270.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask2\" id=\"BPMNShape_servicetask2\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"580.0\" y=\"450.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"boundaryerror1\" id=\"BPMNShape_boundaryerror1\">\n                <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"650.0\" y=\"490.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"usertask1\" id=\"BPMNShape_usertask1\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"820.0\" y=\"220.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"parallelgateway2\" id=\"BPMNShape_parallelgateway2\">\n                <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1140.0\" y=\"336.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"servicetask3\" id=\"BPMNShape_servicetask3\">\n                <omgdc:Bounds height=\"55.0\" width=\"105.0\" x=\"830.0\" y=\"336.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"compensationintermediatethrowevent1\" id=\"BPMNShape_compensationintermediatethrowevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"740.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"820.0\" y=\"590.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNShape bpmnElement=\"endevent2\" id=\"BPMNShape_endevent2\">\n                <omgdc:Bounds height=\"35.0\" width=\"35.0\" x=\"1225.0\" y=\"339.0\"></omgdc:Bounds>\n            </bpmndi:BPMNShape>\n            <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n                <omgdi:waypoint x=\"195.0\" y=\"377.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"380.0\" y=\"377.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n                <omgdi:waypoint x=\"685.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"820.0\" y=\"247.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n                <omgdi:waypoint x=\"925.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"336.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow4\" id=\"BPMNEdge_flow4\">\n                <omgdi:waypoint x=\"400.0\" y=\"357.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"400.0\" y=\"247.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"580.0\" y=\"247.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow5\" id=\"BPMNEdge_flow5\">\n                <omgdi:waypoint x=\"400.0\" y=\"397.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"400.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"580.0\" y=\"477.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow6\" id=\"BPMNEdge_flow6\">\n                <omgdi:waypoint x=\"685.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"477.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1160.0\" y=\"376.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow7\" id=\"BPMNEdge_flow7\">\n                <omgdi:waypoint x=\"665.0\" y=\"520.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"664.0\" y=\"607.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"740.0\" y=\"607.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n                <omgdi:waypoint x=\"775.0\" y=\"607.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"820.0\" y=\"607.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"flow9\" id=\"BPMNEdge_flow9\">\n                <omgdi:waypoint x=\"1180.0\" y=\"356.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"1225.0\" y=\"356.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n            <bpmndi:BPMNEdge bpmnElement=\"association1\" id=\"BPMNEdge_association1\">\n                <omgdi:waypoint x=\"665.0\" y=\"300.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"664.0\" y=\"363.0\"></omgdi:waypoint>\n                <omgdi:waypoint x=\"830.0\" y=\"363.0\"></omgdi:waypoint>\n            </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n    </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n流程说明：\n\n\n\n![image-20220401202447583](https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202447583.png)\n\n微信支付绑定的JavaDelegate：\n\n```java\npublic class MyOneDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n\n        System.out.println(\"微信支付-----》MyOneDelegate\" + LocalDateTime.now().toString());\n        System.out.println(\"余额不足....\");\n        throw  new BpmnError(\"payFail\");\n    }\n}\n```\n\n预订机票绑定的JavaDelegate\n\n```java\npublic class MyTwoDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyTwoDelegate---->预订机票流程执行了\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n取消订单绑定的javaDelegate:\n\n```java\npublic class MyThreeDelegate implements JavaDelegate {\n    @Override\n    public void execute(DelegateExecution execution) {\n        System.out.println(\"MyThreeDelegate---->机票预订取消了....\" + LocalDateTime.now().toString());\n    }\n}\n```\n\n整个流程执行的过程是：任务开始后会并行的执行机票预订和微信支付，然后在微信支付是抛出payFail错误，同时错误边界事件会捕获到这个错误，然后执行到 补偿抛出中间事件，之后在机票预订的 补偿边界事件 被触发，对应的补偿触发器会执行对应的代码。 然后我们部署加启动流程后观察控制台的输出：\n\n```java\n    /**\n     * 部署流程\n     * @throws Exception\n     */\n    @Test\n    public void deploy() throws Exception{\n        Deployment deployment = processEngine.getRepositoryService().createDeployment()\n                .addClasspathResource(\"补偿事件.bpmn20.xml\")\n                .name(\"补偿事件\")\n                .deploy();\n    }\n\n    /**\n     * 启动流程实例\n     */\n    @Test\n    public void startProcessInstanceByKey()  throws Exception{\n        processEngine.getRuntimeService()\n                .startProcessInstanceById(\"myProcess:4:a45abe9f-b1b5-11ec-9daf-c03c59ad2248\");\n    }\n```\n\n控制台输出：\n\n```txt\nMyTwoDelegate---->预订机票流程执行了2022-04-01T20:17:44.985\n微信支付-----》MyOneDelegate2022-04-01T20:17:44.987\n余额不足....\nMyThreeDelegate---->机票预订取消了....2022-04-01T20:17:45.028\n```\n\n输出的结果和我们前面设计的是一样的，搞定~\n\n","slug":"flowable高级篇","published":1,"updated":"2022-11-05T14:16:59.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert0000ydk8f9qtnbesv","content":"<h1 id=\"flowable高级篇\"><a href=\"#flowable高级篇\" class=\"headerlink\" title=\"flowable高级篇\"></a>flowable高级篇</h1><blockquote>\n<p>lecture：波波老师</p>\n</blockquote>\n<h1 id=\"任务分配和流程变量\"><a href=\"#任务分配和流程变量\" class=\"headerlink\" title=\"任务分配和流程变量\"></a>任务分配和流程变量</h1><h2 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h2><h3 id=\"固定分配\"><a href=\"#固定分配\" class=\"headerlink\" title=\"固定分配\"></a>固定分配</h3><p>固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322205919319.png\"\n                      alt=\"image-20220322205919319\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322210018615.png\"\n                      alt=\"image-20220322210018615\"\n                ></p>\n<h3 id=\"表达式分配\"><a href=\"#表达式分配\" class=\"headerlink\" title=\"表达式分配\"></a>表达式分配</h3><p>Flowable使用UEL进行表达式解析。UEL代表<em>Unified Expression Language</em>，是EE6规范的一部分.Flowable支持两种UEL表达式： UEL-value 和UEL-method</p>\n<h4 id=\"值表达式\"><a href=\"#值表达式\" class=\"headerlink\" title=\"值表达式\"></a>值表达式</h4><p><strong>值表达式 Value expression</strong>: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar&#125;</span><br><span class=\"line\">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure>\n\n<p>案例讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212342245.png\"\n                      alt=\"image-20220322212342245\"\n                ></p>\n<p>可以看到通过表达式处理的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212431304.png\"\n                      alt=\"image-20220322212431304\"\n                ></p>\n<p>先部署流程，然后在启动流程实例的时候绑定表达式对应的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 设置 assignee 的取值</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;MyHolidayUI:1:4&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在流程变量表中我们可以看到对应的流程变量信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213558754.png\"\n                      alt=\"image-20220322213558754\"\n                ></p>\n<p>同时在Task表中，可以看到流程当前的分配人是<code>张三</code>，说明UEL表达式被解析了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213655020.png\"\n                      alt=\"image-20220322213655020\"\n                ></p>\n<h4 id=\"方法表达式\"><a href=\"#方法表达式\" class=\"headerlink\" title=\"方法表达式\"></a>方法表达式</h4><p><strong>方法表达式 Method expression</strong>: 调用一个方法，可以带或不带参数。<strong>当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。</strong>传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;printer.print()&#125;</span><br><span class=\"line\">$&#123;myBean.addNewOrder(&#x27;orderName&#x27;)&#125;</span><br><span class=\"line\">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>myBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法</p>\n<h3 id=\"监听器分配\"><a href=\"#监听器分配\" class=\"headerlink\" title=\"监听器分配\"></a>监听器分配</h3><p>可以使用监听器来完成很多Flowable的流程业务。</p>\n<p>我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee</p>\n<p>创建自定义监听器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的监听器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听器触发了：&quot;</span> + delegateTask.getName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;提交请假流程&quot;</span>.equals(delegateTask.getName()) &amp;&amp;</span><br><span class=\"line\">                <span class=\"string\">&quot;create&quot;</span>.equals(delegateTask.getEventName()))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 指定任务的负责人</span></span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;小张&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在FlowableUI中关联对应的监听器</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create:任务创建后触发</span><br><span class=\"line\">assignment:任务分配后触发</span><br><span class=\"line\">Delete:任务完成后触发</span><br><span class=\"line\">All：所有事件都触发</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322214807416.png\"\n                      alt=\"image-20220322214807416\"\n                ></p>\n<p>然后我们先部署流程，然后执行查看效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215711211.png\"\n                      alt=\"image-20220322215711211\"\n                ></p>\n<p>然后在Task表中我们可以看到对应的分配人为<code>小明</code>说明通过监听也完成了任务分配的工作了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215805734.png\"\n                      alt=\"image-20220322215805734\"\n                ></p>\n<h2 id=\"流程变量\"><a href=\"#流程变量\" class=\"headerlink\" title=\"流程变量\"></a>流程变量</h2><p>流程实例按步骤执行时，需要使用一些数据。在Flowable中，这些数据称作*变量(variable)*，并会存储在数据库中。变量可以用在表达式中（例如在排他网关中用于选择正确的出口路径），也可以在Java服务任务(service task)中用于调用外部服务（例如为服务调用提供输入或结果存储），等等。</p>\n<p>流程实例可以持有变量（称作<em>流程变量 process variables</em>）；用户任务以及<em>执行(executions)<em>——流程当前活动节点的指针——也可以持有变量。流程实例可以持有任意数量的变量，每个变量存储为</em>ACT_RU_VARIABLE</em>数据库表的一行。</p>\n<p>所有的<em>startProcessInstanceXXX</em>方法都有一个可选参数，用于在流程实例创建及启动时设置变量。例如，在<em>RuntimeService</em>中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessInstance <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">(String processDefinitionKey, Map&lt;String, Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在流程执行中加入变量。例如，(<em>RuntimeService</em>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariable</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariablesLocal</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324095243595.png\"\n                      alt=\"image-20220324095243595\"\n                ></p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量</p>\n<p>注意：如：    Global变量：userId（变量名）、zhangsan（变量值）</p>\n<p>global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。</p>\n<p>Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 </p>\n<h3 id=\"案例讲解\"><a href=\"#案例讲解\" class=\"headerlink\" title=\"案例讲解\"></a>案例讲解</h3><p> 需求：员工创建出差申请单，由部门经理审核，部门经理申请通过后3天以下由财务直接申批，3天以上先由总经理审批，总经理审批通过后再由财务审批。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093855618.png\"\n                      alt=\"image-20220324093855618\"\n                ></p>\n<p>连接先设置条件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093806442.png\"\n                      alt=\"image-20220324093806442\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093700631.png\"\n                      alt=\"image-20220324093700631\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">        .addClasspathResource(<span class=\"string\">&quot;出差申请单.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">        .name(<span class=\"string\">&quot;请假流程...&quot;</span>)</span><br><span class=\"line\">        .category(<span class=\"string\">&quot;请假&quot;</span>) <span class=\"comment\">// 分类</span></span><br><span class=\"line\">        .tenantId(<span class=\"string\">&quot;dpb&quot;</span>) <span class=\"comment\">// 租户id</span></span><br><span class=\"line\">        .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getCategory() = &quot;</span> + deploy.getCategory());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动流程实例：并且指定全局流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在启动流程实例的时候设置流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 设置流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 设置assignee的取值</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee2&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee3&quot;</span>,<span class=\"string\">&quot;赵财务&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;evection:1:4&quot;</span>,variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完成Task任务，同时也可以指定流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务时指定流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;evection:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = task.getProcessVariables();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">        taskService.complete(task.getId(),map);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们也可以在处理流程之外通过Task编号来修改流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过当前任务设置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">currentTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//   当前待办任务id</span></span><br><span class=\"line\">        <span class=\"comment\">//  获取processEngine</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;evection:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;王五&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = task.getProcessVariables();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//  一次设置多个值 设置局部变量</span></span><br><span class=\"line\">        taskService.setVariables(task.getId(), map);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"候选人和候选人组\"><a href=\"#候选人和候选人组\" class=\"headerlink\" title=\"候选人和候选人组\"></a>候选人和候选人组</h1><p>在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。</p>\n<h2 id=\"候选人\"><a href=\"#候选人\" class=\"headerlink\" title=\"候选人\"></a>候选人</h2><h3 id=\"定义流程图\"><a href=\"#定义流程图\" class=\"headerlink\" title=\"定义流程图\"></a>定义流程图</h3><p>定义流程图，同时指定候选人，多个候选人会通过<code>,</code>连接</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325095959489.png\"\n                      alt=\"image-20220325095959489\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325100835461.png\"\n                      alt=\"image-20220325100835461\"\n                ></p>\n<h3 id=\"部署和启动流程实例\"><a href=\"#部署和启动流程实例\" class=\"headerlink\" title=\"部署和启动流程实例\"></a>部署和启动流程实例</h3><p>部署流程，并且在启动流程实例的时候对UEL表达式赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;请假流程-候选人.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请求流程-候选人&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(deploy.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate2&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate3&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对应的表结构中我们可以看到流程变量已经有了，但是对于的Task的Assignee还是为空。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325101054787.png\"\n                      alt=\"image-20220325101054787\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325102600573.png\"\n                      alt=\"image-20220325102600573\"\n                ></p>\n<h3 id=\"任务的查询\"><a href=\"#任务的查询\" class=\"headerlink\" title=\"任务的查询\"></a>任务的查询</h3><p>根据当前登录的用户，查询对应的候选任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskCandidateUser(<span class=\"string\">&quot;李四&quot;</span>) # 注意</span><br><span class=\"line\">             .list();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务的拾取\"><a href=\"#任务的拾取\" class=\"headerlink\" title=\"任务的拾取\"></a>任务的拾取</h3><p>知道了我有可拾取的任务后，拾取任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">                .taskCandidateUser(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拾取对应的任务</span></span><br><span class=\"line\">            taskService.claim(task.getId(),<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325103624344.png\"\n                      alt=\"image-20220325103624344\"\n                ></p>\n<h3 id=\"任务的归还\"><a href=\"#任务的归还\" class=\"headerlink\" title=\"任务的归还\"></a>任务的归还</h3><p>拾取任务后不想操作那么就归还任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 退还任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\"> *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unclaimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拾取对应的任务</span></span><br><span class=\"line\">        taskService.unclaim(task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归还拾取成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的交接\"><a href=\"#任务的交接\" class=\"headerlink\" title=\"任务的交接\"></a>任务的交接</h3><p>拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 任务的交接</span></span><br><span class=\"line\"><span class=\"comment\">  *    如果我获取了任务，但是不想执行，那么我可以把这个任务交接给其他的用户</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 任务的交接</span></span><br><span class=\"line\">         taskService.setAssignee(task.getId(),<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务交接给了王五&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的完成\"><a href=\"#任务的完成\" class=\"headerlink\" title=\"任务的完成\"></a>任务的完成</h3><p>正常的任务处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;王五&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"候选人组\"><a href=\"#候选人组\" class=\"headerlink\" title=\"候选人组\"></a>候选人组</h2><p>当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。</p>\n<h3 id=\"管理用户和组\"><a href=\"#管理用户和组\" class=\"headerlink\" title=\"管理用户和组\"></a>管理用户和组</h3><h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>我们需要先单独维护用户信息。后台对应的表结构是<code>ACT_ID_USER</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 维护用户</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"comment\">// 通过 IdentityService 完成相关的用户和组的管理</span></span><br><span class=\"line\">     <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">     <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.newUser(<span class=\"string\">&quot;田佳&quot;</span>);</span><br><span class=\"line\">     user.setFirstName(<span class=\"string\">&quot;田&quot;</span>);</span><br><span class=\"line\">     user.setLastName(<span class=\"string\">&quot;jia&quot;</span>);</span><br><span class=\"line\">     user.setEmail(<span class=\"string\">&quot;tianjia@qq.com&quot;</span>);</span><br><span class=\"line\">     identityService.saveUser(user);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110324815.png\"\n                      alt=\"image-20220325110324815\"\n                ></p>\n<h4 id=\"Group管理\"><a href=\"#Group管理\" class=\"headerlink\" title=\"Group管理\"></a>Group管理</h4><p>维护对应的Group信息，后台对应的表结构是<code>ACT_ID_GROUP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建用户组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对象并指定相关的信息</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.newGroup(<span class=\"string\">&quot;group2&quot;</span>);</span><br><span class=\"line\">    group.setName(<span class=\"string\">&quot;开发部&quot;</span>);</span><br><span class=\"line\">    group.setType(<span class=\"string\">&quot;type1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对应的表结构数据</span></span><br><span class=\"line\">    identityService.saveGroup(group);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110408435.png\"\n                      alt=\"image-20220325110408435\"\n                ></p>\n<h4 id=\"用户分配组\"><a href=\"#用户分配组\" class=\"headerlink\" title=\"用户分配组\"></a>用户分配组</h4><p>用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是<code>ACT_ID_MEMBERSHIP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将用户分配给对应的Group</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">userGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">    <span class=\"comment\">// 根据组的编号找到对应的Group对象</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">    List&lt;User&gt; list = identityService.createUserQuery().list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user : list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将用户分配给对应的组</span></span><br><span class=\"line\">        identityService.createMembership(user.getId(),group.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110511848.png\"\n                      alt=\"image-20220325110511848\"\n                ></p>\n<h3 id=\"候选人组应用\"><a href=\"#候选人组应用\" class=\"headerlink\" title=\"候选人组应用\"></a>候选人组应用</h3><p>搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了</p>\n<h4 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h4><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325111013641.png\"\n                      alt=\"image-20220325111013641\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110952527.png\"\n                      alt=\"image-20220325110952527\"\n                ></p>\n<h4 id=\"流程的部署运行\"><a href=\"#流程的部署运行\" class=\"headerlink\" title=\"流程的部署运行\"></a>流程的部署运行</h4><p>然后我们把流程部署和运行，注意对UEL表达式赋值，关联上Group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;请假流程-候选人组.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请求流程-候选人&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;g1&quot;</span>,group.getId()); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">        runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>,variables);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应表结构中就有对应的体现</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325112545719.png\"\n                      alt=\"image-20220325112545719\"\n                ></p>\n<h4 id=\"任务的拾取和完成\"><a href=\"#任务的拾取和完成\" class=\"headerlink\" title=\"任务的拾取和完成\"></a>任务的拾取和完成</h4><p>然后完成任务的查询拾取和处理操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidateGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 根据当前登录的用户找到对应的组</span></span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;邓彪&quot;</span>).singleResult();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskCandidateGroup(group.getId())</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;田佳&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 根据当前登录的用户找到对应的组</span></span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(userId).singleResult();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskCandidateGroup(group.getId())</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务拾取</span></span><br><span class=\"line\">            taskService.claim(task.getId(),userId);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;邓彪&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">            taskService.complete(task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><p>网关用来控制流程的流向</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p>排他网关（exclusive gateway）（也叫<em>异或网关 XOR gateway</em>，或者更专业的，<em>基于数据的排他网关 exclusive data-based gateway</em>），用于对流程中的<strong>决策</strong>建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为<em>true</em>）继续流程。</p>\n<p><strong>请注意这里出口顺序流的含义与BPMN 2.0中的一般情况不一样。一般情况下，会选择所有条件计算为true的顺序流，并行执行。而使用排他网关时，只会选择一条顺序流。当多条顺序流的条件都计算为true时，会且仅会选择在XML中最先定义的顺序流继续流程。如果没有可选的顺序流，会抛出异常。</strong></p>\n<p>图示</p>\n<p>排他网关用内部带有’X’图标的标准网关（菱形）表示，’X’图标代表<em>异或</em>的含义。请注意内部没有图标的网关默认为排他网关。BPMN 2.0规范不允许在同一个流程中混合使用有及没有X的菱形标志。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326100630908.png\"\n                      alt=\"image-20220326100630908\"\n                ></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326103951903.png\"\n                      alt=\"image-20220326103951903\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;请假流程-排他网关.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;请求流程-排他网关&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(deploy.getName());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">     <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">     variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-exclusive:1:4&quot;</span>,variables);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">     <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">     variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     runtimeService.setVariables(<span class=\"string\">&quot;12503&quot;</span>,variables);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-exclusive:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>如果从网关出去的线所有条件都不满足的情况下会抛出系统异常，</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326104744181.png\"\n                      alt=\"image-20220326104744181\"\n                ></p>\n<p>但是要注意任务没有介绍，还是原来的任务，我们可以重置流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    runtimeService.setVariables(<span class=\"string\">&quot;12503&quot;</span>,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>前面我们可以直接在连接线上定义条件，那为什么还要有排他网关呢？直接在线上的情况，如果条件都不满足，流程就结束了，是异常结束!!</p>\n<h2 id=\"并行网关\"><a href=\"#并行网关\" class=\"headerlink\" title=\"并行网关\"></a>并行网关</h2><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。</p>\n</li>\n<li><p>join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。</p>\n</li>\n</ul>\n<p>注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。</p>\n<p><strong>与其他网关的主要区别是，并行网关不会解析条件。</strong> <strong>即使顺序流中定义了条件，也会被忽略。</strong></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326110341232.png\"\n                      alt=\"image-20220326110341232\"\n                ></p>\n<p>当我们执行了创建请假单后，到并行网关的位置的时候，在ACT_RU_TASK表中就有两条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111359504.png\"\n                      alt=\"image-20220326111359504\"\n                ></p>\n<p>然后同时在ACT_RU_EXECUTION中有三条记录，一个任务对应的有两个执行实例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111453630.png\"\n                      alt=\"image-20220326111453630\"\n                ></p>\n<h2 id=\"包含网关\"><a href=\"#包含网关\" class=\"headerlink\" title=\"包含网关\"></a>包含网关</h2><p>包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。</p>\n<p>包含网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。</p>\n</li>\n<li><p>汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326112720089.png\"\n                      alt=\"image-20220326112720089\"\n                ></p>\n<h2 id=\"事件网关\"><a href=\"#事件网关\" class=\"headerlink\" title=\"事件网关\"></a>事件网关</h2><p>事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。</p>\n<p>事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的”执行”， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：</p>\n<ol>\n<li>事件网关必须有两条或以上外出顺序流；</li>\n<li>事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）</li>\n<li>连接到事件网关的中间捕获事件必须只有一个入口顺序流。</li>\n</ol>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>事件（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：<em>捕获（catching）</em>与<em>抛出（throwing）</em>事件。</p>\n<ul>\n<li><strong>捕获:</strong> 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。</li>\n<li><strong>抛出:</strong> 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。</li>\n</ul>\n<h2 id=\"定时事件\"><a href=\"#定时事件\" class=\"headerlink\" title=\"定时事件\"></a>定时事件</h2><p>定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件</p>\n<h3 id=\"定时器启动事件\"><a href=\"#定时器启动事件\" class=\"headerlink\" title=\"定时器启动事件\"></a>定时器启动事件</h3><p>定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。</p>\n<p><em><strong>请注意</strong>：</em>子流程不能有定时器启动事件。</p>\n<p><em><strong>请注意</strong>：</em>定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。</p>\n<p><em><strong>请注意</strong>：</em>当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。</p>\n<p>定时器启动事件，用其中有一个钟表图标的圆圈来表示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327223547656.png\"\n                      alt=\"image-20220327223547656\"\n                ></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231015715.png\"\n                      alt=\"image-20220327231015715\"\n                ></p>\n<p>在定时启动的节点设置时间：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231055237.png\"\n                      alt=\"image-20220327231055237\"\n                ></p>\n<p>可以通过FlowableUI中的部署来演示，通过FlowableUI我们可以看到，没有启动流程实例的情况下，到里23:14:14秒的时候自动帮助我们创建了一个流程实例。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231551538.png\"\n                      alt=\"image-20220327231551538\"\n                ></p>\n<h3 id=\"定时器捕获中间事件\"><a href=\"#定时器捕获中间事件\" class=\"headerlink\" title=\"定时器捕获中间事件\"></a>定时器捕获中间事件</h3><p>当第一个人工处理完成后，第二个人工处理的任务需要在2022-03-27T23:25:14之后执行</p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232259428.png\"\n                      alt=\"image-20220327232259428\"\n                ></p>\n<p>通过FlowableUI的案例演示我们可以看到后一个任务是在定时时间之后执行的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232624091.png\"\n                      alt=\"image-20220327232624091\"\n                ></p>\n<h3 id=\"定时器边界事件\"><a href=\"#定时器边界事件\" class=\"headerlink\" title=\"定时器边界事件\"></a>定时器边界事件</h3><p>人工任务1如果在定义的<code>2022-03-27T23:36:14</code>这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.</p>\n<p>案例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233132259.png\"\n                      alt=\"image-20220327233132259\"\n                ></p>\n<p>发布启动流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233410596.png\"\n                      alt=\"image-20220327233410596\"\n                ></p>\n<p>然后在张三这个位置我们不完成，等到定时到来，达到定时的时间，任务进入到了人工审批三</p>\n<h3 id=\"timeDuration\"><a href=\"#timeDuration\" class=\"headerlink\" title=\"timeDuration\"></a>timeDuration</h3><p>​       在定时事件中我们一定要放开如下的配置：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329082431920.png\"\n                      alt=\"image-20220329082431920\"\n                ></p>\n<p>指定计时器在启动前应等待多长的时间，首先一定时器启动事件为例：</p>\n<h4 id=\"开始事件\"><a href=\"#开始事件\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h4><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328200755160.png\"\n                      alt=\"image-20220328200755160\"\n                ></p>\n<p>可以通过FlowableUI的应用来验证</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202242555.png\"\n                      alt=\"image-20220328202242555\"\n                ></p>\n<p>发布任务后然后我们等待两分钟就可以看到任务到了<code>zhangsan</code>的位置。或者我们也可以在SpringBoot整合Flowable的项目中添加对应的Controller来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;test003.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;部署任务成功....&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提交请求完成部署操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202918399.png\"\n                      alt=\"image-20220328202918399\"\n                ></p>\n<p>生成了对应的Task记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203621023.png\"\n                      alt=\"image-20220328203621023\"\n                ></p>\n<p><strong>注意</strong>：在事件中一定要开启异步任务，不然相关的事件是不会触发的！</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203656000.png\"\n                      alt=\"image-20220328203656000\"\n                ></p>\n<h4 id=\"中间事件\"><a href=\"#中间事件\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h4><p>然后来看看中间事件的等待定时器事件案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204205453.png\"\n                      alt=\"image-20220328204205453\"\n                ></p>\n<p>案例由两个自动任务和一个定时器中间事件组成，在定时任务中绑定了两个JavaDelegate的Java类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后流程图中的关联为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204349358.png\"\n                      alt=\"image-20220328204349358\"\n                ></p>\n<p>另一个类似，然后定时器中间事件的等待时间设置是2分钟。我们部署后通过Java代码来演示看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;等待定时器中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时中间事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要启动流程实例，之后等待两分钟看效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;Test04:1:325edb10-ae95-11ec-a77f-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328205718521.png\"\n                      alt=\"image-20220328205718521\"\n                ></p>\n<h4 id=\"边界事件\"><a href=\"#边界事件\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h4><p>最后我们来看看边界事件中的等待定时器的处理，案例为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210150212.png\"\n                      alt=\"image-20220328210150212\"\n                ></p>\n<p>该案例由一个人工审核+两个自动任务+定时器边界事件组成，自动任务一绑定的JavaDelegate是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动任务二绑定的JavaDelegate是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定时器边界事件设置的是30S，也就是如果人工审核在30S还没处理就会触发边界事件：通过代码来演示，部署流程后需要启动流程，然后等待30S看控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;等待定时器边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器边界事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;test05:1:c46f83bf-ae97-11ec-b055-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等待控制台输出：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210905204.png\"\n                      alt=\"image-20220328210905204\"\n                ></p>\n<p>小结：timeDuration在三种定时器的事件中</p>\n<ul>\n<li>定时器启动事件：等待指定时间后启动流程实例</li>\n<li>定时器中间事件：AB任务中间有个定时器中间事件，A任务处理后需要等待对应的时间才能流转到B处</li>\n<li>定时器边界事件：任务A绑定了定时器边界事件后，如果在等待时间以内A没有处理任务，那么就会触发对应的边界事件</li>\n</ul>\n<h3 id=\"timeCycle\"><a href=\"#timeCycle\" class=\"headerlink\" title=\"timeCycle\"></a>timeCycle</h3><p>指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式</p>\n<ul>\n<li>第一种是按照<a class=\"link\"   href=\"http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\" >ISO 8601<i class=\"fas fa-external-link-alt\"></i></a>标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3&#x2F;PT10H</li>\n<li>也可以使用<em>timeCycle</em>的可选属性<em>endDate</em>，或者像这样直接写在时间表达式的结尾：<code>R3/PT10H/$&#123;EndDate&#125;</code>。 当到达endDate时，应用会停止，并为该任务创建其他作业</li>\n<li>也可以通过cron表达式来处理</li>\n</ul>\n<h4 id=\"开始事件-1\"><a href=\"#开始事件-1\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h4><p>编写案例来演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213218525.png\"\n                      alt=\"image-20220328213218525\"\n                ></p>\n<p>重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213330813.png\"\n                      alt=\"image-20220328213330813\"\n                ></p>\n<p>然后我们部署看效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;重复启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器边界事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213955271.png\"\n                      alt=\"image-20220328213955271\"\n                ></p>\n<p>然后我们再指定下endDate来看看案例，直接可以在xml中来处理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">timeCycle</span>&gt;</span>R3/PT30S/2022-03-28T21:46:11+00:00<span class=\"tag\">&lt;/<span class=\"name\">timeCycle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328214459137.png\"\n                      alt=\"image-20220328214459137\"\n                ></p>\n<p>此外还可以通过cron表达式来处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0/5 * * * ?</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215255141.png\"\n                      alt=\"image-20220328215255141\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215340678.png\"\n                      alt=\"image-20220328215340678\"\n                ></p>\n<h4 id=\"中间事件-1\"><a href=\"#中间事件-1\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h4><p>&amp;emsp;timeCycle作为中间事件的话，只会执行一次，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225250878.png\"\n                      alt=\"image-20220328225250878\"\n                ></p>\n<p>案例中的自动任务一二对应绑定如下的JavaDelegate.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中间事件的设置为<code>R3/PT30S</code> 循环3次，间隔30秒执行，但是这是中间事件，其实只会执行一次，我来看效果</p>\n<p>部署后启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;循环中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;循环中间事件...&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        processEngine.getRuntimeService()</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;cycle-middle-event:1:3456ade8-aea7-11ec-9064-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">        TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225931465.png\"\n                      alt=\"image-20220328225931465\"\n                ></p>\n<h4 id=\"边界事件-1\"><a href=\"#边界事件-1\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h4><p>在边界事件中，定义了循环条件<code>R3/PT30S</code>理论上要循环3次，间隔30S，单其实也只会执行一次，来看案例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231838967.png\"\n                      alt=\"image-20220328231838967\"\n                ></p>\n<p>案例上面的等待时间的是一样的，只是边界事件是30S</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231955441.png\"\n                      alt=\"image-20220328231955441\"\n                ></p>\n<p>然后我们部署启动流程看效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329094741327.png\"\n                      alt=\"image-20220329094741327\"\n                ></p>\n<p>总结：循环设定</p>\n<ul>\n<li>启动事件：根据设置循环启动流程实例</li>\n<li>中间事件：即使设置了循环时间也只会触发异常</li>\n<li>边界事件：即使设置了循环时间也只会触发异常</li>\n</ul>\n<h2 id=\"消息事件\"><a href=\"#消息事件\" class=\"headerlink\" title=\"消息事件\"></a>消息事件</h2><p>消息事件（message event），是指引用具名消息的事件。消息具有名字与载荷。与信号不同，消息事件只有一个接收者</p>\n<h3 id=\"启动事件\"><a href=\"#启动事件\" class=\"headerlink\" title=\"启动事件\"></a>启动事件</h3><p>消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329103837021.png\"\n                      alt=\"image-20220329103837021\"\n                ></p>\n<p>我们需要先定义一个消息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105849732.png\"\n                      alt=\"image-20220329105849732\"\n                ></p>\n<p>然后在消息开始节点出引用</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105922977.png\"\n                      alt=\"image-20220329105922977\"\n                ></p>\n<p>然后通过代码来处理，部署和启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;消息启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;消息启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署后不会自动启动，我们需要接收相关的信息后来触发。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// runtimeService.startProcessInstanceById(&quot;event006:1:0532e730-af02-11ec-8cf3-c03c59ad2248&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">     runtimeService.startProcessInstanceByMessage(<span class=\"string\">&quot;第一个消息&quot;</span>);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">     TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>注意</strong>：发送消息发送的应该是消息的名称而不是消息的ID，报错如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329104823537.png\"\n                      alt=\"image-20220329104823537\"\n                ></p>\n<h3 id=\"中间事件-2\"><a href=\"#中间事件-2\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h3><p>消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，<code>自动流程1</code>处理完成后，需要接收特定的消息之后才能进入到<code>自动流程2</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111412619.png\"\n                      alt=\"image-20220329111412619\"\n                ></p>\n<p>消息中间事件绑定的消息为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111446959.png\"\n                      alt=\"image-20220329111446959\"\n                ></p>\n<p>然后通过代码来演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;消息中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;消息中间事件&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">     <span class=\"comment\">//runtimeService.startProcessInstanceByMessage(&quot;第一个消息&quot;);</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(1);</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 中间事件-发布消息</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">recevedMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 需要查询到executionId</span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processExecutionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;b5349e22-af0e-11ec-93e6-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 我们需要根据流程实例编号找到对应的执行编号</span></span><br><span class=\"line\">    <span class=\"comment\">/* Execution execution = runtimeService.createExecutionQuery()</span></span><br><span class=\"line\"><span class=\"comment\">             .processInstanceId(&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">             .singleResult();</span></span><br><span class=\"line\"><span class=\"comment\">     System.out.println(&quot;-----------&gt;&quot;+execution.getId());*/</span></span><br><span class=\"line\">     runtimeService.messageEventReceived(<span class=\"string\">&quot;第二个消息&quot;</span>,processExecutionId);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到的输出效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329112435376.png\"\n                      alt=\"image-20220329112435376\"\n                ></p>\n<h3 id=\"边界事件-2\"><a href=\"#边界事件-2\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>消息边界事件，如果在消息触发前还没有，案例演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329113848978.png\"\n                      alt=\"image-20220329113848978\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;消息边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;消息边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event009:1:f2096787-af11-11ec-b290-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">    <span class=\"comment\">//runtimeService.startProcessInstanceByMessage(&quot;第一个消息&quot;);</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(1);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署流程后启动流程实例会运转到</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114038773.png\"\n                      alt=\"image-20220329114038773\"\n                ></p>\n<p>如果人工处理在消息订阅前没有处理就会触发边界事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界事件-发布消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">recevedMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要查询到executionId</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processExecutionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1d503361-af12-11ec-89a4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 我们需要根据流程实例编号找到对应的执行编号</span></span><br><span class=\"line\">   <span class=\"comment\">/* Execution execution = runtimeService.createExecutionQuery()</span></span><br><span class=\"line\"><span class=\"comment\">            .processInstanceId(&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">            .singleResult();</span></span><br><span class=\"line\"><span class=\"comment\">    System.out.println(&quot;-----------&gt;&quot;+execution.getId());*/</span></span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;第三个消息&quot;</span>,processExecutionId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114505074.png\"\n                      alt=\"image-20220329114505074\"\n                ></p>\n<h2 id=\"错误事件\"><a href=\"#错误事件\" class=\"headerlink\" title=\"错误事件\"></a>错误事件</h2><p>错误事件可以用做一个流程的开始事件或者作为一个任务或者子流程的边界事件，错误事件没有提供作用中间事件的功能，这一点和前面介绍的定时器事件和消息事件还有区别的。</p>\n<h3 id=\"开始事件-2\"><a href=\"#开始事件-2\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。<strong>错误启动事件不能用于启动流程实例</strong>。</p>\n<p>错误启动事件总是中断。我们通过案例来介绍。此处我们用Eclipse来绘制流程图，熟悉下Eclipse工具</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235608917.png\"\n                      alt=\"image-20220329235608917\"\n                ></p>\n<p>注意：绘制的是子流程事件：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004724798.png\"\n                      alt=\"image-20220330004724798\"\n                ></p>\n<p>然后我们再定义一个错误，内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;abcd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在FlowableUI中没找到错误定义的选项，我们就在流程文件中自己添加即可。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235702382.png\"\n                      alt=\"image-20220329235702382\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329214507352.png\"\n                      alt=\"image-20220329214507352\"\n                ></p>\n<p>完整的流程文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;abcd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;eventsubprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Event sub Process&quot;</span> <span class=\"attr\">triggeredByEvent</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Error start&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;480.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;710.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;eventsubprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_eventsubprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;211.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;401.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;420.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_errorstartevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;510.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;515.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;710.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;815.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;635.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在主流程中的<code>自动任务一</code>中我们抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在<code>自定义任务二</code>中简单定义一个输出即可。然后我们部署任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(SpringBootFlowableApplicationTests.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;错误启动事件.bar&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addZipInputStream(in)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后我们再启动流程实例，那么自动任务一就会抛出异常，然后对应的子流程就会开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:c0462994-af79-11ec-8cae-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果获取到了我们期望的结果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000557061.png\"\n                      alt=\"image-20220330000557061\"\n                ></p>\n<p>通过输出结果也可以看到执行的自动任务一后，抛出错误事件<code>abcd</code>,子流程触发并执行了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000741836.png\"\n                      alt=\"image-20220330000741836\"\n                ></p>\n<h3 id=\"边界事件-3\"><a href=\"#边界事件-3\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>定义如下的流程图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004335187.png\"\n                      alt=\"image-20220330004335187\"\n                ></p>\n<p>注意绘制的时候</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004644673.png\"\n                      alt=\"image-20220330004644673\"\n                ></p>\n<p>xml文件内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error02&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;a123&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Sub Process&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Service Task&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Error&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow12&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;402.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;388.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;368.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1099.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1440.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;378.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;600.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;271.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;451.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;381.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1030.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;391.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundaryerror1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1440.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1204.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow10&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;955.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1030.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow11&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;755.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;437.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1111.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow12&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow12&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;550.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;964.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1099.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对应的三个自定义任务绑定的JavaDelegate为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;a123&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们部署文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(SpringBootFlowableApplicationTests.class</span><br><span class=\"line\">            .getClassLoader()</span><br><span class=\"line\">            .getResourceAsStream(<span class=\"string\">&quot;错误边界事件.bar&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addZipInputStream(in)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署成功后我们再启动一个流程实例，进入到自定义任务一处会抛出异常，触发边界异常处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330003624235.png\"\n                      alt=\"image-20220330003624235\"\n                ></p>\n<p>输出的结果和我们预期的是一样的</p>\n<h2 id=\"信号事件\"><a href=\"#信号事件\" class=\"headerlink\" title=\"信号事件\"></a>信号事件</h2><h3 id=\"开始事件-3\"><a href=\"#开始事件-3\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095103789.png\"\n                      alt=\"image-20220330095103789\"\n                ></p>\n<p>然后设置相关的属性，并定义一个信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095157518.png\"\n                      alt=\"image-20220330095157518\"\n                ></p>\n<p>然后在我们声明的信号开始引用我们上面创建的信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095725130.png\"\n                      alt=\"image-20220330095725130\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;firstSignal&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号启动事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号开始&quot;</span> <span class=\"attr\">isInterrupting</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2001&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;172.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;147.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;612.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;173.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;314.94999961358405&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.4999999999399&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;567.449999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;612.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>部署流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;信号启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;信号启动事件&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>流程是一个信息启动事件，所以我们需要释放对应的信号来触发流程的启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号发送来触发信号启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 全局的信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">signalReceived</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;firstSignal&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过输出语句可以看到自定义任务触发了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330100203036.png\"\n                      alt=\"image-20220330100203036\"\n                ></p>\n<p>我们可以把信息的作用域由原来的golbal全局的调整为processInstance，测试后发现还是执行了，说明在启动事件信息的作用域其实是不起作用的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;signal id=<span class=\"string\">&quot;signal01&quot;</span> name=<span class=\"string\">&quot;firstSignal&quot;</span> flowable:scope=<span class=\"string\">&quot;processInstance&quot;</span>&gt;&lt;/signal&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"中间捕获事件\"><a href=\"#中间捕获事件\" class=\"headerlink\" title=\"中间捕获事件\"></a>中间捕获事件</h3><p>案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330101820083.png\"\n                      alt=\"image-20220330101820083\"\n                ></p>\n<p>对应的信号绑定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;singnal02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;secondSingal&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号中间捕获事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateCatchEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号捕获中间事件&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;singnal02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateCatchEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束任务&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;120.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_signal01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;318.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;495.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;122.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;151.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;348.44853390329115&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.78775666509335&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;495.49999999999903&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;162.7068396226415&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;595.4499999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;162.94542586750788&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0016973189436&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.73506227304313&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;149.94999953609073&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;165.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;318.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;165.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>先部署：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号中间捕获事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号中间捕获事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要启动流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event2002:1:adc5b8f8-afcf-11ec-959a-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送信号信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号发送来触发信号启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 全局的信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">signalGolbal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;secondSingal&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后被我们的信号捕获中间事件捕获</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102256367.png\"\n                      alt=\"image-20220330102256367\"\n                ></p>\n<p>信号作用域为processInstance的情况</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102524238.png\"\n                      alt=\"image-20220330102524238\"\n                ></p>\n<p>首先针对processInstance的信号，我们发送global信号是不会被捕获的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102808127.png\"\n                      alt=\"image-20220330102808127\"\n                ></p>\n<p>然后processInstance的信息我们需要在流程实例内部抛出信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330112205035.png\"\n                      alt=\"image-20220330112205035\"\n                ></p>\n<h3 id=\"中间抛出事件\"><a href=\"#中间抛出事件\" class=\"headerlink\" title=\"中间抛出事件\"></a>中间抛出事件</h3><p>信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330235847392.png\"\n                      alt=\"image-20220330235847392\"\n                ></p>\n<p>定义信息信息：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330193530718.png\"\n                      alt=\"image-20220330193530718\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331000011215.png\"\n                      alt=\"image-20220331000011215\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号中间抛出事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateThrowEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateThrowEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateCatchEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateCatchEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task03&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2003&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2003&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startId01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;163.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_pid01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;270.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;158.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;71.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;780.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;71.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task03&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;795.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;255.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;633.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;96.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;465.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_pid02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;994.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;158.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1079.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.45&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;633.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1034.0591869398208&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.3782051282051&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1079.5002755524838&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.08885188426407&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;894.9499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.4867256637168&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1002.6675392670157&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;186.14712041884815&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;663.4499994451444&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;779.9999999999972&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;494.9497692355611&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;293.0819166248564&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;794.9999999999911&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;294.7260273972602&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;879.9499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;129.1390243902439&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;999.8065381558029&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;172.67196819085487&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;304.9870182555781&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;173.0233265720081&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.49999999999994&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;129.8358938547486&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;302.31181354817494&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;185.6374177631579&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.15151373509184&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;285.24160328636844&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;129.94999940317362&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;270.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个自定义任务绑定了三个javaDelegate分别给出打印语句来记录</p>\n<p>然后部署任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号中间抛出事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号中间抛出事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动任务即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       processEngine.getRuntimeService()</span><br><span class=\"line\">               .startProcessInstanceById(<span class=\"string\">&quot;event2003:1:665b1533-b020-11ec-877d-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">       <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">       TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>看控制台的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200124232.png\"\n                      alt=\"image-20220330200124232\"\n                ></p>\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200235193.png\"\n                      alt=\"image-20220330200235193\"\n                ></p>\n<h3 id=\"边界事件-4\"><a href=\"#边界事件-4\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>最后来看看信号边界事件，案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330202443905.png\"\n                      alt=\"image-20220330202443905\"\n                ></p>\n<p>完整的xml定义为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2004&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号边界事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2004&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2004&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2004&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;163.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;255.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;138.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;135.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;161.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;341.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.4527694396093&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;203.7233532460343&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;336.557461183174&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;225.9233207922021&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.4999999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.5301011331414&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;354.95000000000005&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;177.43714821763604&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.56228893058162&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;129.94999949366624&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;254.99999999993574&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;621.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;355.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;355.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;621.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>定义的信号为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自动任务的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署项目然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event2004:1:e8b5c39f-b024-11ec-bdac-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203056055.png\"\n                      alt=\"image-20220330203056055\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalGlobal</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">signal</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;signal2&quot;</span>;</span><br><span class=\"line\">    Map&lt;String, Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">    processEngine.getRuntimeService().signalEventReceived(signal,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203233862.png\"\n                      alt=\"image-20220330203233862\"\n                ></p>\n<p>通过输出看到了我们期望的结果了，这样就给大家介绍完了信号相关的各种事件了</p>\n<h2 id=\"结束事件\"><a href=\"#结束事件\" class=\"headerlink\" title=\"结束事件\"></a>结束事件</h2><p>结束事件顾名思义就是流程结束的事件，除了前面遇到的空结束事件外，结束事件还包括如下几种：</p>\n<ul>\n<li>错误结束事件</li>\n<li>中断结束事件</li>\n<li>取消结束事件</li>\n</ul>\n<h3 id=\"错误结束事件\"><a href=\"#错误结束事件\" class=\"headerlink\" title=\"错误结束事件\"></a>错误结束事件</h3><p>当流程执行到达<strong>错误结束事件（error end event）</strong>时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331100340069.png\"\n                      alt=\"image-20220331100340069\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;error03&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event5001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误结束事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始任务&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;subProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始子流程&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyOneJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;errorend01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">flowable:errorVariableLocalScope</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">flowable:errorVariableTransient</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;errorend01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;边界错误事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">flowable:errorVariableLocalScope</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">flowable:errorVariableTransient</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyThreeJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endc01&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event5001&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event5001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event5001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;75.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;205.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;261.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;593.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;90.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;199.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;418.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;174.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;194.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;errorend01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_errorend01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;255.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;942.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;176.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1087.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;202.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_perror01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;478.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.450017237985&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;406.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;810.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;432.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;296.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;130.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;104.9499999082861&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;493.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;366.40001519452954&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;493.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.4999999999623&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;296.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;130.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;832.9499999999987&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;217.57401315789474&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;942.499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.49292763157894&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;810.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;518.4499999999978&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.71623376623376&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.9130434782609&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.91304347826087&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1042.449999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1087.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;343.3984375&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;106.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;583.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;196.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;583.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;314.949999356254&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;418.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.8984375&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;36.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;584.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;233.54821399278214&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;584.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;269.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;269.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>定义的error</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;error01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在子流程中，当flag的数据为0的时候，就会触发错误结束事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1111&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;12222&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;xxxxx44&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag==0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在子流程上绑定了一个错误边界事件，绑定的也是error01,也就是当子流程触发错误结束事件，就会触发这个边界事件，进而完成自动任务三。</p>\n<p>流程中关联的三个自动任务都只是输出一个打印语句~</p>\n<p>然后我们需要做的操作有，部署，启动流程绑定流程变量flag的值为0，然后就可以看输出结果了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 部署</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;错误结束事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误结束事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例,设置流程变量中的flag=0触发错误结束事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event2005:1:ebec87e2-b028-11ec-b93f-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看控制台输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210538338.png\"\n                      alt=\"image-20220330210538338\"\n                ></p>\n<p>控制台输出的结果和我们预期的是一样的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210708334.png\"\n                      alt=\"image-20220330210708334\"\n                ></p>\n<p>说明错误结束事件的作用就是在执行到错误结束的节点位置会抛出对应的错误，供需要获取的事件来处理。</p>\n<h3 id=\"中断结束事件\"><a href=\"#中断结束事件\" class=\"headerlink\" title=\"中断结束事件\"></a>中断结束事件</h3><p>中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：</p>\n<h4 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h4><p>案例一我们介绍没有子流程的情况下终止的场景，具体案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331102808059.png\"\n                      alt=\"image-20220331102808059\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event5002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止结束事件01&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始事件&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务三&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;wangwu&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">terminateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">terminateEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event5002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event5002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event5002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;102.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;253.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;287.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p004&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;228.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;105.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;377.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;254.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;570.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;410.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;576.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;495.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;7.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;19.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;472.4499999999732&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.25&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.25&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;267.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.9525123715264&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;267.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;287.4441367574257&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;377.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;19.53125&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;34.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;589.5677159590043&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;449.51771595900436&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;589.8981518165715&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;495.0001397608249&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;472.44999999982196&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;7.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;22.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;477.449999999998&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.66822742474915&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;571.9322033898305&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;431.93220338983053&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;327.0247370727432&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.4166666666667&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.49999999998806&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.2181222707423&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;759.5591869398207&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.37820512820514&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0002755524882&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.08885188426405&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;132.44999949366624&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;287.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;37.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.4375&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;22.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;31.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;609.5117551813031&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.4375&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;742.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.4375&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;742.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;285.402097959858&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程定义说明：并行网关中3个人工审核任务，分别分配的用户为zhangsan lisi wangwu ，然后在wangwu审核后会进入一个排他网关，如果flag是小于等于0就会触发终止结束事件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-89945688-1D51-4391-A713-3E77ADB2FA06&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;stop001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>具体操作：部署流程–&gt;启动流程实例–&gt;wanwu 处理任务【流程实例 flag &lt;&#x3D; 0】 触发任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;终止流程1.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;终止流程1&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动流程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时可以看到三个并行的Task任务：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213147240.png\"\n                      alt=\"image-20220330213147240\"\n                ></p>\n<p>这时我们只需王五来处理即可，在上一步中我们已经对流程变量赋值了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;wangwu&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再去看Task表中已经没有另外两条记录了哦</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213516673.png\"\n                      alt=\"image-20220330213516673\"\n                ></p>\n<p>通过案例可以看到在没有子流程的情况下，终止结束事件会把整个流程都进程都结束了，而且在历史记录中也可以看到信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330215127129.png\"\n                      alt=\"image-20220330215127129\"\n                ></p>\n<h4 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h4><p>然后我们来看看在子流程中触发终止结束事件的案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330220208085.png\"\n                      alt=\"image-20220330220208085\"\n                ></p>\n<p>完整的xml内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event3002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止流程2&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;任务开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;subProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子人工任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子人工任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;user2&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">terminateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">terminateEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;taskc01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endc01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;taskc02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event3002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event3002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event3002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;75.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;200.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;187.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;531.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;330.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_cstart01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;322.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;410.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_taskc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;385.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;542.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_taskc02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;627.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;385.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;411.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;548.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;480.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_b001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;165.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_b002&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;867.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;960.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;582.0247370727355&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.41666666666663&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;627.4999999999881&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.2181222707423&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;727.4499999997752&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;352.449998261009&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;265.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;93.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;815.95&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;888.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;888.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;234.40453342953353&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562.8602941176471&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;444.5752202643172&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562.6018221538329&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;480.0003662069823&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.949999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.05974880382777&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;867.97604790418&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.4760479041916&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;489.9499999999965&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.2030487804878&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;542.9183673469388&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.4183673469388&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;906.92933478735&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;933.75&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;933.75&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;221.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;960.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;221.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;104.94999797575196&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;165.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;22.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;32.015625&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;1.1773835920177385&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;93.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;187.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;232.44861780088067&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;187.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;204.4800158394907&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.46654929577466&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.99999999998107&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.08778558875218&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;185.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;185.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;13.7109375&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.95&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;887.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;887.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程说明：人工任务一 –&gt;zhangsan  人工任务二 –&gt;lisi  子人工任务一 ： user1 子人工任务二 ： user2</p>\n<p>子任务完成任务如果flag&lt;&#x3D;0,那么子流程中断结束，子人工任务二不会触发</p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;终止流程2.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;终止流程2&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时在ACT_RU_TASK中就应该有三条对应的TASK记录了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232643286.png\"\n                      alt=\"image-20220330232643286\"\n                ></p>\n<p>然后我们执行<code>user1</code>的子任务，因为现在流程变量<code>flag=0</code>所以会触发终止结束事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232801450.png\"\n                      alt=\"image-20220330232801450\"\n                ></p>\n<p>执行任务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;user1&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后我们可以发现子人工任务一没有了，但是也没有子人工任务二，但是主流程中的两个任务都还在</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232959807.png\"\n                      alt=\"image-20220330232959807\"\n                ></p>\n<p>而且进入到历史数据中也可以看到</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330233448096.png\"\n                      alt=\"image-20220330233448096\"\n                ></p>\n<h3 id=\"取消结束事件\"><a href=\"#取消结束事件\" class=\"headerlink\" title=\"取消结束事件\"></a>取消结束事件</h3><p>取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。</p>\n<p>具体通过案例来讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110131810.png\"\n                      alt=\"image-20220401110131810\"\n                ></p>\n<p>结束取消事件我们只能在事务子流程中使用，在FlowableUI中暂时没有找到这个组件，所以在Eclipse中来绘制</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110621048.png\"\n                      alt=\"image-20220401110621048\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">transaction</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Transaction&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;事务子流程开始&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务一&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务二&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;事务子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">cancelEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cancelEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Compensate&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿自动任务&quot;</span> <span class=\"attr\">isForCompensation</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">associationDirection</span>=<span class=\"string\">&quot;None&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">transaction</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;transaction1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">cancelEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cancelEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消事件结束&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消事件结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;正常结束任务&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;248.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_transaction1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;291.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;761.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;371.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;262.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;431.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;382.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;372.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycompensation1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;581.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;412.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;661.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;380.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;746.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;373.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;896.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;383.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_cancelendevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycancel1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;871.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;542.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;980.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;640.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1130.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;650.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1291.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;391.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;401.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;466.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;616.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;661.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;701.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;746.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;851.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;896.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;681.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;420.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;681.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_association1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;442.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;283.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;371.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;886.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;572.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1032.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;640.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1085.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;667.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1130.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;667.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow10&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1132.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1291.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow11&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1396.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>流程说明：流程中定义了一个事务子流程和两个自动任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111036816.png\"\n                      alt=\"image-20220401111036816\"\n                ></p>\n<p>然后在事务子流程中定义了两个人工任务用一个排他网关连接，flag&lt;&#x3D;0 的情况下会触发 取消结束事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111201815.png\"\n                      alt=\"image-20220401111201815\"\n                ></p>\n<p>触发取消结束事件后同时会被取消边界事件捕获而走 取消事件结束的自动任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111316353.png\"\n                      alt=\"image-20220401111316353\"\n                ></p>\n<p>同时自动补偿任务也会触发，关联的自动任务也会触发</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111351513.png\"\n                      alt=\"image-20220401111351513\"\n                ></p>\n<p>注意在设置的时候需要设置补偿自动任务为可补偿的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111438577.png\"\n                      alt=\"image-20220401111438577\"\n                ></p>\n<p>补偿自动任务绑定的JavaDelegate：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常结束任务绑定的JavaDelegate:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取消事件结束绑定的JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们部署，启动，和执行流程，看输出情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;取消结束事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;取消结束事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例,设置流程变量中的flag=0触发取消结束事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111758140.png\"\n                      alt=\"image-20220401111758140\"\n                ></p>\n<p>输出结果是满足我们的期望的。</p>\n<h3 id=\"补偿事件\"><a href=\"#补偿事件\" class=\"headerlink\" title=\"补偿事件\"></a>补偿事件</h3><p>通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202116847.png\"\n                      alt=\"image-20220401202116847\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;payFail&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;payFail&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;预订机票&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;微信支付&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工出票&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Parallel Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消预订&quot;</span> <span class=\"attr\">isForCompensation</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;payFail&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intermediateThrowEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿抛出中间事件&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intermediateThrowEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">associationDirection</span>=<span class=\"string\">&quot;None&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;360.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;357.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycompensation1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;450.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundaryerror1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;490.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1140.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;830.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_compensationintermediatethrowevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;339.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;195.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;377.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;377.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;685.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;925.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;357.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;685.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;376.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;775.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1180.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;356.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;356.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_association1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;363.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;830.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;363.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程说明：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202447583.png\"\n                      alt=\"image-20220401202447583\"\n                ></p>\n<p>微信支付绑定的JavaDelegate：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;微信支付-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;余额不足....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;payFail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预订机票绑定的JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;预订机票流程执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取消订单绑定的javaDelegate:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;机票预订取消了....&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个流程执行的过程是：任务开始后会并行的执行机票预订和微信支付，然后在微信支付是抛出payFail错误，同时错误边界事件会捕获到这个错误，然后执行到 补偿抛出中间事件，之后在机票预订的 补偿边界事件 被触发，对应的补偿触发器会执行对应的代码。 然后我们部署加启动流程后观察控制台的输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;补偿事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;补偿事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:4:a45abe9f-b1b5-11ec-9daf-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyTwoDelegate----&gt;预订机票流程执行了2022-04-01T20:17:44.985</span><br><span class=\"line\">微信支付-----》MyOneDelegate2022-04-01T20:17:44.987</span><br><span class=\"line\">余额不足....</span><br><span class=\"line\">MyThreeDelegate----&gt;机票预订取消了....2022-04-01T20:17:45.028</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果和我们前面设计的是一样的，搞定~</p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"flowable高级篇\"><a href=\"#flowable高级篇\" class=\"headerlink\" title=\"flowable高级篇\"></a>flowable高级篇</h1><blockquote>\n<p>lecture：波波老师</p>\n</blockquote>\n<h1 id=\"任务分配和流程变量\"><a href=\"#任务分配和流程变量\" class=\"headerlink\" title=\"任务分配和流程变量\"></a>任务分配和流程变量</h1><h2 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h2><h3 id=\"固定分配\"><a href=\"#固定分配\" class=\"headerlink\" title=\"固定分配\"></a>固定分配</h3><p>固定分配就是我们前面介绍的，在绘制流程图或者直接在流程文件中通过Assignee来指定的方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322205919319.png\"\n                      alt=\"image-20220322205919319\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322210018615.png\"\n                      alt=\"image-20220322210018615\"\n                ></p>\n<h3 id=\"表达式分配\"><a href=\"#表达式分配\" class=\"headerlink\" title=\"表达式分配\"></a>表达式分配</h3><p>Flowable使用UEL进行表达式解析。UEL代表<em>Unified Expression Language</em>，是EE6规范的一部分.Flowable支持两种UEL表达式： UEL-value 和UEL-method</p>\n<h4 id=\"值表达式\"><a href=\"#值表达式\" class=\"headerlink\" title=\"值表达式\"></a>值表达式</h4><p><strong>值表达式 Value expression</strong>: 解析为一个值。默认情况下，所有流程变量都可以使用。（若使用Spring）所有的Spring bean也可以用在表达式里。例如</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;myVar&#125;</span><br><span class=\"line\">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure>\n\n<p>案例讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212342245.png\"\n                      alt=\"image-20220322212342245\"\n                ></p>\n<p>可以看到通过表达式处理的效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322212431304.png\"\n                      alt=\"image-20220322212431304\"\n                ></p>\n<p>先部署流程，然后在启动流程实例的时候绑定表达式对应的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRunProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 设置 assignee 的取值</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>) ;</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;MyHolidayUI:1:4&quot;</span>, variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在流程变量表中我们可以看到对应的流程变量信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213558754.png\"\n                      alt=\"image-20220322213558754\"\n                ></p>\n<p>同时在Task表中，可以看到流程当前的分配人是<code>张三</code>，说明UEL表达式被解析了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322213655020.png\"\n                      alt=\"image-20220322213655020\"\n                ></p>\n<h4 id=\"方法表达式\"><a href=\"#方法表达式\" class=\"headerlink\" title=\"方法表达式\"></a>方法表达式</h4><p><strong>方法表达式 Method expression</strong>: 调用一个方法，可以带或不带参数。<strong>当调用不带参数的方法时，要确保在方法名后添加空括号（以避免与值表达式混淆）。</strong>传递的参数可以是字面值(literal value)，也可以是表达式，它们会被自动解析。例如：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;printer.print()&#125;</span><br><span class=\"line\">$&#123;myBean.addNewOrder(&#x27;orderName&#x27;)&#125;</span><br><span class=\"line\">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>myBean是Spring容器中的个Bean对象，表示调用的是bean的addNewOrder方法</p>\n<h3 id=\"监听器分配\"><a href=\"#监听器分配\" class=\"headerlink\" title=\"监听器分配\"></a>监听器分配</h3><p>可以使用监听器来完成很多Flowable的流程业务。</p>\n<p>我们在此处使用监听器来完成负责人的指定，那么我们在流程设计的时候就不需要指定assignee</p>\n<p>创建自定义监听器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的监听器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTaskListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TaskListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(DelegateTask delegateTask)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听器触发了：&quot;</span> + delegateTask.getName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;提交请假流程&quot;</span>.equals(delegateTask.getName()) &amp;&amp;</span><br><span class=\"line\">                <span class=\"string\">&quot;create&quot;</span>.equals(delegateTask.getEventName()))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 指定任务的负责人</span></span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            delegateTask.setAssignee(<span class=\"string\">&quot;小张&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在FlowableUI中关联对应的监听器</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create:任务创建后触发</span><br><span class=\"line\">assignment:任务分配后触发</span><br><span class=\"line\">Delete:任务完成后触发</span><br><span class=\"line\">All：所有事件都触发</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322214807416.png\"\n                      alt=\"image-20220322214807416\"\n                ></p>\n<p>然后我们先部署流程，然后执行查看效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215711211.png\"\n                      alt=\"image-20220322215711211\"\n                ></p>\n<p>然后在Task表中我们可以看到对应的分配人为<code>小明</code>说明通过监听也完成了任务分配的工作了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220322215805734.png\"\n                      alt=\"image-20220322215805734\"\n                ></p>\n<h2 id=\"流程变量\"><a href=\"#流程变量\" class=\"headerlink\" title=\"流程变量\"></a>流程变量</h2><p>流程实例按步骤执行时，需要使用一些数据。在Flowable中，这些数据称作*变量(variable)*，并会存储在数据库中。变量可以用在表达式中（例如在排他网关中用于选择正确的出口路径），也可以在Java服务任务(service task)中用于调用外部服务（例如为服务调用提供输入或结果存储），等等。</p>\n<p>流程实例可以持有变量（称作<em>流程变量 process variables</em>）；用户任务以及<em>执行(executions)<em>——流程当前活动节点的指针——也可以持有变量。流程实例可以持有任意数量的变量，每个变量存储为</em>ACT_RU_VARIABLE</em>数据库表的一行。</p>\n<p>所有的<em>startProcessInstanceXXX</em>方法都有一个可选参数，用于在流程实例创建及启动时设置变量。例如，在<em>RuntimeService</em>中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessInstance <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">(String processDefinitionKey, Map&lt;String, Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在流程执行中加入变量。例如，(<em>RuntimeService</em>):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariable</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariableLocal</span><span class=\"params\">(String executionId, String variableName, Object value)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setVariablesLocal</span><span class=\"params\">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324095243595.png\"\n                      alt=\"image-20220324095243595\"\n                ></p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>流程变量的默认作用域是流程实例。当一个流程变量的作用域为流程实例时，可以称为 global 变量</p>\n<p>注意：如：    Global变量：userId（变量名）、zhangsan（变量值）</p>\n<p>global 变量中变量名不允许重复，设置相同名称的变量，后设置的值会覆盖前设置的变量值。</p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>任务和执行实例仅仅是针对一个任务和一个执行实例范围，范围没有流程实例大， 称为 local 变量。</p>\n<p>Local 变量由于在不同的任务或不同的执行实例中，作用域互不影响，变量名可以相同没有影响。Local 变量名也可以和 global 变量名相同，没有影响。 </p>\n<h3 id=\"案例讲解\"><a href=\"#案例讲解\" class=\"headerlink\" title=\"案例讲解\"></a>案例讲解</h3><p> 需求：员工创建出差申请单，由部门经理审核，部门经理申请通过后3天以下由财务直接申批，3天以上先由总经理审批，总经理审批通过后再由财务审批。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093855618.png\"\n                      alt=\"image-20220324093855618\"\n                ></p>\n<p>连接先设置条件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093806442.png\"\n                      alt=\"image-20220324093806442\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220324093700631.png\"\n                      alt=\"image-20220324093700631\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">        .addClasspathResource(<span class=\"string\">&quot;出差申请单.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">        .name(<span class=\"string\">&quot;请假流程...&quot;</span>)</span><br><span class=\"line\">        .category(<span class=\"string\">&quot;请假&quot;</span>) <span class=\"comment\">// 分类</span></span><br><span class=\"line\">        .tenantId(<span class=\"string\">&quot;dpb&quot;</span>) <span class=\"comment\">// 租户id</span></span><br><span class=\"line\">        .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getCategory() = &quot;</span> + deploy.getCategory());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动流程实例：并且指定全局流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在启动流程实例的时候设置流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例通过 RuntimeService 对象</span></span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 设置流程变量</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 设置assignee的取值</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee0&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee1&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee2&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;assignee3&quot;</span>,<span class=\"string\">&quot;赵财务&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动流程实例，第一个参数是流程定义的id</span></span><br><span class=\"line\">        <span class=\"type\">ProcessInstance</span> <span class=\"variable\">processInstance</span> <span class=\"operator\">=</span> runtimeService</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;evection:1:4&quot;</span>,variables);<span class=\"comment\">// 启动流程实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 输出相关的流程实例信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程定义的ID：&quot;</span> + processInstance.getProcessDefinitionId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;流程实例的ID：&quot;</span> + processInstance.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前活动的ID：&quot;</span> + processInstance.getActivityId());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完成Task任务，同时也可以指定流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务时指定流程变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取流程引擎对象</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;evection:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = task.getProcessVariables();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">        taskService.complete(task.getId(),map);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们也可以在处理流程之外通过Task编号来修改流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过当前任务设置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">currentTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//   当前待办任务id</span></span><br><span class=\"line\">        <span class=\"comment\">//  获取processEngine</span></span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;evection:1:4&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;王五&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"comment\">// 添加流程变量</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = task.getProcessVariables();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//  一次设置多个值 设置局部变量</span></span><br><span class=\"line\">        taskService.setVariables(task.getId(), map);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"候选人和候选人组\"><a href=\"#候选人和候选人组\" class=\"headerlink\" title=\"候选人和候选人组\"></a>候选人和候选人组</h1><p>在流程定义中在任务结点的 assignee 固定设置任务负责人，在流程定义时将参与者固定设置在.bpmn 文件中，如果临时任务负责人变更则需要修改流程定义，系统可扩展性差。针对这种情况可以给任务设置多个候选人或者候选人组，可以从候选人中选择参与者来完成任务。</p>\n<h2 id=\"候选人\"><a href=\"#候选人\" class=\"headerlink\" title=\"候选人\"></a>候选人</h2><h3 id=\"定义流程图\"><a href=\"#定义流程图\" class=\"headerlink\" title=\"定义流程图\"></a>定义流程图</h3><p>定义流程图，同时指定候选人，多个候选人会通过<code>,</code>连接</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325095959489.png\"\n                      alt=\"image-20220325095959489\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325100835461.png\"\n                      alt=\"image-20220325100835461\"\n                ></p>\n<h3 id=\"部署和启动流程实例\"><a href=\"#部署和启动流程实例\" class=\"headerlink\" title=\"部署和启动流程实例\"></a>部署和启动流程实例</h3><p>部署流程，并且在启动流程实例的时候对UEL表达式赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;请假流程-候选人.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;请求流程-候选人&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(deploy.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate2&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;candidate3&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对应的表结构中我们可以看到流程变量已经有了，但是对于的Task的Assignee还是为空。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325101054787.png\"\n                      alt=\"image-20220325101054787\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325102600573.png\"\n                      alt=\"image-20220325102600573\"\n                ></p>\n<h3 id=\"任务的查询\"><a href=\"#任务的查询\" class=\"headerlink\" title=\"任务的查询\"></a>任务的查询</h3><p>根据当前登录的用户，查询对应的候选任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskCandidateUser(<span class=\"string\">&quot;李四&quot;</span>) # 注意</span><br><span class=\"line\">             .list();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"任务的拾取\"><a href=\"#任务的拾取\" class=\"headerlink\" title=\"任务的拾取\"></a>任务的拾取</h3><p>知道了我有可拾取的任务后，拾取任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">                .taskCandidateUser(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拾取对应的任务</span></span><br><span class=\"line\">            taskService.claim(task.getId(),<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325103624344.png\"\n                      alt=\"image-20220325103624344\"\n                ></p>\n<h3 id=\"任务的归还\"><a href=\"#任务的归还\" class=\"headerlink\" title=\"任务的归还\"></a>任务的归还</h3><p>拾取任务后不想操作那么就归还任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 退还任务</span></span><br><span class=\"line\"><span class=\"comment\"> *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\"> *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unclaimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拾取对应的任务</span></span><br><span class=\"line\">        taskService.unclaim(task.getId());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归还拾取成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的交接\"><a href=\"#任务的交接\" class=\"headerlink\" title=\"任务的交接\"></a>任务的交接</h3><p>拾取任务后如果不想操作也不想归还可以直接交接给另外一个人来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 任务的交接</span></span><br><span class=\"line\"><span class=\"comment\">  *    如果我获取了任务，但是不想执行，那么我可以把这个任务交接给其他的用户</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 任务的交接</span></span><br><span class=\"line\">         taskService.setAssignee(task.getId(),<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;任务交接给了王五&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"任务的完成\"><a href=\"#任务的完成\" class=\"headerlink\" title=\"任务的完成\"></a>任务的完成</h3><p>正常的任务处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-candidate:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;王五&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"候选人组\"><a href=\"#候选人组\" class=\"headerlink\" title=\"候选人组\"></a>候选人组</h2><p>当候选人很多的情况下，我们可以分组来处理。先创建组，然后把用户分配到这个组中。</p>\n<h3 id=\"管理用户和组\"><a href=\"#管理用户和组\" class=\"headerlink\" title=\"管理用户和组\"></a>管理用户和组</h3><h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>我们需要先单独维护用户信息。后台对应的表结构是<code>ACT_ID_USER</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 维护用户</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"comment\">// 通过 IdentityService 完成相关的用户和组的管理</span></span><br><span class=\"line\">     <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">     <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> identityService.newUser(<span class=\"string\">&quot;田佳&quot;</span>);</span><br><span class=\"line\">     user.setFirstName(<span class=\"string\">&quot;田&quot;</span>);</span><br><span class=\"line\">     user.setLastName(<span class=\"string\">&quot;jia&quot;</span>);</span><br><span class=\"line\">     user.setEmail(<span class=\"string\">&quot;tianjia@qq.com&quot;</span>);</span><br><span class=\"line\">     identityService.saveUser(user);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110324815.png\"\n                      alt=\"image-20220325110324815\"\n                ></p>\n<h4 id=\"Group管理\"><a href=\"#Group管理\" class=\"headerlink\" title=\"Group管理\"></a>Group管理</h4><p>维护对应的Group信息，后台对应的表结构是<code>ACT_ID_GROUP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建用户组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对象并指定相关的信息</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.newGroup(<span class=\"string\">&quot;group2&quot;</span>);</span><br><span class=\"line\">    group.setName(<span class=\"string\">&quot;开发部&quot;</span>);</span><br><span class=\"line\">    group.setType(<span class=\"string\">&quot;type1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建Group对应的表结构数据</span></span><br><span class=\"line\">    identityService.saveGroup(group);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110408435.png\"\n                      alt=\"image-20220325110408435\"\n                ></p>\n<h4 id=\"用户分配组\"><a href=\"#用户分配组\" class=\"headerlink\" title=\"用户分配组\"></a>用户分配组</h4><p>用户和组是一个多对多的关联关联，我们需要做相关的分配，后台对应的表结构是<code>ACT_ID_MEMBERSHIP</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将用户分配给对应的Group</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">userGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">    <span class=\"comment\">// 根据组的编号找到对应的Group对象</span></span><br><span class=\"line\">    <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">    List&lt;User&gt; list = identityService.createUserQuery().list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user : list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将用户分配给对应的组</span></span><br><span class=\"line\">        identityService.createMembership(user.getId(),group.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110511848.png\"\n                      alt=\"image-20220325110511848\"\n                ></p>\n<h3 id=\"候选人组应用\"><a href=\"#候选人组应用\" class=\"headerlink\" title=\"候选人组应用\"></a>候选人组应用</h3><p>搞清楚了用户和用户组的关系后我们就可以来使用候选人组的应用了</p>\n<h4 id=\"创建流程图\"><a href=\"#创建流程图\" class=\"headerlink\" title=\"创建流程图\"></a>创建流程图</h4><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325111013641.png\"\n                      alt=\"image-20220325111013641\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325110952527.png\"\n                      alt=\"image-20220325110952527\"\n                ></p>\n<h4 id=\"流程的部署运行\"><a href=\"#流程的部署运行\" class=\"headerlink\" title=\"流程的部署运行\"></a>流程的部署运行</h4><p>然后我们把流程部署和运行，注意对UEL表达式赋值，关联上Group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;请假流程-候选人组.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;请求流程-候选人&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">        System.out.println(deploy.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupId(<span class=\"string\">&quot;group1&quot;</span>).singleResult();</span><br><span class=\"line\">        <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">        <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">        variables.put(<span class=\"string\">&quot;g1&quot;</span>,group.getId()); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">        runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>,variables);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应表结构中就有对应的体现</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220325112545719.png\"\n                      alt=\"image-20220325112545719\"\n                ></p>\n<h4 id=\"任务的拾取和完成\"><a href=\"#任务的拾取和完成\" class=\"headerlink\" title=\"任务的拾取和完成\"></a>任务的拾取和完成</h4><p>然后完成任务的查询拾取和处理操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据登录的用户查询对应的可以拾取的任务</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryTaskCandidateGroup</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 根据当前登录的用户找到对应的组</span></span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(<span class=\"string\">&quot;邓彪&quot;</span>).singleResult();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        List&lt;Task&gt; list = taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskCandidateGroup(group.getId())</span><br><span class=\"line\">                .list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Task task : list) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getId() = &quot;</span> + task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;task.getName() = &quot;</span> + task.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拾取任务</span></span><br><span class=\"line\"><span class=\"comment\">     *    一个候选人拾取了这个任务之后其他的用户就没有办法拾取这个任务了</span></span><br><span class=\"line\"><span class=\"comment\">     *    所以如果一个用户拾取了任务之后又不想处理了，那么可以退还</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">claimTaskCandidate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;田佳&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"comment\">// 根据当前登录的用户找到对应的组</span></span><br><span class=\"line\">        <span class=\"type\">IdentityService</span> <span class=\"variable\">identityService</span> <span class=\"operator\">=</span> processEngine.getIdentityService();</span><br><span class=\"line\">        <span class=\"comment\">// 当前用户所在的组</span></span><br><span class=\"line\">        <span class=\"type\">Group</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> identityService.createGroupQuery().groupMember(userId).singleResult();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskCandidateGroup(group.getId())</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务拾取</span></span><br><span class=\"line\">            taskService.claim(task.getId(),userId);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;任务拾取成功&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">        <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">                <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">                .processDefinitionId(<span class=\"string\">&quot;holiday-group:1:17504&quot;</span>)</span><br><span class=\"line\">                .taskAssignee(<span class=\"string\">&quot;邓彪&quot;</span>)</span><br><span class=\"line\">                .singleResult();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">            taskService.complete(task.getId());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h1><p>网关用来控制流程的流向</p>\n<h2 id=\"排他网关\"><a href=\"#排他网关\" class=\"headerlink\" title=\"排他网关\"></a>排他网关</h2><p>排他网关（exclusive gateway）（也叫<em>异或网关 XOR gateway</em>，或者更专业的，<em>基于数据的排他网关 exclusive data-based gateway</em>），用于对流程中的<strong>决策</strong>建模。当执行到达这个网关时，会按照所有出口顺序流定义的顺序对它们进行计算。选择第一个条件计算为true的顺序流（当没有设置条件时，认为顺序流为<em>true</em>）继续流程。</p>\n<p><strong>请注意这里出口顺序流的含义与BPMN 2.0中的一般情况不一样。一般情况下，会选择所有条件计算为true的顺序流，并行执行。而使用排他网关时，只会选择一条顺序流。当多条顺序流的条件都计算为true时，会且仅会选择在XML中最先定义的顺序流继续流程。如果没有可选的顺序流，会抛出异常。</strong></p>\n<p>图示</p>\n<p>排他网关用内部带有’X’图标的标准网关（菱形）表示，’X’图标代表<em>异或</em>的含义。请注意内部没有图标的网关默认为排他网关。BPMN 2.0规范不允许在同一个流程中混合使用有及没有X的菱形标志。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326100630908.png\"\n                      alt=\"image-20220326100630908\"\n                ></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326103951903.png\"\n                      alt=\"image-20220326103951903\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RepositoryService</span> <span class=\"variable\">repositoryService</span> <span class=\"operator\">=</span> processEngine.getRepositoryService();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;请假流程-排他网关.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;请求流程-排他网关&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(deploy.getName());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runProcess</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">     <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">     variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     runtimeService.startProcessInstanceById(<span class=\"string\">&quot;holiday-exclusive:1:4&quot;</span>,variables);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">     <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">     variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">     runtimeService.setVariables(<span class=\"string\">&quot;12503&quot;</span>,variables);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">     <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">     <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">             <span class=\"comment\">//.processInstanceId(&quot;2501&quot;)</span></span><br><span class=\"line\">             .processDefinitionId(<span class=\"string\">&quot;holiday-exclusive:1:4&quot;</span>)</span><br><span class=\"line\">             .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">             .singleResult();</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(task != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"comment\">// 完成任务</span></span><br><span class=\"line\">         taskService.complete(task.getId());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;完成Task&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>如果从网关出去的线所有条件都不满足的情况下会抛出系统异常，</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326104744181.png\"\n                      alt=\"image-20220326104744181\"\n                ></p>\n<p>但是要注意任务没有介绍，还是原来的任务，我们可以重置流程变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVariables</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ProcessEngine</span> <span class=\"variable\">processEngine</span> <span class=\"operator\">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class=\"line\">    <span class=\"type\">RuntimeService</span> <span class=\"variable\">runtimeService</span> <span class=\"operator\">=</span> processEngine.getRuntimeService();</span><br><span class=\"line\">    <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// variables.put(&quot;g1&quot;,&quot;group1&quot;);</span></span><br><span class=\"line\">    variables.put(<span class=\"string\">&quot;num&quot;</span>,<span class=\"number\">4</span>); <span class=\"comment\">// 给流程定义中的UEL表达式赋值</span></span><br><span class=\"line\">    runtimeService.setVariables(<span class=\"string\">&quot;12503&quot;</span>,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>前面我们可以直接在连接线上定义条件，那为什么还要有排他网关呢？直接在线上的情况，如果条件都不满足，流程就结束了，是异常结束!!</p>\n<h2 id=\"并行网关\"><a href=\"#并行网关\" class=\"headerlink\" title=\"并行网关\"></a>并行网关</h2><p>并行网关允许将流程分成多条分支，也可以把多条分支汇聚到一起，并行网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>fork分支：并行后的所有外出顺序流，为每个顺序流都创建一个并发分支。</p>\n</li>\n<li><p>join汇聚： 所有到达并行网关，在此等待的进入分支， 直到所有进入顺序流的分支都到达以后， 流程就会通过汇聚网关。</p>\n</li>\n</ul>\n<p>注意，如果同一个并行网关有多个进入和多个外出顺序流， 它就同时具有分支和汇聚功能。 这时，网关会先汇聚所有进入的顺序流，然后再切分成多个并行分支。</p>\n<p><strong>与其他网关的主要区别是，并行网关不会解析条件。</strong> <strong>即使顺序流中定义了条件，也会被忽略。</strong></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326110341232.png\"\n                      alt=\"image-20220326110341232\"\n                ></p>\n<p>当我们执行了创建请假单后，到并行网关的位置的时候，在ACT_RU_TASK表中就有两条记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111359504.png\"\n                      alt=\"image-20220326111359504\"\n                ></p>\n<p>然后同时在ACT_RU_EXECUTION中有三条记录，一个任务对应的有两个执行实例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326111453630.png\"\n                      alt=\"image-20220326111453630\"\n                ></p>\n<h2 id=\"包含网关\"><a href=\"#包含网关\" class=\"headerlink\" title=\"包含网关\"></a>包含网关</h2><p>包含网关可以看做是排他网关和并行网关的结合体。 和排他网关一样，你可以在外出顺序流上定义条件，包含网关会解析它们。 但是主要的区别是包含网关可以选择多于一条顺序流，这和并行网关一样。</p>\n<p>包含网关的功能是基于进入和外出顺序流的：</p>\n<ul>\n<li><p>分支： 所有外出顺序流的条件都会被解析，结果为true的顺序流会以并行方式继续执行， 会为每个顺序流创建一个分支。</p>\n</li>\n<li><p>汇聚：所有并行分支到达包含网关，会进入等待状态， 直到每个包含流程token的进入顺序流的分支都到达。 这是与并行网关的最大不同。换句话说，包含网关只会等待被选中执行了的进入顺序流。 在汇聚之后，流程会穿过包含网关继续执行。</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220326112720089.png\"\n                      alt=\"image-20220326112720089\"\n                ></p>\n<h2 id=\"事件网关\"><a href=\"#事件网关\" class=\"headerlink\" title=\"事件网关\"></a>事件网关</h2><p>事件网关允许根据事件判断流向。网关的每个外出顺序流都要连接到一个中间捕获事件。 当流程到达一个基于事件网关，网关会进入等待状态：会暂停执行。与此同时，会为每个外出顺序流创建相对的事件订阅。</p>\n<p>事件网关的外出顺序流和普通顺序流不同，这些顺序流不会真的”执行”， 相反它们让流程引擎去决定执行到事件网关的流程需要订阅哪些事件。 要考虑以下条件：</p>\n<ol>\n<li>事件网关必须有两条或以上外出顺序流；</li>\n<li>事件网关后，只能使用intermediateCatchEvent类型（activiti不支持基于事件网关后连接ReceiveTask）</li>\n<li>连接到事件网关的中间捕获事件必须只有一个入口顺序流。</li>\n</ol>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>事件（event）通常用于为流程生命周期中发生的事情建模。事件总是图形化为圆圈。在BPMN 2.0中，有两种主要的事件分类：<em>捕获（catching）</em>与<em>抛出（throwing）</em>事件。</p>\n<ul>\n<li><strong>捕获:</strong> 当流程执行到达这个事件时，会等待直到触发器动作。触发器的类型由其中的图标，或者说XML中的类型声明而定义。捕获事件与抛出事件显示上的区别，是其内部的图标没有填充（即是白色的）。</li>\n<li><strong>抛出:</strong> 当流程执行到达这个事件时，会触发一个触发器。触发器的类型，由其中的图标，或者说XML中的类型声明而定义。抛出事件与捕获事件显示上的区别，是其内部的图标填充为黑色。</li>\n</ul>\n<h2 id=\"定时事件\"><a href=\"#定时事件\" class=\"headerlink\" title=\"定时事件\"></a>定时事件</h2><p>定时触发的相关事件，包括定时器启动事件，定时器捕获中间件事件，定时器边界事件</p>\n<h3 id=\"定时器启动事件\"><a href=\"#定时器启动事件\" class=\"headerlink\" title=\"定时器启动事件\"></a>定时器启动事件</h3><p>定时器启动事件（timer start event）在指定时间创建流程实例。在流程只需要启动一次，或者流程需要在特定的时间间隔重复启动时，都可以使用。</p>\n<p><em><strong>请注意</strong>：</em>子流程不能有定时器启动事件。</p>\n<p><em><strong>请注意</strong>：</em>定时器启动事件，在流程部署的同时就开始计时。不需要调用startProcessInstanceByXXX就会在时间启动。调用startProcessInstanceByXXX时会在定时启动之外额外启动一个流程。</p>\n<p><em><strong>请注意</strong>：</em>当部署带有定时器启动事件的流程的更新版本时，上一版本的定时器作业会被移除。这是因为通常并不希望旧版本的流程仍然自动启动新的流程实例。</p>\n<p>定时器启动事件，用其中有一个钟表图标的圆圈来表示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327223547656.png\"\n                      alt=\"image-20220327223547656\"\n                ></p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231015715.png\"\n                      alt=\"image-20220327231015715\"\n                ></p>\n<p>在定时启动的节点设置时间：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231055237.png\"\n                      alt=\"image-20220327231055237\"\n                ></p>\n<p>可以通过FlowableUI中的部署来演示，通过FlowableUI我们可以看到，没有启动流程实例的情况下，到里23:14:14秒的时候自动帮助我们创建了一个流程实例。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327231551538.png\"\n                      alt=\"image-20220327231551538\"\n                ></p>\n<h3 id=\"定时器捕获中间事件\"><a href=\"#定时器捕获中间事件\" class=\"headerlink\" title=\"定时器捕获中间事件\"></a>定时器捕获中间事件</h3><p>当第一个人工处理完成后，第二个人工处理的任务需要在2022-03-27T23:25:14之后执行</p>\n<p>案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232259428.png\"\n                      alt=\"image-20220327232259428\"\n                ></p>\n<p>通过FlowableUI的案例演示我们可以看到后一个任务是在定时时间之后执行的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327232624091.png\"\n                      alt=\"image-20220327232624091\"\n                ></p>\n<h3 id=\"定时器边界事件\"><a href=\"#定时器边界事件\" class=\"headerlink\" title=\"定时器边界事件\"></a>定时器边界事件</h3><p>人工任务1如果在定义的<code>2022-03-27T23:36:14</code>这个时间之前还没有处理，那么就会触发定时边界事件，从而从人工任务3.</p>\n<p>案例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233132259.png\"\n                      alt=\"image-20220327233132259\"\n                ></p>\n<p>发布启动流程</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220327233410596.png\"\n                      alt=\"image-20220327233410596\"\n                ></p>\n<p>然后在张三这个位置我们不完成，等到定时到来，达到定时的时间，任务进入到了人工审批三</p>\n<h3 id=\"timeDuration\"><a href=\"#timeDuration\" class=\"headerlink\" title=\"timeDuration\"></a>timeDuration</h3><p>​       在定时事件中我们一定要放开如下的配置：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329082431920.png\"\n                      alt=\"image-20220329082431920\"\n                ></p>\n<p>指定计时器在启动前应等待多长的时间，首先一定时器启动事件为例：</p>\n<h4 id=\"开始事件\"><a href=\"#开始事件\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h4><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328200755160.png\"\n                      alt=\"image-20220328200755160\"\n                ></p>\n<p>可以通过FlowableUI的应用来验证</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202242555.png\"\n                      alt=\"image-20220328202242555\"\n                ></p>\n<p>发布任务后然后我们等待两分钟就可以看到任务到了<code>zhangsan</code>的位置。或者我们也可以在SpringBoot整合Flowable的项目中添加对应的Controller来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/deploy&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">deploy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;test003.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;部署任务成功....&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提交请求完成部署操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328202918399.png\"\n                      alt=\"image-20220328202918399\"\n                ></p>\n<p>生成了对应的Task记录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203621023.png\"\n                      alt=\"image-20220328203621023\"\n                ></p>\n<p><strong>注意</strong>：在事件中一定要开启异步任务，不然相关的事件是不会触发的！</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328203656000.png\"\n                      alt=\"image-20220328203656000\"\n                ></p>\n<h4 id=\"中间事件\"><a href=\"#中间事件\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h4><p>然后来看看中间事件的等待定时器事件案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204205453.png\"\n                      alt=\"image-20220328204205453\"\n                ></p>\n<p>案例由两个自动任务和一个定时器中间事件组成，在定时任务中绑定了两个JavaDelegate的Java类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后流程图中的关联为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328204349358.png\"\n                      alt=\"image-20220328204349358\"\n                ></p>\n<p>另一个类似，然后定时器中间事件的等待时间设置是2分钟。我们部署后通过Java代码来演示看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;等待定时器中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时中间事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要启动流程实例，之后等待两分钟看效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;Test04:1:325edb10-ae95-11ec-a77f-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328205718521.png\"\n                      alt=\"image-20220328205718521\"\n                ></p>\n<h4 id=\"边界事件\"><a href=\"#边界事件\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h4><p>最后我们来看看边界事件中的等待定时器的处理，案例为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210150212.png\"\n                      alt=\"image-20220328210150212\"\n                ></p>\n<p>该案例由一个人工审核+两个自动任务+定时器边界事件组成，自动任务一绑定的JavaDelegate是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动任务二绑定的JavaDelegate是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定时器边界事件设置的是30S，也就是如果人工审核在30S还没处理就会触发边界事件：通过代码来演示，部署流程后需要启动流程，然后等待30S看控制台输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;等待定时器边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器边界事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;test05:1:c46f83bf-ae97-11ec-b055-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等待控制台输出：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328210905204.png\"\n                      alt=\"image-20220328210905204\"\n                ></p>\n<p>小结：timeDuration在三种定时器的事件中</p>\n<ul>\n<li>定时器启动事件：等待指定时间后启动流程实例</li>\n<li>定时器中间事件：AB任务中间有个定时器中间事件，A任务处理后需要等待对应的时间才能流转到B处</li>\n<li>定时器边界事件：任务A绑定了定时器边界事件后，如果在等待时间以内A没有处理任务，那么就会触发对应的边界事件</li>\n</ul>\n<h3 id=\"timeCycle\"><a href=\"#timeCycle\" class=\"headerlink\" title=\"timeCycle\"></a>timeCycle</h3><p>指定重复周期，可用于周期性启动流程，或者为超期用户任务多次发送提醒,这个元素可以使用两种格式</p>\n<ul>\n<li>第一种是按照<a class=\"link\"   href=\"http://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\" >ISO 8601<i class=\"fas fa-external-link-alt\"></i></a>标准定义的循环时间周期。例如（三次重复间隔，每次间隔为10小时）：R3&#x2F;PT10H</li>\n<li>也可以使用<em>timeCycle</em>的可选属性<em>endDate</em>，或者像这样直接写在时间表达式的结尾：<code>R3/PT10H/$&#123;EndDate&#125;</code>。 当到达endDate时，应用会停止，并为该任务创建其他作业</li>\n<li>也可以通过cron表达式来处理</li>\n</ul>\n<h4 id=\"开始事件-1\"><a href=\"#开始事件-1\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h4><p>编写案例来演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213218525.png\"\n                      alt=\"image-20220328213218525\"\n                ></p>\n<p>重复时间设置为 R3PT30S 重复3次，间隔30描述，自动任务绑定的是JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213330813.png\"\n                      alt=\"image-20220328213330813\"\n                ></p>\n<p>然后我们部署看效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;重复启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;等待定时器边界事件...&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328213955271.png\"\n                      alt=\"image-20220328213955271\"\n                ></p>\n<p>然后我们再指定下endDate来看看案例，直接可以在xml中来处理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">timeCycle</span>&gt;</span>R3/PT30S/2022-03-28T21:46:11+00:00<span class=\"tag\">&lt;/<span class=\"name\">timeCycle</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">timerEventDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328214459137.png\"\n                      alt=\"image-20220328214459137\"\n                ></p>\n<p>此外还可以通过cron表达式来处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0/5 * * * ?</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215255141.png\"\n                      alt=\"image-20220328215255141\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328215340678.png\"\n                      alt=\"image-20220328215340678\"\n                ></p>\n<h4 id=\"中间事件-1\"><a href=\"#中间事件-1\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h4><p>&amp;emsp;timeCycle作为中间事件的话，只会执行一次，案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225250878.png\"\n                      alt=\"image-20220328225250878\"\n                ></p>\n<p>案例中的自动任务一二对应绑定如下的JavaDelegate.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartOnedelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了-111--------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SignalStartTwodelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------触发了222---------&gt;&quot;</span>+ LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中间事件的设置为<code>R3/PT30S</code> 循环3次，间隔30秒执行，但是这是中间事件，其实只会执行一次，我来看效果</p>\n<p>部署后启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProcessEngine processEngine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">                .addClasspathResource(<span class=\"string\">&quot;循环中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">                .name(<span class=\"string\">&quot;循环中间事件...&quot;</span>)</span><br><span class=\"line\">                .deploy();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        processEngine.getRuntimeService()</span><br><span class=\"line\">                .startProcessInstanceById(<span class=\"string\">&quot;cycle-middle-event:1:3456ade8-aea7-11ec-9064-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">        TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328225931465.png\"\n                      alt=\"image-20220328225931465\"\n                ></p>\n<h4 id=\"边界事件-1\"><a href=\"#边界事件-1\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h4><p>在边界事件中，定义了循环条件<code>R3/PT30S</code>理论上要循环3次，间隔30S，单其实也只会执行一次，来看案例</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231838967.png\"\n                      alt=\"image-20220328231838967\"\n                ></p>\n<p>案例上面的等待时间的是一样的，只是边界事件是30S</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220328231955441.png\"\n                      alt=\"image-20220328231955441\"\n                ></p>\n<p>然后我们部署启动流程看效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329094741327.png\"\n                      alt=\"image-20220329094741327\"\n                ></p>\n<p>总结：循环设定</p>\n<ul>\n<li>启动事件：根据设置循环启动流程实例</li>\n<li>中间事件：即使设置了循环时间也只会触发异常</li>\n<li>边界事件：即使设置了循环时间也只会触发异常</li>\n</ul>\n<h2 id=\"消息事件\"><a href=\"#消息事件\" class=\"headerlink\" title=\"消息事件\"></a>消息事件</h2><p>消息事件（message event），是指引用具名消息的事件。消息具有名字与载荷。与信号不同，消息事件只有一个接收者</p>\n<h3 id=\"启动事件\"><a href=\"#启动事件\" class=\"headerlink\" title=\"启动事件\"></a>启动事件</h3><p>消息启动事件，也就是我们通过接收到某些消息后来启动流程实例，比如接收到了一封邮件，一条短信等，具体通过案例来讲解</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329103837021.png\"\n                      alt=\"image-20220329103837021\"\n                ></p>\n<p>我们需要先定义一个消息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105849732.png\"\n                      alt=\"image-20220329105849732\"\n                ></p>\n<p>然后在消息开始节点出引用</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329105922977.png\"\n                      alt=\"image-20220329105922977\"\n                ></p>\n<p>然后通过代码来处理，部署和启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;消息启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;消息启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署后不会自动启动，我们需要接收相关的信息后来触发。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// runtimeService.startProcessInstanceById(&quot;event006:1:0532e730-af02-11ec-8cf3-c03c59ad2248&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">     runtimeService.startProcessInstanceByMessage(<span class=\"string\">&quot;第一个消息&quot;</span>);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">     TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>注意</strong>：发送消息发送的应该是消息的名称而不是消息的ID，报错如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329104823537.png\"\n                      alt=\"image-20220329104823537\"\n                ></p>\n<h3 id=\"中间事件-2\"><a href=\"#中间事件-2\" class=\"headerlink\" title=\"中间事件\"></a>中间事件</h3><p>消息中间事件就是在流程运作中需要消息来触发的场景，案例演示，<code>自动流程1</code>处理完成后，需要接收特定的消息之后才能进入到<code>自动流程2</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111412619.png\"\n                      alt=\"image-20220329111412619\"\n                ></p>\n<p>消息中间事件绑定的消息为</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329111446959.png\"\n                      alt=\"image-20220329111446959\"\n                ></p>\n<p>然后通过代码来演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;消息中间事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;消息中间事件&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">     <span class=\"comment\">//runtimeService.startProcessInstanceByMessage(&quot;第一个消息&quot;);</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(1);</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 中间事件-发布消息</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">recevedMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 需要查询到executionId</span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">processExecutionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;b5349e22-af0e-11ec-93e6-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 我们需要根据流程实例编号找到对应的执行编号</span></span><br><span class=\"line\">    <span class=\"comment\">/* Execution execution = runtimeService.createExecutionQuery()</span></span><br><span class=\"line\"><span class=\"comment\">             .processInstanceId(&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">             .singleResult();</span></span><br><span class=\"line\"><span class=\"comment\">     System.out.println(&quot;-----------&gt;&quot;+execution.getId());*/</span></span><br><span class=\"line\">     runtimeService.messageEventReceived(<span class=\"string\">&quot;第二个消息&quot;</span>,processExecutionId);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到的输出效果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329112435376.png\"\n                      alt=\"image-20220329112435376\"\n                ></p>\n<h3 id=\"边界事件-2\"><a href=\"#边界事件-2\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>消息边界事件，如果在消息触发前还没有，案例演示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329113848978.png\"\n                      alt=\"image-20220329113848978\"\n                ></p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;消息边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;消息边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过消息来启动一个流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event009:1:f2096787-af11-11ec-b290-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 注意：发送消息发送的应该是消息的名称而不是消息的ID</span></span><br><span class=\"line\">    <span class=\"comment\">//runtimeService.startProcessInstanceByMessage(&quot;第一个消息&quot;);</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(1);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署流程后启动流程实例会运转到</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114038773.png\"\n                      alt=\"image-20220329114038773\"\n                ></p>\n<p>如果人工处理在消息订阅前没有处理就会触发边界事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界事件-发布消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">recevedMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要查询到executionId</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">processExecutionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1d503361-af12-11ec-89a4-c03c59ad2248&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 我们需要根据流程实例编号找到对应的执行编号</span></span><br><span class=\"line\">   <span class=\"comment\">/* Execution execution = runtimeService.createExecutionQuery()</span></span><br><span class=\"line\"><span class=\"comment\">            .processInstanceId(&quot;event008:1:9217aa5e-af0e-11ec-b11f-c03c59ad2248&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">            .singleResult();</span></span><br><span class=\"line\"><span class=\"comment\">    System.out.println(&quot;-----------&gt;&quot;+execution.getId());*/</span></span><br><span class=\"line\">    runtimeService.messageEventReceived(<span class=\"string\">&quot;第三个消息&quot;</span>,processExecutionId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329114505074.png\"\n                      alt=\"image-20220329114505074\"\n                ></p>\n<h2 id=\"错误事件\"><a href=\"#错误事件\" class=\"headerlink\" title=\"错误事件\"></a>错误事件</h2><p>错误事件可以用做一个流程的开始事件或者作为一个任务或者子流程的边界事件，错误事件没有提供作用中间事件的功能，这一点和前面介绍的定时器事件和消息事件还有区别的。</p>\n<h3 id=\"开始事件-2\"><a href=\"#开始事件-2\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p>错误启动事件（error start event），可用于触发事件子流程（Event Sub-Process）。<strong>错误启动事件不能用于启动流程实例</strong>。</p>\n<p>错误启动事件总是中断。我们通过案例来介绍。此处我们用Eclipse来绘制流程图，熟悉下Eclipse工具</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235608917.png\"\n                      alt=\"image-20220329235608917\"\n                ></p>\n<p>注意：绘制的是子流程事件：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004724798.png\"\n                      alt=\"image-20220330004724798\"\n                ></p>\n<p>然后我们再定义一个错误，内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;abcd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在FlowableUI中没找到错误定义的选项，我们就在流程文件中自己添加即可。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329235702382.png\"\n                      alt=\"image-20220329235702382\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220329214507352.png\"\n                      alt=\"image-20220329214507352\"\n                ></p>\n<p>完整的流程文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;abcd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;eventsubprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Event sub Process&quot;</span> <span class=\"attr\">triggeredByEvent</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Error start&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;480.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;710.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;250.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;eventsubprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_eventsubprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;211.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;401.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;530.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;420.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;errorstartevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_errorstartevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;600.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;510.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;515.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;710.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;815.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;930.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;277.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;635.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;700.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;537.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在主流程中的<code>自动任务一</code>中我们抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在<code>自定义任务二</code>中简单定义一个输出即可。然后我们部署任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(SpringBootFlowableApplicationTests.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;错误启动事件.bar&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addZipInputStream(in)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误启动事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后我们再启动流程实例，那么自动任务一就会抛出异常，然后对应的子流程就会开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:1:c0462994-af79-11ec-8cae-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果获取到了我们期望的结果</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000557061.png\"\n                      alt=\"image-20220330000557061\"\n                ></p>\n<p>通过输出结果也可以看到执行的自动任务一后，抛出错误事件<code>abcd</code>,子流程触发并执行了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330000741836.png\"\n                      alt=\"image-20220330000741836\"\n                ></p>\n<h3 id=\"边界事件-3\"><a href=\"#边界事件-3\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>定义如下的流程图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004335187.png\"\n                      alt=\"image-20220330004335187\"\n                ></p>\n<p>注意绘制的时候</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330004644673.png\"\n                      alt=\"image-20220330004644673\"\n                ></p>\n<p>xml文件内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error02&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;a123&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Sub Process&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Service Task&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Error&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow12&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;402.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;388.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;368.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1099.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1440.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;378.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;600.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;subprocess1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_subprocess1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;271.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;451.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;381.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1030.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;391.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundaryerror1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;950.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1440.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1204.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1320.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow10&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;955.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1030.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow11&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;755.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;850.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;408.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;437.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;660.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1111.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;395.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow12&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow12&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;965.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;550.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;964.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1099.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;617.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对应的三个自定义任务绑定的JavaDelegate为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        <span class=\"comment\">// 业务执行发现有问题 此处的errorCode需要和定义的error标签中的errorCode保持一致</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;a123&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们部署文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">ZipInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ZipInputStream</span>(SpringBootFlowableApplicationTests.class</span><br><span class=\"line\">            .getClassLoader()</span><br><span class=\"line\">            .getResourceAsStream(<span class=\"string\">&quot;错误边界事件.bar&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addZipInputStream(in)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部署成功后我们再启动一个流程实例，进入到自定义任务一处会抛出异常，触发边界异常处理</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330003624235.png\"\n                      alt=\"image-20220330003624235\"\n                ></p>\n<p>输出的结果和我们预期的是一样的</p>\n<h2 id=\"信号事件\"><a href=\"#信号事件\" class=\"headerlink\" title=\"信号事件\"></a>信号事件</h2><h3 id=\"开始事件-3\"><a href=\"#开始事件-3\" class=\"headerlink\" title=\"开始事件\"></a>开始事件</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095103789.png\"\n                      alt=\"image-20220330095103789\"\n                ></p>\n<p>然后设置相关的属性，并定义一个信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095157518.png\"\n                      alt=\"image-20220330095157518\"\n                ></p>\n<p>然后在我们声明的信号开始引用我们上面创建的信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330095725130.png\"\n                      alt=\"image-20220330095725130\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;firstSignal&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号启动事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号开始&quot;</span> <span class=\"attr\">isInterrupting</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2001&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;172.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;147.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;612.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;173.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C8AD1AEE-5FCB-4419-8596-74532DD71ABC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;314.94999961358405&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.4999999999399&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0FF05CCE-85CB-416C-8D36-A935AF9586C2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;567.449999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;612.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;187.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>部署流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Deploy</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">     <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">     <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">             .addClasspathResource(<span class=\"string\">&quot;信号启动事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">             .name(<span class=\"string\">&quot;信号启动事件&quot;</span>)</span><br><span class=\"line\">             .deploy();</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">     <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>流程是一个信息启动事件，所以我们需要释放对应的信号来触发流程的启动</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号发送来触发信号启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 全局的信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">signalReceived</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;firstSignal&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过输出语句可以看到自定义任务触发了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330100203036.png\"\n                      alt=\"image-20220330100203036\"\n                ></p>\n<p>我们可以把信息的作用域由原来的golbal全局的调整为processInstance，测试后发现还是执行了，说明在启动事件信息的作用域其实是不起作用的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;signal id=<span class=\"string\">&quot;signal01&quot;</span> name=<span class=\"string\">&quot;firstSignal&quot;</span> flowable:scope=<span class=\"string\">&quot;processInstance&quot;</span>&gt;&lt;/signal&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"中间捕获事件\"><a href=\"#中间捕获事件\" class=\"headerlink\" title=\"中间捕获事件\"></a>中间捕获事件</h3><p>案例如下：当我们启动事件后，会阻塞在这个消息获取中间事件处，等待相关信号后才会继续流转。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330101820083.png\"\n                      alt=\"image-20220330101820083\"\n                ></p>\n<p>对应的信号绑定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;singnal02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;secondSingal&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号中间捕获事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateCatchEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号捕获中间事件&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;singnal02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateCatchEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束任务&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;120.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_signal01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;318.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;495.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;122.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;151.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-BF5FB671-5895-4FAC-8F92-E4BC4DEE821A&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;348.44853390329115&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.78775666509335&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;495.49999999999903&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;162.7068396226415&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-4F4853C5-0FE6-48AB-BD80-A37CF807D90D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;595.4499999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;162.94542586750788&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0016973189436&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.73506227304313&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-FBD95BC3-BA38-4863-95E6-E7D484FE80CB&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;149.94999953609073&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;165.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;318.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;165.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>先部署：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Deploy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//RepositoryService repositoryService = processEngine.getRepositoryService();</span></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deploy</span> <span class=\"operator\">=</span> repositoryService.createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号中间捕获事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号中间捕获事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getId() = &quot;</span> + deploy.getId());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;deploy.getName() = &quot;</span> + deploy.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;部署开始的时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    <span class=\"comment\">//TimeUnit.MINUTES.sleep(3);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们需要启动流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">startFlow</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    runtimeService.startProcessInstanceById(<span class=\"string\">&quot;event2002:1:adc5b8f8-afcf-11ec-959a-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;启动时间：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送信号信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过信号发送来触发信号启动事件的执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 全局的信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">signalGolbal</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    runtimeService.signalEventReceived(<span class=\"string\">&quot;secondSingal&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 我们得保证容器的运行，所以需要阻塞</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后被我们的信号捕获中间事件捕获</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102256367.png\"\n                      alt=\"image-20220330102256367\"\n                ></p>\n<p>信号作用域为processInstance的情况</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102524238.png\"\n                      alt=\"image-20220330102524238\"\n                ></p>\n<p>首先针对processInstance的信号，我们发送global信号是不会被捕获的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330102808127.png\"\n                      alt=\"image-20220330102808127\"\n                ></p>\n<p>然后processInstance的信息我们需要在流程实例内部抛出信号</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330112205035.png\"\n                      alt=\"image-20220330112205035\"\n                ></p>\n<h3 id=\"中间抛出事件\"><a href=\"#中间抛出事件\" class=\"headerlink\" title=\"中间抛出事件\"></a>中间抛出事件</h3><p>信号中间抛出事件也就是在流程执行中的某个节点抛出了对应的信号，然后对应的信号中间捕获事件就会触发，我们通过具体的案例来演示如：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330235847392.png\"\n                      alt=\"image-20220330235847392\"\n                ></p>\n<p>定义信息信息：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330193530718.png\"\n                      alt=\"image-20220330193530718\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331000011215.png\"\n                      alt=\"image-20220331000011215\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal01&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号中间抛出事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateThrowEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateThrowEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intermediateCatchEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intermediateCatchEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task03&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;pid02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2003&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2003&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startId01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startId01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;163.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;pid01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_pid01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;270.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;158.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;71.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;780.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;71.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task03&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task03&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;795.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;255.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-262D1C04-299C-4DE6-BAD9-B8AA0FC4EBAB&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;633.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;96.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-51D70059-8D15-4BF7-9151-48CCD99544F1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;465.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;278.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;pid02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_pid02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;994.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;158.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1079.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-4A038E06-A731-4A5F-A929-840FB8A92AA5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.45&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;633.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-02646A89-FCEC-4E7F-95B8-61F2065DE8D4&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1034.0591869398208&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.3782051282051&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1079.5002755524838&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.08885188426407&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-857F5F7F-7EA9-4986-9270-FFBF13E0B8CD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;894.9499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;260.4867256637168&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1002.6675392670157&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;186.14712041884815&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-1C87EF67-D60F-47A3-A5B4-06FBC6F2390D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;663.4499994451444&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;779.9999999999972&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;111.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0ABE23AE-344C-49D8-B574-010DECD093BE&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;494.9497692355611&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;293.0819166248564&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;794.9999999999911&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;294.7260273972602&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-584ADF4E-9140-4E5A-A396-1257E1436704&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;879.9499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;129.1390243902439&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;999.8065381558029&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;172.67196819085487&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-2325ED54-C769-4161-A00F-001F006B72B5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;304.9870182555781&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;173.0233265720081&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.49999999999994&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;129.8358938547486&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-DAC2B128-B6A7-48A2-8010-8AC6A806C04D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;302.31181354817494&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;185.6374177631579&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;467.15151373509184&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;285.24160328636844&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-296CDB16-A9D3-4255-9E44-D7C6F5DA5058&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;129.94999940317362&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;270.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>三个自定义任务绑定了三个javaDelegate分别给出打印语句来记录</p>\n<p>然后部署任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号中间抛出事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号中间抛出事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在启动任务即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       processEngine.getRuntimeService()</span><br><span class=\"line\">               .startProcessInstanceById(<span class=\"string\">&quot;event2003:1:665b1533-b020-11ec-877d-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">       <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">       TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>看控制台的输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200124232.png\"\n                      alt=\"image-20220330200124232\"\n                ></p>\n<p>效果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330200235193.png\"\n                      alt=\"image-20220330200235193\"\n                ></p>\n<h3 id=\"边界事件-4\"><a href=\"#边界事件-4\" class=\"headerlink\" title=\"边界事件\"></a>边界事件</h3><p>最后来看看信号边界事件，案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330202443905.png\"\n                      alt=\"image-20220330202443905\"\n                ></p>\n<p>完整的xml定义为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event2004&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;信号边界事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">signalEventDefinition</span> <span class=\"attr\">signalRef</span>=<span class=\"string\">&quot;signal2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signalEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event2004&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event2004&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event2004&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startEvent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;163.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-F11058BE-828A-45FF-A830-8BF099D71FBD&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;255.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;138.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-FAB46591-3247-4776-B3B5-79826133F5AF&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;135.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-7CD0FBBA-4FE6-4646-B0D6-1D8A4D8D5515&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;315.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-55682CDC-FEBD-44A1-B38C-A3F816AC91F4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;161.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-11CA784C-69DE-45B2-AE58-78E64CF2EE8E&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;341.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-8E473D8E-70D6-4AB3-B1D9-D3E7EFCDB39D&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.4527694396093&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;203.7233532460343&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C3770DF2-1747-45A7-85B5-2838AB7ECF9C&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;336.557461183174&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;225.9233207922021&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.4999999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;327.5301011331414&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-74B48035-4CED-4963-AA87-55D1FB95EEA8&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;354.95000000000005&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;177.43714821763604&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;521.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.56228893058162&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D2EE279A-24A2-4B6C-8021-ADC0A1A645EC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;129.94999949366624&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;254.99999999993574&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;178.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A2E3E7C7-9AD0-46B8-8105-272496599E0D&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;621.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;355.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;355.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-AC84425B-8D8C-4A0F-BDCC-BC1DCF909752&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;621.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;690.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>定义的信号为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">signal</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;signal2&quot;</span> <span class=\"attr\">flowable:scope</span>=<span class=\"string\">&quot;global&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">signal</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自动任务的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署项目然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;信号边界事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;信号边界事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event2004:1:e8b5c39f-b024-11ec-bdac-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203056055.png\"\n                      alt=\"image-20220330203056055\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">signalGlobal</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">signal</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;signal2&quot;</span>;</span><br><span class=\"line\">    Map&lt;String, Object&gt; variables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">    processEngine.getRuntimeService().signalEventReceived(signal,variables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330203233862.png\"\n                      alt=\"image-20220330203233862\"\n                ></p>\n<p>通过输出看到了我们期望的结果了，这样就给大家介绍完了信号相关的各种事件了</p>\n<h2 id=\"结束事件\"><a href=\"#结束事件\" class=\"headerlink\" title=\"结束事件\"></a>结束事件</h2><p>结束事件顾名思义就是流程结束的事件，除了前面遇到的空结束事件外，结束事件还包括如下几种：</p>\n<ul>\n<li>错误结束事件</li>\n<li>中断结束事件</li>\n<li>取消结束事件</li>\n</ul>\n<h3 id=\"错误结束事件\"><a href=\"#错误结束事件\" class=\"headerlink\" title=\"错误结束事件\"></a>错误结束事件</h3><p>当流程执行到达<strong>错误结束事件（error end event）</strong>时，结束执行的当前分支，并抛出错误。这个错误可以由匹配的错误边界中间事件捕获。如果找不到匹配的错误边界事件，将会抛出异常。通过具体案例来详细讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331100340069.png\"\n                      alt=\"image-20220331100340069\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;error03&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event5001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误结束事件&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始任务&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;subProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始子流程&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务一&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyOneJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;errorend01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">flowable:errorVariableLocalScope</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">flowable:errorVariableTransient</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;errorend01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务二&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyTwoJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end02&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;边界错误事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;error03&quot;</span> <span class=\"attr\">flowable:errorVariableLocalScope</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">flowable:errorVariableTransient</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;自动任务三&quot;</span> <span class=\"attr\">flowable:class</span>=<span class=\"string\">&quot;com.bobo.flow.delegate.MyThreeJavaDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;主流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endc01&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event5001&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event5001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event5001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;75.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;205.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-794CA748-4381-417F-8350-360E89907E84&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-794CA748-4381-417F-8350-360E89907E84&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;261.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;593.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;90.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;199.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;418.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;174.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;194.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;150.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;errorend01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_errorend01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;255.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;942.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;176.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1087.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;202.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;perror01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_perror01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;478.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.450017237985&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;406.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;810.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;432.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-934F4EDF-16A9-4D4E-8D7A-4F8E1EEB0F9E&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;296.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;130.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;104.9499999082861&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;240.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-9562301E-B400-4D1F-89B8-23E69ADEAE68&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;493.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;366.40001519452954&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;493.02252392098524&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.4999999999623&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E8166885-00F6-49A1-BE26-3AB98FE95455&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;296.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;130.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;832.9499999999987&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;217.57401315789474&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;942.499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.49292763157894&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-436E29BF-7F5E-4A4B-8F62-C0AEA010F4D2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.4499999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;810.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;446.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D2196400-20DC-4D6B-AAD2-AA9308CE8DEA&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;518.4499999999978&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.71623376623376&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.9130434782609&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.91304347826087&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-496A30AE-44AC-4298-83E0-3183F3FF935B&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1042.449999999996&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1087.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;216.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C17C73A1-5853-496B-B686-E7911105D459&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;343.3984375&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;106.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;583.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;196.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;583.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;164.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-1B2782FA-5216-4817-B964-A77EDEBB7547&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;314.949999356254&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;418.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;214.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-DEC53745-1E74-4D08-B472-95F9A6B92D98&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.8984375&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;36.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;584.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;233.54821399278214&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;584.3984375&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;269.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;675.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;269.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>定义的error</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;error01&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;error01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在子流程中，当flag的数据为0的时候，就会触发错误结束事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1111&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;12222&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;xxxxx44&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag==0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在子流程上绑定了一个错误边界事件，绑定的也是error01,也就是当子流程触发错误结束事件，就会触发这个边界事件，进而完成自动任务三。</p>\n<p>流程中关联的三个自动任务都只是输出一个打印语句~</p>\n<p>然后我们需要做的操作有，部署，启动流程绑定流程变量flag的值为0，然后就可以看输出结果了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 部署</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;错误结束事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;错误结束事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例,设置流程变量中的flag=0触发错误结束事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event2005:1:ebec87e2-b028-11ec-b93f-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;开始启动的时间：&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    <span class=\"comment\">// 需要在此阻塞比等待长的时间</span></span><br><span class=\"line\">    TimeUnit.MINUTES.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看控制台输出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210538338.png\"\n                      alt=\"image-20220330210538338\"\n                ></p>\n<p>控制台输出的结果和我们预期的是一样的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330210708334.png\"\n                      alt=\"image-20220330210708334\"\n                ></p>\n<p>说明错误结束事件的作用就是在执行到错误结束的节点位置会抛出对应的错误，供需要获取的事件来处理。</p>\n<h3 id=\"中断结束事件\"><a href=\"#中断结束事件\" class=\"headerlink\" title=\"中断结束事件\"></a>中断结束事件</h3><p>中断结束事件也称为终止结束事件，主要是对流程进行终止的事件，可以在一个复杂的流程中，如果某方想要提前中断这个流程，可以采用这个事件来处理，可以在并行处理任务中。如果你是在流程实例层处理，整个流程都会被中断，如果是在子流程中使用，那么当前作用和作用域内的所有的内部流程都会被终止。具体还是通过两个案例来给大家介绍：</p>\n<h4 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h4><p>案例一我们介绍没有子流程的情况下终止的场景，具体案例如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220331102808059.png\"\n                      alt=\"image-20220331102808059\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event5002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止结束事件01&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始事件&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务三&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;wangwu&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">terminateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">terminateEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p004&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event5002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event5002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event5002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;102.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;253.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;287.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p004&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p004&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;228.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;105.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;377.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;254.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;570.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;410.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-E9A4380A-AAF8-464C-B14B-15A2C1F1C2D2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;576.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;495.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E1E26394-8B33-4766-9B3B-722958B91972&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;7.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;19.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;472.4499999999732&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.25&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.25&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;267.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;720.9525123715264&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;267.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-226E06CD-07E8-4E38-A3FC-12CD417F54FC&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;287.4441367574257&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;377.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-325962BF-7168-48C0-9107-B232A4627C10&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;19.53125&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;34.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;589.5677159590043&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;449.51771595900436&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;589.8981518165715&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;495.0001397608249&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-F5ABC1D7-091F-4966-990F-44CE1A927869&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;472.44999999982196&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D00B6EDC-F2F4-4D8F-89BD-91272363CD49&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;7.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;22.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;477.449999999998&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.66822742474915&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;571.9322033898305&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;431.93220338983053&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-E3A5580F-4CE3-4556-894E-46C3D2134071&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;327.0247370727432&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.4166666666667&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.49999999998806&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.2181222707423&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-074345F1-5C34-435D-AECE-912DDBBBE105&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;759.5591869398207&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.37820512820514&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;805.0002755524882&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.08885188426405&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C1280677-F8B9-4C9C-B010-CEEA4DE17176&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;132.44999949366624&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;287.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;268.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-413A98AF-8CAF-470C-B751-E32229801310&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;37.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.4375&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;22.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;31.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;609.5117551813031&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.4375&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;742.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;430.4375&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;742.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;285.402097959858&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-FF8C06ED-AE40-46A1-A898-9FA4B0D4665A&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;248.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;308.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;372.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;145.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程定义说明：并行网关中3个人工审核任务，分别分配的用户为zhangsan lisi wangwu ，然后在wangwu审核后会进入一个排他网关，如果flag是小于等于0就会触发终止结束事件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-89945688-1D51-4391-A713-3E77ADB2FA06&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;stop001&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>具体操作：部署流程–&gt;启动流程实例–&gt;wanwu 处理任务【流程实例 flag &lt;&#x3D; 0】 触发任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;终止流程1.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;终止流程1&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动流程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时可以看到三个并行的Task任务：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213147240.png\"\n                      alt=\"image-20220330213147240\"\n                ></p>\n<p>这时我们只需王五来处理即可，在上一步中我们已经对流程变量赋值了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;event3001:1:8b1663fa-b02d-11ec-b480-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;wangwu&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再去看Task表中已经没有另外两条记录了哦</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330213516673.png\"\n                      alt=\"image-20220330213516673\"\n                ></p>\n<p>通过案例可以看到在没有子流程的情况下，终止结束事件会把整个流程都进程都结束了，而且在历史记录中也可以看到信息</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330215127129.png\"\n                      alt=\"image-20220330215127129\"\n                ></p>\n<h4 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h4><p>然后我们来看看在子流程中触发终止结束事件的案例：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330220208085.png\"\n                      alt=\"image-20220330220208085\"\n                ></p>\n<p>完整的xml内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:flowable</span>=<span class=\"string\">&quot;http://flowable.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.flowable.org/processdef&quot;</span> <span class=\"attr\">exporter</span>=<span class=\"string\">&quot;Flowable Open Source Modeler&quot;</span> <span class=\"attr\">exporterVersion</span>=<span class=\"string\">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;event3002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;终止流程2&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;任务开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;用户任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;task1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subProcess</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;subProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程开始&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子人工任务一&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子人工任务二&quot;</span> <span class=\"attr\">flowable:assignee</span>=<span class=\"string\">&quot;user2&quot;</span> <span class=\"attr\">flowable:formFieldValidation</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">modeler:initiator-can-complete</span> <span class=\"attr\">xmlns:modeler</span>=<span class=\"string\">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">modeler:initiator-can-complete</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">extensionElements</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">terminateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">terminateEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;taskc01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;p001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endc01&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;taskc02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">subProcess</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b001&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;b002&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;结束事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;end003&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_event3002&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;event3002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_event3002&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;start01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_start01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;75.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;200.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;175.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;task1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_task1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;15.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-7A5C1ACB-D07C-407D-83BB-C55D04425AC7&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;187.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;531.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;330.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;cstart01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_cstart01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;322.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;410.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;taskc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_taskc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;385.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;p001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_p001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;542.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;405.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;taskc02&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_taskc02&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;80.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;627.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;385.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endc01&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endc01&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;411.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_sid-BD67523C-DDDA-46B8-A788-C54769B081B1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;548.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;480.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;b001&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_b001&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;165.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;b002&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_b002&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;867.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;end003&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_end003&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;28.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;960.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;207.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-EFCAE414-03A4-4313-B97A-4BF962888C37&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;582.0247370727355&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.41666666666663&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;627.4999999999881&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.2181222707423&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-3C938AB5-2FDF-4C0B-AED8-15853AB07FE8&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;727.4499999997752&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;765.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-2E0A3425-3C34-4771-85C0-C8C7B7D7BFF5&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;352.449998261009&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;390.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A554CEA8-FD95-4EA4-BED3-EA748273D775&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;265.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;93.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;815.95&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;888.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;888.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;234.40453342953353&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-AAC6E950-F7BD-454A-9105-F43E5D4530A1&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562.8602941176471&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;444.5752202643172&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;562.6018221538329&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;480.0003662069823&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-200E2768-DCA0-4FAD-A3C0-2D69938379A2&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.949999999999&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.05974880382777&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;867.97604790418&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.4760479041916&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-B0777673-C3BE-488B-87B2-34A71CEE2C73&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;489.9499999999965&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.2030487804878&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;542.9183673469388&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;425.4183673469388&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-679D7677-4828-4BCF-9F2E-CBC426D4B72B&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;14.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;14.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;906.92933478735&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;933.75&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;933.75&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;221.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;960.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;221.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-D87CB0F6-EF35-479A-80A7-5FDACF1022E1&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;15.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;20.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;104.94999797575196&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;165.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-0264CAD1-386A-4A4F-ADDA-DCF62EE90594&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;22.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;32.015625&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;1.1773835920177385&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;93.5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;187.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;232.44861780088067&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;187.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;285.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;423.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-03E93AD6-F173-454F-B29F-B61FE45BE1E0&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;204.4800158394907&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.46654929577466&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;419.99999999998107&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;215.08778558875218&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-A4455D52-7DAF-4193-9E4F-D75E133A6EDD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;20.5&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;185.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;185.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;420.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_sid-C5FB6E94-3563-49C8-9BA2-C0C80670E9FD&quot;</span> <span class=\"attr\">flowable:sourceDockerX</span>=<span class=\"string\">&quot;50.0&quot;</span> <span class=\"attr\">flowable:sourceDockerY</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">flowable:targetDockerX</span>=<span class=\"string\">&quot;20.0&quot;</span> <span class=\"attr\">flowable:targetDockerY</span>=<span class=\"string\">&quot;13.7109375&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;519.95&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;887.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;55.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;887.5&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;195.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程说明：人工任务一 –&gt;zhangsan  人工任务二 –&gt;lisi  子人工任务一 ： user1 子人工任务二 ： user2</p>\n<p>子任务完成任务如果flag&lt;&#x3D;0,那么子流程中断结束，子人工任务二不会触发</p>\n<p>部署流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test02</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;终止流程2.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;终止流程2&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后启动流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时在ACT_RU_TASK中就应该有三条对应的TASK记录了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232643286.png\"\n                      alt=\"image-20220330232643286\"\n                ></p>\n<p>然后我们执行<code>user1</code>的子任务，因为现在流程变量<code>flag=0</code>所以会触发终止结束事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232801450.png\"\n                      alt=\"image-20220330232801450\"\n                ></p>\n<p>执行任务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;event3002:1:92679bec-b03d-11ec-901e-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;user1&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后我们可以发现子人工任务一没有了，但是也没有子人工任务二，但是主流程中的两个任务都还在</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330232959807.png\"\n                      alt=\"image-20220330232959807\"\n                ></p>\n<p>而且进入到历史数据中也可以看到</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220330233448096.png\"\n                      alt=\"image-20220330233448096\"\n                ></p>\n<h3 id=\"取消结束事件\"><a href=\"#取消结束事件\" class=\"headerlink\" title=\"取消结束事件\"></a>取消结束事件</h3><p>取消结束事件（cancel end event）只能与BPMN事务子流程（BPMN transaction subprocess）一起使用。当到达取消结束事件时，会抛出取消事件，且必须由取消边界事件（cancel boundary event）捕获。取消边界事件将取消事务，并触发补偿（compensation）。</p>\n<p>具体通过案例来讲解：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110131810.png\"\n                      alt=\"image-20220401110131810\"\n                ></p>\n<p>结束取消事件我们只能在事务子流程中使用，在FlowableUI中暂时没有找到这个组件，所以在Eclipse中来绘制</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401110621048.png\"\n                      alt=\"image-20220401110621048\"\n                ></p>\n<p>完整的xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Start&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">transaction</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Transaction&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;事务子流程开始&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务一&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusiveGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;排他网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclusiveGateway</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工任务二&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;lisi&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&gt;0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;事务子流程结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消结束事件&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">cancelEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cancelEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conditionExpression</span> <span class=\"attr\">xsi:type</span>=<span class=\"string\">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;flag&lt;=0&#125;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">conditionExpression</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Compensate&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿自动任务&quot;</span> <span class=\"attr\">isForCompensation</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">associationDirection</span>=<span class=\"string\">&quot;None&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">transaction</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;transaction1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">cancelEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cancelEventDefinition</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消事件结束&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消事件结束&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;正常结束任务&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;248.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;390.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;transaction1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_transaction1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;291.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;761.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;371.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;262.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;431.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;382.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;372.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycompensation1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;581.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;412.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;exclusivegateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_exclusivegateway1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;661.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;380.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;746.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;373.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;896.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;383.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;cancelendevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_cancelendevent1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycancel1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycancel1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;871.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;542.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;980.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;640.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1130.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;650.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1291.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;391.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;401.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;466.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;511.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;616.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;399.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;661.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;701.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;746.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;851.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;896.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;400.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;681.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;420.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;681.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_association1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;596.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;442.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;563.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;472.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;283.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;371.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;886.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;572.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1032.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;640.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1085.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;667.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1130.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;667.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow10&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow10&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1132.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;407.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1291.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow11&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow11&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1396.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1450.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;418.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>流程说明：流程中定义了一个事务子流程和两个自动任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111036816.png\"\n                      alt=\"image-20220401111036816\"\n                ></p>\n<p>然后在事务子流程中定义了两个人工任务用一个排他网关连接，flag&lt;&#x3D;0 的情况下会触发 取消结束事件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111201815.png\"\n                      alt=\"image-20220401111201815\"\n                ></p>\n<p>触发取消结束事件后同时会被取消边界事件捕获而走 取消事件结束的自动任务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111316353.png\"\n                      alt=\"image-20220401111316353\"\n                ></p>\n<p>同时自动补偿任务也会触发，关联的自动任务也会触发</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111351513.png\"\n                      alt=\"image-20220401111351513\"\n                ></p>\n<p>注意在设置的时候需要设置补偿自动任务为可补偿的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111438577.png\"\n                      alt=\"image-20220401111438577\"\n                ></p>\n<p>补偿自动任务绑定的JavaDelegate：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;完成自动审批任务-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常结束任务绑定的JavaDelegate:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取消事件结束绑定的JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们部署，启动，和执行流程，看输出情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;取消结束事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;取消结束事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例,设置流程变量中的flag=0触发取消结束事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置对应的流程变量的值</span></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;flag&quot;</span>,<span class=\"number\">0</span>);<span class=\"comment\">// 设置flag为0触发流程结束事件</span></span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248&quot;</span>,map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 完成任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">completeTask</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TaskService</span> <span class=\"variable\">taskService</span> <span class=\"operator\">=</span> processEngine.getTaskService();</span><br><span class=\"line\">    <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> taskService.createTaskQuery()</span><br><span class=\"line\">            .processDefinitionId(<span class=\"string\">&quot;myProcess:3:effb46cf-b168-11ec-926f-c03c59ad2248&quot;</span>)</span><br><span class=\"line\">            .taskAssignee(<span class=\"string\">&quot;zhangsan&quot;</span>)</span><br><span class=\"line\">            .singleResult();</span><br><span class=\"line\">    taskService.complete(task.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401111758140.png\"\n                      alt=\"image-20220401111758140\"\n                ></p>\n<p>输出结果是满足我们的期望的。</p>\n<h3 id=\"补偿事件\"><a href=\"#补偿事件\" class=\"headerlink\" title=\"补偿事件\"></a>补偿事件</h3><p>通过补偿达到控制业务流程的目的就是补偿事件，比如我们正常的买机票的流程下订单购买，然后同时弹出支付流程页面。支付成功后就可以等待出票了，但是如果我们支付失败的话，这时要么重新支付，更换支付方式或者取消预订，这时取消预订我们就可以通过补偿事件来实现，具体的案例如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202116847.png\"\n                      alt=\"image-20220401202116847\"\n                ></p>\n<p>完整的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">definitions</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">xmlns:activiti</span>=<span class=\"string\">&quot;http://activiti.org/bpmn&quot;</span> <span class=\"attr\">xmlns:bpmndi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class=\"attr\">xmlns:omgdc</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class=\"attr\">xmlns:omgdi</span>=<span class=\"string\">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class=\"attr\">typeLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class=\"attr\">expressionLanguage</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.activiti.org/test&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">error</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;payFail&quot;</span> <span class=\"attr\">errorCode</span>=<span class=\"string\">&quot;payFail&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">error</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">process</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;My process&quot;</span> <span class=\"attr\">isExecutable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">startEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;开始事件&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">startEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;并行网关&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;预订机票&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyTwoDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;微信支付&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyOneDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">userTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;人工出票&quot;</span> <span class=\"attr\">activiti:assignee</span>=<span class=\"string\">&quot;zhangsan&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">userTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;usertask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">parallelGateway</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Parallel Gateway&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parallelGateway</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serviceTask</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;取消预订&quot;</span> <span class=\"attr\">isForCompensation</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">activiti:class</span>=<span class=\"string\">&quot;com.bobo.delegate.MyThreeDelegate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">serviceTask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">cancelActivity</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">boundaryEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;错误边界事件&quot;</span> <span class=\"attr\">attachedToRef</span>=<span class=\"string\">&quot;servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">errorEventDefinition</span> <span class=\"attr\">errorRef</span>=<span class=\"string\">&quot;payFail&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">errorEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">boundaryEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intermediateThrowEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;补偿抛出中间事件&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">compensateEventDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">compensateEventDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intermediateThrowEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">endEvent</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;End&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">endEvent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sequenceFlow</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;endevent2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">sequenceFlow</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">sourceRef</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">targetRef</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">associationDirection</span>=<span class=\"string\">&quot;None&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">process</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNDiagram</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNDiagram_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNPlane</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;myProcess&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNPlane_myProcess&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;startevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_startevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;360.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;357.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundarycompensation1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundarycompensation1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;270.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;450.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;boundaryerror1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_boundaryerror1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;650.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;490.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;usertask1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_usertask1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;220.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;parallelgateway2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_parallelgateway2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;40.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1140.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;servicetask3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_servicetask3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;55.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;105.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;830.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;compensationintermediatethrowevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_compensationintermediatethrowevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;590.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNShape</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;endevent2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNShape_endevent2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdc:Bounds</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;35.0&quot;</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;339.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdc:Bounds</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNShape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;195.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;377.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;380.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;377.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;685.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow3&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;925.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;336.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow4&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow4&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;357.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;247.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow5&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow5&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;397.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;400.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;580.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow6&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow6&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;685.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;477.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1160.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;376.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow7&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;520.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;740.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow8&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow8&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;775.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;820.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;607.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;flow9&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_flow9&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1180.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;356.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;1225.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;356.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bpmndi:BPMNEdge</span> <span class=\"attr\">bpmnElement</span>=<span class=\"string\">&quot;association1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BPMNEdge_association1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;665.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;300.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;664.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;363.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">omgdi:waypoint</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;830.0&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;363.0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">omgdi:waypoint</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>流程说明：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/bpmn/image-20220401202447583.png\"\n                      alt=\"image-20220401202447583\"\n                ></p>\n<p>微信支付绑定的JavaDelegate：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOneDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;微信支付-----》MyOneDelegate&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;余额不足....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">BpmnError</span>(<span class=\"string\">&quot;payFail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预订机票绑定的JavaDelegate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTwoDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyTwoDelegate----&gt;预订机票流程执行了&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取消订单绑定的javaDelegate:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreeDelegate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">JavaDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(DelegateExecution execution)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyThreeDelegate----&gt;机票预订取消了....&quot;</span> + LocalDateTime.now().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个流程执行的过程是：任务开始后会并行的执行机票预订和微信支付，然后在微信支付是抛出payFail错误，同时错误边界事件会捕获到这个错误，然后执行到 补偿抛出中间事件，之后在机票预订的 补偿边界事件 被触发，对应的补偿触发器会执行对应的代码。 然后我们部署加启动流程后观察控制台的输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 部署流程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deploy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Deployment</span> <span class=\"variable\">deployment</span> <span class=\"operator\">=</span> processEngine.getRepositoryService().createDeployment()</span><br><span class=\"line\">            .addClasspathResource(<span class=\"string\">&quot;补偿事件.bpmn20.xml&quot;</span>)</span><br><span class=\"line\">            .name(<span class=\"string\">&quot;补偿事件&quot;</span>)</span><br><span class=\"line\">            .deploy();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动流程实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startProcessInstanceByKey</span><span class=\"params\">()</span>  <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    processEngine.getRuntimeService()</span><br><span class=\"line\">            .startProcessInstanceById(<span class=\"string\">&quot;myProcess:4:a45abe9f-b1b5-11ec-9daf-c03c59ad2248&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyTwoDelegate----&gt;预订机票流程执行了2022-04-01T20:17:44.985</span><br><span class=\"line\">微信支付-----》MyOneDelegate2022-04-01T20:17:44.987</span><br><span class=\"line\">余额不足....</span><br><span class=\"line\">MyThreeDelegate----&gt;机票预订取消了....2022-04-01T20:17:45.028</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果和我们前面设计的是一样的，搞定~</p>\n"},{"title":"Hello World","date":"2022-09-01T00:00:00.000Z","password":"hello","abstract":"这里有东西被加密了，需要输入密码查看哦。","message":"您好，这里需要密码。","wrong_pass_message":"抱歉，这个密码看着不太对，请再试试。","wrong_hash_message":"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。","sticky":999,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start \n## 💡网络解锁\n### 奈云\n### 艾可云\n### 魔戒\n### 冰灵\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n \nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/2022/09/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-09-1 08:00:00\ntags: \ncategories: \npassword: hello\nabstract: 这里有东西被加密了，需要输入密码查看哦。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\nsticky: 999\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start \n## 💡网络解锁\n### 奈云\n### 艾可云\n### 魔戒\n### 冰灵\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n \nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-11-05T14:16:59.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert00011dk8f8al65wq3","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，这个密码看着不太对，请再试试。\" data-whm=\"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"719a5d9241aa3490ae77e7ab45687ca6a7a0ef82a35cdb246682d67024af9a9c\">10d79030e8222445804370796b90fca1cf7dd2ee01010d95413afa643c36d75c5dfa5eaa9327e991528303814267181d88bce7e663060c45eeef1911be608c8808e3a0bd1058bece5a8748c4fd5da7b9fe10276c80624ac0ab45c8b427740ad28e252f77ff2341342a2d02769b92253458c55ba07e46297cf056dee5b69303e9c91c8b122030e881dab5396fc41b88a1ae72431bf2e9754e77a7a6fe1b4bd9daf6debae3d867fdfcf71da5c95ede2f47f2eae5e76ac2b10b952ed5cb9f3695cb03838b45199ec1dfcb776c0bc57179407e845c7a44d7360ac99621418daed523435f012d54d14105d18e1db5b09f61e860a96880b4288957d4c90af1b6e005862625f0ed49104d5915bfe28edaa245bff7dc45843ee15eeeb3f1969f562fda376e40a4c8c02db75b28f0f6691053cf615a5d3b85e367947c5904c66facf5a5470d64e8cc3e898c97cf438acce98e80ec01786e018a8aa4b8fcdf3d08bb67f236a2eb43af76f148a70fa16bd6c6621d92e5ffad872634b10aae9705681735c82a362c4cbb90e62629836fb011f21c1661cbda352bfa3cd5daf39209e4ce60af71f58356b0ea3ca44d611bc117857f9701628c6ea51aae682e38e175c247c0dd663600834e890c5d59999d2533c021d6f404dc3fc96130a1e6b5c4380fae31c9c80fea684a90f69bd77f8c2853cc7ec9ade17473ac2545c8419173399f489737d12147d3a36438efbe9c7916e521704027a699eb56bc5a1132f44a9796e1b453def95b5064dd8326aa194761b15a0b546e03621685b0d2287592253d82ce811b54645cb0fc55f2746acf55b832c1cdc61433ba6c731a24c0eb581528ad396a9f9919cd59ecb454e7067e93bfb065e86d30f75accbb81abad48aed02aa6aa5ab28800c404d50f5c02e65363d5c093137c0b9578fd56a93f3b1e0948a27a307e19fd20c67e028f0225e6ac94a30d41a484eb7b06ba6e70f2f3f0c1aa1bea62a547410d0716a70a4515b0c117503445c5dc68df94700437e85320e704e9e41e3761d91738bc6253f2aa5ec4e5e35f2466212268b66e2ddd7ecf83916883f197f78da60cc6ed109d81f79b20235cabd942e676e3aca8cf0673d73ae29fe1bc58e84982141f61504c11b9912bf72c108e09d100e95b73e9e11819d5e325a69b09eec5c2bbb669648e93aaffc069e5b78e25a8c00201b9cd16fbdc95775823536c93af454946e1758642071b30f6bdbb73e39eb4e4c96c568c1e4f111844d8e238ddb7410b6394a3b85470127f9c24bf93431ffecb6006460334fc64b0f9f311f3b590a47622b1d9eb9083e6b87589fd872f5be9aac05ff70868a0b9ce9046a6a957a69a69c801c0b628c8ae14e7a226fd11bcf4f775b4f48220c945b68fc3fefd9c83f9b2e8ac4afac7f97ccdcbbcf032f962919532b1ab77428964713c32b7e5a634e51281c515b4a0435661375ba7350bb24b426e5219114339965d2165d8543d61db2b383e6dbb947a260f8f9f14ce19060862952f8b329f143e2009170cf204d1994e6cd69fdf45db7bed854bc28ea4c50a9587147d8be6074418694ae4523b0ee843695d1c3181591be185c40f331cef516975c510d4053bda863cc9a0af5125f5052b7f03ac09efb979f45b24c31bdf3310b4c281277bb3190015ef94407c242cc4b8fbc6fccdca0b692f1b9de0841c0a5b89e13d6a4263c82d04d9129c1704f1d7ef4387dfed98e3db995f251ff87d1b1651b111f6b9cf403a018f56f840eee060033c8f1cf1eba547053cc7bf69e3651154a10af0645da79cebb94a9ee7b3b17a963c88da10d3adfeb215681881158a8af0db597e7fe657fc889e14007e0cb31cbf82d04bb4250bce1e05eaf914b643664fb933d97924240ba3bbca0a901b751fecd66fff9a044cf2c3858c0983bb9ea7aa9d387bbe8137b2feacf52ca11287b8c3cafeef543a156cad71ba66ed2cae03b9be15acccf6a485ff9c8701fb228c808de4aac1603e26813f539451015d6972007f3187b1b8a46627294e5a3c646d465a85a0294058ca1542c0ad799e602868dfb73200d19dcd93e47892826b2ed0b45847fbeafb9f053936c2abd8f607dacf9e3a92104fb7b900fbd7dd50398c27d4237327012a3509d3935ac21c0267b4b9a4d9ea1fe5064be764361bc33fde11d777cc911dc170b4bee2b7596b012cbca8a9a426b667a60945cd5c0f5de36a1bb3c83da34c5c27315e98ee7d230105e731a382aada3f3d322a65713d829c4c8f5b37baaeb3ea4ec2de9c336eed5f8252eb90d7e20e5265254d20de26cbbae71698aaec785b4ccd6afc00e4dde0187cf6b0b1f8953ad01e7e8d0d76ea50cdea4d576df2c2423ed2f97c5a7db4dc6b5a93bd361b07db45eef63c36f254094bd06c0d3458ba48c59bb58270bb2322db657e6c89104905b311ca40c7e024117a428f0d9cf7323af033fe73d2d2e125c15b538c4fcb1a8f5d078f07ddb77c3e6b1d59094635df8dc8a09a1e62adf88b8843b37545f648f015505d38c4fde2177d1fddb8dd9a759ccaddc7d6d0467d0c436bf376051937f1258cecc9e9490b680b7d0186cd316345d2440fbb1889bb6f1a8db4e0ada624be0c70a0641b0dfa0cd53630da573f303742d0002043c6248f63f482612bd5db9331a1a100250b2ebb6091e147f9fca6a640f52d7dfc5a749307747ce5e26b66dd4de345b078d42cfbebb9dfa9b1e35397f5fe742d7a970c470003f5d7f4de9c7f4e5abb33d2183635a225f6378266238840e1c4c044f97c8c915027b54bf81f59e1f4752e67e0d0074c97372f9f3cdf71b4057d4b90405864725e969a09ecc0e5ffe985915e0ababfc8d60f4f42aa24b8a05de392c67f41144dcf485e11930e1aadd9afe8c5035d3b1a28da60b085b2078bbd08abb409ae1ae2341ccbce931c95eb4ea15f62555442e49060ff70e17c410b3abb410398ceeb49f5ed0bfe8285593c30844389da9be1c6a367966be9bd90671a5277fdeb44cac396df568f7ecaafa930201dcd9aec84fab1121c7c7bcdc0dc509965f6b538a0ec6c8cc9eb101b687ddb04c87bd4e57bfd0afa57687c99e48aa2a91b11ea05e12a38ef618249d806b7f14db03096e36535ac2c081a1f5310bf9d957b95404affef3f776255754bf3802bac5e99fc8d00fdc05182a9d3e691e45fde03613e8f75abfc0f61e9e153b03fe231c06f58d26ef9dd6864e062fa4482e81e194d15d287162d59809f9c27f6df56daf1a9c968ea86655b97f1bde07f5e32c030d295275f8a25466ccb520ac714cea56341dae8c97ddf0f365ca5d0e5b87d5e69decefb62ee40b4f90d215108497319583a9c8d88f58903031b28cc99289cd2cc5ae075f219ba7ac259ec4446ba8a9db91c6836c81c48d7b8f9cc2d68d537e23ed7b2dcee872b62b36d9a071a5970ec279b7ab87bcd549860d63accfbd354f35fb6e271db020cad54cb2507cbf6451971959e03e815868b78cae67a12332f5c0291c979a1a960c3fc37cee070c4af425fb28f2202f9d59cb70d8fb947e789d3b3c338abde3097aa70f5fff51f4251bd5f6d2a2250785df4b31db7d9cc3bcff9ef67412e87c27772cd6c376de20751d071b30ce17585ea0f236adb2af7033b526dbf82c9377ab312cbd4e9857c8e1fd66e6ab44d8f49bf76c4d6429af8bbaa01846062f8956147e4571372a8a6695da5c952b7f0bba96d48a9463197bc040a59735f06f46f52022e8c913614eb409b6c2c5c92f826522bb48b61a6ef658abbea860cd256f3d4caa6f1ee1647adf05c937d56cad059e82c01f3081230bf7766d46ee001660e8f6338729ee37cfcbe49b4033df559b9f3b0c41a1635a809a0402cee3426c4e03ceb96c03777679a9be64d492972e5c63807e7fd15f7313b7e2ce8988d00c490720513f13bcee71b8bcd18a1c12920a7ba7d125c11aca5fa5e41e60a9b338278f975152f755f1e296780981bed53b751eb868d5e46d3b36000a670ef4b20e674cc161e1ac8229563cd25c7d502daaeb42a2cc2f713f257efd41be727b5e44144e8bc9ae5a2b6a6b150a496056711b90f8e5a30083053fcbefd9b8acfc3e30309e01c0b652c9e9b4c9a25c7a826c030f6877197724248498aaa9713da868343be2c8e6899d01ee1125338fea19a889f0666d22a301f43a1785f0c4f90a91dc555ca02aba3eee9c7f61a1f2a6d55d53491f9a8c3cc3637ac30b2bbe86db836cb2de949252d0da19fb35bdfad156a43e6852601e25ad3a9394ede90e176f4834b5cbfbcf88f605158a0070babc0a65c0e72125b7e2c299f2b9cd1d88e0536b2d127fb66a83100eb9b7af0d117f046d405520fa6641c7a04a244940254b10a5e414155066c5285542187cea09ad216bbe79412cd28fb8495e7bde6d57bd32b54406b78c9a8fc02dc2c2be8343b6b3ae7695912a9ce</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好，这里需要密码。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"这里有东西被加密了，需要输入密码查看哦。","more":"这里有东西被加密了，需要输入密码查看哦。","origin":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h2 id=\"💡网络解锁\"><a href=\"#💡网络解锁\" class=\"headerlink\" title=\"💡网络解锁\"></a>💡网络解锁</h2><h3 id=\"奈云\"><a href=\"#奈云\" class=\"headerlink\" title=\"奈云\"></a>奈云</h3><h3 id=\"艾可云\"><a href=\"#艾可云\" class=\"headerlink\" title=\"艾可云\"></a>艾可云</h3><h3 id=\"魔戒\"><a href=\"#魔戒\" class=\"headerlink\" title=\"魔戒\"></a>魔戒</h3><h3 id=\"冰灵\"><a href=\"#冰灵\" class=\"headerlink\" title=\"冰灵\"></a>冰灵</h3><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n","encrypt":true},{"title":"Git子模块","date":"2022-09-24T11:25:51.000Z","_content":"# [Git 子模块](https://www.cnblogs.com/renjt1991/p/15925259.html)\n\nGit 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n示例代码使用的值如下：\n\n- 主仓库路径：github.com/base.git\n- 子模块仓库：github.com/common.git\n- 子模块在主仓库路径：src/common\n\n### 子模块操作\n\n#### 添加子模块\n\n在主仓库执行 `git submoudle add <url> <repo_name>`，执行后会在主仓库下创建一个 `repo_name` 目录存放子项目；并会创建一个 `.git` 隐藏文件\n \n```bash\ngit submoudle add github.com/common.git src/common\n```\n\n添加子模块后，主仓库会增加一个 `.gitmodules` 文件，记录子模块信息\n\n```properties\n# .gitmodules 文件\n[submodule \"src/common\"]\n\tpath = src/common\n\turl = github.com/common.git\n```\n\n#### 查看子模块\n\n```bash\ngit submodule\n# 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)\n```\n\n#### 初始化子模块配置\n\n```bash\ngit submodule init\n```\n\n#### 更新子模块\n\n```bash\n# 更新全部子模块\ngit submodule update\n# 更新指定子模块\ngit submodule update src/common\n\n# 递归更新子模块\ngit submodule update --init --recursive\n\n# 更新子模块到服务器最新版本\ngit submodule update --remote\n```\n\n#### 提交子模块代码\n\n子模块的默认分支不是 **master** ，进入目录后需要先切换分支，再修改提交代码\n\n```bash\ncd src/common\ngit checkout master\ngit add .\ngit commit -m \"update\"\ngit push\n```\n\n#### 删除子模块\n\n执行命令后，会删除 `src/common` 文件夹和修改 `.gitmodules` 文件\n\n```bash\ngit rm src/common\ngit commit -m \"remove submodule\"\ngit push\n```\n\n本地子模块相关文件（非必须删除）：\n\n- 删除 `.git/config` 文件中相关配置\n- 删除 `.git/modules/src/common` 文件夹\n\n### 克隆包含子模块的主项目\n\n在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件\n\n```bash\ngit clone github.com/base.git\ncd base\ngit submodule init\ngit submodule update\n```","source":"_posts/2022/09/git子模块.md","raw":"---\ntitle: Git子模块\ndate: 2022-09-24 19:25:51\ntags: [Github]\ncategories: [常用工具]\n---\n# [Git 子模块](https://www.cnblogs.com/renjt1991/p/15925259.html)\n\nGit 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。\n\n示例代码使用的值如下：\n\n- 主仓库路径：github.com/base.git\n- 子模块仓库：github.com/common.git\n- 子模块在主仓库路径：src/common\n\n### 子模块操作\n\n#### 添加子模块\n\n在主仓库执行 `git submoudle add <url> <repo_name>`，执行后会在主仓库下创建一个 `repo_name` 目录存放子项目；并会创建一个 `.git` 隐藏文件\n \n```bash\ngit submoudle add github.com/common.git src/common\n```\n\n添加子模块后，主仓库会增加一个 `.gitmodules` 文件，记录子模块信息\n\n```properties\n# .gitmodules 文件\n[submodule \"src/common\"]\n\tpath = src/common\n\turl = github.com/common.git\n```\n\n#### 查看子模块\n\n```bash\ngit submodule\n# 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)\n```\n\n#### 初始化子模块配置\n\n```bash\ngit submodule init\n```\n\n#### 更新子模块\n\n```bash\n# 更新全部子模块\ngit submodule update\n# 更新指定子模块\ngit submodule update src/common\n\n# 递归更新子模块\ngit submodule update --init --recursive\n\n# 更新子模块到服务器最新版本\ngit submodule update --remote\n```\n\n#### 提交子模块代码\n\n子模块的默认分支不是 **master** ，进入目录后需要先切换分支，再修改提交代码\n\n```bash\ncd src/common\ngit checkout master\ngit add .\ngit commit -m \"update\"\ngit push\n```\n\n#### 删除子模块\n\n执行命令后，会删除 `src/common` 文件夹和修改 `.gitmodules` 文件\n\n```bash\ngit rm src/common\ngit commit -m \"remove submodule\"\ngit push\n```\n\n本地子模块相关文件（非必须删除）：\n\n- 删除 `.git/config` 文件中相关配置\n- 删除 `.git/modules/src/common` 文件夹\n\n### 克隆包含子模块的主项目\n\n在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件\n\n```bash\ngit clone github.com/base.git\ncd base\ngit submodule init\ngit submodule update\n```","slug":"git子模块","published":1,"updated":"2022-09-29T15:28:35.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert20016dk8fc5d6430g","content":"<h1 id=\"Git-子模块\"><a href=\"#Git-子模块\" class=\"headerlink\" title=\"Git 子模块\"></a><a class=\"link\"   href=\"https://www.cnblogs.com/renjt1991/p/15925259.html\" >Git 子模块<i class=\"fas fa-external-link-alt\"></i></a></h1><p>Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>示例代码使用的值如下：</p>\n<ul>\n<li>主仓库路径：github.com&#x2F;base.git</li>\n<li>子模块仓库：github.com&#x2F;common.git</li>\n<li>子模块在主仓库路径：src&#x2F;common</li>\n</ul>\n<h3 id=\"子模块操作\"><a href=\"#子模块操作\" class=\"headerlink\" title=\"子模块操作\"></a>子模块操作</h3><h4 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h4><p>在主仓库执行 <code>git submoudle add &lt;url&gt; &lt;repo_name&gt;</code>，执行后会在主仓库下创建一个 <code>repo_name</code> 目录存放子项目；并会创建一个 <code>.git</code> 隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submoudle add github.com/common.git src/common</span><br></pre></td></tr></table></figure>\n\n<p>添加子模块后，主仓库会增加一个 <code>.gitmodules</code> 文件，记录子模块信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitmodules 文件</span></span><br><span class=\"line\"><span class=\"attr\">[submodule</span> <span class=\"string\">&quot;src/common&quot;]</span></span><br><span class=\"line\">\t<span class=\"attr\">path</span> = <span class=\"string\">src/common</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span> = <span class=\"string\">github.com/common.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看子模块\"><a href=\"#查看子模块\" class=\"headerlink\" title=\"查看子模块\"></a>查看子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule</span><br><span class=\"line\"><span class=\"comment\"># 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化子模块配置\"><a href=\"#初始化子模块配置\" class=\"headerlink\" title=\"初始化子模块配置\"></a>初始化子模块配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新子模块\"><a href=\"#更新子模块\" class=\"headerlink\" title=\"更新子模块\"></a>更新子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新全部子模块</span></span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"><span class=\"comment\"># 更新指定子模块</span></span><br><span class=\"line\">git submodule update src/common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归更新子模块</span></span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新子模块到服务器最新版本</span></span><br><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交子模块代码\"><a href=\"#提交子模块代码\" class=\"headerlink\" title=\"提交子模块代码\"></a>提交子模块代码</h4><p>子模块的默认分支不是 <strong>master</strong> ，进入目录后需要先切换分支，再修改提交代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/common</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除子模块\"><a href=\"#删除子模块\" class=\"headerlink\" title=\"删除子模块\"></a>删除子模块</h4><p>执行命令后，会删除 <code>src/common</code> 文件夹和修改 <code>.gitmodules</code> 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> src/common</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;remove submodule&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本地子模块相关文件（非必须删除）：</p>\n<ul>\n<li>删除 <code>.git/config</code> 文件中相关配置</li>\n<li>删除 <code>.git/modules/src/common</code> 文件夹</li>\n</ul>\n<h3 id=\"克隆包含子模块的主项目\"><a href=\"#克隆包含子模块的主项目\" class=\"headerlink\" title=\"克隆包含子模块的主项目\"></a>克隆包含子模块的主项目</h3><p>在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> github.com/base.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> base</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git-子模块\"><a href=\"#Git-子模块\" class=\"headerlink\" title=\"Git 子模块\"></a><a class=\"link\"   href=\"https://www.cnblogs.com/renjt1991/p/15925259.html\" >Git 子模块<i class=\"fas fa-external-link-alt\"></i></a></h1><p>Git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录，它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>\n<p>示例代码使用的值如下：</p>\n<ul>\n<li>主仓库路径：github.com&#x2F;base.git</li>\n<li>子模块仓库：github.com&#x2F;common.git</li>\n<li>子模块在主仓库路径：src&#x2F;common</li>\n</ul>\n<h3 id=\"子模块操作\"><a href=\"#子模块操作\" class=\"headerlink\" title=\"子模块操作\"></a>子模块操作</h3><h4 id=\"添加子模块\"><a href=\"#添加子模块\" class=\"headerlink\" title=\"添加子模块\"></a>添加子模块</h4><p>在主仓库执行 <code>git submoudle add &lt;url&gt; &lt;repo_name&gt;</code>，执行后会在主仓库下创建一个 <code>repo_name</code> 目录存放子项目；并会创建一个 <code>.git</code> 隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submoudle add github.com/common.git src/common</span><br></pre></td></tr></table></figure>\n\n<p>添加子模块后，主仓库会增加一个 <code>.gitmodules</code> 文件，记录子模块信息</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitmodules 文件</span></span><br><span class=\"line\"><span class=\"attr\">[submodule</span> <span class=\"string\">&quot;src/common&quot;]</span></span><br><span class=\"line\">\t<span class=\"attr\">path</span> = <span class=\"string\">src/common</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span> = <span class=\"string\">github.com/common.git</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看子模块\"><a href=\"#查看子模块\" class=\"headerlink\" title=\"查看子模块\"></a>查看子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule</span><br><span class=\"line\"><span class=\"comment\"># 输出：f5dfd8b05f594ca3c914393e7c641e3ff5285373 src/common (remotes/origin/HEAD)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化子模块配置\"><a href=\"#初始化子模块配置\" class=\"headerlink\" title=\"初始化子模块配置\"></a>初始化子模块配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新子模块\"><a href=\"#更新子模块\" class=\"headerlink\" title=\"更新子模块\"></a>更新子模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新全部子模块</span></span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"><span class=\"comment\"># 更新指定子模块</span></span><br><span class=\"line\">git submodule update src/common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归更新子模块</span></span><br><span class=\"line\">git submodule update --init --recursive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新子模块到服务器最新版本</span></span><br><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交子模块代码\"><a href=\"#提交子模块代码\" class=\"headerlink\" title=\"提交子模块代码\"></a>提交子模块代码</h4><p>子模块的默认分支不是 <strong>master</strong> ，进入目录后需要先切换分支，再修改提交代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> src/common</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除子模块\"><a href=\"#删除子模块\" class=\"headerlink\" title=\"删除子模块\"></a>删除子模块</h4><p>执行命令后，会删除 <code>src/common</code> 文件夹和修改 <code>.gitmodules</code> 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> src/common</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;remove submodule&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>本地子模块相关文件（非必须删除）：</p>\n<ul>\n<li>删除 <code>.git/config</code> 文件中相关配置</li>\n<li>删除 <code>.git/modules/src/common</code> 文件夹</li>\n</ul>\n<h3 id=\"克隆包含子模块的主项目\"><a href=\"#克隆包含子模块的主项目\" class=\"headerlink\" title=\"克隆包含子模块的主项目\"></a>克隆包含子模块的主项目</h3><p>在克隆主项目时，会包含子模块目录，但目录中没有任何文件，此时需要初始化子模块配置，然后再更新子模块，才会获取到对应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> github.com/base.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> base</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>"},{"title":"边缘计算","date":"2022-09-26T11:21:08.000Z","password":"hello","abstract":"这里有东西被加密了，需要输入密码查看哦。","message":"您好，这里需要密码。","wrong_pass_message":"抱歉，这个密码看着不太对，请再试试。","wrong_hash_message":"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。","_content":"# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n \n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n\n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n","source":"_posts/2022/09/边缘计算.md","raw":"---\ntitle: 边缘计算\ndate: 2022-09-26 19:21:08\ntags: [边缘计算]\ncategories: [笔记]\npassword: hello\nabstract: 这里有东西被加密了，需要输入密码查看哦。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n---\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n \n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n# MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\n\n## 摘要\n\n研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求\n传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）\n面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。\n解决方案：开发一种高效建模QoS目标的有远见的优化方案\nMCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化\n结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%\n\n## 介绍\n\n边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。\n\n挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。\n\n### 任务波动性和主机移动性\n\n任务波动性:不断变化的资源需求和服务需求\n主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。\n参考文献，重新调度\n\n> J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.\n> e-Sci. Grid Comput., 2005, pp. 8–147.\n\n为了避免过多的开销，这类方法的客观估计需要非常准确\n\n### 研究现状\n\n进化方案\n强化学习\n启发式算法\n元启发式算法\n\n### 新见解\n\n过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。\n结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。\n为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。\n\n### 相关工作介绍\n\n启发式算法，一些经典作品使用启发式算法来优化工作流调度决策\n目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率\n\n","slug":"边缘计算","published":1,"updated":"2022-09-29T15:28:35.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert20018dk8f1nro9v3z","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，这个密码看着不太对，请再试试。\" data-whm=\"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e7dba1a73c0f45cbf1140db8890dcf51630bc9656b4a585f94c46879c8c96e9b\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好，这里需要密码。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"这里有东西被加密了，需要输入密码查看哦。","more":"这里有东西被加密了，需要输入密码查看哦。","origin":"<h1 id=\"MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems\"><a href=\"#MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems\" class=\"headerlink\" title=\"MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\"></a>MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求<br>传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）<br>面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。<br>解决方案：开发一种高效建模QoS目标的有远见的优化方案<br>MCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化<br>结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。</p>\n<p>挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。</p>\n<h3 id=\"任务波动性和主机移动性\"><a href=\"#任务波动性和主机移动性\" class=\"headerlink\" title=\"任务波动性和主机移动性\"></a>任务波动性和主机移动性</h3><p>任务波动性:不断变化的资源需求和服务需求<br>主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。<br>参考文献，重新调度</p>\n<blockquote>\n<p>J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.<br>e-Sci. Grid Comput., 2005, pp. 8–147.</p>\n</blockquote>\n<p>为了避免过多的开销，这类方法的客观估计需要非常准确</p>\n<h3 id=\"研究现状\"><a href=\"#研究现状\" class=\"headerlink\" title=\"研究现状\"></a>研究现状</h3><p>进化方案<br>强化学习<br>启发式算法<br>元启发式算法</p>\n<h3 id=\"新见解\"><a href=\"#新见解\" class=\"headerlink\" title=\"新见解\"></a>新见解</h3><p>过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。<br>结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。<br>为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。</p>\n<h3 id=\"相关工作介绍\"><a href=\"#相关工作介绍\" class=\"headerlink\" title=\"相关工作介绍\"></a>相关工作介绍</h3><p>启发式算法，一些经典作品使用启发式算法来优化工作流调度决策<br>目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率</p>\n<h1 id=\"MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems-1\"><a href=\"#MCDS-AI-Augmented-Workflow-Scheduling-in-Mobile-Edge-Cloud-Computing-Systems-1\" class=\"headerlink\" title=\"MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems\"></a>MCDS: AI Augmented Workflow Scheduling in Mobile Edge Cloud Computing Systems</h1><h2 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>研究：工作流调度\t目的：有效利用计算资源满足用户的业务需求<br>传统调度方法：利用边缘计算平台的低响应时间来优化应用服务质量（QoS）<br>面临问题：计算的异构性、移动设备不断变化的延迟和工作负载资源需求的不稳定性，在移动边缘云系统中调度工作流应用程序具有挑战性。<br>解决方案：开发一种高效建模QoS目标的有远见的优化方案<br>MCDS：一种基于人工智能的调度算法，基于树的搜索策略和基于深度神经网络的代理模型来估计即时操作对QoS的长期影响，以实现调度决策的健壮优化<br>结果：在物理和模拟边缘云测试平台上的实验表明，MCDS在能耗，响应时间，SLA violations和成本方面分别提高了6.13%，4.56%，45.09%和30.71%</p>\n<h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>边缘云计算，也称为雾计算，是云和边缘设备的合并，旨在通过利用网络边缘的节点，只在云中执行计算密集型处理，为用户带来低延迟服务。现代计算提供了一系列新的计算异构工作流，包括在边缘收集数据和在云后端处理数据。这类工作流最近已被应用于边缘云环境等混合计算平台，以节省成本。工作流调度问题旨在有效地将任务映射到可用资源上，以优化服务质量(QoS)指标。</p>\n<p>挑战：工作流面临的挑战是处理异构和非平稳的用户需求，由于边缘节点和云节点具有不同的计算能力，网络带宽和延迟，工作流调度程序需要意识到资源的异质性，以便做出最优决策。超低时延，电池能耗，DAG依赖不一致。</p>\n<h3 id=\"任务波动性和主机移动性-1\"><a href=\"#任务波动性和主机移动性-1\" class=\"headerlink\" title=\"任务波动性和主机移动性\"></a>任务波动性和主机移动性</h3><p>任务波动性:不断变化的资源需求和服务需求<br>主机移动性：主机移动导致非平稳延迟，移动计算设备增加，网络特征如延迟和带宽变的不稳定。解决:实时监控和更新调度策略。<br>参考文献，重新调度</p>\n<blockquote>\n<p>J. Yu, R. Buyya, and C. K. Tham, “Cost-based scheduling of scientific workflow applications on utility grids,” in Proc. 1st Int. Conf.<br>e-Sci. Grid Comput., 2005, pp. 8–147.</p>\n</blockquote>\n<p>为了避免过多的开销，这类方法的客观估计需要非常准确</p>\n<h3 id=\"研究现状-1\"><a href=\"#研究现状-1\" class=\"headerlink\" title=\"研究现状\"></a>研究现状</h3><p>进化方案<br>强化学习<br>启发式算法<br>元启发式算法</p>\n<h3 id=\"新见解-1\"><a href=\"#新见解-1\" class=\"headerlink\" title=\"新见解\"></a>新见解</h3><p>过去使用神经网络逼近优化目标，充当QoS近似值，由于调度决策需要在接近实时的情况下进行，先前的工作没有使用这种前瞻性方案，因此执行的是短视优化。<br>结合蒙特卡罗学习和深度代理模型来进行QoS最优工作流调度是非常重要的。这是因为普通的蒙特卡洛学习需要在随机调度操作下执行多个多步骤模拟运行，计算成本很高。此外，传统的基于历史数据训练的深度代理模型只提供执行动作后短期的系统状态的QoS评分，而不是长期的QoS。为了解决这些问题，我们不是随机选择要模拟的动作，而是在蒙特卡洛学习框架内训练一个深度代理模型来近似长期QoS分数。<br>为了发现潜在的更好的行动，我们不断探索状态-行动搜索空间。首先，我们使用一个短期优化方案的动作输出。</p>\n<h3 id=\"相关工作介绍-1\"><a href=\"#相关工作介绍-1\" class=\"headerlink\" title=\"相关工作介绍\"></a>相关工作介绍</h3><p>启发式算法，一些经典作品使用启发式算法来优化工作流调度决策<br>目的：优化目标，例如平均响应时间、能源消耗、执行成本、资源利用率或 SLA 违反率</p>\n","encrypt":true},{"title":"云原生入门.md","date":"2022-11-01T03:31:09.000Z","_content":"# 云原生架构总览\n\n## 云计算技术发展\n\nVMware->AWS->Heroku->OpenStack->CloudFoundry->Docker->CloudNative->K8S\n\n### 云原生定义\n\n ![image-20221101092238399](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092238399.png)\n\n![image-20221101092319437](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092319437.png)\n\n![image-20221101092359250](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092359250.png)\n\n### 容器\n\n容器技术：提高应用可移植性，提高业务敏捷\n\n容器可以将应用本身及其依赖打包，使得应用可以实现一次封装，到处运行\n\n容器也可以理解成一种沙盒技术，沙盒在计算机安全领域中是一种安全机制，为运行中的程序提供隔离环境\n\n![image-20221101092838525](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092838525.png)\n\n### Kubernetes的声明式API\n\n面向开发者提供全新分布式原语\n\n![image-20221101092937576](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092937576.png)\n\n###  服务网络\n\n剥离业务代码和分布式框架\n\n### 微服务\n\n加速企业应用架构升级\n\n![image-20221101094011231](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094011231.png)\n\n![image-20221101094315744](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094315744.png)\n\n### DevOps\n\n促进开发运维一体化\n\n![image-20221101094622460](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094622460.png)\n\n![image-20221101094915814](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094915814.png)\n\n## 云原生应用\n\n### 云原生综合理解\n\n![image-20221101095530975](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095530975.png)\n\n![image-20221101095606767](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095606767.png)\n\n### 云原生应用的适用场景\n\n![image-20221101095702176](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095702176.png)\n\n### 传统应用与云原生应用区别\n\n![image-20221101095758345](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095758345.png)\n\n### 如何开发云原生应用\n\n![image-20221101101920055](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101920055.png)\n\n![image-20221101101940998](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101940998.png)\n\n## 云原生架构原则及常用模式\n\n### 云原生架构演进原则\n\n![image-20221101103011244](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103011244.png)\n\n### 单体架构的局限性\n\n![image-20221101103438322](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103438322.png)\n\n### 微服务架构\n\n![image-20221101103721644](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103721644.png)\n\n### sercerless架构\n\n![image-20221101103848852](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103848852.png)\n\n### serverless和微服务\n\n![image-20221101104332149](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104332149.png)\n\n## 华为云原生解决方案\n\n华为云云原生服务，加速企业构建云原生应用\n\n![image-20221101104745201](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104745201.png)\n\n  ### 云原生基础设施\n\n![image-20221101105037598](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105037598.png)\n\n### 多云管理解决方案\n\n![image-20221101105532179](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105532179.png)\n\n![image-20221101110039410](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110039410.png)\n\n### 边云协同\n\n![image-20221101110306683](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110306683.png)\n\n ### 华为云DevSecOps\n\n![image-20221101110615489](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110615489.png)\n\n### 华为运维能力\n\n![image-20221101111025420](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111025420.png)\n\n## 未来趋势\n\nKubernetes编排统一化，编排对象不断扩展延伸\n\n![image-20221101111315159](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111315159.png)","source":"_posts/2022/11/云原生入门-md.md","raw":"---\ntitle: 云原生入门.md\ndate: 2022-11-01 11:31:09\ntags: [云原生,华为云]\ncategories: [笔记]\n---\n# 云原生架构总览\n\n## 云计算技术发展\n\nVMware->AWS->Heroku->OpenStack->CloudFoundry->Docker->CloudNative->K8S\n\n### 云原生定义\n\n ![image-20221101092238399](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092238399.png)\n\n![image-20221101092319437](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092319437.png)\n\n![image-20221101092359250](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092359250.png)\n\n### 容器\n\n容器技术：提高应用可移植性，提高业务敏捷\n\n容器可以将应用本身及其依赖打包，使得应用可以实现一次封装，到处运行\n\n容器也可以理解成一种沙盒技术，沙盒在计算机安全领域中是一种安全机制，为运行中的程序提供隔离环境\n\n![image-20221101092838525](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092838525.png)\n\n### Kubernetes的声明式API\n\n面向开发者提供全新分布式原语\n\n![image-20221101092937576](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092937576.png)\n\n###  服务网络\n\n剥离业务代码和分布式框架\n\n### 微服务\n\n加速企业应用架构升级\n\n![image-20221101094011231](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094011231.png)\n\n![image-20221101094315744](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094315744.png)\n\n### DevOps\n\n促进开发运维一体化\n\n![image-20221101094622460](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094622460.png)\n\n![image-20221101094915814](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094915814.png)\n\n## 云原生应用\n\n### 云原生综合理解\n\n![image-20221101095530975](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095530975.png)\n\n![image-20221101095606767](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095606767.png)\n\n### 云原生应用的适用场景\n\n![image-20221101095702176](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095702176.png)\n\n### 传统应用与云原生应用区别\n\n![image-20221101095758345](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095758345.png)\n\n### 如何开发云原生应用\n\n![image-20221101101920055](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101920055.png)\n\n![image-20221101101940998](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101940998.png)\n\n## 云原生架构原则及常用模式\n\n### 云原生架构演进原则\n\n![image-20221101103011244](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103011244.png)\n\n### 单体架构的局限性\n\n![image-20221101103438322](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103438322.png)\n\n### 微服务架构\n\n![image-20221101103721644](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103721644.png)\n\n### sercerless架构\n\n![image-20221101103848852](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103848852.png)\n\n### serverless和微服务\n\n![image-20221101104332149](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104332149.png)\n\n## 华为云原生解决方案\n\n华为云云原生服务，加速企业构建云原生应用\n\n![image-20221101104745201](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104745201.png)\n\n  ### 云原生基础设施\n\n![image-20221101105037598](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105037598.png)\n\n### 多云管理解决方案\n\n![image-20221101105532179](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105532179.png)\n\n![image-20221101110039410](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110039410.png)\n\n### 边云协同\n\n![image-20221101110306683](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110306683.png)\n\n ### 华为云DevSecOps\n\n![image-20221101110615489](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110615489.png)\n\n### 华为运维能力\n\n![image-20221101111025420](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111025420.png)\n\n## 未来趋势\n\nKubernetes编排统一化，编排对象不断扩展延伸\n\n![image-20221101111315159](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111315159.png)","slug":"云原生入门-md","published":1,"updated":"2022-11-05T14:16:59.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert3001bdk8f1rqs5rmc","content":"<h1 id=\"云原生架构总览\"><a href=\"#云原生架构总览\" class=\"headerlink\" title=\"云原生架构总览\"></a>云原生架构总览</h1><h2 id=\"云计算技术发展\"><a href=\"#云计算技术发展\" class=\"headerlink\" title=\"云计算技术发展\"></a>云计算技术发展</h2><p>VMware-&gt;AWS-&gt;Heroku-&gt;OpenStack-&gt;CloudFoundry-&gt;Docker-&gt;CloudNative-&gt;K8S</p>\n<h3 id=\"云原生定义\"><a href=\"#云原生定义\" class=\"headerlink\" title=\"云原生定义\"></a>云原生定义</h3><p> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092238399.png\"\n                      alt=\"image-20221101092238399\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092319437.png\"\n                      alt=\"image-20221101092319437\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092359250.png\"\n                      alt=\"image-20221101092359250\"\n                ></p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>容器技术：提高应用可移植性，提高业务敏捷</p>\n<p>容器可以将应用本身及其依赖打包，使得应用可以实现一次封装，到处运行</p>\n<p>容器也可以理解成一种沙盒技术，沙盒在计算机安全领域中是一种安全机制，为运行中的程序提供隔离环境</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092838525.png\"\n                      alt=\"image-20221101092838525\"\n                ></p>\n<h3 id=\"Kubernetes的声明式API\"><a href=\"#Kubernetes的声明式API\" class=\"headerlink\" title=\"Kubernetes的声明式API\"></a>Kubernetes的声明式API</h3><p>面向开发者提供全新分布式原语</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092937576.png\"\n                      alt=\"image-20221101092937576\"\n                ></p>\n<h3 id=\"服务网络\"><a href=\"#服务网络\" class=\"headerlink\" title=\"服务网络\"></a>服务网络</h3><p>剥离业务代码和分布式框架</p>\n<h3 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h3><p>加速企业应用架构升级</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094011231.png\"\n                      alt=\"image-20221101094011231\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094315744.png\"\n                      alt=\"image-20221101094315744\"\n                ></p>\n<h3 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h3><p>促进开发运维一体化</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094622460.png\"\n                      alt=\"image-20221101094622460\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094915814.png\"\n                      alt=\"image-20221101094915814\"\n                ></p>\n<h2 id=\"云原生应用\"><a href=\"#云原生应用\" class=\"headerlink\" title=\"云原生应用\"></a>云原生应用</h2><h3 id=\"云原生综合理解\"><a href=\"#云原生综合理解\" class=\"headerlink\" title=\"云原生综合理解\"></a>云原生综合理解</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095530975.png\"\n                      alt=\"image-20221101095530975\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095606767.png\"\n                      alt=\"image-20221101095606767\"\n                ></p>\n<h3 id=\"云原生应用的适用场景\"><a href=\"#云原生应用的适用场景\" class=\"headerlink\" title=\"云原生应用的适用场景\"></a>云原生应用的适用场景</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095702176.png\"\n                      alt=\"image-20221101095702176\"\n                ></p>\n<h3 id=\"传统应用与云原生应用区别\"><a href=\"#传统应用与云原生应用区别\" class=\"headerlink\" title=\"传统应用与云原生应用区别\"></a>传统应用与云原生应用区别</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095758345.png\"\n                      alt=\"image-20221101095758345\"\n                ></p>\n<h3 id=\"如何开发云原生应用\"><a href=\"#如何开发云原生应用\" class=\"headerlink\" title=\"如何开发云原生应用\"></a>如何开发云原生应用</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101920055.png\"\n                      alt=\"image-20221101101920055\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101940998.png\"\n                      alt=\"image-20221101101940998\"\n                ></p>\n<h2 id=\"云原生架构原则及常用模式\"><a href=\"#云原生架构原则及常用模式\" class=\"headerlink\" title=\"云原生架构原则及常用模式\"></a>云原生架构原则及常用模式</h2><h3 id=\"云原生架构演进原则\"><a href=\"#云原生架构演进原则\" class=\"headerlink\" title=\"云原生架构演进原则\"></a>云原生架构演进原则</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103011244.png\"\n                      alt=\"image-20221101103011244\"\n                ></p>\n<h3 id=\"单体架构的局限性\"><a href=\"#单体架构的局限性\" class=\"headerlink\" title=\"单体架构的局限性\"></a>单体架构的局限性</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103438322.png\"\n                      alt=\"image-20221101103438322\"\n                ></p>\n<h3 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103721644.png\"\n                      alt=\"image-20221101103721644\"\n                ></p>\n<h3 id=\"sercerless架构\"><a href=\"#sercerless架构\" class=\"headerlink\" title=\"sercerless架构\"></a>sercerless架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103848852.png\"\n                      alt=\"image-20221101103848852\"\n                ></p>\n<h3 id=\"serverless和微服务\"><a href=\"#serverless和微服务\" class=\"headerlink\" title=\"serverless和微服务\"></a>serverless和微服务</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104332149.png\"\n                      alt=\"image-20221101104332149\"\n                ></p>\n<h2 id=\"华为云原生解决方案\"><a href=\"#华为云原生解决方案\" class=\"headerlink\" title=\"华为云原生解决方案\"></a>华为云原生解决方案</h2><p>华为云云原生服务，加速企业构建云原生应用</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104745201.png\"\n                      alt=\"image-20221101104745201\"\n                ></p>\n<h3 id=\"云原生基础设施\"><a href=\"#云原生基础设施\" class=\"headerlink\" title=\"云原生基础设施\"></a>云原生基础设施</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105037598.png\"\n                      alt=\"image-20221101105037598\"\n                ></p>\n<h3 id=\"多云管理解决方案\"><a href=\"#多云管理解决方案\" class=\"headerlink\" title=\"多云管理解决方案\"></a>多云管理解决方案</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105532179.png\"\n                      alt=\"image-20221101105532179\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110039410.png\"\n                      alt=\"image-20221101110039410\"\n                ></p>\n<h3 id=\"边云协同\"><a href=\"#边云协同\" class=\"headerlink\" title=\"边云协同\"></a>边云协同</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110306683.png\"\n                      alt=\"image-20221101110306683\"\n                ></p>\n<h3 id=\"华为云DevSecOps\"><a href=\"#华为云DevSecOps\" class=\"headerlink\" title=\"华为云DevSecOps\"></a>华为云DevSecOps</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110615489.png\"\n                      alt=\"image-20221101110615489\"\n                ></p>\n<h3 id=\"华为运维能力\"><a href=\"#华为运维能力\" class=\"headerlink\" title=\"华为运维能力\"></a>华为运维能力</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111025420.png\"\n                      alt=\"image-20221101111025420\"\n                ></p>\n<h2 id=\"未来趋势\"><a href=\"#未来趋势\" class=\"headerlink\" title=\"未来趋势\"></a>未来趋势</h2><p>Kubernetes编排统一化，编排对象不断扩展延伸</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111315159.png\"\n                      alt=\"image-20221101111315159\"\n                ></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"云原生架构总览\"><a href=\"#云原生架构总览\" class=\"headerlink\" title=\"云原生架构总览\"></a>云原生架构总览</h1><h2 id=\"云计算技术发展\"><a href=\"#云计算技术发展\" class=\"headerlink\" title=\"云计算技术发展\"></a>云计算技术发展</h2><p>VMware-&gt;AWS-&gt;Heroku-&gt;OpenStack-&gt;CloudFoundry-&gt;Docker-&gt;CloudNative-&gt;K8S</p>\n<h3 id=\"云原生定义\"><a href=\"#云原生定义\" class=\"headerlink\" title=\"云原生定义\"></a>云原生定义</h3><p> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092238399.png\"\n                      alt=\"image-20221101092238399\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092319437.png\"\n                      alt=\"image-20221101092319437\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092359250.png\"\n                      alt=\"image-20221101092359250\"\n                ></p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>容器技术：提高应用可移植性，提高业务敏捷</p>\n<p>容器可以将应用本身及其依赖打包，使得应用可以实现一次封装，到处运行</p>\n<p>容器也可以理解成一种沙盒技术，沙盒在计算机安全领域中是一种安全机制，为运行中的程序提供隔离环境</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092838525.png\"\n                      alt=\"image-20221101092838525\"\n                ></p>\n<h3 id=\"Kubernetes的声明式API\"><a href=\"#Kubernetes的声明式API\" class=\"headerlink\" title=\"Kubernetes的声明式API\"></a>Kubernetes的声明式API</h3><p>面向开发者提供全新分布式原语</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101092937576.png\"\n                      alt=\"image-20221101092937576\"\n                ></p>\n<h3 id=\"服务网络\"><a href=\"#服务网络\" class=\"headerlink\" title=\"服务网络\"></a>服务网络</h3><p>剥离业务代码和分布式框架</p>\n<h3 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h3><p>加速企业应用架构升级</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094011231.png\"\n                      alt=\"image-20221101094011231\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094315744.png\"\n                      alt=\"image-20221101094315744\"\n                ></p>\n<h3 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h3><p>促进开发运维一体化</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094622460.png\"\n                      alt=\"image-20221101094622460\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101094915814.png\"\n                      alt=\"image-20221101094915814\"\n                ></p>\n<h2 id=\"云原生应用\"><a href=\"#云原生应用\" class=\"headerlink\" title=\"云原生应用\"></a>云原生应用</h2><h3 id=\"云原生综合理解\"><a href=\"#云原生综合理解\" class=\"headerlink\" title=\"云原生综合理解\"></a>云原生综合理解</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095530975.png\"\n                      alt=\"image-20221101095530975\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095606767.png\"\n                      alt=\"image-20221101095606767\"\n                ></p>\n<h3 id=\"云原生应用的适用场景\"><a href=\"#云原生应用的适用场景\" class=\"headerlink\" title=\"云原生应用的适用场景\"></a>云原生应用的适用场景</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095702176.png\"\n                      alt=\"image-20221101095702176\"\n                ></p>\n<h3 id=\"传统应用与云原生应用区别\"><a href=\"#传统应用与云原生应用区别\" class=\"headerlink\" title=\"传统应用与云原生应用区别\"></a>传统应用与云原生应用区别</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101095758345.png\"\n                      alt=\"image-20221101095758345\"\n                ></p>\n<h3 id=\"如何开发云原生应用\"><a href=\"#如何开发云原生应用\" class=\"headerlink\" title=\"如何开发云原生应用\"></a>如何开发云原生应用</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101920055.png\"\n                      alt=\"image-20221101101920055\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101101940998.png\"\n                      alt=\"image-20221101101940998\"\n                ></p>\n<h2 id=\"云原生架构原则及常用模式\"><a href=\"#云原生架构原则及常用模式\" class=\"headerlink\" title=\"云原生架构原则及常用模式\"></a>云原生架构原则及常用模式</h2><h3 id=\"云原生架构演进原则\"><a href=\"#云原生架构演进原则\" class=\"headerlink\" title=\"云原生架构演进原则\"></a>云原生架构演进原则</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103011244.png\"\n                      alt=\"image-20221101103011244\"\n                ></p>\n<h3 id=\"单体架构的局限性\"><a href=\"#单体架构的局限性\" class=\"headerlink\" title=\"单体架构的局限性\"></a>单体架构的局限性</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103438322.png\"\n                      alt=\"image-20221101103438322\"\n                ></p>\n<h3 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103721644.png\"\n                      alt=\"image-20221101103721644\"\n                ></p>\n<h3 id=\"sercerless架构\"><a href=\"#sercerless架构\" class=\"headerlink\" title=\"sercerless架构\"></a>sercerless架构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101103848852.png\"\n                      alt=\"image-20221101103848852\"\n                ></p>\n<h3 id=\"serverless和微服务\"><a href=\"#serverless和微服务\" class=\"headerlink\" title=\"serverless和微服务\"></a>serverless和微服务</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104332149.png\"\n                      alt=\"image-20221101104332149\"\n                ></p>\n<h2 id=\"华为云原生解决方案\"><a href=\"#华为云原生解决方案\" class=\"headerlink\" title=\"华为云原生解决方案\"></a>华为云原生解决方案</h2><p>华为云云原生服务，加速企业构建云原生应用</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101104745201.png\"\n                      alt=\"image-20221101104745201\"\n                ></p>\n<h3 id=\"云原生基础设施\"><a href=\"#云原生基础设施\" class=\"headerlink\" title=\"云原生基础设施\"></a>云原生基础设施</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105037598.png\"\n                      alt=\"image-20221101105037598\"\n                ></p>\n<h3 id=\"多云管理解决方案\"><a href=\"#多云管理解决方案\" class=\"headerlink\" title=\"多云管理解决方案\"></a>多云管理解决方案</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101105532179.png\"\n                      alt=\"image-20221101105532179\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110039410.png\"\n                      alt=\"image-20221101110039410\"\n                ></p>\n<h3 id=\"边云协同\"><a href=\"#边云协同\" class=\"headerlink\" title=\"边云协同\"></a>边云协同</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110306683.png\"\n                      alt=\"image-20221101110306683\"\n                ></p>\n<h3 id=\"华为云DevSecOps\"><a href=\"#华为云DevSecOps\" class=\"headerlink\" title=\"华为云DevSecOps\"></a>华为云DevSecOps</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101110615489.png\"\n                      alt=\"image-20221101110615489\"\n                ></p>\n<h3 id=\"华为运维能力\"><a href=\"#华为运维能力\" class=\"headerlink\" title=\"华为运维能力\"></a>华为运维能力</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111025420.png\"\n                      alt=\"image-20221101111025420\"\n                ></p>\n<h2 id=\"未来趋势\"><a href=\"#未来趋势\" class=\"headerlink\" title=\"未来趋势\"></a>未来趋势</h2><p>Kubernetes编排统一化，编排对象不断扩展延伸</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221101111315159.png\"\n                      alt=\"image-20221101111315159\"\n                ></p>\n"},{"title":"在Docker中部署ROS","date":"2022-11-09T14:01:43.000Z","_content":"\n\n——提高开发环境鲁棒性\n\n# 安装之前\n\n## Docker容器会占用多大存储空间\n\nDocker通过images创造container，在container中部署和开发应用。\n\nROS官方已经提供了支持Docker的ros images，镜像已经配置好了ros的开发环境。通过命令docker pull osrf/ros：melodic-desktop-full拉取镜像，如果是包含ros-core的镜像，大概是400M，如果包含rviz，gazebo等全套的destktop-full版本，大概是5G左右，占据的空间还是很可观的。\n\n查看容器与镜像大小\n\n>  docker system df -v\n\n![image-20221109153440000](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109153440000.png)\n\n## 查看docker里面可视化界面\n\n宿主机开启xhost, 使能宿主机接收其他客户端的显示需求\n `xhost +`\n\ndocker创建容器时参数设置xserver挂载地址即可\n `-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix`\n\n## docker里面的程序如何与主机的程序通讯\n\n采用socket通信\n\ndocker创建容器时，默认分配了bridge网络，这样所有的容器都在同一个网段，是能够相互通信的。\n\n如果想某些容器之间不能通信，通过自定义网络就能实现。\n\n假如宿主机是linux系统，有一个监听8000端口的其他进程\n\n在宿主机上执行ifconfig命令，可以发现有一个docker0网卡，注意观察其网段和docker network inspect bridge的网段是一致的，宿主机在此网段下也分配了一个ip，一般是网段中的第一个ip，假如是192.168.10.1。\n\n1）假如用默认的bridge模式启动容器，即在启动时不指定network参数或者指定了--network bridge，\n\n在容器中执行ifconfig命令，可以发现容器的ip也在上面的网段中，假如是192.168.10.2。\n\n在容器中，ping 192.168.10.1，可以ping通。在宿主机中ping 192.168.10.2，可以ping通。\n\n在容器中，可以用192.168.10.1:port的方式访问宿主机的服务。\n\n网络中的其它主机能否ping通这些容器？\n roscore在容器中启动后，宿主机能否启动？可以，这相当于是两台不同的机器，如果共享一个roscore，需要设置两个的bashrc，ros_master_url参数。\n\n2）假如容器用host网络模式启动，即在启动时添加了--netwok host参数，\n\n那么容器会和宿主机共享网络，直接telnet 127.0.0.1 8000可以telnet通信。\n\n# docker可视化\n\ndocker中开启GUI原理：\n xhost 是用来控制X server访问权限的。通常当你从hostA登陆到hostB上运行hostB上的应用程序时，做为应用程序来说，hostA是client,但是作为图形来说，**是在hostA上显示的，需要使用hostA的Xserver**,所以hostA是server。因此在登陆到hostB前，需要在hostA上运行xhost +来使其它用户能够访问hostA的Xserver.\n\n**总结：docker中显示client通过映射将对Xserver的请求透传到主机端DISPALY，DISPLAY对应主机端的显示接口，主机端也使能接收，完成显示。**\n\nxhost + **是使所有用户都能访问Xserver.**\n xhost + ip使ip上的用户能够访问Xserver.\n xhost + nis:user@domain使domain上的nis用户user能够访问\n xhost + inet:user@domain使domain上的inet用户能够访问。\n\n## 运行xserver\n\n终端输入\n`xhost +`\n\n- 若成功启动，则跳到第4.2继续执行。\n- 若显示`xhost: unable to open display`，则说明没有安装vncserver。\n\n## 安装vncserver\n\n进入root，确认下vncserver确实没装（我也不明白为什么要进入root，但是照做就行）\n `su root`\n `vncsever`\n 若提示`bash: vncserver: command not found`则需要安装vnc。\n\n退出root（或者重新开一个终端），安装vnc\n `sudo apt-get install tigervnc-standalone-server tigervnc-viewer`\n 上面命令是我测试没问题的，网上还有其它安装的包\n\n**如果上面的命令能安装好vnc，就不用下面这些了\n `sudo apt-get install x11-xserver-utils`\n 上面这个包系统已经默认装好了，但是仍然不能执行`xhost +`\n\n`sudo apt install xfce4 xfce4-goodies`\n `sudo apt install tightvncserver`\n 上面这个包没有测试过，感觉似乎可以。\n\n`sudo apt-get install tigervnc-server`\n 上面这个包没有测试过，感觉似乎也可以。\n\n如果vncserver报错，查看日志文件，并逐个解决\n\n安装完后就是配置VNC，感觉这个设置挺复杂的，采用了网上最简单的操作方式\n\n 安装好vnc后，进入root启动vnc\n `su root`\n `vncserver`\n 第一次运行会让你输入很多密码，输入就行，一路yes～\n\n启动容器，测试gazebo和rviz，都可以正常打开\n\n# 多ros容器通信\n\n## 第一个终端——roscore：\n\n①docker命令新建一个容器（带GUI环境变量）\n\n```bash\ndocker run -it \\\n    --env=\"DISPLAY\" \\\n    --env=\"QT_X11_NO_MITSHM=1\" \\\n    --volume=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\\n    osrf/ros:kinetic-desktop-full \\\n    /bin/bash\n```\n\n命令解释\n --env=\"DISPLAY\" ：开启显示GUI界面\n --env=\"QT_X11_NO_MITSHM=1\" ：采用X11的端口1进行显示\n --volume=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" ：映射显示服务节点目录\n osrf/ros:kinetic-desktop-full：容器从镜像osrf/ros:kinetic-desktop-full创建\n /bin/bash：运行命令bash\n\n②创建完容器后，命令行自动进入了docker，接着运行roscore\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.1`\n\n`source /opt/ros/kinetic/setup.bash`\n`roscore`\n\n## 第二个终端——turtlesim_node\n\n①先查看之前新建的容器名称\n `docker ps --all`\n ②进入容器中\n `docker exec -it <container_name> /bin/bash`\n ③运行turtlesim_node\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.2`\n\n `source /opt/ros/kinetic/setup.bash`\n `rosrun turtlesim turtlesim_node`\n\n![image-20221109220609929](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220609929.png)\n\n## 第三个终端——键盘控制：\n\n ①进入同一个容器中\n `docker exec -it <container_name> /bin/bash`\n `source /opt/ros/kinetic/setup.bash`\n ②运行遥控键盘\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.3`\n\n`rosrun turtlesim turtle_teleop_key`\n 此时即可控制小海龟运动\n\n![image-20221109220621036](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220621036.png)\n\n\n\n","source":"_posts/2022/11/在Docker中部署ROS.md","raw":"---\ntitle: 在Docker中部署ROS\ndate: 2022-11-09 22:01:43\ntags: [Docker, ros]\ncategories: [笔记]\n---\n\n\n——提高开发环境鲁棒性\n\n# 安装之前\n\n## Docker容器会占用多大存储空间\n\nDocker通过images创造container，在container中部署和开发应用。\n\nROS官方已经提供了支持Docker的ros images，镜像已经配置好了ros的开发环境。通过命令docker pull osrf/ros：melodic-desktop-full拉取镜像，如果是包含ros-core的镜像，大概是400M，如果包含rviz，gazebo等全套的destktop-full版本，大概是5G左右，占据的空间还是很可观的。\n\n查看容器与镜像大小\n\n>  docker system df -v\n\n![image-20221109153440000](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109153440000.png)\n\n## 查看docker里面可视化界面\n\n宿主机开启xhost, 使能宿主机接收其他客户端的显示需求\n `xhost +`\n\ndocker创建容器时参数设置xserver挂载地址即可\n `-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix`\n\n## docker里面的程序如何与主机的程序通讯\n\n采用socket通信\n\ndocker创建容器时，默认分配了bridge网络，这样所有的容器都在同一个网段，是能够相互通信的。\n\n如果想某些容器之间不能通信，通过自定义网络就能实现。\n\n假如宿主机是linux系统，有一个监听8000端口的其他进程\n\n在宿主机上执行ifconfig命令，可以发现有一个docker0网卡，注意观察其网段和docker network inspect bridge的网段是一致的，宿主机在此网段下也分配了一个ip，一般是网段中的第一个ip，假如是192.168.10.1。\n\n1）假如用默认的bridge模式启动容器，即在启动时不指定network参数或者指定了--network bridge，\n\n在容器中执行ifconfig命令，可以发现容器的ip也在上面的网段中，假如是192.168.10.2。\n\n在容器中，ping 192.168.10.1，可以ping通。在宿主机中ping 192.168.10.2，可以ping通。\n\n在容器中，可以用192.168.10.1:port的方式访问宿主机的服务。\n\n网络中的其它主机能否ping通这些容器？\n roscore在容器中启动后，宿主机能否启动？可以，这相当于是两台不同的机器，如果共享一个roscore，需要设置两个的bashrc，ros_master_url参数。\n\n2）假如容器用host网络模式启动，即在启动时添加了--netwok host参数，\n\n那么容器会和宿主机共享网络，直接telnet 127.0.0.1 8000可以telnet通信。\n\n# docker可视化\n\ndocker中开启GUI原理：\n xhost 是用来控制X server访问权限的。通常当你从hostA登陆到hostB上运行hostB上的应用程序时，做为应用程序来说，hostA是client,但是作为图形来说，**是在hostA上显示的，需要使用hostA的Xserver**,所以hostA是server。因此在登陆到hostB前，需要在hostA上运行xhost +来使其它用户能够访问hostA的Xserver.\n\n**总结：docker中显示client通过映射将对Xserver的请求透传到主机端DISPALY，DISPLAY对应主机端的显示接口，主机端也使能接收，完成显示。**\n\nxhost + **是使所有用户都能访问Xserver.**\n xhost + ip使ip上的用户能够访问Xserver.\n xhost + nis:user@domain使domain上的nis用户user能够访问\n xhost + inet:user@domain使domain上的inet用户能够访问。\n\n## 运行xserver\n\n终端输入\n`xhost +`\n\n- 若成功启动，则跳到第4.2继续执行。\n- 若显示`xhost: unable to open display`，则说明没有安装vncserver。\n\n## 安装vncserver\n\n进入root，确认下vncserver确实没装（我也不明白为什么要进入root，但是照做就行）\n `su root`\n `vncsever`\n 若提示`bash: vncserver: command not found`则需要安装vnc。\n\n退出root（或者重新开一个终端），安装vnc\n `sudo apt-get install tigervnc-standalone-server tigervnc-viewer`\n 上面命令是我测试没问题的，网上还有其它安装的包\n\n**如果上面的命令能安装好vnc，就不用下面这些了\n `sudo apt-get install x11-xserver-utils`\n 上面这个包系统已经默认装好了，但是仍然不能执行`xhost +`\n\n`sudo apt install xfce4 xfce4-goodies`\n `sudo apt install tightvncserver`\n 上面这个包没有测试过，感觉似乎可以。\n\n`sudo apt-get install tigervnc-server`\n 上面这个包没有测试过，感觉似乎也可以。\n\n如果vncserver报错，查看日志文件，并逐个解决\n\n安装完后就是配置VNC，感觉这个设置挺复杂的，采用了网上最简单的操作方式\n\n 安装好vnc后，进入root启动vnc\n `su root`\n `vncserver`\n 第一次运行会让你输入很多密码，输入就行，一路yes～\n\n启动容器，测试gazebo和rviz，都可以正常打开\n\n# 多ros容器通信\n\n## 第一个终端——roscore：\n\n①docker命令新建一个容器（带GUI环境变量）\n\n```bash\ndocker run -it \\\n    --env=\"DISPLAY\" \\\n    --env=\"QT_X11_NO_MITSHM=1\" \\\n    --volume=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\\n    osrf/ros:kinetic-desktop-full \\\n    /bin/bash\n```\n\n命令解释\n --env=\"DISPLAY\" ：开启显示GUI界面\n --env=\"QT_X11_NO_MITSHM=1\" ：采用X11的端口1进行显示\n --volume=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" ：映射显示服务节点目录\n osrf/ros:kinetic-desktop-full：容器从镜像osrf/ros:kinetic-desktop-full创建\n /bin/bash：运行命令bash\n\n②创建完容器后，命令行自动进入了docker，接着运行roscore\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.1`\n\n`source /opt/ros/kinetic/setup.bash`\n`roscore`\n\n## 第二个终端——turtlesim_node\n\n①先查看之前新建的容器名称\n `docker ps --all`\n ②进入容器中\n `docker exec -it <container_name> /bin/bash`\n ③运行turtlesim_node\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.2`\n\n `source /opt/ros/kinetic/setup.bash`\n `rosrun turtlesim turtlesim_node`\n\n![image-20221109220609929](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220609929.png)\n\n## 第三个终端——键盘控制：\n\n ①进入同一个容器中\n `docker exec -it <container_name> /bin/bash`\n `source /opt/ros/kinetic/setup.bash`\n ②运行遥控键盘\n\n`export ROS_MASTER_URI=http://172.17.0.1:11311`\n\n`export ROS_IP=172.17.0.3`\n\n`rosrun turtlesim turtle_teleop_key`\n 此时即可控制小海龟运动\n\n![image-20221109220621036](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220621036.png)\n\n\n\n","slug":"在Docker中部署ROS","published":1,"updated":"2022-11-14T14:29:36.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert4001fdk8f4ys751g5","content":"<p>——提高开发环境鲁棒性</p>\n<h1 id=\"安装之前\"><a href=\"#安装之前\" class=\"headerlink\" title=\"安装之前\"></a>安装之前</h1><h2 id=\"Docker容器会占用多大存储空间\"><a href=\"#Docker容器会占用多大存储空间\" class=\"headerlink\" title=\"Docker容器会占用多大存储空间\"></a>Docker容器会占用多大存储空间</h2><p>Docker通过images创造container，在container中部署和开发应用。</p>\n<p>ROS官方已经提供了支持Docker的ros images，镜像已经配置好了ros的开发环境。通过命令docker pull osrf&#x2F;ros：melodic-desktop-full拉取镜像，如果是包含ros-core的镜像，大概是400M，如果包含rviz，gazebo等全套的destktop-full版本，大概是5G左右，占据的空间还是很可观的。</p>\n<p>查看容器与镜像大小</p>\n<blockquote>\n<p> docker system df -v</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109153440000.png\"\n                      alt=\"image-20221109153440000\"\n                ></p>\n<h2 id=\"查看docker里面可视化界面\"><a href=\"#查看docker里面可视化界面\" class=\"headerlink\" title=\"查看docker里面可视化界面\"></a>查看docker里面可视化界面</h2><p>宿主机开启xhost, 使能宿主机接收其他客户端的显示需求<br> <code>xhost +</code></p>\n<p>docker创建容器时参数设置xserver挂载地址即可<br> <code>-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix</code></p>\n<h2 id=\"docker里面的程序如何与主机的程序通讯\"><a href=\"#docker里面的程序如何与主机的程序通讯\" class=\"headerlink\" title=\"docker里面的程序如何与主机的程序通讯\"></a>docker里面的程序如何与主机的程序通讯</h2><p>采用socket通信</p>\n<p>docker创建容器时，默认分配了bridge网络，这样所有的容器都在同一个网段，是能够相互通信的。</p>\n<p>如果想某些容器之间不能通信，通过自定义网络就能实现。</p>\n<p>假如宿主机是linux系统，有一个监听8000端口的其他进程</p>\n<p>在宿主机上执行ifconfig命令，可以发现有一个docker0网卡，注意观察其网段和docker network inspect bridge的网段是一致的，宿主机在此网段下也分配了一个ip，一般是网段中的第一个ip，假如是192.168.10.1。</p>\n<p>1）假如用默认的bridge模式启动容器，即在启动时不指定network参数或者指定了–network bridge，</p>\n<p>在容器中执行ifconfig命令，可以发现容器的ip也在上面的网段中，假如是192.168.10.2。</p>\n<p>在容器中，ping 192.168.10.1，可以ping通。在宿主机中ping 192.168.10.2，可以ping通。</p>\n<p>在容器中，可以用192.168.10.1:port的方式访问宿主机的服务。</p>\n<p>网络中的其它主机能否ping通这些容器？<br> roscore在容器中启动后，宿主机能否启动？可以，这相当于是两台不同的机器，如果共享一个roscore，需要设置两个的bashrc，ros_master_url参数。</p>\n<p>2）假如容器用host网络模式启动，即在启动时添加了–netwok host参数，</p>\n<p>那么容器会和宿主机共享网络，直接telnet 127.0.0.1 8000可以telnet通信。</p>\n<h1 id=\"docker可视化\"><a href=\"#docker可视化\" class=\"headerlink\" title=\"docker可视化\"></a>docker可视化</h1><p>docker中开启GUI原理：<br> xhost 是用来控制X server访问权限的。通常当你从hostA登陆到hostB上运行hostB上的应用程序时，做为应用程序来说，hostA是client,但是作为图形来说，<strong>是在hostA上显示的，需要使用hostA的Xserver</strong>,所以hostA是server。因此在登陆到hostB前，需要在hostA上运行xhost +来使其它用户能够访问hostA的Xserver.</p>\n<p><strong>总结：docker中显示client通过映射将对Xserver的请求透传到主机端DISPALY，DISPLAY对应主机端的显示接口，主机端也使能接收，完成显示。</strong></p>\n<p>xhost + <strong>是使所有用户都能访问Xserver.</strong><br> xhost + ip使ip上的用户能够访问Xserver.<br> xhost + nis:user@domain使domain上的nis用户user能够访问<br> xhost + inet:user@domain使domain上的inet用户能够访问。</p>\n<h2 id=\"运行xserver\"><a href=\"#运行xserver\" class=\"headerlink\" title=\"运行xserver\"></a>运行xserver</h2><p>终端输入<br><code>xhost +</code></p>\n<ul>\n<li>若成功启动，则跳到第4.2继续执行。</li>\n<li>若显示<code>xhost: unable to open display</code>，则说明没有安装vncserver。</li>\n</ul>\n<h2 id=\"安装vncserver\"><a href=\"#安装vncserver\" class=\"headerlink\" title=\"安装vncserver\"></a>安装vncserver</h2><p>进入root，确认下vncserver确实没装（我也不明白为什么要进入root，但是照做就行）<br> <code>su root</code><br> <code>vncsever</code><br> 若提示<code>bash: vncserver: command not found</code>则需要安装vnc。</p>\n<p>退出root（或者重新开一个终端），安装vnc<br> <code>sudo apt-get install tigervnc-standalone-server tigervnc-viewer</code><br> 上面命令是我测试没问题的，网上还有其它安装的包</p>\n<p>**如果上面的命令能安装好vnc，就不用下面这些了<br> <code>sudo apt-get install x11-xserver-utils</code><br> 上面这个包系统已经默认装好了，但是仍然不能执行<code>xhost +</code></p>\n<p><code>sudo apt install xfce4 xfce4-goodies</code><br> <code>sudo apt install tightvncserver</code><br> 上面这个包没有测试过，感觉似乎可以。</p>\n<p><code>sudo apt-get install tigervnc-server</code><br> 上面这个包没有测试过，感觉似乎也可以。</p>\n<p>如果vncserver报错，查看日志文件，并逐个解决</p>\n<p>安装完后就是配置VNC，感觉这个设置挺复杂的，采用了网上最简单的操作方式</p>\n<p> 安装好vnc后，进入root启动vnc<br> <code>su root</code><br> <code>vncserver</code><br> 第一次运行会让你输入很多密码，输入就行，一路yes～</p>\n<p>启动容器，测试gazebo和rviz，都可以正常打开</p>\n<h1 id=\"多ros容器通信\"><a href=\"#多ros容器通信\" class=\"headerlink\" title=\"多ros容器通信\"></a>多ros容器通信</h1><h2 id=\"第一个终端——roscore：\"><a href=\"#第一个终端——roscore：\" class=\"headerlink\" title=\"第一个终端——roscore：\"></a>第一个终端——roscore：</h2><p>①docker命令新建一个容器（带GUI环境变量）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span>=<span class=\"string\">&quot;DISPLAY&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span>=<span class=\"string\">&quot;QT_X11_NO_MITSHM=1&quot;</span> \\</span><br><span class=\"line\">    --volume=<span class=\"string\">&quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&quot;</span> \\</span><br><span class=\"line\">    osrf/ros:kinetic-desktop-full \\</span><br><span class=\"line\">    /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>命令解释<br> –env&#x3D;”DISPLAY” ：开启显示GUI界面<br> –env&#x3D;”QT_X11_NO_MITSHM&#x3D;1” ：采用X11的端口1进行显示<br> –volume&#x3D;”&#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix:rw” ：映射显示服务节点目录<br> osrf&#x2F;ros:kinetic-desktop-full：容器从镜像osrf&#x2F;ros:kinetic-desktop-full创建<br> &#x2F;bin&#x2F;bash：运行命令bash</p>\n<p>②创建完容器后，命令行自动进入了docker，接着运行roscore</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.1</code></p>\n<p><code>source /opt/ros/kinetic/setup.bash</code><br><code>roscore</code></p>\n<h2 id=\"第二个终端——turtlesim-node\"><a href=\"#第二个终端——turtlesim-node\" class=\"headerlink\" title=\"第二个终端——turtlesim_node\"></a>第二个终端——turtlesim_node</h2><p>①先查看之前新建的容器名称<br> <code>docker ps --all</code><br> ②进入容器中<br> <code>docker exec -it &lt;container_name&gt; /bin/bash</code><br> ③运行turtlesim_node</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.2</code></p>\n<p> <code>source /opt/ros/kinetic/setup.bash</code><br> <code>rosrun turtlesim turtlesim_node</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220609929.png\"\n                      alt=\"image-20221109220609929\"\n                ></p>\n<h2 id=\"第三个终端——键盘控制：\"><a href=\"#第三个终端——键盘控制：\" class=\"headerlink\" title=\"第三个终端——键盘控制：\"></a>第三个终端——键盘控制：</h2><p> ①进入同一个容器中<br> <code>docker exec -it &lt;container_name&gt; /bin/bash</code><br> <code>source /opt/ros/kinetic/setup.bash</code><br> ②运行遥控键盘</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.3</code></p>\n<p><code>rosrun turtlesim turtle_teleop_key</code><br> 此时即可控制小海龟运动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220621036.png\"\n                      alt=\"image-20221109220621036\"\n                ></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<p>——提高开发环境鲁棒性</p>\n<h1 id=\"安装之前\"><a href=\"#安装之前\" class=\"headerlink\" title=\"安装之前\"></a>安装之前</h1><h2 id=\"Docker容器会占用多大存储空间\"><a href=\"#Docker容器会占用多大存储空间\" class=\"headerlink\" title=\"Docker容器会占用多大存储空间\"></a>Docker容器会占用多大存储空间</h2><p>Docker通过images创造container，在container中部署和开发应用。</p>\n<p>ROS官方已经提供了支持Docker的ros images，镜像已经配置好了ros的开发环境。通过命令docker pull osrf&#x2F;ros：melodic-desktop-full拉取镜像，如果是包含ros-core的镜像，大概是400M，如果包含rviz，gazebo等全套的destktop-full版本，大概是5G左右，占据的空间还是很可观的。</p>\n<p>查看容器与镜像大小</p>\n<blockquote>\n<p> docker system df -v</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109153440000.png\"\n                      alt=\"image-20221109153440000\"\n                ></p>\n<h2 id=\"查看docker里面可视化界面\"><a href=\"#查看docker里面可视化界面\" class=\"headerlink\" title=\"查看docker里面可视化界面\"></a>查看docker里面可视化界面</h2><p>宿主机开启xhost, 使能宿主机接收其他客户端的显示需求<br> <code>xhost +</code></p>\n<p>docker创建容器时参数设置xserver挂载地址即可<br> <code>-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix</code></p>\n<h2 id=\"docker里面的程序如何与主机的程序通讯\"><a href=\"#docker里面的程序如何与主机的程序通讯\" class=\"headerlink\" title=\"docker里面的程序如何与主机的程序通讯\"></a>docker里面的程序如何与主机的程序通讯</h2><p>采用socket通信</p>\n<p>docker创建容器时，默认分配了bridge网络，这样所有的容器都在同一个网段，是能够相互通信的。</p>\n<p>如果想某些容器之间不能通信，通过自定义网络就能实现。</p>\n<p>假如宿主机是linux系统，有一个监听8000端口的其他进程</p>\n<p>在宿主机上执行ifconfig命令，可以发现有一个docker0网卡，注意观察其网段和docker network inspect bridge的网段是一致的，宿主机在此网段下也分配了一个ip，一般是网段中的第一个ip，假如是192.168.10.1。</p>\n<p>1）假如用默认的bridge模式启动容器，即在启动时不指定network参数或者指定了–network bridge，</p>\n<p>在容器中执行ifconfig命令，可以发现容器的ip也在上面的网段中，假如是192.168.10.2。</p>\n<p>在容器中，ping 192.168.10.1，可以ping通。在宿主机中ping 192.168.10.2，可以ping通。</p>\n<p>在容器中，可以用192.168.10.1:port的方式访问宿主机的服务。</p>\n<p>网络中的其它主机能否ping通这些容器？<br> roscore在容器中启动后，宿主机能否启动？可以，这相当于是两台不同的机器，如果共享一个roscore，需要设置两个的bashrc，ros_master_url参数。</p>\n<p>2）假如容器用host网络模式启动，即在启动时添加了–netwok host参数，</p>\n<p>那么容器会和宿主机共享网络，直接telnet 127.0.0.1 8000可以telnet通信。</p>\n<h1 id=\"docker可视化\"><a href=\"#docker可视化\" class=\"headerlink\" title=\"docker可视化\"></a>docker可视化</h1><p>docker中开启GUI原理：<br> xhost 是用来控制X server访问权限的。通常当你从hostA登陆到hostB上运行hostB上的应用程序时，做为应用程序来说，hostA是client,但是作为图形来说，<strong>是在hostA上显示的，需要使用hostA的Xserver</strong>,所以hostA是server。因此在登陆到hostB前，需要在hostA上运行xhost +来使其它用户能够访问hostA的Xserver.</p>\n<p><strong>总结：docker中显示client通过映射将对Xserver的请求透传到主机端DISPALY，DISPLAY对应主机端的显示接口，主机端也使能接收，完成显示。</strong></p>\n<p>xhost + <strong>是使所有用户都能访问Xserver.</strong><br> xhost + ip使ip上的用户能够访问Xserver.<br> xhost + nis:user@domain使domain上的nis用户user能够访问<br> xhost + inet:user@domain使domain上的inet用户能够访问。</p>\n<h2 id=\"运行xserver\"><a href=\"#运行xserver\" class=\"headerlink\" title=\"运行xserver\"></a>运行xserver</h2><p>终端输入<br><code>xhost +</code></p>\n<ul>\n<li>若成功启动，则跳到第4.2继续执行。</li>\n<li>若显示<code>xhost: unable to open display</code>，则说明没有安装vncserver。</li>\n</ul>\n<h2 id=\"安装vncserver\"><a href=\"#安装vncserver\" class=\"headerlink\" title=\"安装vncserver\"></a>安装vncserver</h2><p>进入root，确认下vncserver确实没装（我也不明白为什么要进入root，但是照做就行）<br> <code>su root</code><br> <code>vncsever</code><br> 若提示<code>bash: vncserver: command not found</code>则需要安装vnc。</p>\n<p>退出root（或者重新开一个终端），安装vnc<br> <code>sudo apt-get install tigervnc-standalone-server tigervnc-viewer</code><br> 上面命令是我测试没问题的，网上还有其它安装的包</p>\n<p>**如果上面的命令能安装好vnc，就不用下面这些了<br> <code>sudo apt-get install x11-xserver-utils</code><br> 上面这个包系统已经默认装好了，但是仍然不能执行<code>xhost +</code></p>\n<p><code>sudo apt install xfce4 xfce4-goodies</code><br> <code>sudo apt install tightvncserver</code><br> 上面这个包没有测试过，感觉似乎可以。</p>\n<p><code>sudo apt-get install tigervnc-server</code><br> 上面这个包没有测试过，感觉似乎也可以。</p>\n<p>如果vncserver报错，查看日志文件，并逐个解决</p>\n<p>安装完后就是配置VNC，感觉这个设置挺复杂的，采用了网上最简单的操作方式</p>\n<p> 安装好vnc后，进入root启动vnc<br> <code>su root</code><br> <code>vncserver</code><br> 第一次运行会让你输入很多密码，输入就行，一路yes～</p>\n<p>启动容器，测试gazebo和rviz，都可以正常打开</p>\n<h1 id=\"多ros容器通信\"><a href=\"#多ros容器通信\" class=\"headerlink\" title=\"多ros容器通信\"></a>多ros容器通信</h1><h2 id=\"第一个终端——roscore：\"><a href=\"#第一个终端——roscore：\" class=\"headerlink\" title=\"第一个终端——roscore：\"></a>第一个终端——roscore：</h2><p>①docker命令新建一个容器（带GUI环境变量）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span>=<span class=\"string\">&quot;DISPLAY&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span>=<span class=\"string\">&quot;QT_X11_NO_MITSHM=1&quot;</span> \\</span><br><span class=\"line\">    --volume=<span class=\"string\">&quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&quot;</span> \\</span><br><span class=\"line\">    osrf/ros:kinetic-desktop-full \\</span><br><span class=\"line\">    /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>命令解释<br> –env&#x3D;”DISPLAY” ：开启显示GUI界面<br> –env&#x3D;”QT_X11_NO_MITSHM&#x3D;1” ：采用X11的端口1进行显示<br> –volume&#x3D;”&#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix:rw” ：映射显示服务节点目录<br> osrf&#x2F;ros:kinetic-desktop-full：容器从镜像osrf&#x2F;ros:kinetic-desktop-full创建<br> &#x2F;bin&#x2F;bash：运行命令bash</p>\n<p>②创建完容器后，命令行自动进入了docker，接着运行roscore</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.1</code></p>\n<p><code>source /opt/ros/kinetic/setup.bash</code><br><code>roscore</code></p>\n<h2 id=\"第二个终端——turtlesim-node\"><a href=\"#第二个终端——turtlesim-node\" class=\"headerlink\" title=\"第二个终端——turtlesim_node\"></a>第二个终端——turtlesim_node</h2><p>①先查看之前新建的容器名称<br> <code>docker ps --all</code><br> ②进入容器中<br> <code>docker exec -it &lt;container_name&gt; /bin/bash</code><br> ③运行turtlesim_node</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.2</code></p>\n<p> <code>source /opt/ros/kinetic/setup.bash</code><br> <code>rosrun turtlesim turtlesim_node</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220609929.png\"\n                      alt=\"image-20221109220609929\"\n                ></p>\n<h2 id=\"第三个终端——键盘控制：\"><a href=\"#第三个终端——键盘控制：\" class=\"headerlink\" title=\"第三个终端——键盘控制：\"></a>第三个终端——键盘控制：</h2><p> ①进入同一个容器中<br> <code>docker exec -it &lt;container_name&gt; /bin/bash</code><br> <code>source /opt/ros/kinetic/setup.bash</code><br> ②运行遥控键盘</p>\n<p><code>export ROS_MASTER_URI=http://172.17.0.1:11311</code></p>\n<p><code>export ROS_IP=172.17.0.3</code></p>\n<p><code>rosrun turtlesim turtle_teleop_key</code><br> 此时即可控制小海龟运动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221109220621036.png\"\n                      alt=\"image-20221109220621036\"\n                ></p>\n"},{"title":"A multi-faceted optimization scheduling framework","date":"2022-11-10T14:00:41.000Z","_content":"# 云计算中基于粒子群优化算法的多面优化调度框架\n\n在云计算中，由于各种资源需求和多个作业的执行，在性能和成本优化方面存在重大问题\n\n任务和资源多样性，占用CPU和存储，难以优化\n\n创新：\n\n1.考虑任务对资源需求的差异，提出了资源成本时间轴模型\n\n2.提出了一种基于粒子群优化算法(EPBPSO)的调度模型中的增强型性能预算算法，该算法在实现多面优化调度方面具有很大的优势\n\n研究内容：提出了一种增强的粒子群算法，使其能够根据解的质量进行自我调整。优化性能和成本\n\n贡献：\n\n1.一个模型：为了定义任务对特定资源的需求细节，提出了一个模型，即资源成本时间轴模型(resource Cost Timeline model)。该模型有助于用户预算和资源成本的计算。\n\n2.一个框架：针对性能、成本和可靠性、期限、可扩展性等各个方面，提出了基于粒子群算法的多面调度优化框架。\n\n3.一个算法：在粒子群算法的基础上，提出了一种主要考虑性能和预算成本两个约束条件的增强性能预算的粒子群优化算法。增强性能预算的粒子群算法解决了原粒子群算法容易陷入局部最优的问题。\n\n工作：\n\n首先需要量化任务的成本，以便于计算出每个任务对资源的需求，可以将任务成本和资源成本作为两个参数，由于环境的异质性和资源的多样性，在很多场景中，没有为每个资源提供任务需求，这增加了复杂性。\n\n由于粒子群算法的缺点，没有充分考虑反馈的评价和解的质量，导致了在高维空间的局部最优。本文将代表一个考虑性能和成本两个质量参数的框架，并将其输出与以前的结果相匹配。\n\n# 问题的定义和表述\n\n问题的框架和不同术语的几个定义分别如图1和表1所示\n\n## 任务和资源的定义\n\n首先，认为当前云计算系统中有N个资源R = {R1, R2, R3…RN}，有M个任务T = {T1, T2, T3…TM)。任务被称为cloudlet，云资源被称为虚拟资源。\n\n**定义1**![image-20221110205617740](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205617740.png)这些参数由用户提交给代理，最后提交给任务管理器。\n\n![image-20221110205635031](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205635031.png)\n\n**定义2**   ***(Resources)***数据中心中的每个虚拟资源主要由其内存和CPU两个参数定义，![image-20221110210153487](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110210153487.png)这两个参数分别用Memory usage和CPU utilization表示\n\n提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和从属请求\n\n![image-20221110204713335](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204713335.png)\n\n提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和独立请求，信息最后提交给调度器。\n\n![image-20221110204654048](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204654048.png)\n\nCPU信息和内存负载信息由本地资源管理器收集，最后将这些信息提交给全局资源管理器。本地虚拟机的监视和管理由本地资源管理器完成(例如，特定任务在特定资源上花费的时间)。最后，从资源成本时间轴模型中，利用全局资源管理器提供的先验信息来评估成本。\n\n## 资源成本时间表模型\n\n首先，建立了**用户预算**与**资源成本**的关系模型;提出了一个基于**性能**和**预算约束**的多层面优化调度框架。\n\n### 资源成本模型\n\n由于云计算中任务和资源的多样性，反映任务成本和用户预算成本与资源成本之间的关系是有效的。我们会发现不同资源的成本是不同的，任务的成本也是不同的，因为有些任务需要很多CPU资源，而有些任务则依赖于内存需求。\n\n在这个模型下，考虑三种类型的成本:\n\na) Memory Cost  \nb) CPU Cost  \nc) Total Budget Cost\n\n**Memory Cost** \n内存开销包括内存的最小开销，即1gb，任务在特定资源tij上运行的持续时间，与内存传输相关的开销，Mj是特定资源j的内存开销。\n\n![image-20221110213255728](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213255728.png)\n\n**CPU Cost**\n类似地，CPU成本也将包括最小利用成本Cmin、任务持续时间tij、与CPU传输相关的成本和CPU成本Cj。\n\n![image-20221110213702220](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213702220.png)\n\n![image-20221110213710739](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213710739.png)\n\n**Total Budget Cost** \n总预算成本是CPU总成本和内存总成本的总和。\n\n![image-20221110213745530](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213745530.png)\n\n因此，特定资源的最终预算在等式中计算。(6)借助于等式计算的总预算成本(5).\n\n![image-20221110213836899](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213836899.png)\n\n### 时间轴模型\n\n在时间线模型中，我们考虑任务在多个资源上的总执行时间，并且总执行时间不应该超过根据服务水平协议(SLA)的截止时间，一个特定任务使用的资源可以达到n。\n\n![image-20221110214635032](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110214635032.png)\n\n### 调度模型中基于粒子群优化的多方位优化调度框架\n\n优化调度问题的几个参数是性能、成本、期限和预算成本。寻找这类组合问题的最优解是困难的。粒子群优化算法在寻找这种组合问题的解方面具有优势。粒子群算法已被用于各种各种调度问题，与其他基于自然的算法相比，取得了较好的结果。然而，粒子群算法有陷入局部最优解的缺点。因此，本文提出了一种增强型粒子群优化算法。使用合适的函数，它提供解决方案的质量和对评估结果的反馈。因此，它只是避开了局部最优。\n\n![image-20221110215653038](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110215653038.png)","source":"_posts/2022/11/A-multi-faceted-optimization-scheduling-framework.md","raw":"---\ntitle: A multi-faceted optimization scheduling framework\ndate: 2022-11-10 22:00:41\ntags:\ncategories:\n---\n# 云计算中基于粒子群优化算法的多面优化调度框架\n\n在云计算中，由于各种资源需求和多个作业的执行，在性能和成本优化方面存在重大问题\n\n任务和资源多样性，占用CPU和存储，难以优化\n\n创新：\n\n1.考虑任务对资源需求的差异，提出了资源成本时间轴模型\n\n2.提出了一种基于粒子群优化算法(EPBPSO)的调度模型中的增强型性能预算算法，该算法在实现多面优化调度方面具有很大的优势\n\n研究内容：提出了一种增强的粒子群算法，使其能够根据解的质量进行自我调整。优化性能和成本\n\n贡献：\n\n1.一个模型：为了定义任务对特定资源的需求细节，提出了一个模型，即资源成本时间轴模型(resource Cost Timeline model)。该模型有助于用户预算和资源成本的计算。\n\n2.一个框架：针对性能、成本和可靠性、期限、可扩展性等各个方面，提出了基于粒子群算法的多面调度优化框架。\n\n3.一个算法：在粒子群算法的基础上，提出了一种主要考虑性能和预算成本两个约束条件的增强性能预算的粒子群优化算法。增强性能预算的粒子群算法解决了原粒子群算法容易陷入局部最优的问题。\n\n工作：\n\n首先需要量化任务的成本，以便于计算出每个任务对资源的需求，可以将任务成本和资源成本作为两个参数，由于环境的异质性和资源的多样性，在很多场景中，没有为每个资源提供任务需求，这增加了复杂性。\n\n由于粒子群算法的缺点，没有充分考虑反馈的评价和解的质量，导致了在高维空间的局部最优。本文将代表一个考虑性能和成本两个质量参数的框架，并将其输出与以前的结果相匹配。\n\n# 问题的定义和表述\n\n问题的框架和不同术语的几个定义分别如图1和表1所示\n\n## 任务和资源的定义\n\n首先，认为当前云计算系统中有N个资源R = {R1, R2, R3…RN}，有M个任务T = {T1, T2, T3…TM)。任务被称为cloudlet，云资源被称为虚拟资源。\n\n**定义1**![image-20221110205617740](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205617740.png)这些参数由用户提交给代理，最后提交给任务管理器。\n\n![image-20221110205635031](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205635031.png)\n\n**定义2**   ***(Resources)***数据中心中的每个虚拟资源主要由其内存和CPU两个参数定义，![image-20221110210153487](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110210153487.png)这两个参数分别用Memory usage和CPU utilization表示\n\n提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和从属请求\n\n![image-20221110204713335](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204713335.png)\n\n提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和独立请求，信息最后提交给调度器。\n\n![image-20221110204654048](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204654048.png)\n\nCPU信息和内存负载信息由本地资源管理器收集，最后将这些信息提交给全局资源管理器。本地虚拟机的监视和管理由本地资源管理器完成(例如，特定任务在特定资源上花费的时间)。最后，从资源成本时间轴模型中，利用全局资源管理器提供的先验信息来评估成本。\n\n## 资源成本时间表模型\n\n首先，建立了**用户预算**与**资源成本**的关系模型;提出了一个基于**性能**和**预算约束**的多层面优化调度框架。\n\n### 资源成本模型\n\n由于云计算中任务和资源的多样性，反映任务成本和用户预算成本与资源成本之间的关系是有效的。我们会发现不同资源的成本是不同的，任务的成本也是不同的，因为有些任务需要很多CPU资源，而有些任务则依赖于内存需求。\n\n在这个模型下，考虑三种类型的成本:\n\na) Memory Cost  \nb) CPU Cost  \nc) Total Budget Cost\n\n**Memory Cost** \n内存开销包括内存的最小开销，即1gb，任务在特定资源tij上运行的持续时间，与内存传输相关的开销，Mj是特定资源j的内存开销。\n\n![image-20221110213255728](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213255728.png)\n\n**CPU Cost**\n类似地，CPU成本也将包括最小利用成本Cmin、任务持续时间tij、与CPU传输相关的成本和CPU成本Cj。\n\n![image-20221110213702220](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213702220.png)\n\n![image-20221110213710739](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213710739.png)\n\n**Total Budget Cost** \n总预算成本是CPU总成本和内存总成本的总和。\n\n![image-20221110213745530](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213745530.png)\n\n因此，特定资源的最终预算在等式中计算。(6)借助于等式计算的总预算成本(5).\n\n![image-20221110213836899](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213836899.png)\n\n### 时间轴模型\n\n在时间线模型中，我们考虑任务在多个资源上的总执行时间，并且总执行时间不应该超过根据服务水平协议(SLA)的截止时间，一个特定任务使用的资源可以达到n。\n\n![image-20221110214635032](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110214635032.png)\n\n### 调度模型中基于粒子群优化的多方位优化调度框架\n\n优化调度问题的几个参数是性能、成本、期限和预算成本。寻找这类组合问题的最优解是困难的。粒子群优化算法在寻找这种组合问题的解方面具有优势。粒子群算法已被用于各种各种调度问题，与其他基于自然的算法相比，取得了较好的结果。然而，粒子群算法有陷入局部最优解的缺点。因此，本文提出了一种增强型粒子群优化算法。使用合适的函数，它提供解决方案的质量和对评估结果的反馈。因此，它只是避开了局部最优。\n\n![image-20221110215653038](https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110215653038.png)","slug":"A-multi-faceted-optimization-scheduling-framework","published":1,"updated":"2022-11-14T14:29:36.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clas9ert6001jdk8f4x1c68qk","content":"<h1 id=\"云计算中基于粒子群优化算法的多面优化调度框架\"><a href=\"#云计算中基于粒子群优化算法的多面优化调度框架\" class=\"headerlink\" title=\"云计算中基于粒子群优化算法的多面优化调度框架\"></a>云计算中基于粒子群优化算法的多面优化调度框架</h1><p>在云计算中，由于各种资源需求和多个作业的执行，在性能和成本优化方面存在重大问题</p>\n<p>任务和资源多样性，占用CPU和存储，难以优化</p>\n<p>创新：</p>\n<p>1.考虑任务对资源需求的差异，提出了资源成本时间轴模型</p>\n<p>2.提出了一种基于粒子群优化算法(EPBPSO)的调度模型中的增强型性能预算算法，该算法在实现多面优化调度方面具有很大的优势</p>\n<p>研究内容：提出了一种增强的粒子群算法，使其能够根据解的质量进行自我调整。优化性能和成本</p>\n<p>贡献：</p>\n<p>1.一个模型：为了定义任务对特定资源的需求细节，提出了一个模型，即资源成本时间轴模型(resource Cost Timeline model)。该模型有助于用户预算和资源成本的计算。</p>\n<p>2.一个框架：针对性能、成本和可靠性、期限、可扩展性等各个方面，提出了基于粒子群算法的多面调度优化框架。</p>\n<p>3.一个算法：在粒子群算法的基础上，提出了一种主要考虑性能和预算成本两个约束条件的增强性能预算的粒子群优化算法。增强性能预算的粒子群算法解决了原粒子群算法容易陷入局部最优的问题。</p>\n<p>工作：</p>\n<p>首先需要量化任务的成本，以便于计算出每个任务对资源的需求，可以将任务成本和资源成本作为两个参数，由于环境的异质性和资源的多样性，在很多场景中，没有为每个资源提供任务需求，这增加了复杂性。</p>\n<p>由于粒子群算法的缺点，没有充分考虑反馈的评价和解的质量，导致了在高维空间的局部最优。本文将代表一个考虑性能和成本两个质量参数的框架，并将其输出与以前的结果相匹配。</p>\n<h1 id=\"问题的定义和表述\"><a href=\"#问题的定义和表述\" class=\"headerlink\" title=\"问题的定义和表述\"></a>问题的定义和表述</h1><p>问题的框架和不同术语的几个定义分别如图1和表1所示</p>\n<h2 id=\"任务和资源的定义\"><a href=\"#任务和资源的定义\" class=\"headerlink\" title=\"任务和资源的定义\"></a>任务和资源的定义</h2><p>首先，认为当前云计算系统中有N个资源R &#x3D; {R1, R2, R3…RN}，有M个任务T &#x3D; {T1, T2, T3…TM)。任务被称为cloudlet，云资源被称为虚拟资源。</p>\n<p><strong>定义1</strong><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205617740.png\"\n                      alt=\"image-20221110205617740\"\n                >这些参数由用户提交给代理，最后提交给任务管理器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205635031.png\"\n                      alt=\"image-20221110205635031\"\n                ></p>\n<p><strong>定义2</strong>   ***(Resources)***数据中心中的每个虚拟资源主要由其内存和CPU两个参数定义，<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110210153487.png\"\n                      alt=\"image-20221110210153487\"\n                >这两个参数分别用Memory usage和CPU utilization表示</p>\n<p>提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和从属请求</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204713335.png\"\n                      alt=\"image-20221110204713335\"\n                ></p>\n<p>提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和独立请求，信息最后提交给调度器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204654048.png\"\n                      alt=\"image-20221110204654048\"\n                ></p>\n<p>CPU信息和内存负载信息由本地资源管理器收集，最后将这些信息提交给全局资源管理器。本地虚拟机的监视和管理由本地资源管理器完成(例如，特定任务在特定资源上花费的时间)。最后，从资源成本时间轴模型中，利用全局资源管理器提供的先验信息来评估成本。</p>\n<h2 id=\"资源成本时间表模型\"><a href=\"#资源成本时间表模型\" class=\"headerlink\" title=\"资源成本时间表模型\"></a>资源成本时间表模型</h2><p>首先，建立了<strong>用户预算</strong>与<strong>资源成本</strong>的关系模型;提出了一个基于<strong>性能</strong>和<strong>预算约束</strong>的多层面优化调度框架。</p>\n<h3 id=\"资源成本模型\"><a href=\"#资源成本模型\" class=\"headerlink\" title=\"资源成本模型\"></a>资源成本模型</h3><p>由于云计算中任务和资源的多样性，反映任务成本和用户预算成本与资源成本之间的关系是有效的。我们会发现不同资源的成本是不同的，任务的成本也是不同的，因为有些任务需要很多CPU资源，而有些任务则依赖于内存需求。</p>\n<p>在这个模型下，考虑三种类型的成本:</p>\n<p>a) Memory Cost<br>b) CPU Cost<br>c) Total Budget Cost</p>\n<p><strong>Memory Cost</strong><br>内存开销包括内存的最小开销，即1gb，任务在特定资源tij上运行的持续时间，与内存传输相关的开销，Mj是特定资源j的内存开销。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213255728.png\"\n                      alt=\"image-20221110213255728\"\n                ></p>\n<p><strong>CPU Cost</strong><br>类似地，CPU成本也将包括最小利用成本Cmin、任务持续时间tij、与CPU传输相关的成本和CPU成本Cj。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213702220.png\"\n                      alt=\"image-20221110213702220\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213710739.png\"\n                      alt=\"image-20221110213710739\"\n                ></p>\n<p><strong>Total Budget Cost</strong><br>总预算成本是CPU总成本和内存总成本的总和。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213745530.png\"\n                      alt=\"image-20221110213745530\"\n                ></p>\n<p>因此，特定资源的最终预算在等式中计算。(6)借助于等式计算的总预算成本(5).</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213836899.png\"\n                      alt=\"image-20221110213836899\"\n                ></p>\n<h3 id=\"时间轴模型\"><a href=\"#时间轴模型\" class=\"headerlink\" title=\"时间轴模型\"></a>时间轴模型</h3><p>在时间线模型中，我们考虑任务在多个资源上的总执行时间，并且总执行时间不应该超过根据服务水平协议(SLA)的截止时间，一个特定任务使用的资源可以达到n。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110214635032.png\"\n                      alt=\"image-20221110214635032\"\n                ></p>\n<h3 id=\"调度模型中基于粒子群优化的多方位优化调度框架\"><a href=\"#调度模型中基于粒子群优化的多方位优化调度框架\" class=\"headerlink\" title=\"调度模型中基于粒子群优化的多方位优化调度框架\"></a>调度模型中基于粒子群优化的多方位优化调度框架</h3><p>优化调度问题的几个参数是性能、成本、期限和预算成本。寻找这类组合问题的最优解是困难的。粒子群优化算法在寻找这种组合问题的解方面具有优势。粒子群算法已被用于各种各种调度问题，与其他基于自然的算法相比，取得了较好的结果。然而，粒子群算法有陷入局部最优解的缺点。因此，本文提出了一种增强型粒子群优化算法。使用合适的函数，它提供解决方案的质量和对评估结果的反馈。因此，它只是避开了局部最优。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110215653038.png\"\n                      alt=\"image-20221110215653038\"\n                ></p>\n","site":{"data":{"links":[{"name":"CZM有点冷","link":"https://czm.cool/","description":"CZM的博客","avatar":"https://img.czm.cool/avatar/avatar.png"},{"name":"PSH","link":"https://shamd.cloud/","description":"PSH的博客.","avatar":"https://shamd.cloud/upload/2022/07/afbb577733f46c9535dd1d6d6388278.jpg"},{"name":"KAI","link":"https://kainote.top/","description":"love artist, love code.","avatar":"https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201072101018.jpg"}]}},"excerpt":"","more":"<h1 id=\"云计算中基于粒子群优化算法的多面优化调度框架\"><a href=\"#云计算中基于粒子群优化算法的多面优化调度框架\" class=\"headerlink\" title=\"云计算中基于粒子群优化算法的多面优化调度框架\"></a>云计算中基于粒子群优化算法的多面优化调度框架</h1><p>在云计算中，由于各种资源需求和多个作业的执行，在性能和成本优化方面存在重大问题</p>\n<p>任务和资源多样性，占用CPU和存储，难以优化</p>\n<p>创新：</p>\n<p>1.考虑任务对资源需求的差异，提出了资源成本时间轴模型</p>\n<p>2.提出了一种基于粒子群优化算法(EPBPSO)的调度模型中的增强型性能预算算法，该算法在实现多面优化调度方面具有很大的优势</p>\n<p>研究内容：提出了一种增强的粒子群算法，使其能够根据解的质量进行自我调整。优化性能和成本</p>\n<p>贡献：</p>\n<p>1.一个模型：为了定义任务对特定资源的需求细节，提出了一个模型，即资源成本时间轴模型(resource Cost Timeline model)。该模型有助于用户预算和资源成本的计算。</p>\n<p>2.一个框架：针对性能、成本和可靠性、期限、可扩展性等各个方面，提出了基于粒子群算法的多面调度优化框架。</p>\n<p>3.一个算法：在粒子群算法的基础上，提出了一种主要考虑性能和预算成本两个约束条件的增强性能预算的粒子群优化算法。增强性能预算的粒子群算法解决了原粒子群算法容易陷入局部最优的问题。</p>\n<p>工作：</p>\n<p>首先需要量化任务的成本，以便于计算出每个任务对资源的需求，可以将任务成本和资源成本作为两个参数，由于环境的异质性和资源的多样性，在很多场景中，没有为每个资源提供任务需求，这增加了复杂性。</p>\n<p>由于粒子群算法的缺点，没有充分考虑反馈的评价和解的质量，导致了在高维空间的局部最优。本文将代表一个考虑性能和成本两个质量参数的框架，并将其输出与以前的结果相匹配。</p>\n<h1 id=\"问题的定义和表述\"><a href=\"#问题的定义和表述\" class=\"headerlink\" title=\"问题的定义和表述\"></a>问题的定义和表述</h1><p>问题的框架和不同术语的几个定义分别如图1和表1所示</p>\n<h2 id=\"任务和资源的定义\"><a href=\"#任务和资源的定义\" class=\"headerlink\" title=\"任务和资源的定义\"></a>任务和资源的定义</h2><p>首先，认为当前云计算系统中有N个资源R &#x3D; {R1, R2, R3…RN}，有M个任务T &#x3D; {T1, T2, T3…TM)。任务被称为cloudlet，云资源被称为虚拟资源。</p>\n<p><strong>定义1</strong><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205617740.png\"\n                      alt=\"image-20221110205617740\"\n                >这些参数由用户提交给代理，最后提交给任务管理器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110205635031.png\"\n                      alt=\"image-20221110205635031\"\n                ></p>\n<p><strong>定义2</strong>   ***(Resources)***数据中心中的每个虚拟资源主要由其内存和CPU两个参数定义，<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110210153487.png\"\n                      alt=\"image-20221110210153487\"\n                >这两个参数分别用Memory usage和CPU utilization表示</p>\n<p>提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和从属请求</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204713335.png\"\n                      alt=\"image-20221110204713335\"\n                ></p>\n<p>提出的上述问题的系统框架模型如图1所示。在这里，用户以cloudlet形式给出的请求被提交给Broker。Broker将用户请求提交给任务管理器，任务管理器将用户请求分为从属请求和独立请求，信息最后提交给调度器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110204654048.png\"\n                      alt=\"image-20221110204654048\"\n                ></p>\n<p>CPU信息和内存负载信息由本地资源管理器收集，最后将这些信息提交给全局资源管理器。本地虚拟机的监视和管理由本地资源管理器完成(例如，特定任务在特定资源上花费的时间)。最后，从资源成本时间轴模型中，利用全局资源管理器提供的先验信息来评估成本。</p>\n<h2 id=\"资源成本时间表模型\"><a href=\"#资源成本时间表模型\" class=\"headerlink\" title=\"资源成本时间表模型\"></a>资源成本时间表模型</h2><p>首先，建立了<strong>用户预算</strong>与<strong>资源成本</strong>的关系模型;提出了一个基于<strong>性能</strong>和<strong>预算约束</strong>的多层面优化调度框架。</p>\n<h3 id=\"资源成本模型\"><a href=\"#资源成本模型\" class=\"headerlink\" title=\"资源成本模型\"></a>资源成本模型</h3><p>由于云计算中任务和资源的多样性，反映任务成本和用户预算成本与资源成本之间的关系是有效的。我们会发现不同资源的成本是不同的，任务的成本也是不同的，因为有些任务需要很多CPU资源，而有些任务则依赖于内存需求。</p>\n<p>在这个模型下，考虑三种类型的成本:</p>\n<p>a) Memory Cost<br>b) CPU Cost<br>c) Total Budget Cost</p>\n<p><strong>Memory Cost</strong><br>内存开销包括内存的最小开销，即1gb，任务在特定资源tij上运行的持续时间，与内存传输相关的开销，Mj是特定资源j的内存开销。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213255728.png\"\n                      alt=\"image-20221110213255728\"\n                ></p>\n<p><strong>CPU Cost</strong><br>类似地，CPU成本也将包括最小利用成本Cmin、任务持续时间tij、与CPU传输相关的成本和CPU成本Cj。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213702220.png\"\n                      alt=\"image-20221110213702220\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213710739.png\"\n                      alt=\"image-20221110213710739\"\n                ></p>\n<p><strong>Total Budget Cost</strong><br>总预算成本是CPU总成本和内存总成本的总和。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213745530.png\"\n                      alt=\"image-20221110213745530\"\n                ></p>\n<p>因此，特定资源的最终预算在等式中计算。(6)借助于等式计算的总预算成本(5).</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110213836899.png\"\n                      alt=\"image-20221110213836899\"\n                ></p>\n<h3 id=\"时间轴模型\"><a href=\"#时间轴模型\" class=\"headerlink\" title=\"时间轴模型\"></a>时间轴模型</h3><p>在时间线模型中，我们考虑任务在多个资源上的总执行时间，并且总执行时间不应该超过根据服务水平协议(SLA)的截止时间，一个特定任务使用的资源可以达到n。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110214635032.png\"\n                      alt=\"image-20221110214635032\"\n                ></p>\n<h3 id=\"调度模型中基于粒子群优化的多方位优化调度框架\"><a href=\"#调度模型中基于粒子群优化的多方位优化调度框架\" class=\"headerlink\" title=\"调度模型中基于粒子群优化的多方位优化调度框架\"></a>调度模型中基于粒子群优化的多方位优化调度框架</h3><p>优化调度问题的几个参数是性能、成本、期限和预算成本。寻找这类组合问题的最优解是困难的。粒子群优化算法在寻找这种组合问题的解方面具有优势。粒子群算法已被用于各种各种调度问题，与其他基于自然的算法相比，取得了较好的结果。然而，粒子群算法有陷入局部最优解的缺点。因此，本文提出了一种增强型粒子群优化算法。使用合适的函数，它提供解决方案的质量和对评估结果的反馈。因此，它只是避开了局部最优。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://gwzone.oss-cn-beijing.aliyuncs.com/typora-user-images/image-20221110215653038.png\"\n                      alt=\"image-20221110215653038\"\n                ></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clas9ersd0001dk8f2mgfh7zt","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9erst000jdk8fcbl4efhd"},{"post_id":"clas9ersn000bdk8fbm23dnlq","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ersv000mdk8f0ltaha37"},{"post_id":"clas9ersq000fdk8f3n0gcqrp","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ersw000pdk8f15t93g7z"},{"post_id":"clas9ersh0003dk8fc21v3skr","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ersy000tdk8f4szudwaq"},{"post_id":"clas9erst000hdk8fdqj20ye1","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ersz000wdk8f3ivm4gum"},{"post_id":"clas9ersu000ldk8fcsat0gd2","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert0000zdk8f46z3c0c3"},{"post_id":"clas9ersl0007dk8f75x38ipw","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert10013dk8f5w6s8qtm"},{"post_id":"clas9ersy000vdk8fdu39f5zg","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert20017dk8f0zcxghd6"},{"post_id":"clas9ert0000ydk8f9qtnbesv","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert30019dk8f4mrn8fpa"},{"post_id":"clas9ersv000odk8f5cjtg9rm","category_id":"clas9ersy000udk8fg3vxby0d","_id":"clas9ert4001cdk8f32glbpoj"},{"post_id":"clas9ert20016dk8fc5d6430g","category_id":"clas9ersy000udk8fg3vxby0d","_id":"clas9ert5001gdk8f0zgvcngt"},{"post_id":"clas9ert20018dk8f1nro9v3z","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert7001kdk8f8ck0hsc5"},{"post_id":"clas9ert3001bdk8f1rqs5rmc","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert7001mdk8fepd5e859"},{"post_id":"clas9ert4001fdk8f4ys751g5","category_id":"clas9ersi0004dk8f8zvc45ko","_id":"clas9ert9001pdk8fcl18dgwu"},{"post_id":"clas9ersx000sdk8f926cfes6","category_id":"clas9ert10012dk8fhzsd17l7","_id":"clas9ert9001rdk8f5s9qa2pt"},{"post_id":"clas9ersx000sdk8f926cfes6","category_id":"clas9ert4001edk8ff9d68faq","_id":"clas9erta001udk8fdnh66qu1"}],"PostTag":[{"post_id":"clas9ersd0001dk8f2mgfh7zt","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9ersv000ndk8f94zw67a5"},{"post_id":"clas9ersd0001dk8f2mgfh7zt","tag_id":"clas9erso000ddk8fcdb92y1g","_id":"clas9ersw000qdk8ffbl70tm4"},{"post_id":"clas9ersh0003dk8fc21v3skr","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9ert00010dk8f6o1ibr08"},{"post_id":"clas9ersh0003dk8fc21v3skr","tag_id":"clas9erso000ddk8fcdb92y1g","_id":"clas9ert10014dk8fgq3lcmeq"},{"post_id":"clas9ersl0007dk8f75x38ipw","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9ert4001ddk8ffgn0fh0t"},{"post_id":"clas9ersl0007dk8f75x38ipw","tag_id":"clas9erso000ddk8fcdb92y1g","_id":"clas9ert5001hdk8f13evgrm8"},{"post_id":"clas9ersn000bdk8fbm23dnlq","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9ert7001ldk8ffqsl8ds6"},{"post_id":"clas9ersn000bdk8fbm23dnlq","tag_id":"clas9ert3001adk8f8levdo2a","_id":"clas9ert7001ndk8f1imufe89"},{"post_id":"clas9ersq000fdk8f3n0gcqrp","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9ert9001qdk8f20zz4khd"},{"post_id":"clas9ersq000fdk8f3n0gcqrp","tag_id":"clas9ert3001adk8f8levdo2a","_id":"clas9ert9001sdk8f1fc32sge"},{"post_id":"clas9erst000hdk8fdqj20ye1","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9erta001vdk8fgmghdfer"},{"post_id":"clas9erst000hdk8fdqj20ye1","tag_id":"clas9ert3001adk8f8levdo2a","_id":"clas9ertb001wdk8f8i74dmh2"},{"post_id":"clas9ersu000ldk8fcsat0gd2","tag_id":"clas9ert9001tdk8f9qhj86xb","_id":"clas9ertb001ydk8f1ftn45ag"},{"post_id":"clas9ersv000odk8f5cjtg9rm","tag_id":"clas9ertb001xdk8faik62mi4","_id":"clas9ertc0020dk8f674k9now"},{"post_id":"clas9ersx000sdk8f926cfes6","tag_id":"clas9ertc001zdk8f1t60dx09","_id":"clas9ertd0022dk8f6ndme4xy"},{"post_id":"clas9ersy000vdk8fdu39f5zg","tag_id":"clas9ertc0021dk8f5l5t59ez","_id":"clas9erte0024dk8f8710dgn4"},{"post_id":"clas9ert0000ydk8f9qtnbesv","tag_id":"clas9ersj0005dk8f0w18520j","_id":"clas9erte0026dk8fevqhab95"},{"post_id":"clas9ert0000ydk8f9qtnbesv","tag_id":"clas9ert3001adk8f8levdo2a","_id":"clas9erte0027dk8f9tq9g226"},{"post_id":"clas9ert20016dk8fc5d6430g","tag_id":"clas9ertb001xdk8faik62mi4","_id":"clas9ertf0029dk8fak8p1vuy"},{"post_id":"clas9ert20018dk8f1nro9v3z","tag_id":"clas9ert9001tdk8f9qhj86xb","_id":"clas9ertg002bdk8fatfccjqx"},{"post_id":"clas9ert3001bdk8f1rqs5rmc","tag_id":"clas9ertf002adk8fbtlb78x3","_id":"clas9ertg002edk8f9q712h1h"},{"post_id":"clas9ert3001bdk8f1rqs5rmc","tag_id":"clas9ertg002cdk8ffdrz3nkg","_id":"clas9ertg002fdk8ffygn2khv"},{"post_id":"clas9ert4001fdk8f4ys751g5","tag_id":"clas9ertg002ddk8fexjzd4jc","_id":"clas9erth002hdk8f4hvwfeqi"},{"post_id":"clas9ert4001fdk8f4ys751g5","tag_id":"clas9ertg002gdk8fflsh2d4e","_id":"clas9erth002idk8f9xxe9frl"}],"Tag":[{"name":"BPMN","_id":"clas9ersj0005dk8f0w18520j"},{"name":"camunda","_id":"clas9erso000ddk8fcdb92y1g"},{"name":"Flowable","_id":"clas9ert3001adk8f8levdo2a"},{"name":"边缘计算","_id":"clas9ert9001tdk8f9qhj86xb"},{"name":"Github","_id":"clas9ertb001xdk8faik62mi4"},{"name":"Lambda","_id":"clas9ertc001zdk8f1t60dx09"},{"name":"ROS","_id":"clas9ertc0021dk8f5l5t59ez"},{"name":"云原生","_id":"clas9ertf002adk8fbtlb78x3"},{"name":"华为云","_id":"clas9ertg002cdk8ffdrz3nkg"},{"name":"Docker","_id":"clas9ertg002ddk8fexjzd4jc"},{"name":"ros","_id":"clas9ertg002gdk8fflsh2d4e"}]}}